
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009af0  08009af0  0000aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  0000b328  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  0000b328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ef0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e8  0800a0d8  0000b1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000288  0800a178  0000b288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009e0  20000328  0800a218  0000b328  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d08  0800a218  0000bd08  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019ba0  00000000  00000000  0000b356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003257  00000000  00000000  00024ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a8  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010de  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b422  00000000  00000000  0002a7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001948a  00000000  00000000  00055bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b669  00000000  00000000  0006f082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017a6eb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b94  00000000  00000000  0017a730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  001812c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000328 	.word	0x20000328
 800021c:	00000000 	.word	0x00000000
 8000220:	08009ad8 	.word	0x08009ad8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000032c 	.word	0x2000032c
 800023c:	08009ad8 	.word	0x08009ad8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <func_calibrate_sensor>:
		sensor_status = 1;
	}
}

// Calibrate sensor
void func_calibrate_sensor(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// Get average ADC value
	func_average_adc_measurement();
 80005e4:	f000 f816 	bl	8000614 <func_average_adc_measurement>

	// Set auto-zero value
	func_auto_zero();
 80005e8:	f000 f852 	bl	8000690 <func_auto_zero>
	calibration_status = 0;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <func_calibrate_sensor+0x18>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000

080005fc <func_adc_conversion>:

// Get measurement values
void func_adc_conversion(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	func_adc_to_voltage();
 8000600:	f000 f856 	bl	80006b0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 8000604:	f000 f87c 	bl	8000700 <func_voltage_to_kpa>
	func_kpa_to_cmh2o();
 8000608:	f000 f8b2 	bl	8000770 <func_kpa_to_cmh2o>
	func_kpa_to_inh2o();
 800060c:	f000 f8d0 	bl	80007b0 <func_kpa_to_inh2o>

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <func_average_adc_measurement>:

// Average measurement
void func_average_adc_measurement(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	avg_adc_value = (float)adc_total / tim2_counter;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <func_average_adc_measurement+0x38>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <func_average_adc_measurement+0x3c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	ee07 3a90 	vmov	s15, r3
 800062c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000634:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <func_average_adc_measurement+0x40>)
 8000636:	edc3 7a00 	vstr	s15, [r3]

	if (!calibration_status) {
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <func_average_adc_measurement+0x44>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <func_average_adc_measurement+0x32>
		func_adc_conversion();
 8000642:	f7ff ffdb 	bl	80005fc <func_adc_conversion>
//	for (i = 0; i < SAMPLE_SIZE; i++) {
//		bagel = adc_buffer[i];
//		adc_total = adc_total + adc_buffer[i];
//	}
//	avg_adc_value = (float)adc_total / SAMPLE_SIZE;
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000b14 	.word	0x20000b14
 8000650:	20000b0c 	.word	0x20000b0c
 8000654:	20000b18 	.word	0x20000b18
 8000658:	20000000 	.word	0x20000000

0800065c <func_get_adc_value>:
	func_adc_conversion();

}

// Get ADC value
void func_get_adc_value(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <func_get_adc_value+0x2c>)
 8000662:	f001 fb2b 	bl	8001cbc <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000666:	4808      	ldr	r0, [pc, #32]	@ (8000688 <func_get_adc_value+0x2c>)
 8000668:	f001 fa5a 	bl	8001b20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800066c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <func_get_adc_value+0x2c>)
 8000672:	f001 fb57 	bl	8001d24 <HAL_ADC_PollForConversion>
	raw_adc_value = HAL_ADC_GetValue(&hadc1);
 8000676:	4804      	ldr	r0, [pc, #16]	@ (8000688 <func_get_adc_value+0x2c>)
 8000678:	f001 fbdf 	bl	8001e3a <HAL_ADC_GetValue>
 800067c:	4603      	mov	r3, r0
 800067e:	4a03      	ldr	r2, [pc, #12]	@ (800068c <func_get_adc_value+0x30>)
 8000680:	6013      	str	r3, [r2, #0]
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000037c 	.word	0x2000037c
 800068c:	20000b10 	.word	0x20000b10

08000690 <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	func_adc_to_voltage();
 8000694:	f000 f80c 	bl	80006b0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 8000698:	f000 f832 	bl	8000700 <func_voltage_to_kpa>
	auto_zero_pressure_value =  measured_kpa_pressure - KNOWN_REF_PRESSURE;
 800069c:	4b02      	ldr	r3, [pc, #8]	@ (80006a8 <func_auto_zero+0x18>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a02      	ldr	r2, [pc, #8]	@ (80006ac <func_auto_zero+0x1c>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000b1c 	.word	0x20000b1c
 80006ac:	20000b24 	.word	0x20000b24

080006b0 <func_adc_to_voltage>:

// ADC to voltage
void func_adc_to_voltage(void){
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

	measured_voltage_value = (avg_adc_value * 3.3) / 4095;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <func_adc_to_voltage+0x48>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006be:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80006e8 <func_adc_to_voltage+0x38>
 80006c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006c6:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 80006f0 <func_adc_to_voltage+0x40>
 80006ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <func_adc_to_voltage+0x4c>)
 80006d4:	edc3 7a00 	vstr	s15, [r3]
//	if(sensor_status){
//		measured_voltage_value = ((float)raw_adc_value * 3.3) / 4095;
//	} else {
//		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
//	}
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	f3af 8000 	nop.w
 80006e8:	66666666 	.word	0x66666666
 80006ec:	400a6666 	.word	0x400a6666
 80006f0:	00000000 	.word	0x00000000
 80006f4:	40affe00 	.word	0x40affe00
 80006f8:	20000b18 	.word	0x20000b18
 80006fc:	20000b20 	.word	0x20000b20

08000700 <func_voltage_to_kpa>:

// Voltage to Pa
void func_voltage_to_kpa(void){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	measured_kpa_pressure = ((measured_voltage_value / OUTPUT_VOLTAGE_MAX) - 0.5) / 0.057;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <func_voltage_to_kpa+0x60>)
 8000706:	ed93 7a00 	vldr	s14, [r3]
 800070a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800070e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000716:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800071a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800071e:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 8000758 <func_voltage_to_kpa+0x58>
 8000722:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <func_voltage_to_kpa+0x64>)
 800072c:	edc3 7a00 	vstr	s15, [r3]

	if(!calibration_status){
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <func_voltage_to_kpa+0x68>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10a      	bne.n	800074e <func_voltage_to_kpa+0x4e>
		measured_kpa_pressure = measured_kpa_pressure - auto_zero_pressure_value;
 8000738:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <func_voltage_to_kpa+0x64>)
 800073a:	ed93 7a00 	vldr	s14, [r3]
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <func_voltage_to_kpa+0x6c>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <func_voltage_to_kpa+0x64>)
 800074a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	9fbe76c9 	.word	0x9fbe76c9
 800075c:	3fad2f1a 	.word	0x3fad2f1a
 8000760:	20000b20 	.word	0x20000b20
 8000764:	20000b1c 	.word	0x20000b1c
 8000768:	20000000 	.word	0x20000000
 800076c:	20000b24 	.word	0x20000b24

08000770 <func_kpa_to_cmh2o>:

// psi to cmh2o
void func_kpa_to_cmh2o(void){
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	measured_cmh2o_pressure = measured_kpa_pressure * 10.1971621298;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <func_kpa_to_cmh2o+0x38>)
 8000776:	edd3 7a00 	vldr	s15, [r3]
 800077a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80007a0 <func_kpa_to_cmh2o+0x30>
 8000782:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <func_kpa_to_cmh2o+0x3c>)
 800078c:	edc3 7a00 	vstr	s15, [r3]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	f3af 8000 	nop.w
 80007a0:	6f47005d 	.word	0x6f47005d
 80007a4:	402464f2 	.word	0x402464f2
 80007a8:	20000b1c 	.word	0x20000b1c
 80007ac:	20000b28 	.word	0x20000b28

080007b0 <func_kpa_to_inh2o>:

// psi to inh2o
void func_kpa_to_inh2o(void){
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	measured_inh2o_pressure = measured_kpa_pressure * 4.01463;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <func_kpa_to_inh2o+0x38>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007be:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80007e0 <func_kpa_to_inh2o+0x30>
 80007c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <func_kpa_to_inh2o+0x3c>)
 80007cc:	edc3 7a00 	vstr	s15, [r3]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	f3af 8000 	nop.w
 80007e0:	2aae2974 	.word	0x2aae2974
 80007e4:	40100efb 	.word	0x40100efb
 80007e8:	20000b1c 	.word	0x20000b1c
 80007ec:	20000b2c 	.word	0x20000b2c

080007f0 <func_measurements_to_terminal>:

void func_measurements_to_terminal(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af06      	add	r7, sp, #24
	sprintf(output_message, "Raw ADC Value: %lu, Voltage: %.2fV, kpa: %.1fkpa, inh2o: %.1finh2o\r\n", raw_adc_value, measured_voltage_value, measured_kpa_pressure, measured_inh2o_pressure);
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <func_measurements_to_terminal+0x5c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <func_measurements_to_terminal+0x60>)
 80007fc:	edd2 7a00 	vldr	s15, [r2]
 8000800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000804:	4a13      	ldr	r2, [pc, #76]	@ (8000854 <func_measurements_to_terminal+0x64>)
 8000806:	edd2 6a00 	vldr	s13, [r2]
 800080a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <func_measurements_to_terminal+0x68>)
 8000810:	edd2 5a00 	vldr	s11, [r2]
 8000814:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000818:	ed8d 5b04 	vstr	d5, [sp, #16]
 800081c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000820:	ed8d 7b00 	vstr	d7, [sp]
 8000824:	461a      	mov	r2, r3
 8000826:	490d      	ldr	r1, [pc, #52]	@ (800085c <func_measurements_to_terminal+0x6c>)
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <func_measurements_to_terminal+0x70>)
 800082a:	f006 ffd5 	bl	80077d8 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <func_measurements_to_terminal+0x70>)
 8000830:	f7ff fd56 	bl	80002e0 <strlen>
 8000834:	4603      	mov	r3, r0
 8000836:	b29a      	uxth	r2, r3
 8000838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800083c:	4908      	ldr	r1, [pc, #32]	@ (8000860 <func_measurements_to_terminal+0x70>)
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <func_measurements_to_terminal+0x74>)
 8000840:	f005 f846 	bl	80058d0 <HAL_UART_Transmit>
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000b10 	.word	0x20000b10
 8000850:	20000b20 	.word	0x20000b20
 8000854:	20000b1c 	.word	0x20000b1c
 8000858:	20000b2c 	.word	0x20000b2c
 800085c:	08009b10 	.word	0x08009b10
 8000860:	20000b40 	.word	0x20000b40
 8000864:	200005a4 	.word	0x200005a4

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f001 f893 	bl	8001996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f862 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f000 fb0e 	bl	8000e94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000878:	f000 f8d0 	bl	8000a1c <MX_ADC1_Init>
  MX_ETH_Init();
 800087c:	f000 f920 	bl	8000ac0 <MX_ETH_Init>
  MX_TIM2_Init();
 8000880:	f000 f96c 	bl	8000b5c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000884:	f000 f9b8 	bl	8000bf8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000888:	f000 faa6 	bl	8000dd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800088c:	f000 fad4 	bl	8000e38 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000890:	f000 fa2a 	bl	8000ce8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000894:	f000 fa64 	bl	8000d60 <MX_TIM7_Init>
//  while(calibration_status){
//	  func_calibrate_sensor();
//  }

  // Initialize breath cycle variables
  breath_cycle_time = 60.0 / breath_rate;
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <main+0xb0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008a4:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 8000910 <main+0xa8>
 80008a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b0:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <main+0xb4>)
 80008b2:	edc3 7a00 	vstr	s15, [r3]
  inspiration_time = (breath_cycle_time / (inspiratory_ratio_portion + expiratory_ratio_portion)) * inspiratory_ratio_portion;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <main+0xb4>)
 80008b8:	edd3 6a00 	vldr	s13, [r3]
 80008bc:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <main+0xb8>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <main+0xbc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <main+0xb8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <main+0xc0>)
 80008e4:	edc3 7a00 	vstr	s15, [r3]
  expiration_time = breath_cycle_time - inspiration_time;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <main+0xb4>)
 80008ea:	ed93 7a00 	vldr	s14, [r3]
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <main+0xc0>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <main+0xc4>)
 80008fa:	edc3 7a00 	vstr	s15, [r3]

  // Initialize setpoint
  setpoint = inspiratory_pressure_value;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <main+0xc8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <main+0xcc>)
 8000904:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000906:	bf00      	nop
 8000908:	e7fd      	b.n	8000906 <main+0x9e>
 800090a:	bf00      	nop
 800090c:	f3af 8000 	nop.w
 8000910:	00000000 	.word	0x00000000
 8000914:	404e0000 	.word	0x404e0000
 8000918:	20000004 	.word	0x20000004
 800091c:	20000b30 	.word	0x20000b30
 8000920:	20000008 	.word	0x20000008
 8000924:	2000000c 	.word	0x2000000c
 8000928:	20000b34 	.word	0x20000b34
 800092c:	20000b38 	.word	0x20000b38
 8000930:	20000010 	.word	0x20000010
 8000934:	20000b3c 	.word	0x20000b3c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	@ 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2234      	movs	r2, #52	@ 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f007 f828 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800095c:	f002 fce0 	bl	8003320 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000960:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <SystemClock_Config+0xdc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <SystemClock_Config+0xdc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <SystemClock_Config+0xdc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <SystemClock_Config+0xe0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000980:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <SystemClock_Config+0xe0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <SystemClock_Config+0xe0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000998:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800099c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009ac:	2360      	movs	r3, #96	@ 0x60
 80009ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fd0d 	bl	80033e0 <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009cc:	f000 fbd6 	bl	800117c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009d0:	f002 fcb6 	bl	8003340 <HAL_PWREx_EnableOverDrive>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009da:	f000 fbcf 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	230f      	movs	r3, #15
 80009e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e2:	2302      	movs	r3, #2
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2103      	movs	r1, #3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 ff9e 	bl	800393c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a06:	f000 fbb9 	bl	800117c <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3750      	adds	r7, #80	@ 0x50
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a30:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <MX_ADC1_Init+0x9c>)
 8000a32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_ADC1_Init+0xa0>)
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7c:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a7e:	f001 f80b 	bl	8001a98 <HAL_ADC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a88:	f000 fb78 	bl	800117c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a8c:	230d      	movs	r3, #13
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a94:	2307      	movs	r3, #7
 8000a96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_ADC1_Init+0x98>)
 8000a9e:	f001 f9d9 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aa8:	f000 fb68 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000037c 	.word	0x2000037c
 8000ab8:	40012000 	.word	0x40012000
 8000abc:	0f000001 	.word	0x0f000001

08000ac0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000ac6:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <MX_ETH_Init+0x88>)
 8000ac8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000ad8:	22e1      	movs	r2, #225	@ 0xe1
 8000ada:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000af0:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <MX_ETH_Init+0x8c>)
 8000af2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000af4:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000af6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000afa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000afe:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <MX_ETH_Init+0x90>)
 8000b00:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000b04:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <MX_ETH_Init+0x94>)
 8000b06:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000b0a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b0e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <MX_ETH_Init+0x84>)
 8000b12:	f001 fd93 	bl	800263c <HAL_ETH_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 fb2e 	bl	800117c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b20:	2238      	movs	r2, #56	@ 0x38
 8000b22:	2100      	movs	r1, #0
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <MX_ETH_Init+0x98>)
 8000b26:	f006 ff39 	bl	800799c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <MX_ETH_Init+0x98>)
 8000b2c:	2221      	movs	r2, #33	@ 0x21
 8000b2e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b30:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_ETH_Init+0x98>)
 8000b32:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b36:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_ETH_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200003c4 	.word	0x200003c4
 8000b48:	40028000 	.word	0x40028000
 8000b4c:	20000ba4 	.word	0x20000ba4
 8000b50:	20000288 	.word	0x20000288
 8000b54:	200001e8 	.word	0x200001e8
 8000b58:	20000344 	.word	0x20000344

08000b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b90:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000ba4:	f003 fd18 	bl	80045d8 <HAL_TIM_Base_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000bae:	f000 fae5 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000bc0:	f004 f8f6 	bl	8004db0 <HAL_TIM_ConfigClockSource>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000bca:	f000 fad7 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_TIM2_Init+0x98>)
 8000bdc:	f004 fd7e 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000be6:	f000 fac9 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000474 	.word	0x20000474

08000bf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce4 <MX_TIM4_Init+0xec>)
 8000c2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9600-1;
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c3e:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000c42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c50:	4823      	ldr	r0, [pc, #140]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c52:	f003 fcc1 	bl	80045d8 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000c5c:	f000 fa8e 	bl	800117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c6e:	f004 f89f 	bl	8004db0 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c78:	f000 fa80 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c7c:	4818      	ldr	r0, [pc, #96]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c7e:	f003 fe1a 	bl	80048b6 <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c88:	f000 fa78 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000c9c:	f004 fd1e 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000ca6:	f000 fa69 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	@ 0x60
 8000cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000cc2:	f003 ff61 	bl	8004b88 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000ccc:	f000 fa56 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <MX_TIM4_Init+0xe8>)
 8000cd2:	f000 fbe5 	bl	80014a0 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	@ 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200004c0 	.word	0x200004c0
 8000ce4:	40000800 	.word	0x40000800

08000ce8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <MX_TIM6_Init+0x74>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2-1;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 48000-1;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d0c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000d10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d18:	480f      	ldr	r0, [pc, #60]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d1a:	f003 fc5d 	bl	80045d8 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d24:	f000 fa2a 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d36:	f004 fcd1 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 fa1c 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d46:	f003 fd0f 	bl	8004768 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <MX_TIM6_Init+0x70>)
 8000d4c:	f003 fc9c 	bl	8004688 <HAL_TIM_Base_Start>
  /* USER CODE END TIM6_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000050c 	.word	0x2000050c
 8000d5c:	40001000 	.word	0x40001000

08000d60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	@ (8000dd4 <MX_TIM7_Init+0x74>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 48000-1;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d84:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000d88:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d90:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000d92:	f003 fc21 	bl	80045d8 <HAL_TIM_Base_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d9c:	f000 f9ee 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000dae:	f004 fc95 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000db8:	f000 f9e0 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000dbe:	f003 fcd3 	bl	8004768 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 8000dc2:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <MX_TIM7_Init+0x70>)
 8000dc4:	f003 fc60 	bl	8004688 <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000558 	.word	0x20000558
 8000dd4:	40001400 	.word	0x40001400

08000dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dde:	4a15      	ldr	r2, [pc, #84]	@ (8000e34 <MX_USART3_UART_Init+0x5c>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_USART3_UART_Init+0x58>)
 8000e1c:	f004 fd0a 	bl	8005834 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 f9a9 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200005a4 	.word	0x200005a4
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2206      	movs	r2, #6
 8000e48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7c:	f002 f915 	bl	80030aa <HAL_PCD_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e86:	f000 f979 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000062c 	.word	0x2000062c

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a6b      	ldr	r2, [pc, #428]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b69      	ldr	r3, [pc, #420]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec2:	4b66      	ldr	r3, [pc, #408]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a65      	ldr	r2, [pc, #404]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b63      	ldr	r3, [pc, #396]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b60      	ldr	r3, [pc, #384]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a5f      	ldr	r2, [pc, #380]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a59      	ldr	r2, [pc, #356]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b57      	ldr	r3, [pc, #348]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	4b54      	ldr	r3, [pc, #336]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a53      	ldr	r2, [pc, #332]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b51      	ldr	r3, [pc, #324]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b4e      	ldr	r3, [pc, #312]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	4a4d      	ldr	r2, [pc, #308]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	4b48      	ldr	r3, [pc, #288]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a47      	ldr	r2, [pc, #284]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b45      	ldr	r3, [pc, #276]	@ (800105c <MX_GPIO_Init+0x1c8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2101      	movs	r1, #1
 8000f56:	4842      	ldr	r0, [pc, #264]	@ (8001060 <MX_GPIO_Init+0x1cc>)
 8000f58:	f002 f86a 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f62:	4840      	ldr	r0, [pc, #256]	@ (8001064 <MX_GPIO_Init+0x1d0>)
 8000f64:	f002 f864 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2140      	movs	r1, #64	@ 0x40
 8000f6c:	483e      	ldr	r0, [pc, #248]	@ (8001068 <MX_GPIO_Init+0x1d4>)
 8000f6e:	f002 f85f 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	483d      	ldr	r0, [pc, #244]	@ (800106c <MX_GPIO_Init+0x1d8>)
 8000f78:	f002 f85a 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4833      	ldr	r0, [pc, #204]	@ (8001060 <MX_GPIO_Init+0x1cc>)
 8000f94:	f001 fea0 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	482c      	ldr	r0, [pc, #176]	@ (8001060 <MX_GPIO_Init+0x1cc>)
 8000fb0:	f001 fe92 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fb4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4825      	ldr	r0, [pc, #148]	@ (8001064 <MX_GPIO_Init+0x1d0>)
 8000fce:	f001 fe83 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4820      	ldr	r0, [pc, #128]	@ (8001070 <MX_GPIO_Init+0x1dc>)
 8000ff0:	f001 fe72 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4817      	ldr	r0, [pc, #92]	@ (8001068 <MX_GPIO_Init+0x1d4>)
 800100c:	f001 fe64 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	@ (8001068 <MX_GPIO_Init+0x1d4>)
 8001024:	f001 fe58 	bl	8002cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001030:	2302      	movs	r3, #2
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <MX_GPIO_Init+0x1d8>)
 8001040:	f001 fe4a 	bl	8002cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2028      	movs	r0, #40	@ 0x28
 800104a:	f001 fa2e 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800104e:	2028      	movs	r0, #40	@ 0x28
 8001050:	f001 fa47 	bl	80024e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020800 	.word	0x40020800
 8001064:	40020400 	.word	0x40020400
 8001068:	40021800 	.word	0x40021800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM6) { // Sensor calibration
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a32      	ldr	r2, [pc, #200]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d112      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x38>
    	static uint32_t counter = 0;
    	counter++;
 8001086:	4b32      	ldr	r3, [pc, #200]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800108e:	6013      	str	r3, [r2, #0]
    	if (counter == 20){ // counts to 20ms
 8001090:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b14      	cmp	r3, #20
 8001096:	d154      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    		HAL_TIM_Base_Stop_IT(&htim6);
 8001098:	482e      	ldr	r0, [pc, #184]	@ (8001154 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800109a:	f003 fbdd 	bl	8004858 <HAL_TIM_Base_Stop_IT>
    		HAL_TIM_Base_Start_IT(&htim2);
 800109e:	482e      	ldr	r0, [pc, #184]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010a0:	f003 fb62 	bl	8004768 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_Base_Start(&htim2);
 80010a4:	482c      	ldr	r0, [pc, #176]	@ (8001158 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010a6:	f003 faef 	bl	8004688 <HAL_TIM_Base_Start>
    			adc_total = 0;
    		}
    	}
    }

}
 80010aa:	e04a      	b.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    } else if (htim->Instance == TIM7) { // Alarm monitoring
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a2a      	ldr	r2, [pc, #168]	@ (800115c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d117      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x72>
    	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	4829      	ldr	r0, [pc, #164]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010bc:	f001 ffb8 	bl	8003030 <HAL_GPIO_WritePin>
    	counter_two++;
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010c8:	6013      	str	r3, [r2, #0]
    	if (counter_two == 2000) {
 80010ca:	4b26      	ldr	r3, [pc, #152]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010d2:	d136      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    		HAL_TIM_Base_Stop_IT(&htim7);
 80010d4:	4824      	ldr	r0, [pc, #144]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80010d6:	f003 fbbf 	bl	8004858 <HAL_TIM_Base_Stop_IT>
    		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	4820      	ldr	r0, [pc, #128]	@ (8001160 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80010e0:	f001 ffa6 	bl	8003030 <HAL_GPIO_WritePin>
}
 80010e4:	e02d      	b.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    } else if (htim->Instance == TIM2) {
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ee:	d128      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    	tim2_counter++;
 80010f0:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80010f8:	6013      	str	r3, [r2, #0]
    	func_get_adc_value();
 80010fa:	f7ff faaf 	bl	800065c <func_get_adc_value>
    	adc_total = adc_total + raw_adc_value;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800110a:	6013      	str	r3, [r2, #0]
    	if (tim2_counter == SAMPLE_SIZE) {
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b40      	cmp	r3, #64	@ 0x40
 8001112:	d116      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    		if (calibration_status) {
 8001114:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_TIM_PeriodElapsedCallback+0xba>
    			func_calibrate_sensor();
 800111c:	f7ff fa60 	bl	80005e0 <func_calibrate_sensor>
    			tim2_counter = 0;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
    			adc_total = 0;
 8001126:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
}
 800112c:	e009      	b.n	8001142 <HAL_TIM_PeriodElapsedCallback+0xce>
    			func_average_adc_measurement();
 800112e:	f7ff fa71 	bl	8000614 <func_average_adc_measurement>
    			func_measurements_to_terminal();
 8001132:	f7ff fb5d 	bl	80007f0 <func_measurements_to_terminal>
    			tim2_counter = 0;
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
    			adc_total = 0;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40001000 	.word	0x40001000
 8001150:	20000bac 	.word	0x20000bac
 8001154:	2000050c 	.word	0x2000050c
 8001158:	20000474 	.word	0x20000474
 800115c:	40001400 	.word	0x40001400
 8001160:	40020c00 	.word	0x40020c00
 8001164:	20000bb0 	.word	0x20000bb0
 8001168:	20000558 	.word	0x20000558
 800116c:	20000b0c 	.word	0x20000b0c
 8001170:	20000b14 	.word	0x20000b14
 8001174:	20000b10 	.word	0x20000b10
 8001178:	20000000 	.word	0x20000000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x44>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x44>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x44>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x44>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x44>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	@ 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <HAL_ADC_MspInit+0x74>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d123      	bne.n	800123a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <HAL_ADC_MspInit+0x78>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 8001222:	2308      	movs	r3, #8
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_ADC_MspInit+0x7c>)
 8001236:	f001 fd4f 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	@ 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012000 	.word	0x40012000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020800 	.word	0x40020800

08001250 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4e      	ldr	r2, [pc, #312]	@ (80013a8 <HAL_ETH_MspInit+0x158>)
 800126e:	4293      	cmp	r3, r2
 8001270:	f040 8096 	bne.w	80013a0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001274:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4a4c      	ldr	r2, [pc, #304]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 800127a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800127e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	4a46      	ldr	r2, [pc, #280]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 8001292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001296:	6313      	str	r3, [r2, #48]	@ 0x30
 8001298:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	4a40      	ldr	r2, [pc, #256]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012bc:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4a3a      	ldr	r2, [pc, #232]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c8:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a34      	ldr	r2, [pc, #208]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	4a2e      	ldr	r2, [pc, #184]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 800130a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800131c:	2332      	movs	r3, #50	@ 0x32
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132c:	230b      	movs	r3, #11
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <HAL_ETH_MspInit+0x160>)
 8001338:	f001 fcce 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800133c:	2386      	movs	r3, #134	@ 0x86
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134c:	230b      	movs	r3, #11
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <HAL_ETH_MspInit+0x164>)
 8001358:	f001 fcbe 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800135c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136e:	230b      	movs	r3, #11
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	@ (80013b8 <HAL_ETH_MspInit+0x168>)
 800137a:	f001 fcad 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800137e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001390:	230b      	movs	r3, #11
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <HAL_ETH_MspInit+0x16c>)
 800139c:	f001 fc9c 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3738      	adds	r7, #56	@ 0x38
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40028000 	.word	0x40028000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40021800 	.word	0x40021800

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013d0:	d114      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201c      	movs	r0, #28
 80013f0:	f001 f85b 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f4:	201c      	movs	r0, #28
 80013f6:	f001 f874 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013fa:	e044      	b.n	8001486 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <HAL_TIM_Base_MspInit+0xd4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10c      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a21      	ldr	r2, [pc, #132]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
}
 800141e:	e032      	b.n	8001486 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <HAL_TIM_Base_MspInit+0xd8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d114      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a18      	ldr	r2, [pc, #96]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2036      	movs	r0, #54	@ 0x36
 8001448:	f001 f82f 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800144c:	2036      	movs	r0, #54	@ 0x36
 800144e:	f001 f848 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 8001452:	e018      	b.n	8001486 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a10      	ldr	r2, [pc, #64]	@ (800149c <HAL_TIM_Base_MspInit+0xdc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d113      	bne.n	8001486 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	6413      	str	r3, [r2, #64]	@ 0x40
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_TIM_Base_MspInit+0xd0>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2037      	movs	r0, #55	@ 0x37
 800147c:	f001 f815 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001480:	2037      	movs	r0, #55	@ 0x37
 8001482:	f001 f82e 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40000800 	.word	0x40000800
 8001498:	40001000 	.word	0x40001000
 800149c:	40001400 	.word	0x40001400

080014a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <HAL_TIM_MspPostInit+0x64>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d11c      	bne.n	80014fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <HAL_TIM_MspPostInit+0x6c>)
 80014f8:	f001 fbee 	bl	8002cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40000800 	.word	0x40000800
 8001508:	40023800 	.word	0x40023800
 800150c:	40020c00 	.word	0x40020c00

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b0ae      	sub	sp, #184	@ 0xb8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2290      	movs	r2, #144	@ 0x90
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 fa33 	bl	800799c <memset>
  if(huart->Instance==USART3)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <HAL_UART_MspInit+0xc4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d144      	bne.n	80015ca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001544:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fc1a 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800155a:	f7ff fe0f 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0xc8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a8:	2307      	movs	r3, #7
 80015aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <HAL_UART_MspInit+0xcc>)
 80015b6:	f001 fb8f 	bl	8002cd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2027      	movs	r0, #39	@ 0x27
 80015c0:	f000 ff73 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c4:	2027      	movs	r0, #39	@ 0x27
 80015c6:	f000 ff8c 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	@ 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004800 	.word	0x40004800
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020c00 	.word	0x40020c00

080015e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0ae      	sub	sp, #184	@ 0xb8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2290      	movs	r2, #144	@ 0x90
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f006 f9cb 	bl	800799c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800160e:	d159      	bne.n	80016c4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001610:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001614:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4618      	mov	r0, r3
 8001622:	f002 fbb1 	bl	8003d88 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800162c:	f7ff fda6 	bl	800117c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001634:	4a25      	ldr	r2, [pc, #148]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6313      	str	r3, [r2, #48]	@ 0x30
 800163c:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001648:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800164c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001662:	230a      	movs	r3, #10
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800166c:	4619      	mov	r1, r3
 800166e:	4818      	ldr	r0, [pc, #96]	@ (80016d0 <HAL_PCD_MspInit+0xf0>)
 8001670:	f001 fb32 	bl	8002cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001674:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800168c:	4619      	mov	r1, r3
 800168e:	4810      	ldr	r0, [pc, #64]	@ (80016d0 <HAL_PCD_MspInit+0xf0>)
 8001690:	f001 fb22 	bl	8002cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 8001696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001698:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 800169a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169e:	6353      	str	r3, [r2, #52]	@ 0x34
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 80016a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <HAL_PCD_MspInit+0xec>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	37b8      	adds	r7, #184	@ 0xb8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172a:	f000 f971 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM2_IRQHandler+0x10>)
 800173a:	f003 f91d 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000474 	.word	0x20000474

08001748 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <USART3_IRQHandler+0x10>)
 800174e:	f004 f949 	bl	80059e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200005a4 	.word	0x200005a4

0800175c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001760:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001764:	f001 fc7e 	bl	8003064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM6_DAC_IRQHandler+0x10>)
 8001772:	f003 f901 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000050c 	.word	0x2000050c

08001780 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <TIM7_IRQHandler+0x10>)
 8001786:	f003 f8f7 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000558 	.word	0x20000558

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f006 f901 	bl	80079b4 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	bf00      	nop
 80017d8:	e7fd      	b.n	80017d6 <_exit+0x12>

080017da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
  }

  return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
  }
  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001874:	605a      	str	r2, [r3, #4]
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_isatty>:

int _isatty(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f006 f866 	bl	80079b4 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20080000 	.word	0x20080000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000bb4 	.word	0x20000bb4
 800191c:	20000d08 	.word	0x20000d08

08001920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	@ (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	@ (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f006 f825 	bl	80079c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7fe ff77 	bl	8000868 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001988:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 800198c:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8001990:	20000d08 	.word	0x20000d08

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	2003      	movs	r0, #3
 800199c:	f000 fd7a 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f805 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a6:	f7ff fbef 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fd95 	bl	80024fe <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ec:	f000 fd5d 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000014 	.word	0x20000014
 8001a08:	2000001c 	.word	0x2000001c
 8001a0c:	20000018 	.word	0x20000018

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000001c 	.word	0x2000001c
 8001a34:	20000bb8 	.word	0x20000bb8

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000bb8 	.word	0x20000bb8

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000001c 	.word	0x2000001c

08001a98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e031      	b.n	8001b12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fb8a 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_ADC_Init+0x84>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fb0a 	bl	8002100 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b02:	e001      	b.n	8001b08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	ffffeefd 	.word	0xffffeefd

08001b20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_Start+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0ad      	b.n	8001c96 <HAL_ADC_Start+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d018      	beq.n	8001b82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b60:	4b50      	ldr	r3, [pc, #320]	@ (8001ca4 <HAL_ADC_Start+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a50      	ldr	r2, [pc, #320]	@ (8001ca8 <HAL_ADC_Start+0x188>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9a      	lsrs	r2, r3, #18
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d175      	bne.n	8001c7c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <HAL_ADC_Start+0x18c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f023 0206 	bic.w	r2, r3, #6
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <HAL_ADC_Start+0x190>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d143      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e03a      	b.n	8001c94 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_ADC_Start+0x194>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10e      	bne.n	8001c46 <HAL_ADC_Start+0x126>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c44:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_ADC_Start+0x190>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d120      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_ADC_Start+0x198>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_ADC_Start+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00b      	b.n	8001c94 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000014 	.word	0x20000014
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	fffff8fe 	.word	0xfffff8fe
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Stop+0x16>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e01f      	b.n	8001d12 <HAL_ADC_Stop+0x56>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_ADC_Stop+0x64>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	ffffeefe 	.word	0xffffeefe

08001d24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d40:	d113      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e063      	b.n	8001e32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fe65 	bl	8001a38 <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d70:	e021      	b.n	8001db6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d78:	d01d      	beq.n	8001db6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x6c>
 8001d80:	f7ff fe5a 	bl	8001a38 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d212      	bcs.n	8001db6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d00b      	beq.n	8001db6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e03d      	b.n	8001e32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d1d6      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0212 	mvn.w	r2, #18
 8001dcc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11f      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d111      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1c>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e136      	b.n	80020de <HAL_ADC_ConfigChannel+0x28a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d93a      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0xa2>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e88:	d035      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8d      	ldr	r2, [pc, #564]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68d9      	ldr	r1, [r3, #12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	061a      	lsls	r2, r3, #24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ece:	e035      	b.n	8001f3c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4403      	add	r3, r0
 8001ee8:	3b1e      	subs	r3, #30
 8001eea:	409a      	lsls	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef4:	e022      	b.n	8001f3c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	409a      	lsls	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b05      	subs	r3, #5
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b05      	subs	r3, #5
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f8c:	e04c      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d824      	bhi.n	8001fe0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b23      	subs	r3, #35	@ 0x23
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b23      	subs	r3, #35	@ 0x23
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fde:	e023      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b41      	subs	r3, #65	@ 0x41
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b41      	subs	r3, #65	@ 0x41
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a30      	ldr	r2, [pc, #192]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1f4>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800203c:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002042:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002046:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10f      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d10b      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002064:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002070:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d12b      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1a      	ldr	r2, [pc, #104]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <HAL_ADC_ConfigChannel+0x23a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b11      	cmp	r3, #17
 800208c:	d122      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002094:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002098:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a15      	ldr	r2, [pc, #84]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a10      	ldr	r2, [pc, #64]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <HAL_ADC_ConfigChannel+0x2a8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9a      	lsrs	r2, r3, #18
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	10000012 	.word	0x10000012
 80020f0:	40012000 	.word	0x40012000
 80020f4:	40012300 	.word	0x40012300
 80020f8:	20000014 	.word	0x20000014
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002108:	4b78      	ldr	r3, [pc, #480]	@ (80022ec <ADC_Init+0x1ec>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a77      	ldr	r2, [pc, #476]	@ (80022ec <ADC_Init+0x1ec>)
 800210e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002112:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002114:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <ADC_Init+0x1ec>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4973      	ldr	r1, [pc, #460]	@ (80022ec <ADC_Init+0x1ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <ADC_Init+0x1f0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e00f      	b.n	80021fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0202 	bic.w	r2, r2, #2
 8002208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002236:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002246:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	035a      	lsls	r2, r3, #13
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e007      	b.n	8002270 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800226e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	051a      	lsls	r2, r3, #20
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022b2:	025a      	lsls	r2, r3, #9
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	029a      	lsls	r2, r3, #10
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff fa88 	bl	8001a38 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2280      	movs	r2, #128	@ 0x80
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e052      	b.n	80025ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0216 	bic.w	r2, r2, #22
 8002556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_DMA_Abort+0x62>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e013      	b.n	80025c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7ff fa4d 	bl	8001a38 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d90c      	bls.n	80025c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e015      	b.n	80025ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e4      	bne.n	800259a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	223f      	movs	r2, #63	@ 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d004      	beq.n	8002614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2280      	movs	r2, #128	@ 0x80
 800260e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00c      	b.n	800262e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2205      	movs	r2, #5
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e086      	b.n	800275c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2223      	movs	r2, #35	@ 0x23
 800265c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fdf5 	bl	8001250 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b3f      	ldr	r3, [pc, #252]	@ (8002764 <HAL_ETH_Init+0x128>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	4a3e      	ldr	r2, [pc, #248]	@ (8002764 <HAL_ETH_Init+0x128>)
 800266c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002670:	6453      	str	r3, [r2, #68]	@ 0x44
 8002672:	4b3c      	ldr	r3, [pc, #240]	@ (8002764 <HAL_ETH_Init+0x128>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800267e:	4b3a      	ldr	r3, [pc, #232]	@ (8002768 <HAL_ETH_Init+0x12c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a39      	ldr	r2, [pc, #228]	@ (8002768 <HAL_ETH_Init+0x12c>)
 8002684:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002688:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800268a:	4b37      	ldr	r3, [pc, #220]	@ (8002768 <HAL_ETH_Init+0x12c>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4935      	ldr	r1, [pc, #212]	@ (8002768 <HAL_ETH_Init+0x12c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002698:	4b33      	ldr	r3, [pc, #204]	@ (8002768 <HAL_ETH_Init+0x12c>)
 800269a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b4:	f7ff f9c0 	bl	8001a38 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026ba:	e011      	b.n	80026e0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026bc:	f7ff f9bc 	bl	8001a38 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026ca:	d909      	bls.n	80026e0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2204      	movs	r2, #4
 80026d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	22e0      	movs	r2, #224	@ 0xe0
 80026d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e03d      	b.n	800275c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e4      	bne.n	80026bc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f97a 	bl	80029ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fa25 	bl	8002b48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa7b 	bl	8002bfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	461a      	mov	r2, r3
 800270a:	2100      	movs	r1, #0
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f9e3 	bl	8002ad8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <HAL_ETH_Init+0x130>)
 8002730:	430b      	orrs	r3, r1
 8002732:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002746:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2210      	movs	r2, #16
 8002756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	00020060 	.word	0x00020060

08002770 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4b53      	ldr	r3, [pc, #332]	@ (80028d4 <ETH_SetMACConfig+0x164>)
 8002786:	4013      	ands	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	7b9b      	ldrb	r3, [r3, #14]
 800278e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	7c12      	ldrb	r2, [r2, #16]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d102      	bne.n	800279e <ETH_SetMACConfig+0x2e>
 8002798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800279c:	e000      	b.n	80027a0 <ETH_SetMACConfig+0x30>
 800279e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	7c52      	ldrb	r2, [r2, #17]
 80027a6:	2a00      	cmp	r2, #0
 80027a8:	d102      	bne.n	80027b0 <ETH_SetMACConfig+0x40>
 80027aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80027ae:	e000      	b.n	80027b2 <ETH_SetMACConfig+0x42>
 80027b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	7fdb      	ldrb	r3, [r3, #31]
 80027be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	7f92      	ldrb	r2, [r2, #30]
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d102      	bne.n	80027d6 <ETH_SetMACConfig+0x66>
 80027d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d4:	e000      	b.n	80027d8 <ETH_SetMACConfig+0x68>
 80027d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80027d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7f1b      	ldrb	r3, [r3, #28]
 80027de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d102      	bne.n	8002800 <ETH_SetMACConfig+0x90>
 80027fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fe:	e000      	b.n	8002802 <ETH_SetMACConfig+0x92>
 8002800:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002802:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7bdb      	ldrb	r3, [r3, #15]
 8002808:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800280a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002810:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002818:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800281a:	4313      	orrs	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002832:	2001      	movs	r0, #1
 8002834:	f7ff f90c 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002856:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800285e:	2a00      	cmp	r2, #0
 8002860:	d101      	bne.n	8002866 <ETH_SetMACConfig+0xf6>
 8002862:	2280      	movs	r2, #128	@ 0x80
 8002864:	e000      	b.n	8002868 <ETH_SetMACConfig+0xf8>
 8002866:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002868:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800286e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002876:	2a01      	cmp	r2, #1
 8002878:	d101      	bne.n	800287e <ETH_SetMACConfig+0x10e>
 800287a:	2208      	movs	r2, #8
 800287c:	e000      	b.n	8002880 <ETH_SetMACConfig+0x110>
 800287e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002880:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002888:	2a01      	cmp	r2, #1
 800288a:	d101      	bne.n	8002890 <ETH_SetMACConfig+0x120>
 800288c:	2204      	movs	r2, #4
 800288e:	e000      	b.n	8002892 <ETH_SetMACConfig+0x122>
 8002890:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002892:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800289a:	2a01      	cmp	r2, #1
 800289c:	d101      	bne.n	80028a2 <ETH_SetMACConfig+0x132>
 800289e:	2202      	movs	r2, #2
 80028a0:	e000      	b.n	80028a4 <ETH_SetMACConfig+0x134>
 80028a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028a4:	4313      	orrs	r3, r2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff f8c7 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	619a      	str	r2, [r3, #24]
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	fd20810f 	.word	0xfd20810f

080028d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <ETH_SetDMAConfig+0x110>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7b1b      	ldrb	r3, [r3, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <ETH_SetDMAConfig+0x2c>
 80028fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002902:	e000      	b.n	8002906 <ETH_SetDMAConfig+0x2e>
 8002904:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7b5b      	ldrb	r3, [r3, #13]
 800290a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800290c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	7f52      	ldrb	r2, [r2, #29]
 8002912:	2a00      	cmp	r2, #0
 8002914:	d102      	bne.n	800291c <ETH_SetDMAConfig+0x44>
 8002916:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800291a:	e000      	b.n	800291e <ETH_SetDMAConfig+0x46>
 800291c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800291e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	7b9b      	ldrb	r3, [r3, #14]
 8002924:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002926:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800292c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	7f1b      	ldrb	r3, [r3, #28]
 8002932:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	7f9b      	ldrb	r3, [r3, #30]
 800293a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800293c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002942:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800294a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800294c:	4313      	orrs	r3, r2
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff f86e 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800298c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002992:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002998:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff f83f 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	f8de3f23 	.word	0xf8de3f23

080029ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0a6      	sub	sp, #152	@ 0x98
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe7f 	bl	8002770 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a72:	2301      	movs	r3, #1
 8002a74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a80:	2301      	movs	r3, #1
 8002a82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aa6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aa8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ab2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ac2:	f107 0308 	add.w	r3, r7, #8
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff05 	bl	80028d8 <ETH_SetDMAConfig>
}
 8002ace:	bf00      	nop
 8002ad0:	3798      	adds	r7, #152	@ 0x98
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3305      	adds	r3, #5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	3204      	adds	r2, #4
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <ETH_MACAddressConfig+0x68>)
 8002afa:	4413      	add	r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3303      	adds	r3, #3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	061a      	lsls	r2, r3, #24
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <ETH_MACAddressConfig+0x6c>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40028040 	.word	0x40028040
 8002b44:	40028044 	.word	0x40028044

08002b48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e03e      	b.n	8002bd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	3206      	adds	r2, #6
 8002b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d80c      	bhi.n	8002bb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68d9      	ldr	r1, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	e004      	b.n	8002bc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d9bd      	bls.n	8002b56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bec:	611a      	str	r2, [r3, #16]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e048      	b.n	8002c9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	3212      	adds	r2, #18
 8002c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d80c      	bhi.n	8002c8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	461a      	mov	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	e004      	b.n	8002c94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d9b3      	bls.n	8002c08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cca:	60da      	str	r2, [r3, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b089      	sub	sp, #36	@ 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	e175      	b.n	8002fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8164 	bne.w	8002fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d005      	beq.n	8002d2e <HAL_GPIO_Init+0x56>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d017      	beq.n	8002dcc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d123      	bne.n	8002e20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	08da      	lsrs	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3208      	adds	r2, #8
 8002de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	220f      	movs	r2, #15
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0203 	and.w	r2, r3, #3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80be 	beq.w	8002fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	4b66      	ldr	r3, [pc, #408]	@ (8002ffc <HAL_GPIO_Init+0x324>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e66:	4a65      	ldr	r2, [pc, #404]	@ (8002ffc <HAL_GPIO_Init+0x324>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6e:	4b63      	ldr	r3, [pc, #396]	@ (8002ffc <HAL_GPIO_Init+0x324>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e7a:	4a61      	ldr	r2, [pc, #388]	@ (8003000 <HAL_GPIO_Init+0x328>)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	3302      	adds	r3, #2
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	220f      	movs	r2, #15
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	@ (8003004 <HAL_GPIO_Init+0x32c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d037      	beq.n	8002f16 <HAL_GPIO_Init+0x23e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	@ (8003008 <HAL_GPIO_Init+0x330>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d031      	beq.n	8002f12 <HAL_GPIO_Init+0x23a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_GPIO_Init+0x334>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d02b      	beq.n	8002f0e <HAL_GPIO_Init+0x236>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a55      	ldr	r2, [pc, #340]	@ (8003010 <HAL_GPIO_Init+0x338>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d025      	beq.n	8002f0a <HAL_GPIO_Init+0x232>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a54      	ldr	r2, [pc, #336]	@ (8003014 <HAL_GPIO_Init+0x33c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01f      	beq.n	8002f06 <HAL_GPIO_Init+0x22e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a53      	ldr	r2, [pc, #332]	@ (8003018 <HAL_GPIO_Init+0x340>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x22a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	@ (800301c <HAL_GPIO_Init+0x344>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x226>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	@ (8003020 <HAL_GPIO_Init+0x348>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x222>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	@ (8003024 <HAL_GPIO_Init+0x34c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x21e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4f      	ldr	r2, [pc, #316]	@ (8003028 <HAL_GPIO_Init+0x350>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x21a>
 8002eee:	2309      	movs	r3, #9
 8002ef0:	e012      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002ef2:	230a      	movs	r3, #10
 8002ef4:	e010      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	e00e      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e00c      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002efe:	2306      	movs	r3, #6
 8002f00:	e00a      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e008      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e004      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e002      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x240>
 8002f16:	2300      	movs	r3, #0
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f002 0203 	and.w	r2, r2, #3
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	4093      	lsls	r3, r2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f28:	4935      	ldr	r1, [pc, #212]	@ (8003000 <HAL_GPIO_Init+0x328>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f36:	4b3d      	ldr	r3, [pc, #244]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5a:	4a34      	ldr	r2, [pc, #208]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f60:	4b32      	ldr	r3, [pc, #200]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f84:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fae:	4a1f      	ldr	r2, [pc, #124]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd8:	4a14      	ldr	r2, [pc, #80]	@ (800302c <HAL_GPIO_Init+0x354>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	f67f ae86 	bls.w	8002cf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	@ 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40013800 	.word	0x40013800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021000 	.word	0x40021000
 8003018:	40021400 	.word	0x40021400
 800301c:	40021800 	.word	0x40021800
 8003020:	40021c00 	.word	0x40021c00
 8003024:	40022000 	.word	0x40022000
 8003028:	40022400 	.word	0x40022400
 800302c:	40013c00 	.word	0x40013c00

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800306e:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800307a:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f806 	bl	8003094 <HAL_GPIO_EXTI_Callback>
  }
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40013c00 	.word	0x40013c00

08003094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af02      	add	r7, sp, #8
 80030b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e108      	b.n	80032ce <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fa82 	bl	80015e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2203      	movs	r2, #3
 80030e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ea:	d102      	bne.n	80030f2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fca0 	bl	8006a3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7c1a      	ldrb	r2, [r3, #16]
 8003104:	f88d 2000 	strb.w	r2, [sp]
 8003108:	3304      	adds	r3, #4
 800310a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310c:	f003 fc3c 	bl	8006988 <USB_CoreInit>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0d5      	b.n	80032ce <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f003 fc98 	bl	8006a5e <USB_SetCurrentMode>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0c6      	b.n	80032ce <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e04a      	b.n	80031dc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3315      	adds	r3, #21
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3314      	adds	r3, #20
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	b298      	uxth	r0, r3
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	332e      	adds	r3, #46	@ 0x2e
 8003182:	4602      	mov	r2, r0
 8003184:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3318      	adds	r3, #24
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	331c      	adds	r3, #28
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3320      	adds	r3, #32
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3324      	adds	r3, #36	@ 0x24
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	3301      	adds	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	791b      	ldrb	r3, [r3, #4]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3af      	bcc.n	8003146 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e044      	b.n	8003276 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003202:	7bfa      	ldrb	r2, [r7, #15]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	3301      	adds	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	429a      	cmp	r2, r3
 800327e:	d3b5      	bcc.n	80031ec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7c1a      	ldrb	r2, [r3, #16]
 8003288:	f88d 2000 	strb.w	r2, [sp]
 800328c:	3304      	adds	r3, #4
 800328e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003290:	f003 fc32 	bl	8006af8 <USB_DevInit>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e013      	b.n	80032ce <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f80b 	bl	80032d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fded 	bl	8006ea6 <USB_DevDisconnect>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_PCDEx_ActivateLPM+0x44>)
 8003308:	4313      	orrs	r3, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	10000003 	.word	0x10000003

08003320 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800332a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40007000 	.word	0x40007000

08003340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b23      	ldr	r3, [pc, #140]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
 8003356:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336e:	f7fe fb63 	bl	8001a38 <HAL_GetTick>
 8003372:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003374:	e009      	b.n	800338a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003376:	f7fe fb5f 	bl	8001a38 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003384:	d901      	bls.n	800338a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e022      	b.n	80033d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800338a:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003396:	d1ee      	bne.n	8003376 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0f      	ldr	r2, [pc, #60]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800339e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a4:	f7fe fb48 	bl	8001a38 <HAL_GetTick>
 80033a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033aa:	e009      	b.n	80033c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ac:	f7fe fb44 	bl	8001a38 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ba:	d901      	bls.n	80033c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e007      	b.n	80033d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033cc:	d1ee      	bne.n	80033ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e29b      	b.n	800392e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8087 	beq.w	8003512 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003404:	4b96      	ldr	r3, [pc, #600]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b04      	cmp	r3, #4
 800340e:	d00c      	beq.n	800342a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003410:	4b93      	ldr	r3, [pc, #588]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b08      	cmp	r3, #8
 800341a:	d112      	bne.n	8003442 <HAL_RCC_OscConfig+0x62>
 800341c:	4b90      	ldr	r3, [pc, #576]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003428:	d10b      	bne.n	8003442 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342a:	4b8d      	ldr	r3, [pc, #564]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d06c      	beq.n	8003510 <HAL_RCC_OscConfig+0x130>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d168      	bne.n	8003510 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e275      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x7a>
 800344c:	4b84      	ldr	r3, [pc, #528]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a83      	ldr	r2, [pc, #524]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e02e      	b.n	80034b8 <HAL_RCC_OscConfig+0xd8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x9c>
 8003462:	4b7f      	ldr	r3, [pc, #508]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7e      	ldr	r2, [pc, #504]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b7c      	ldr	r3, [pc, #496]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7b      	ldr	r2, [pc, #492]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e01d      	b.n	80034b8 <HAL_RCC_OscConfig+0xd8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0xc0>
 8003486:	4b76      	ldr	r3, [pc, #472]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a75      	ldr	r2, [pc, #468]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800348c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b73      	ldr	r3, [pc, #460]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a72      	ldr	r2, [pc, #456]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0xd8>
 80034a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe faba 	bl	8001a38 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fab6 	bl	8001a38 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e229      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b61      	ldr	r3, [pc, #388]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe8>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe faa6 	bl	8001a38 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe faa2 	bl	8001a38 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e215      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	4b57      	ldr	r3, [pc, #348]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x110>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d069      	beq.n	80035f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800351e:	4b50      	ldr	r3, [pc, #320]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352a:	4b4d      	ldr	r3, [pc, #308]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d11c      	bne.n	8003570 <HAL_RCC_OscConfig+0x190>
 8003536:	4b4a      	ldr	r3, [pc, #296]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	4b47      	ldr	r3, [pc, #284]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x17a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1e9      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b41      	ldr	r3, [pc, #260]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	493d      	ldr	r1, [pc, #244]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	e040      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d023      	beq.n	80035c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a38      	ldr	r2, [pc, #224]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fa58 	bl	8001a38 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fa54 	bl	8001a38 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1c7      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4929      	ldr	r1, [pc, #164]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
 80035be:	e018      	b.n	80035f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a26      	ldr	r2, [pc, #152]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa34 	bl	8001a38 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fa30 	bl	8001a38 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1a3      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d038      	beq.n	8003670 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003606:	4b16      	ldr	r3, [pc, #88]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	4a15      	ldr	r2, [pc, #84]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fa11 	bl	8001a38 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361a:	f7fe fa0d 	bl	8001a38 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e180      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x23a>
 8003638:	e01a      	b.n	8003670 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363a:	4b09      	ldr	r3, [pc, #36]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 800363c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363e:	4a08      	ldr	r2, [pc, #32]	@ (8003660 <HAL_RCC_OscConfig+0x280>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe f9f7 	bl	8001a38 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800364e:	f7fe f9f3 	bl	8001a38 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d903      	bls.n	8003664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e166      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
 8003660:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003664:	4b92      	ldr	r3, [pc, #584]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ee      	bne.n	800364e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80a4 	beq.w	80037c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b8c      	ldr	r3, [pc, #560]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b89      	ldr	r3, [pc, #548]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a88      	ldr	r2, [pc, #544]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b86      	ldr	r3, [pc, #536]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a6:	4b83      	ldr	r3, [pc, #524]	@ (80038b4 <HAL_RCC_OscConfig+0x4d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036b2:	4b80      	ldr	r3, [pc, #512]	@ (80038b4 <HAL_RCC_OscConfig+0x4d4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7f      	ldr	r2, [pc, #508]	@ (80038b4 <HAL_RCC_OscConfig+0x4d4>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7fe f9bb 	bl	8001a38 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7fe f9b7 	bl	8001a38 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	@ 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e12a      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d8:	4b76      	ldr	r3, [pc, #472]	@ (80038b4 <HAL_RCC_OscConfig+0x4d4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x31a>
 80036ec:	4b70      	ldr	r3, [pc, #448]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a6f      	ldr	r2, [pc, #444]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	e02d      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x33c>
 8003702:	4b6b      	ldr	r3, [pc, #428]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	4a6a      	ldr	r2, [pc, #424]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	@ 0x70
 800370e:	4b68      	ldr	r3, [pc, #416]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a67      	ldr	r2, [pc, #412]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
 800371a:	e01c      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d10c      	bne.n	800373e <HAL_RCC_OscConfig+0x35e>
 8003724:	4b62      	ldr	r3, [pc, #392]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003728:	4a61      	ldr	r2, [pc, #388]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003730:	4b5f      	ldr	r3, [pc, #380]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003734:	4a5e      	ldr	r2, [pc, #376]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	@ 0x70
 800373c:	e00b      	b.n	8003756 <HAL_RCC_OscConfig+0x376>
 800373e:	4b5c      	ldr	r3, [pc, #368]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	4a5b      	ldr	r2, [pc, #364]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6713      	str	r3, [r2, #112]	@ 0x70
 800374a:	4b59      	ldr	r3, [pc, #356]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	4a58      	ldr	r2, [pc, #352]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d015      	beq.n	800378a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe f96b 	bl	8001a38 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe f967 	bl	8001a38 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0d8      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ee      	beq.n	8003766 <HAL_RCC_OscConfig+0x386>
 8003788:	e014      	b.n	80037b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe f955 	bl	8001a38 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	e00a      	b.n	80037a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003792:	f7fe f951 	bl	8001a38 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0c2      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a8:	4b41      	ldr	r3, [pc, #260]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ee      	bne.n	8003792 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ba:	4b3d      	ldr	r3, [pc, #244]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	4a3c      	ldr	r2, [pc, #240]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80ae 	beq.w	800392c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d0:	4b37      	ldr	r3, [pc, #220]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d06d      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d14b      	bne.n	800387c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b32      	ldr	r3, [pc, #200]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a31      	ldr	r2, [pc, #196]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80037ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7fe f922 	bl	8001a38 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe f91e 	bl	8001a38 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e091      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b29      	ldr	r3, [pc, #164]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	3b01      	subs	r3, #1
 8003830:	041b      	lsls	r3, r3, #16
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	061b      	lsls	r3, r3, #24
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003840:	071b      	lsls	r3, r3, #28
 8003842:	491b      	ldr	r1, [pc, #108]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a18      	ldr	r2, [pc, #96]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe f8f0 	bl	8001a38 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe f8ec 	bl	8001a38 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e05f      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x47c>
 800387a:	e057      	b.n	800392c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe f8d6 	bl	8001a38 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe f8d2 	bl	8001a38 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e045      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a2:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_OscConfig+0x4d0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x4b0>
 80038ae:	e03d      	b.n	800392c <HAL_RCC_OscConfig+0x54c>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003938 <HAL_RCC_OscConfig+0x558>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d030      	beq.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d129      	bne.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d122      	bne.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d119      	bne.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	3b01      	subs	r3, #1
 8003902:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d10f      	bne.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003912:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d0      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b6a      	ldr	r3, [pc, #424]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b67      	ldr	r3, [pc, #412]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	4965      	ldr	r1, [pc, #404]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b63      	ldr	r3, [pc, #396]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0b8      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399c:	4b59      	ldr	r3, [pc, #356]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a58      	ldr	r2, [pc, #352]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b4:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a52      	ldr	r2, [pc, #328]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c0:	4b50      	ldr	r3, [pc, #320]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	494d      	ldr	r1, [pc, #308]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d040      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d115      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e07f      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e073      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06b      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1e:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4936      	ldr	r1, [pc, #216]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a30:	f7fe f802 	bl	8001a38 <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a38:	f7fd fffe 	bl	8001a38 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e053      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 020c 	and.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d1eb      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d210      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b24      	ldr	r3, [pc, #144]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 020f 	bic.w	r2, r3, #15
 8003a76:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e032      	b.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4916      	ldr	r1, [pc, #88]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	490e      	ldr	r1, [pc, #56]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ace:	f000 f821 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490a      	ldr	r1, [pc, #40]	@ (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_ClockConfig+0x1d4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd ff5e 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023c00 	.word	0x40023c00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	08009b58 	.word	0x08009b58
 8003b0c:	20000014 	.word	0x20000014
 8003b10:	20000018 	.word	0x20000018

08003b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b094      	sub	sp, #80	@ 0x50
 8003b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b20:	2300      	movs	r3, #0
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b2c:	4b79      	ldr	r3, [pc, #484]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d00d      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0x40>
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	f200 80e1 	bhi.w	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x34>
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b46:	e0db      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b73      	ldr	r3, [pc, #460]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4c:	e0db      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4e:	4b73      	ldr	r3, [pc, #460]	@ (8003d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b52:	e0d8      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b54:	4b6f      	ldr	r3, [pc, #444]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	2200      	movs	r2, #0
 8003b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b86:	4622      	mov	r2, r4
 8003b88:	462b      	mov	r3, r5
 8003b8a:	f04f 0000 	mov.w	r0, #0
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b98:	0150      	lsls	r0, r2, #5
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	1a51      	subs	r1, r2, r1
 8003ba2:	6139      	str	r1, [r7, #16]
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	018b      	lsls	r3, r1, #6
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	018a      	lsls	r2, r1, #6
 8003bc6:	4651      	mov	r1, sl
 8003bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bcc:	4659      	mov	r1, fp
 8003bce:	eb63 0901 	sbc.w	r9, r3, r1
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	4623      	mov	r3, r4
 8003bec:	eb18 0303 	adds.w	r3, r8, r3
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	eb49 0303 	adc.w	r3, r9, r3
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c06:	4629      	mov	r1, r5
 8003c08:	024b      	lsls	r3, r1, #9
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c10:	4621      	mov	r1, r4
 8003c12:	024a      	lsls	r2, r1, #9
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c24:	f7fc fb64 	bl	80002f0 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c30:	e058      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b38      	ldr	r3, [pc, #224]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	f04f 0000 	mov.w	r0, #0
 8003c54:	f04f 0100 	mov.w	r1, #0
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c5e:	0150      	lsls	r0, r2, #5
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4641      	mov	r1, r8
 8003c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c84:	ebb2 040a 	subs.w	r4, r2, sl
 8003c88:	eb63 050b 	sbc.w	r5, r3, fp
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	00eb      	lsls	r3, r5, #3
 8003c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c9a:	00e2      	lsls	r2, r4, #3
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	461d      	mov	r5, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	18e3      	adds	r3, r4, r3
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	eb45 0303 	adc.w	r3, r5, r3
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	028b      	lsls	r3, r1, #10
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	028a      	lsls	r2, r1, #10
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	61fa      	str	r2, [r7, #28]
 8003cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd8:	f7fc fb0a 	bl	80002f0 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3750      	adds	r7, #80	@ 0x50
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200

08003d20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000014 	.word	0x20000014

08003d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d3c:	f7ff fff0 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a9b      	lsrs	r3, r3, #10
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08009b68 	.word	0x08009b68

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d64:	f7ff ffdc 	bl	8003d20 <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0b5b      	lsrs	r3, r3, #13
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4903      	ldr	r1, [pc, #12]	@ (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	08009b68 	.word	0x08009b68

08003d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003db0:	4b69      	ldr	r3, [pc, #420]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4a68      	ldr	r2, [pc, #416]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dba:	6093      	str	r3, [r2, #8]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc4:	4964      	ldr	r1, [pc, #400]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003de2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	4959      	ldr	r1, [pc, #356]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	494a      	ldr	r1, [pc, #296]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 808b 	beq.w	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	4a39      	ldr	r2, [pc, #228]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e78:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e84:	4b35      	ldr	r3, [pc, #212]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a34      	ldr	r2, [pc, #208]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd fdd2 	bl	8001a38 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd fdce 	bl	8001a38 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e38f      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ebe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d035      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d02e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed4:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003edc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003efc:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d114      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f08:	f7fd fd96 	bl	8001a38 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fd92 	bl	8001a38 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e351      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f26:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ee      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f40:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f4e:	400b      	ands	r3, r1
 8003f50:	4901      	ldr	r1, [pc, #4]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	0ffffcff 	.word	0x0ffffcff
 8003f64:	4bac      	ldr	r3, [pc, #688]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4aab      	ldr	r2, [pc, #684]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	4ba9      	ldr	r3, [pc, #676]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	49a6      	ldr	r1, [pc, #664]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f8e:	4ba2      	ldr	r3, [pc, #648]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f94:	4aa0      	ldr	r2, [pc, #640]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f9e:	4b9e      	ldr	r3, [pc, #632]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	499b      	ldr	r1, [pc, #620]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbc:	4b96      	ldr	r3, [pc, #600]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fca:	4993      	ldr	r1, [pc, #588]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fde:	4b8e      	ldr	r3, [pc, #568]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fec:	498a      	ldr	r1, [pc, #552]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004000:	4b85      	ldr	r3, [pc, #532]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400e:	4982      	ldr	r1, [pc, #520]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004022:	4b7d      	ldr	r3, [pc, #500]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	4979      	ldr	r1, [pc, #484]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004044:	4b74      	ldr	r3, [pc, #464]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	4971      	ldr	r1, [pc, #452]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004066:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406c:	f023 020c 	bic.w	r2, r3, #12
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004074:	4968      	ldr	r1, [pc, #416]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004088:	4b63      	ldr	r3, [pc, #396]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004096:	4960      	ldr	r1, [pc, #384]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b8:	4957      	ldr	r1, [pc, #348]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040cc:	4b52      	ldr	r3, [pc, #328]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	494f      	ldr	r1, [pc, #316]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	4946      	ldr	r1, [pc, #280]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004110:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411e:	493e      	ldr	r1, [pc, #248]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004132:	4b39      	ldr	r3, [pc, #228]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004140:	4935      	ldr	r1, [pc, #212]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004154:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004162:	492d      	ldr	r1, [pc, #180]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004176:	4b28      	ldr	r3, [pc, #160]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	4924      	ldr	r1, [pc, #144]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004190:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b6:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c4:	4914      	ldr	r1, [pc, #80]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e8:	490b      	ldr	r1, [pc, #44]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800420c:	4902      	ldr	r1, [pc, #8]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004228:	4b8a      	ldr	r3, [pc, #552]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800422e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	4986      	ldr	r1, [pc, #536]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800424c:	4b81      	ldr	r3, [pc, #516]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004252:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800425c:	497d      	ldr	r1, [pc, #500]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d006      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80d6 	beq.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004278:	4b76      	ldr	r3, [pc, #472]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a75      	ldr	r2, [pc, #468]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fd fbd8 	bl	8001a38 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800428c:	f7fd fbd4 	bl	8001a38 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	@ 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e195      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800429e:	4b6d      	ldr	r3, [pc, #436]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d021      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042be:	4b65      	ldr	r3, [pc, #404]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042cc:	4b61      	ldr	r3, [pc, #388]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	019a      	lsls	r2, r3, #6
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	071b      	lsls	r3, r3, #28
 80042f2:	4958      	ldr	r1, [pc, #352]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02e      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004324:	d129      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004326:	4b4b      	ldr	r3, [pc, #300]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004334:	4b47      	ldr	r3, [pc, #284]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	019a      	lsls	r2, r3, #6
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	493e      	ldr	r1, [pc, #248]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004362:	4b3c      	ldr	r3, [pc, #240]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004368:	f023 021f 	bic.w	r2, r3, #31
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	3b01      	subs	r3, #1
 8004372:	4938      	ldr	r1, [pc, #224]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01d      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004386:	4b33      	ldr	r3, [pc, #204]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004394:	4b2f      	ldr	r3, [pc, #188]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439a:	0f1b      	lsrs	r3, r3, #28
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4926      	ldr	r1, [pc, #152]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d011      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	019a      	lsls	r2, r3, #6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	491a      	ldr	r1, [pc, #104]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043f2:	4b18      	ldr	r3, [pc, #96]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a17      	ldr	r2, [pc, #92]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fe:	f7fd fb1b 	bl	8001a38 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fd fb17 	bl	8001a38 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	@ 0x64
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0d8      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004418:	4b0e      	ldr	r3, [pc, #56]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	f040 80ce 	bne.w	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800442c:	4b09      	ldr	r3, [pc, #36]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fd fafe 	bl	8001a38 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800443e:	e00b      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004440:	f7fd fafa 	bl	8001a38 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d904      	bls.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0bb      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004458:	4b5e      	ldr	r3, [pc, #376]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004464:	d0ec      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02e      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d12a      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800448e:	4b51      	ldr	r3, [pc, #324]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800449c:	4b4d      	ldr	r3, [pc, #308]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	0f1b      	lsrs	r3, r3, #28
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	019a      	lsls	r2, r3, #6
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	071b      	lsls	r3, r3, #28
 80044c2:	4944      	ldr	r1, [pc, #272]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044ca:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	3b01      	subs	r3, #1
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	493d      	ldr	r1, [pc, #244]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f8:	d11d      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044fa:	4b36      	ldr	r3, [pc, #216]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004500:	0e1b      	lsrs	r3, r3, #24
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004508:	4b32      	ldr	r3, [pc, #200]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	0f1b      	lsrs	r3, r3, #28
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	019a      	lsls	r2, r3, #6
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	4929      	ldr	r1, [pc, #164]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d028      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004542:	4b24      	ldr	r3, [pc, #144]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004548:	0e1b      	lsrs	r3, r3, #24
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004550:	4b20      	ldr	r3, [pc, #128]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	019a      	lsls	r2, r3, #6
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	4917      	ldr	r1, [pc, #92]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800457e:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4911      	ldr	r1, [pc, #68]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004594:	4b0f      	ldr	r3, [pc, #60]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a0:	f7fd fa4a 	bl	8001a38 <HAL_GetTick>
 80045a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a8:	f7fd fa46 	bl	8001a38 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	@ 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e007      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045c6:	d1ef      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800

080045d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e049      	b.n	800467e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fede 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 fcbc 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d001      	beq.n	80046a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e04c      	b.n	800473a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a26      	ldr	r2, [pc, #152]	@ (8004748 <HAL_TIM_Base_Start+0xc0>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ba:	d01d      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a22      	ldr	r2, [pc, #136]	@ (800474c <HAL_TIM_Base_Start+0xc4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a21      	ldr	r2, [pc, #132]	@ (8004750 <HAL_TIM_Base_Start+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004754 <HAL_TIM_Base_Start+0xcc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <HAL_TIM_Base_Start+0xd0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <HAL_TIM_Base_Start+0xd4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_Base_Start+0x70>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004760 <HAL_TIM_Base_Start+0xd8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d115      	bne.n	8004724 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <HAL_TIM_Base_Start+0xdc>)
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d015      	beq.n	8004736 <HAL_TIM_Base_Start+0xae>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004710:	d011      	beq.n	8004736 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	e008      	b.n	8004736 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e000      	b.n	8004738 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800
 8004764:	00010007 	.word	0x00010007

08004768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e054      	b.n	800482a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a26      	ldr	r2, [pc, #152]	@ (8004838 <HAL_TIM_Base_Start_IT+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d01d      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a22      	ldr	r2, [pc, #136]	@ (800483c <HAL_TIM_Base_Start_IT+0xd4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a21      	ldr	r2, [pc, #132]	@ (8004840 <HAL_TIM_Base_Start_IT+0xd8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004844 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004848 <HAL_TIM_Base_Start_IT+0xe0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <HAL_TIM_Base_Start_IT+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x80>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004850 <HAL_TIM_Base_Start_IT+0xe8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d115      	bne.n	8004814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_TIM_Base_Start_IT+0xec>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d015      	beq.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d011      	beq.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0201 	orr.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004812:	e008      	b.n	8004826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e000      	b.n	8004828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800
 8004854:	00010007 	.word	0x00010007

08004858 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	f241 1311 	movw	r3, #4369	@ 0x1111
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6a1a      	ldr	r2, [r3, #32]
 8004886:	f240 4344 	movw	r3, #1092	@ 0x444
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e049      	b.n	800495c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f841 	bl	8004964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f000 fb4d 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fac8 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 faba 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 facb 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0204 	mvn.w	r2, #4
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 faa2 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa94 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 faa5 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0208 	mvn.w	r2, #8
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa7c 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa6e 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa7f 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0210 	mvn.w	r2, #16
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2208      	movs	r2, #8
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa56 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa48 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa59 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0201 	mvn.w	r2, #1
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fac8 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fe7d 	bl	800580c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fe75 	bl	8005820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00c      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa13 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00c      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d007      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0220 	mvn.w	r2, #32
 8004b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fe3d 	bl	80057f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0ff      	b.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b14      	cmp	r3, #20
 8004bb2:	f200 80f0 	bhi.w	8004d96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004c11 	.word	0x08004c11
 8004bc0:	08004d97 	.word	0x08004d97
 8004bc4:	08004d97 	.word	0x08004d97
 8004bc8:	08004d97 	.word	0x08004d97
 8004bcc:	08004c51 	.word	0x08004c51
 8004bd0:	08004d97 	.word	0x08004d97
 8004bd4:	08004d97 	.word	0x08004d97
 8004bd8:	08004d97 	.word	0x08004d97
 8004bdc:	08004c93 	.word	0x08004c93
 8004be0:	08004d97 	.word	0x08004d97
 8004be4:	08004d97 	.word	0x08004d97
 8004be8:	08004d97 	.word	0x08004d97
 8004bec:	08004cd3 	.word	0x08004cd3
 8004bf0:	08004d97 	.word	0x08004d97
 8004bf4:	08004d97 	.word	0x08004d97
 8004bf8:	08004d97 	.word	0x08004d97
 8004bfc:	08004d15 	.word	0x08004d15
 8004c00:	08004d97 	.word	0x08004d97
 8004c04:	08004d97 	.word	0x08004d97
 8004c08:	08004d97 	.word	0x08004d97
 8004c0c:	08004d55 	.word	0x08004d55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fa68 	bl	80050ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0204 	bic.w	r2, r2, #4
 8004c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6999      	ldr	r1, [r3, #24]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	619a      	str	r2, [r3, #24]
      break;
 8004c4e:	e0a5      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 faba 	bl	80051d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6999      	ldr	r1, [r3, #24]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	021a      	lsls	r2, r3, #8
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	619a      	str	r2, [r3, #24]
      break;
 8004c90:	e084      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fb11 	bl	80052c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0208 	orr.w	r2, r2, #8
 8004cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0204 	bic.w	r2, r2, #4
 8004cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69d9      	ldr	r1, [r3, #28]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	61da      	str	r2, [r3, #28]
      break;
 8004cd0:	e064      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fb67 	bl	80053ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	021a      	lsls	r2, r3, #8
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	61da      	str	r2, [r3, #28]
      break;
 8004d12:	e043      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fb9e 	bl	800545c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0208 	orr.w	r2, r2, #8
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0204 	bic.w	r2, r2, #4
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d52:	e023      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fbd0 	bl	8005500 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004d94:	e002      	b.n	8004d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0b4      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x186>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	4b56      	ldr	r3, [pc, #344]	@ (8004f40 <HAL_TIM_ConfigClockSource+0x190>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e04:	d03e      	beq.n	8004e84 <HAL_TIM_ConfigClockSource+0xd4>
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0a:	f200 8087 	bhi.w	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e12:	f000 8086 	beq.w	8004f22 <HAL_TIM_ConfigClockSource+0x172>
 8004e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1a:	d87f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b70      	cmp	r3, #112	@ 0x70
 8004e1e:	d01a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xa6>
 8004e20:	2b70      	cmp	r3, #112	@ 0x70
 8004e22:	d87b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b60      	cmp	r3, #96	@ 0x60
 8004e26:	d050      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x11a>
 8004e28:	2b60      	cmp	r3, #96	@ 0x60
 8004e2a:	d877      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b50      	cmp	r3, #80	@ 0x50
 8004e2e:	d03c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0xfa>
 8004e30:	2b50      	cmp	r3, #80	@ 0x50
 8004e32:	d873      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	d058      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x13a>
 8004e38:	2b40      	cmp	r3, #64	@ 0x40
 8004e3a:	d86f      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b30      	cmp	r3, #48	@ 0x30
 8004e3e:	d064      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e40:	2b30      	cmp	r3, #48	@ 0x30
 8004e42:	d86b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d060      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d867      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05c      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d05a      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	e062      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e66:	f000 fc19 	bl	800569c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	609a      	str	r2, [r3, #8]
      break;
 8004e82:	e04f      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e94:	f000 fc02 	bl	800569c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ea6:	609a      	str	r2, [r3, #8]
      break;
 8004ea8:	e03c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f000 fb76 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2150      	movs	r1, #80	@ 0x50
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fbcf 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e02c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f000 fb95 	bl	8005606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2160      	movs	r1, #96	@ 0x60
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fbbf 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e01c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f000 fb56 	bl	80055a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2140      	movs	r1, #64	@ 0x40
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fbaf 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e00c      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	4610      	mov	r0, r2
 8004f16:	f000 fba6 	bl	8005666 <TIM_ITRx_SetConfig>
      break;
 8004f1a:	e003      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f20:	e000      	b.n	8004f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	fffeff88 	.word	0xfffeff88

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a46      	ldr	r2, [pc, #280]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d00f      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a43      	ldr	r2, [pc, #268]	@ (80050c4 <TIM_Base_SetConfig+0x130>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a42      	ldr	r2, [pc, #264]	@ (80050c8 <TIM_Base_SetConfig+0x134>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a41      	ldr	r2, [pc, #260]	@ (80050cc <TIM_Base_SetConfig+0x138>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a40      	ldr	r2, [pc, #256]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a35      	ldr	r2, [pc, #212]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff4:	d027      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	@ (80050c4 <TIM_Base_SetConfig+0x130>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d023      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a31      	ldr	r2, [pc, #196]	@ (80050c8 <TIM_Base_SetConfig+0x134>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a30      	ldr	r2, [pc, #192]	@ (80050cc <TIM_Base_SetConfig+0x138>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d017      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2e      	ldr	r2, [pc, #184]	@ (80050d4 <TIM_Base_SetConfig+0x140>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <TIM_Base_SetConfig+0x144>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <TIM_Base_SetConfig+0x148>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <TIM_Base_SetConfig+0x14c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2a      	ldr	r2, [pc, #168]	@ (80050e4 <TIM_Base_SetConfig+0x150>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <TIM_Base_SetConfig+0x154>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800504c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a10      	ldr	r2, [pc, #64]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0xf8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a12      	ldr	r2, [pc, #72]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d105      	bne.n	80050b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]
  }
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40001800 	.word	0x40001800
 80050e4:	40001c00 	.word	0x40001c00
 80050e8:	40002000 	.word	0x40002000

080050ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f023 0201 	bic.w	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <TIM_OC1_SetConfig+0xd8>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 0302 	bic.w	r3, r3, #2
 8005134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a21      	ldr	r2, [pc, #132]	@ (80051c8 <TIM_OC1_SetConfig+0xdc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_OC1_SetConfig+0x64>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a20      	ldr	r2, [pc, #128]	@ (80051cc <TIM_OC1_SetConfig+0xe0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10c      	bne.n	800516a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0308 	bic.w	r3, r3, #8
 8005156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <TIM_OC1_SetConfig+0xdc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_OC1_SetConfig+0x8e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <TIM_OC1_SetConfig+0xe0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	fffeff8f 	.word	0xfffeff8f
 80051c8:	40010000 	.word	0x40010000
 80051cc:	40010400 	.word	0x40010400

080051d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f023 0210 	bic.w	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4b2e      	ldr	r3, [pc, #184]	@ (80052b4 <TIM_OC2_SetConfig+0xe4>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	021b      	lsls	r3, r3, #8
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0320 	bic.w	r3, r3, #32
 800521a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a23      	ldr	r2, [pc, #140]	@ (80052b8 <TIM_OC2_SetConfig+0xe8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_OC2_SetConfig+0x68>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <TIM_OC2_SetConfig+0xec>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10d      	bne.n	8005254 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005252:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a18      	ldr	r2, [pc, #96]	@ (80052b8 <TIM_OC2_SetConfig+0xe8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC2_SetConfig+0x94>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a17      	ldr	r2, [pc, #92]	@ (80052bc <TIM_OC2_SetConfig+0xec>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d113      	bne.n	800528c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800526a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	feff8fff 	.word	0xfeff8fff
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40010400 	.word	0x40010400

080052c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <TIM_OC3_SetConfig+0xe0>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <TIM_OC3_SetConfig+0xe4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0x66>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	@ (80053a8 <TIM_OC3_SetConfig+0xe8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <TIM_OC3_SetConfig+0xe4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_OC3_SetConfig+0x92>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	@ (80053a8 <TIM_OC3_SetConfig+0xe8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d113      	bne.n	800537a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	621a      	str	r2, [r3, #32]
}
 8005394:	bf00      	nop
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	fffeff8f 	.word	0xfffeff8f
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40010400 	.word	0x40010400

080053ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <TIM_OC4_SetConfig+0xa4>)
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	031b      	lsls	r3, r3, #12
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <TIM_OC4_SetConfig+0xa8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_OC4_SetConfig+0x68>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <TIM_OC4_SetConfig+0xac>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d109      	bne.n	8005428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800541a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	feff8fff 	.word	0xfeff8fff
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4b1b      	ldr	r3, [pc, #108]	@ (80054f4 <TIM_OC5_SetConfig+0x98>)
 8005488:	4013      	ands	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800549c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <TIM_OC5_SetConfig+0x9c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_OC5_SetConfig+0x5e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a11      	ldr	r2, [pc, #68]	@ (80054fc <TIM_OC5_SetConfig+0xa0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d109      	bne.n	80054ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	621a      	str	r2, [r3, #32]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	fffeff8f 	.word	0xfffeff8f
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <TIM_OC6_SetConfig+0x9c>)
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	051b      	lsls	r3, r3, #20
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a13      	ldr	r2, [pc, #76]	@ (80055a0 <TIM_OC6_SetConfig+0xa0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC6_SetConfig+0x60>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <TIM_OC6_SetConfig+0xa4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d109      	bne.n	8005574 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	feff8fff 	.word	0xfeff8fff
 80055a0:	40010000 	.word	0x40010000
 80055a4:	40010400 	.word	0x40010400

080055a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 030a 	bic.w	r3, r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	621a      	str	r2, [r3, #32]
}
 80055fa:	bf00      	nop
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005606:	b480      	push	{r7}
 8005608:	b087      	sub	sp, #28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0210 	bic.w	r2, r3, #16
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	031b      	lsls	r3, r3, #12
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4313      	orrs	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005642:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	621a      	str	r2, [r3, #32]
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	f043 0307 	orr.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	021a      	lsls	r2, r3, #8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e06d      	b.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a30      	ldr	r2, [pc, #192]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2f      	ldr	r2, [pc, #188]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800572e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005740:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a20      	ldr	r2, [pc, #128]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d022      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005766:	d01d      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d018      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00e      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a15      	ldr	r2, [pc, #84]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d009      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a15      	ldr	r2, [pc, #84]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10c      	bne.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40010000 	.word	0x40010000
 80057e0:	40010400 	.word	0x40010400
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40001800 	.word	0x40001800

080057f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e040      	b.n	80058c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fb fe5a 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	@ 0x24
 8005860:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fe28 	bl	80064d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fbc1 	bl	8006008 <UART_SetConfig>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01b      	b.n	80058c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800589e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fea7 	bl	8006614 <UART_CheckIdleState>
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	@ 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d177      	bne.n	80059d8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Transmit+0x24>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e070      	b.n	80059da <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2221      	movs	r2, #33	@ 0x21
 8005904:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005906:	f7fc f897 	bl	8001a38 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005924:	d108      	bne.n	8005938 <HAL_UART_Transmit+0x68>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e003      	b.n	8005940 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005940:	e02f      	b.n	80059a2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	2180      	movs	r1, #128	@ 0x80
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 ff09 	bl	8006764 <UART_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e03b      	b.n	80059da <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10b      	bne.n	8005980 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005976:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	3302      	adds	r3, #2
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e007      	b.n	8005990 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1c9      	bne.n	8005942 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2140      	movs	r1, #64	@ 0x40
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fed3 	bl	8006764 <UART_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e005      	b.n	80059da <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b0ba      	sub	sp, #232	@ 0xe8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005a0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005a12:	4013      	ands	r3, r2
 8005a14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d115      	bne.n	8005a4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 82ac 	beq.w	8005f9a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
      }
      return;
 8005a4a:	e2a6      	b.n	8005f9a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8117 	beq.w	8005c84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005a66:	4b85      	ldr	r3, [pc, #532]	@ (8005c7c <HAL_UART_IRQHandler+0x298>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 810a 	beq.w	8005c84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d011      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xbc>
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d011      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xec>
 8005aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2202      	movs	r2, #2
 8005abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ac6:	f043 0204 	orr.w	r2, r3, #4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d011      	beq.n	8005b00 <HAL_UART_IRQHandler+0x11c>
 8005adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2204      	movs	r2, #4
 8005aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b32:	f043 0208 	orr.w	r2, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d012      	beq.n	8005b6e <HAL_UART_IRQHandler+0x18a>
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8212 	beq.w	8005f9e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04f      	beq.n	8005c66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fe39 	bl	800683e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b40      	cmp	r3, #64	@ 0x40
 8005bd8:	d141      	bne.n	8005c5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1d9      	bne.n	8005bda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d013      	beq.n	8005c56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c32:	4a13      	ldr	r2, [pc, #76]	@ (8005c80 <HAL_UART_IRQHandler+0x29c>)
 8005c34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fc fcdb 	bl	80025f6 <HAL_DMA_Abort_IT>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005c50:	4610      	mov	r0, r2
 8005c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c54:	e00f      	b.n	8005c76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f9b6 	bl	8005fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5c:	e00b      	b.n	8005c76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9b2 	bl	8005fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e007      	b.n	8005c76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9ae 	bl	8005fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c74:	e193      	b.n	8005f9e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c76:	bf00      	nop
    return;
 8005c78:	e191      	b.n	8005f9e <HAL_UART_IRQHandler+0x5ba>
 8005c7a:	bf00      	nop
 8005c7c:	04000120 	.word	0x04000120
 8005c80:	08006907 	.word	0x08006907

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 814c 	bne.w	8005f26 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8145 	beq.w	8005f26 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 813e 	beq.w	8005f26 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2210      	movs	r2, #16
 8005cb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	f040 80b6 	bne.w	8005e2e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8165 	beq.w	8005fa2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	f080 815d 	bcs.w	8005fa2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cfc:	f000 8086 	beq.w	8005e0c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1da      	bne.n	8005d00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e1      	bne.n	8005d4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e3      	bne.n	8005d86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ddc:	f023 0310 	bic.w	r3, r3, #16
 8005de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005df0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005df4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e4      	bne.n	8005dcc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fc fb85 	bl	8002516 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f8d8 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e2c:	e0b9      	b.n	8005fa2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80ab 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005e50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a6 	beq.w	8005fa6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e4      	bne.n	8005e5a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005eb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e3      	bne.n	8005e90 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f023 0310 	bic.w	r3, r3, #16
 8005ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	69b9      	ldr	r1, [r7, #24]
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e4      	bne.n	8005edc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2202      	movs	r2, #2
 8005f16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f85c 	bl	8005fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f24:	e03f      	b.n	8005fa6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <HAL_UART_IRQHandler+0x56c>
 8005f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f853 	bl	8005ff4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f4e:	e02d      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01c      	beq.n	8005faa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
    }
    return;
 8005f78:	e017      	b.n	8005faa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d012      	beq.n	8005fac <HAL_UART_IRQHandler+0x5c8>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fccd 	bl	8006932 <UART_EndTransmit_IT>
    return;
 8005f98:	e008      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f9a:	bf00      	nop
 8005f9c:	e006      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f9e:	bf00      	nop
 8005fa0:	e004      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fa2:	bf00      	nop
 8005fa4:	e002      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
      return;
 8005fa6:	bf00      	nop
 8005fa8:	e000      	b.n	8005fac <HAL_UART_IRQHandler+0x5c8>
    return;
 8005faa:	bf00      	nop
  }

}
 8005fac:	37e8      	adds	r7, #232	@ 0xe8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	431a      	orrs	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	4313      	orrs	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4ba6      	ldr	r3, [pc, #664]	@ (80062cc <UART_SetConfig+0x2c4>)
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	430b      	orrs	r3, r1
 800603e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a94      	ldr	r2, [pc, #592]	@ (80062d0 <UART_SetConfig+0x2c8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d120      	bne.n	80060c6 <UART_SetConfig+0xbe>
 8006084:	4b93      	ldr	r3, [pc, #588]	@ (80062d4 <UART_SetConfig+0x2cc>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b03      	cmp	r3, #3
 8006090:	d816      	bhi.n	80060c0 <UART_SetConfig+0xb8>
 8006092:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <UART_SetConfig+0x90>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060a9 	.word	0x080060a9
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060af 	.word	0x080060af
 80060a4:	080060bb 	.word	0x080060bb
 80060a8:	2301      	movs	r3, #1
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e150      	b.n	8006350 <UART_SetConfig+0x348>
 80060ae:	2302      	movs	r3, #2
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e14d      	b.n	8006350 <UART_SetConfig+0x348>
 80060b4:	2304      	movs	r3, #4
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e14a      	b.n	8006350 <UART_SetConfig+0x348>
 80060ba:	2308      	movs	r3, #8
 80060bc:	77fb      	strb	r3, [r7, #31]
 80060be:	e147      	b.n	8006350 <UART_SetConfig+0x348>
 80060c0:	2310      	movs	r3, #16
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e144      	b.n	8006350 <UART_SetConfig+0x348>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a83      	ldr	r2, [pc, #524]	@ (80062d8 <UART_SetConfig+0x2d0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d132      	bne.n	8006136 <UART_SetConfig+0x12e>
 80060d0:	4b80      	ldr	r3, [pc, #512]	@ (80062d4 <UART_SetConfig+0x2cc>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d828      	bhi.n	8006130 <UART_SetConfig+0x128>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0xdc>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006131 	.word	0x08006131
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006125 	.word	0x08006125
 80060f8:	08006131 	.word	0x08006131
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006131 	.word	0x08006131
 8006104:	0800611f 	.word	0x0800611f
 8006108:	08006131 	.word	0x08006131
 800610c:	08006131 	.word	0x08006131
 8006110:	08006131 	.word	0x08006131
 8006114:	0800612b 	.word	0x0800612b
 8006118:	2300      	movs	r3, #0
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e118      	b.n	8006350 <UART_SetConfig+0x348>
 800611e:	2302      	movs	r3, #2
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e115      	b.n	8006350 <UART_SetConfig+0x348>
 8006124:	2304      	movs	r3, #4
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e112      	b.n	8006350 <UART_SetConfig+0x348>
 800612a:	2308      	movs	r3, #8
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e10f      	b.n	8006350 <UART_SetConfig+0x348>
 8006130:	2310      	movs	r3, #16
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e10c      	b.n	8006350 <UART_SetConfig+0x348>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a68      	ldr	r2, [pc, #416]	@ (80062dc <UART_SetConfig+0x2d4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d120      	bne.n	8006182 <UART_SetConfig+0x17a>
 8006140:	4b64      	ldr	r3, [pc, #400]	@ (80062d4 <UART_SetConfig+0x2cc>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006146:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800614a:	2b30      	cmp	r3, #48	@ 0x30
 800614c:	d013      	beq.n	8006176 <UART_SetConfig+0x16e>
 800614e:	2b30      	cmp	r3, #48	@ 0x30
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x174>
 8006152:	2b20      	cmp	r3, #32
 8006154:	d009      	beq.n	800616a <UART_SetConfig+0x162>
 8006156:	2b20      	cmp	r3, #32
 8006158:	d810      	bhi.n	800617c <UART_SetConfig+0x174>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <UART_SetConfig+0x15c>
 800615e:	2b10      	cmp	r3, #16
 8006160:	d006      	beq.n	8006170 <UART_SetConfig+0x168>
 8006162:	e00b      	b.n	800617c <UART_SetConfig+0x174>
 8006164:	2300      	movs	r3, #0
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e0f2      	b.n	8006350 <UART_SetConfig+0x348>
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e0ef      	b.n	8006350 <UART_SetConfig+0x348>
 8006170:	2304      	movs	r3, #4
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e0ec      	b.n	8006350 <UART_SetConfig+0x348>
 8006176:	2308      	movs	r3, #8
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e0e9      	b.n	8006350 <UART_SetConfig+0x348>
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e0e6      	b.n	8006350 <UART_SetConfig+0x348>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a56      	ldr	r2, [pc, #344]	@ (80062e0 <UART_SetConfig+0x2d8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d120      	bne.n	80061ce <UART_SetConfig+0x1c6>
 800618c:	4b51      	ldr	r3, [pc, #324]	@ (80062d4 <UART_SetConfig+0x2cc>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006192:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006196:	2bc0      	cmp	r3, #192	@ 0xc0
 8006198:	d013      	beq.n	80061c2 <UART_SetConfig+0x1ba>
 800619a:	2bc0      	cmp	r3, #192	@ 0xc0
 800619c:	d814      	bhi.n	80061c8 <UART_SetConfig+0x1c0>
 800619e:	2b80      	cmp	r3, #128	@ 0x80
 80061a0:	d009      	beq.n	80061b6 <UART_SetConfig+0x1ae>
 80061a2:	2b80      	cmp	r3, #128	@ 0x80
 80061a4:	d810      	bhi.n	80061c8 <UART_SetConfig+0x1c0>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <UART_SetConfig+0x1a8>
 80061aa:	2b40      	cmp	r3, #64	@ 0x40
 80061ac:	d006      	beq.n	80061bc <UART_SetConfig+0x1b4>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x1c0>
 80061b0:	2300      	movs	r3, #0
 80061b2:	77fb      	strb	r3, [r7, #31]
 80061b4:	e0cc      	b.n	8006350 <UART_SetConfig+0x348>
 80061b6:	2302      	movs	r3, #2
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e0c9      	b.n	8006350 <UART_SetConfig+0x348>
 80061bc:	2304      	movs	r3, #4
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e0c6      	b.n	8006350 <UART_SetConfig+0x348>
 80061c2:	2308      	movs	r3, #8
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e0c3      	b.n	8006350 <UART_SetConfig+0x348>
 80061c8:	2310      	movs	r3, #16
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0c0      	b.n	8006350 <UART_SetConfig+0x348>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a44      	ldr	r2, [pc, #272]	@ (80062e4 <UART_SetConfig+0x2dc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d125      	bne.n	8006224 <UART_SetConfig+0x21c>
 80061d8:	4b3e      	ldr	r3, [pc, #248]	@ (80062d4 <UART_SetConfig+0x2cc>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061e6:	d017      	beq.n	8006218 <UART_SetConfig+0x210>
 80061e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ec:	d817      	bhi.n	800621e <UART_SetConfig+0x216>
 80061ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f2:	d00b      	beq.n	800620c <UART_SetConfig+0x204>
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f8:	d811      	bhi.n	800621e <UART_SetConfig+0x216>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <UART_SetConfig+0x1fe>
 80061fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006202:	d006      	beq.n	8006212 <UART_SetConfig+0x20a>
 8006204:	e00b      	b.n	800621e <UART_SetConfig+0x216>
 8006206:	2300      	movs	r3, #0
 8006208:	77fb      	strb	r3, [r7, #31]
 800620a:	e0a1      	b.n	8006350 <UART_SetConfig+0x348>
 800620c:	2302      	movs	r3, #2
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e09e      	b.n	8006350 <UART_SetConfig+0x348>
 8006212:	2304      	movs	r3, #4
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e09b      	b.n	8006350 <UART_SetConfig+0x348>
 8006218:	2308      	movs	r3, #8
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e098      	b.n	8006350 <UART_SetConfig+0x348>
 800621e:	2310      	movs	r3, #16
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e095      	b.n	8006350 <UART_SetConfig+0x348>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2f      	ldr	r2, [pc, #188]	@ (80062e8 <UART_SetConfig+0x2e0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d125      	bne.n	800627a <UART_SetConfig+0x272>
 800622e:	4b29      	ldr	r3, [pc, #164]	@ (80062d4 <UART_SetConfig+0x2cc>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006234:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006238:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800623c:	d017      	beq.n	800626e <UART_SetConfig+0x266>
 800623e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006242:	d817      	bhi.n	8006274 <UART_SetConfig+0x26c>
 8006244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006248:	d00b      	beq.n	8006262 <UART_SetConfig+0x25a>
 800624a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624e:	d811      	bhi.n	8006274 <UART_SetConfig+0x26c>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <UART_SetConfig+0x254>
 8006254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006258:	d006      	beq.n	8006268 <UART_SetConfig+0x260>
 800625a:	e00b      	b.n	8006274 <UART_SetConfig+0x26c>
 800625c:	2301      	movs	r3, #1
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e076      	b.n	8006350 <UART_SetConfig+0x348>
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e073      	b.n	8006350 <UART_SetConfig+0x348>
 8006268:	2304      	movs	r3, #4
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e070      	b.n	8006350 <UART_SetConfig+0x348>
 800626e:	2308      	movs	r3, #8
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e06d      	b.n	8006350 <UART_SetConfig+0x348>
 8006274:	2310      	movs	r3, #16
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	e06a      	b.n	8006350 <UART_SetConfig+0x348>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <UART_SetConfig+0x2e4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d138      	bne.n	80062f6 <UART_SetConfig+0x2ee>
 8006284:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <UART_SetConfig+0x2cc>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800628e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006292:	d017      	beq.n	80062c4 <UART_SetConfig+0x2bc>
 8006294:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006298:	d82a      	bhi.n	80062f0 <UART_SetConfig+0x2e8>
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629e:	d00b      	beq.n	80062b8 <UART_SetConfig+0x2b0>
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062a4:	d824      	bhi.n	80062f0 <UART_SetConfig+0x2e8>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <UART_SetConfig+0x2aa>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ae:	d006      	beq.n	80062be <UART_SetConfig+0x2b6>
 80062b0:	e01e      	b.n	80062f0 <UART_SetConfig+0x2e8>
 80062b2:	2300      	movs	r3, #0
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e04b      	b.n	8006350 <UART_SetConfig+0x348>
 80062b8:	2302      	movs	r3, #2
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e048      	b.n	8006350 <UART_SetConfig+0x348>
 80062be:	2304      	movs	r3, #4
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e045      	b.n	8006350 <UART_SetConfig+0x348>
 80062c4:	2308      	movs	r3, #8
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e042      	b.n	8006350 <UART_SetConfig+0x348>
 80062ca:	bf00      	nop
 80062cc:	efff69f3 	.word	0xefff69f3
 80062d0:	40011000 	.word	0x40011000
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40004400 	.word	0x40004400
 80062dc:	40004800 	.word	0x40004800
 80062e0:	40004c00 	.word	0x40004c00
 80062e4:	40005000 	.word	0x40005000
 80062e8:	40011400 	.word	0x40011400
 80062ec:	40007800 	.word	0x40007800
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e02c      	b.n	8006350 <UART_SetConfig+0x348>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a72      	ldr	r2, [pc, #456]	@ (80064c4 <UART_SetConfig+0x4bc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d125      	bne.n	800634c <UART_SetConfig+0x344>
 8006300:	4b71      	ldr	r3, [pc, #452]	@ (80064c8 <UART_SetConfig+0x4c0>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800630a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800630e:	d017      	beq.n	8006340 <UART_SetConfig+0x338>
 8006310:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006314:	d817      	bhi.n	8006346 <UART_SetConfig+0x33e>
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631a:	d00b      	beq.n	8006334 <UART_SetConfig+0x32c>
 800631c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006320:	d811      	bhi.n	8006346 <UART_SetConfig+0x33e>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <UART_SetConfig+0x326>
 8006326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800632a:	d006      	beq.n	800633a <UART_SetConfig+0x332>
 800632c:	e00b      	b.n	8006346 <UART_SetConfig+0x33e>
 800632e:	2300      	movs	r3, #0
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e00d      	b.n	8006350 <UART_SetConfig+0x348>
 8006334:	2302      	movs	r3, #2
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e00a      	b.n	8006350 <UART_SetConfig+0x348>
 800633a:	2304      	movs	r3, #4
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e007      	b.n	8006350 <UART_SetConfig+0x348>
 8006340:	2308      	movs	r3, #8
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e004      	b.n	8006350 <UART_SetConfig+0x348>
 8006346:	2310      	movs	r3, #16
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e001      	b.n	8006350 <UART_SetConfig+0x348>
 800634c:	2310      	movs	r3, #16
 800634e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006358:	d15b      	bne.n	8006412 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d828      	bhi.n	80063b2 <UART_SetConfig+0x3aa>
 8006360:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <UART_SetConfig+0x360>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800638d 	.word	0x0800638d
 800636c:	08006395 	.word	0x08006395
 8006370:	0800639d 	.word	0x0800639d
 8006374:	080063b3 	.word	0x080063b3
 8006378:	080063a3 	.word	0x080063a3
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063b3 	.word	0x080063b3
 8006384:	080063b3 	.word	0x080063b3
 8006388:	080063ab 	.word	0x080063ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638c:	f7fd fcd4 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8006390:	61b8      	str	r0, [r7, #24]
        break;
 8006392:	e013      	b.n	80063bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006394:	f7fd fce4 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006398:	61b8      	str	r0, [r7, #24]
        break;
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800639c:	4b4b      	ldr	r3, [pc, #300]	@ (80064cc <UART_SetConfig+0x4c4>)
 800639e:	61bb      	str	r3, [r7, #24]
        break;
 80063a0:	e00c      	b.n	80063bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fd fbb7 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 80063a6:	61b8      	str	r0, [r7, #24]
        break;
 80063a8:	e008      	b.n	80063bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ae:	61bb      	str	r3, [r7, #24]
        break;
 80063b0:	e004      	b.n	80063bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	77bb      	strb	r3, [r7, #30]
        break;
 80063ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d074      	beq.n	80064ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	005a      	lsls	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	441a      	add	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b0f      	cmp	r3, #15
 80063dc:	d916      	bls.n	800640c <UART_SetConfig+0x404>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e4:	d212      	bcs.n	800640c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f023 030f 	bic.w	r3, r3, #15
 80063ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	89fb      	ldrh	r3, [r7, #14]
 80063fe:	4313      	orrs	r3, r2
 8006400:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	89fa      	ldrh	r2, [r7, #14]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e04f      	b.n	80064ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	77bb      	strb	r3, [r7, #30]
 8006410:	e04c      	b.n	80064ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006412:	7ffb      	ldrb	r3, [r7, #31]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d828      	bhi.n	800646a <UART_SetConfig+0x462>
 8006418:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x418>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006445 	.word	0x08006445
 8006424:	0800644d 	.word	0x0800644d
 8006428:	08006455 	.word	0x08006455
 800642c:	0800646b 	.word	0x0800646b
 8006430:	0800645b 	.word	0x0800645b
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800646b 	.word	0x0800646b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	08006463 	.word	0x08006463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fd fc78 	bl	8003d38 <HAL_RCC_GetPCLK1Freq>
 8006448:	61b8      	str	r0, [r7, #24]
        break;
 800644a:	e013      	b.n	8006474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800644c:	f7fd fc88 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006450:	61b8      	str	r0, [r7, #24]
        break;
 8006452:	e00f      	b.n	8006474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006454:	4b1d      	ldr	r3, [pc, #116]	@ (80064cc <UART_SetConfig+0x4c4>)
 8006456:	61bb      	str	r3, [r7, #24]
        break;
 8006458:	e00c      	b.n	8006474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645a:	f7fd fb5b 	bl	8003b14 <HAL_RCC_GetSysClockFreq>
 800645e:	61b8      	str	r0, [r7, #24]
        break;
 8006460:	e008      	b.n	8006474 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006466:	61bb      	str	r3, [r7, #24]
        break;
 8006468:	e004      	b.n	8006474 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	77bb      	strb	r3, [r7, #30]
        break;
 8006472:	bf00      	nop
    }

    if (pclk != 0U)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	085a      	lsrs	r2, r3, #1
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	441a      	add	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	fbb2 f3f3 	udiv	r3, r2, r3
 800648c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b0f      	cmp	r3, #15
 8006492:	d909      	bls.n	80064a8 <UART_SetConfig+0x4a0>
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800649a:	d205      	bcs.n	80064a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60da      	str	r2, [r3, #12]
 80064a6:	e001      	b.n	80064ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40007c00 	.word	0x40007c00
 80064c8:	40023800 	.word	0x40023800
 80064cc:	00f42400 	.word	0x00f42400

080064d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00a      	beq.n	800653e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ce:	d10a      	bne.n	80065e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b098      	sub	sp, #96	@ 0x60
 8006618:	af02      	add	r7, sp, #8
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006624:	f7fb fa08 	bl	8001a38 <HAL_GetTick>
 8006628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b08      	cmp	r3, #8
 8006636:	d12e      	bne.n	8006696 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006640:	2200      	movs	r2, #0
 8006642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f88c 	bl	8006764 <UART_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d021      	beq.n	8006696 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	461a      	mov	r2, r3
 800666e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006670:	647b      	str	r3, [r7, #68]	@ 0x44
 8006672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800667e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e6      	bne.n	8006652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2220      	movs	r2, #32
 8006688:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e062      	b.n	800675c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d149      	bne.n	8006738 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ac:	2200      	movs	r2, #0
 80066ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f856 	bl	8006764 <UART_WaitOnFlagUntilTimeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d03c      	beq.n	8006738 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	623b      	str	r3, [r7, #32]
   return(result);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3308      	adds	r3, #8
 800670e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006710:	61fa      	str	r2, [r7, #28]
 8006712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69b9      	ldr	r1, [r7, #24]
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	617b      	str	r3, [r7, #20]
   return(result);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e011      	b.n	800675c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3758      	adds	r7, #88	@ 0x58
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006774:	e04f      	b.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677c:	d04b      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800677e:	f7fb f95b 	bl	8001a38 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	429a      	cmp	r2, r3
 800678c:	d302      	bcc.n	8006794 <UART_WaitOnFlagUntilTimeout+0x30>
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e04e      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d037      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b80      	cmp	r3, #128	@ 0x80
 80067aa:	d034      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b40      	cmp	r3, #64	@ 0x40
 80067b0:	d031      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d110      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2208      	movs	r2, #8
 80067c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f838 	bl	800683e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2208      	movs	r2, #8
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e029      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f0:	d111      	bne.n	8006816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f81e 	bl	800683e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e00f      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d0a0      	beq.n	8006776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683e:	b480      	push	{r7}
 8006840:	b095      	sub	sp, #84	@ 0x54
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006864:	643b      	str	r3, [r7, #64]	@ 0x40
 8006866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800686a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800689a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d118      	bne.n	80068e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f023 0310 	bic.w	r3, r3, #16
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	613b      	str	r3, [r7, #16]
   return(result);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068fa:	bf00      	nop
 80068fc:	3754      	adds	r7, #84	@ 0x54
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fb4f 	bl	8005fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	60bb      	str	r3, [r7, #8]
   return(result);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6979      	ldr	r1, [r7, #20]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	613b      	str	r3, [r7, #16]
   return(result);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e6      	bne.n	800693a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fb1b 	bl	8005fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697e:	bf00      	nop
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006988:	b084      	sub	sp, #16
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	f107 001c 	add.w	r0, r7, #28
 8006996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800699a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d121      	bne.n	80069e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	4b21      	ldr	r3, [pc, #132]	@ (8006a38 <USB_CoreInit+0xb0>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d105      	bne.n	80069da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa92 	bl	8006f04 <USB_CoreReset>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e010      	b.n	8006a08 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa86 	bl	8006f04 <USB_CoreReset>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a08:	7fbb      	ldrb	r3, [r7, #30]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d10b      	bne.n	8006a26 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f043 0206 	orr.w	r2, r3, #6
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a32:	b004      	add	sp, #16
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	ffbdffbf 	.word	0xffbdffbf

08006a3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 0201 	bic.w	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a7a:	78fb      	ldrb	r3, [r7, #3]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d115      	bne.n	8006aac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a8c:	200a      	movs	r0, #10
 8006a8e:	f7fa ffdf 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	330a      	adds	r3, #10
 8006a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa25 	bl	8006ee8 <USB_GetMode>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d01e      	beq.n	8006ae2 <USB_SetCurrentMode+0x84>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006aa8:	d9f0      	bls.n	8006a8c <USB_SetCurrentMode+0x2e>
 8006aaa:	e01a      	b.n	8006ae2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d115      	bne.n	8006ade <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006abe:	200a      	movs	r0, #10
 8006ac0:	f7fa ffc6 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	330a      	adds	r3, #10
 8006ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa0c 	bl	8006ee8 <USB_GetMode>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <USB_SetCurrentMode+0x84>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ada:	d9f0      	bls.n	8006abe <USB_SetCurrentMode+0x60>
 8006adc:	e001      	b.n	8006ae2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e005      	b.n	8006aee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ae6:	d101      	bne.n	8006aec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af8:	b084      	sub	sp, #16
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
 8006b16:	e009      	b.n	8006b2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3340      	adds	r3, #64	@ 0x40
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b0e      	cmp	r3, #14
 8006b30:	d9f2      	bls.n	8006b18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11c      	bne.n	8006b74 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b48:	f043 0302 	orr.w	r3, r3, #2
 8006b4c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e005      	b.n	8006b80 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10d      	bne.n	8006bb0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f968 	bl	8006e74 <USB_SetDevSpeed>
 8006ba4:	e008      	b.n	8006bb8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f963 	bl	8006e74 <USB_SetDevSpeed>
 8006bae:	e003      	b.n	8006bb8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bb0:	2103      	movs	r1, #3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f95e 	bl	8006e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb8:	2110      	movs	r1, #16
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f8fa 	bl	8006db4 <USB_FlushTxFifo>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f924 	bl	8006e18 <USB_FlushRxFifo>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	461a      	mov	r2, r3
 8006be2:	2300      	movs	r3, #0
 8006be4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bec:	461a      	mov	r2, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	e043      	b.n	8006c8c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c1a:	d118      	bne.n	8006c4e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e013      	b.n	8006c60 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c44:	461a      	mov	r2, r3
 8006c46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e008      	b.n	8006c60 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c90:	461a      	mov	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d3b5      	bcc.n	8006c04 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	e043      	b.n	8006d26 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb4:	d118      	bne.n	8006ce8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	e013      	b.n	8006cfa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cde:	461a      	mov	r2, r3
 8006ce0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e008      	b.n	8006cfa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3301      	adds	r3, #1
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d3b5      	bcc.n	8006c9e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699a      	ldr	r2, [r3, #24]
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <USB_DevInit+0x2b4>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f043 0208 	orr.w	r2, r3, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d105      	bne.n	8006d9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <USB_DevInit+0x2b8>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da8:	b004      	add	sp, #16
 8006daa:	4770      	bx	lr
 8006dac:	803c3800 	.word	0x803c3800
 8006db0:	40000004 	.word	0x40000004

08006db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dce:	d901      	bls.n	8006dd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e01b      	b.n	8006e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	daf2      	bge.n	8006dc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	019b      	lsls	r3, r3, #6
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df8:	d901      	bls.n	8006dfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d0f0      	beq.n	8006dec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e30:	d901      	bls.n	8006e36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e018      	b.n	8006e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	daf2      	bge.n	8006e24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2210      	movs	r2, #16
 8006e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e54:	d901      	bls.n	8006e5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e006      	b.n	8006e68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d0f0      	beq.n	8006e48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3301      	adds	r3, #1
 8006f14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f1c:	d901      	bls.n	8006f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e01b      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	daf2      	bge.n	8006f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f46:	d901      	bls.n	8006f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e006      	b.n	8006f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d0f0      	beq.n	8006f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <__cvt>:
 8006f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f68:	ed2d 8b02 	vpush	{d8}
 8006f6c:	eeb0 8b40 	vmov.f64	d8, d0
 8006f70:	b085      	sub	sp, #20
 8006f72:	4617      	mov	r7, r2
 8006f74:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f78:	ee18 2a90 	vmov	r2, s17
 8006f7c:	f025 0520 	bic.w	r5, r5, #32
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	bfb6      	itet	lt
 8006f84:	222d      	movlt	r2, #45	@ 0x2d
 8006f86:	2200      	movge	r2, #0
 8006f88:	eeb1 8b40 	vneglt.f64	d8, d0
 8006f8c:	2d46      	cmp	r5, #70	@ 0x46
 8006f8e:	460c      	mov	r4, r1
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	d004      	beq.n	8006f9e <__cvt+0x38>
 8006f94:	2d45      	cmp	r5, #69	@ 0x45
 8006f96:	d100      	bne.n	8006f9a <__cvt+0x34>
 8006f98:	3401      	adds	r4, #1
 8006f9a:	2102      	movs	r1, #2
 8006f9c:	e000      	b.n	8006fa0 <__cvt+0x3a>
 8006f9e:	2103      	movs	r1, #3
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	ab02      	add	r3, sp, #8
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4622      	mov	r2, r4
 8006faa:	4633      	mov	r3, r6
 8006fac:	eeb0 0b48 	vmov.f64	d0, d8
 8006fb0:	f000 fdb6 	bl	8007b20 <_dtoa_r>
 8006fb4:	2d47      	cmp	r5, #71	@ 0x47
 8006fb6:	d114      	bne.n	8006fe2 <__cvt+0x7c>
 8006fb8:	07fb      	lsls	r3, r7, #31
 8006fba:	d50a      	bpl.n	8006fd2 <__cvt+0x6c>
 8006fbc:	1902      	adds	r2, r0, r4
 8006fbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc6:	bf08      	it	eq
 8006fc8:	9203      	streq	r2, [sp, #12]
 8006fca:	2130      	movs	r1, #48	@ 0x30
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d319      	bcc.n	8007006 <__cvt+0xa0>
 8006fd2:	9b03      	ldr	r3, [sp, #12]
 8006fd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fd6:	1a1b      	subs	r3, r3, r0
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	b005      	add	sp, #20
 8006fdc:	ecbd 8b02 	vpop	{d8}
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe2:	2d46      	cmp	r5, #70	@ 0x46
 8006fe4:	eb00 0204 	add.w	r2, r0, r4
 8006fe8:	d1e9      	bne.n	8006fbe <__cvt+0x58>
 8006fea:	7803      	ldrb	r3, [r0, #0]
 8006fec:	2b30      	cmp	r3, #48	@ 0x30
 8006fee:	d107      	bne.n	8007000 <__cvt+0x9a>
 8006ff0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	bf1c      	itt	ne
 8006ffa:	f1c4 0401 	rsbne	r4, r4, #1
 8006ffe:	6034      	strne	r4, [r6, #0]
 8007000:	6833      	ldr	r3, [r6, #0]
 8007002:	441a      	add	r2, r3
 8007004:	e7db      	b.n	8006fbe <__cvt+0x58>
 8007006:	1c5c      	adds	r4, r3, #1
 8007008:	9403      	str	r4, [sp, #12]
 800700a:	7019      	strb	r1, [r3, #0]
 800700c:	e7de      	b.n	8006fcc <__cvt+0x66>

0800700e <__exponent>:
 800700e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007010:	2900      	cmp	r1, #0
 8007012:	bfba      	itte	lt
 8007014:	4249      	neglt	r1, r1
 8007016:	232d      	movlt	r3, #45	@ 0x2d
 8007018:	232b      	movge	r3, #43	@ 0x2b
 800701a:	2909      	cmp	r1, #9
 800701c:	7002      	strb	r2, [r0, #0]
 800701e:	7043      	strb	r3, [r0, #1]
 8007020:	dd29      	ble.n	8007076 <__exponent+0x68>
 8007022:	f10d 0307 	add.w	r3, sp, #7
 8007026:	461d      	mov	r5, r3
 8007028:	270a      	movs	r7, #10
 800702a:	461a      	mov	r2, r3
 800702c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007030:	fb07 1416 	mls	r4, r7, r6, r1
 8007034:	3430      	adds	r4, #48	@ 0x30
 8007036:	f802 4c01 	strb.w	r4, [r2, #-1]
 800703a:	460c      	mov	r4, r1
 800703c:	2c63      	cmp	r4, #99	@ 0x63
 800703e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007042:	4631      	mov	r1, r6
 8007044:	dcf1      	bgt.n	800702a <__exponent+0x1c>
 8007046:	3130      	adds	r1, #48	@ 0x30
 8007048:	1e94      	subs	r4, r2, #2
 800704a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800704e:	1c41      	adds	r1, r0, #1
 8007050:	4623      	mov	r3, r4
 8007052:	42ab      	cmp	r3, r5
 8007054:	d30a      	bcc.n	800706c <__exponent+0x5e>
 8007056:	f10d 0309 	add.w	r3, sp, #9
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	42ac      	cmp	r4, r5
 800705e:	bf88      	it	hi
 8007060:	2300      	movhi	r3, #0
 8007062:	3302      	adds	r3, #2
 8007064:	4403      	add	r3, r0
 8007066:	1a18      	subs	r0, r3, r0
 8007068:	b003      	add	sp, #12
 800706a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007070:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007074:	e7ed      	b.n	8007052 <__exponent+0x44>
 8007076:	2330      	movs	r3, #48	@ 0x30
 8007078:	3130      	adds	r1, #48	@ 0x30
 800707a:	7083      	strb	r3, [r0, #2]
 800707c:	70c1      	strb	r1, [r0, #3]
 800707e:	1d03      	adds	r3, r0, #4
 8007080:	e7f1      	b.n	8007066 <__exponent+0x58>
 8007082:	0000      	movs	r0, r0
 8007084:	0000      	movs	r0, r0
	...

08007088 <_printf_float>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	b08d      	sub	sp, #52	@ 0x34
 800708e:	460c      	mov	r4, r1
 8007090:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007094:	4616      	mov	r6, r2
 8007096:	461f      	mov	r7, r3
 8007098:	4605      	mov	r5, r0
 800709a:	f000 fc87 	bl	80079ac <_localeconv_r>
 800709e:	f8d0 b000 	ldr.w	fp, [r0]
 80070a2:	4658      	mov	r0, fp
 80070a4:	f7f9 f91c 	bl	80002e0 <strlen>
 80070a8:	2300      	movs	r3, #0
 80070aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ac:	f8d8 3000 	ldr.w	r3, [r8]
 80070b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	9005      	str	r0, [sp, #20]
 80070b8:	3307      	adds	r3, #7
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	f103 0108 	add.w	r1, r3, #8
 80070c2:	f8c8 1000 	str.w	r1, [r8]
 80070c6:	ed93 0b00 	vldr	d0, [r3]
 80070ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007328 <_printf_float+0x2a0>
 80070ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80070d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80070de:	dd24      	ble.n	800712a <_printf_float+0xa2>
 80070e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80070e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e8:	d502      	bpl.n	80070f0 <_printf_float+0x68>
 80070ea:	232d      	movs	r3, #45	@ 0x2d
 80070ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f0:	498f      	ldr	r1, [pc, #572]	@ (8007330 <_printf_float+0x2a8>)
 80070f2:	4b90      	ldr	r3, [pc, #576]	@ (8007334 <_printf_float+0x2ac>)
 80070f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80070f8:	bf94      	ite	ls
 80070fa:	4688      	movls	r8, r1
 80070fc:	4698      	movhi	r8, r3
 80070fe:	f022 0204 	bic.w	r2, r2, #4
 8007102:	2303      	movs	r3, #3
 8007104:	6123      	str	r3, [r4, #16]
 8007106:	6022      	str	r2, [r4, #0]
 8007108:	f04f 0a00 	mov.w	sl, #0
 800710c:	9700      	str	r7, [sp, #0]
 800710e:	4633      	mov	r3, r6
 8007110:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007112:	4621      	mov	r1, r4
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f9d1 	bl	80074bc <_printf_common>
 800711a:	3001      	adds	r0, #1
 800711c:	f040 8089 	bne.w	8007232 <_printf_float+0x1aa>
 8007120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007124:	b00d      	add	sp, #52	@ 0x34
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	eeb4 0b40 	vcmp.f64	d0, d0
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	d709      	bvc.n	8007148 <_printf_float+0xc0>
 8007134:	ee10 3a90 	vmov	r3, s1
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfbc      	itt	lt
 800713c:	232d      	movlt	r3, #45	@ 0x2d
 800713e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007142:	497d      	ldr	r1, [pc, #500]	@ (8007338 <_printf_float+0x2b0>)
 8007144:	4b7d      	ldr	r3, [pc, #500]	@ (800733c <_printf_float+0x2b4>)
 8007146:	e7d5      	b.n	80070f4 <_printf_float+0x6c>
 8007148:	6863      	ldr	r3, [r4, #4]
 800714a:	1c59      	adds	r1, r3, #1
 800714c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007150:	d139      	bne.n	80071c6 <_printf_float+0x13e>
 8007152:	2306      	movs	r3, #6
 8007154:	6063      	str	r3, [r4, #4]
 8007156:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800715a:	2300      	movs	r3, #0
 800715c:	6022      	str	r2, [r4, #0]
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	ab0a      	add	r3, sp, #40	@ 0x28
 8007162:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007166:	ab09      	add	r3, sp, #36	@ 0x24
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	6861      	ldr	r1, [r4, #4]
 800716c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007170:	4628      	mov	r0, r5
 8007172:	f7ff fef8 	bl	8006f66 <__cvt>
 8007176:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800717a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800717c:	4680      	mov	r8, r0
 800717e:	d129      	bne.n	80071d4 <_printf_float+0x14c>
 8007180:	1cc8      	adds	r0, r1, #3
 8007182:	db02      	blt.n	800718a <_printf_float+0x102>
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	4299      	cmp	r1, r3
 8007188:	dd41      	ble.n	800720e <_printf_float+0x186>
 800718a:	f1a9 0902 	sub.w	r9, r9, #2
 800718e:	fa5f f989 	uxtb.w	r9, r9
 8007192:	3901      	subs	r1, #1
 8007194:	464a      	mov	r2, r9
 8007196:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800719a:	9109      	str	r1, [sp, #36]	@ 0x24
 800719c:	f7ff ff37 	bl	800700e <__exponent>
 80071a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a2:	1813      	adds	r3, r2, r0
 80071a4:	2a01      	cmp	r2, #1
 80071a6:	4682      	mov	sl, r0
 80071a8:	6123      	str	r3, [r4, #16]
 80071aa:	dc02      	bgt.n	80071b2 <_printf_float+0x12a>
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	07d2      	lsls	r2, r2, #31
 80071b0:	d501      	bpl.n	80071b6 <_printf_float+0x12e>
 80071b2:	3301      	adds	r3, #1
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0a6      	beq.n	800710c <_printf_float+0x84>
 80071be:	232d      	movs	r3, #45	@ 0x2d
 80071c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c4:	e7a2      	b.n	800710c <_printf_float+0x84>
 80071c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071ca:	d1c4      	bne.n	8007156 <_printf_float+0xce>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1c2      	bne.n	8007156 <_printf_float+0xce>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e7bf      	b.n	8007154 <_printf_float+0xcc>
 80071d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80071d8:	d9db      	bls.n	8007192 <_printf_float+0x10a>
 80071da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80071de:	d118      	bne.n	8007212 <_printf_float+0x18a>
 80071e0:	2900      	cmp	r1, #0
 80071e2:	6863      	ldr	r3, [r4, #4]
 80071e4:	dd0b      	ble.n	80071fe <_printf_float+0x176>
 80071e6:	6121      	str	r1, [r4, #16]
 80071e8:	b913      	cbnz	r3, 80071f0 <_printf_float+0x168>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	07d0      	lsls	r0, r2, #31
 80071ee:	d502      	bpl.n	80071f6 <_printf_float+0x16e>
 80071f0:	3301      	adds	r3, #1
 80071f2:	440b      	add	r3, r1
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071f8:	f04f 0a00 	mov.w	sl, #0
 80071fc:	e7db      	b.n	80071b6 <_printf_float+0x12e>
 80071fe:	b913      	cbnz	r3, 8007206 <_printf_float+0x17e>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	07d2      	lsls	r2, r2, #31
 8007204:	d501      	bpl.n	800720a <_printf_float+0x182>
 8007206:	3302      	adds	r3, #2
 8007208:	e7f4      	b.n	80071f4 <_printf_float+0x16c>
 800720a:	2301      	movs	r3, #1
 800720c:	e7f2      	b.n	80071f4 <_printf_float+0x16c>
 800720e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007214:	4299      	cmp	r1, r3
 8007216:	db05      	blt.n	8007224 <_printf_float+0x19c>
 8007218:	6823      	ldr	r3, [r4, #0]
 800721a:	6121      	str	r1, [r4, #16]
 800721c:	07d8      	lsls	r0, r3, #31
 800721e:	d5ea      	bpl.n	80071f6 <_printf_float+0x16e>
 8007220:	1c4b      	adds	r3, r1, #1
 8007222:	e7e7      	b.n	80071f4 <_printf_float+0x16c>
 8007224:	2900      	cmp	r1, #0
 8007226:	bfd4      	ite	le
 8007228:	f1c1 0202 	rsble	r2, r1, #2
 800722c:	2201      	movgt	r2, #1
 800722e:	4413      	add	r3, r2
 8007230:	e7e0      	b.n	80071f4 <_printf_float+0x16c>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	055a      	lsls	r2, r3, #21
 8007236:	d407      	bmi.n	8007248 <_printf_float+0x1c0>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	4642      	mov	r2, r8
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	d12a      	bne.n	800729c <_printf_float+0x214>
 8007246:	e76b      	b.n	8007120 <_printf_float+0x98>
 8007248:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800724c:	f240 80e0 	bls.w	8007410 <_printf_float+0x388>
 8007250:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007254:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d133      	bne.n	80072c6 <_printf_float+0x23e>
 800725e:	4a38      	ldr	r2, [pc, #224]	@ (8007340 <_printf_float+0x2b8>)
 8007260:	2301      	movs	r3, #1
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	47b8      	blx	r7
 8007268:	3001      	adds	r0, #1
 800726a:	f43f af59 	beq.w	8007120 <_printf_float+0x98>
 800726e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007272:	4543      	cmp	r3, r8
 8007274:	db02      	blt.n	800727c <_printf_float+0x1f4>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	07d8      	lsls	r0, r3, #31
 800727a:	d50f      	bpl.n	800729c <_printf_float+0x214>
 800727c:	9b05      	ldr	r3, [sp, #20]
 800727e:	465a      	mov	r2, fp
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af4a 	beq.w	8007120 <_printf_float+0x98>
 800728c:	f04f 0900 	mov.w	r9, #0
 8007290:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007294:	f104 0a1a 	add.w	sl, r4, #26
 8007298:	45c8      	cmp	r8, r9
 800729a:	dc09      	bgt.n	80072b0 <_printf_float+0x228>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	079b      	lsls	r3, r3, #30
 80072a0:	f100 8107 	bmi.w	80074b2 <_printf_float+0x42a>
 80072a4:	68e0      	ldr	r0, [r4, #12]
 80072a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072a8:	4298      	cmp	r0, r3
 80072aa:	bfb8      	it	lt
 80072ac:	4618      	movlt	r0, r3
 80072ae:	e739      	b.n	8007124 <_printf_float+0x9c>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4652      	mov	r2, sl
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f af30 	beq.w	8007120 <_printf_float+0x98>
 80072c0:	f109 0901 	add.w	r9, r9, #1
 80072c4:	e7e8      	b.n	8007298 <_printf_float+0x210>
 80072c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dc3b      	bgt.n	8007344 <_printf_float+0x2bc>
 80072cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007340 <_printf_float+0x2b8>)
 80072ce:	2301      	movs	r3, #1
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f af22 	beq.w	8007120 <_printf_float+0x98>
 80072dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072e0:	ea59 0303 	orrs.w	r3, r9, r3
 80072e4:	d102      	bne.n	80072ec <_printf_float+0x264>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	07d9      	lsls	r1, r3, #31
 80072ea:	d5d7      	bpl.n	800729c <_printf_float+0x214>
 80072ec:	9b05      	ldr	r3, [sp, #20]
 80072ee:	465a      	mov	r2, fp
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	f43f af12 	beq.w	8007120 <_printf_float+0x98>
 80072fc:	f04f 0a00 	mov.w	sl, #0
 8007300:	f104 0b1a 	add.w	fp, r4, #26
 8007304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007306:	425b      	negs	r3, r3
 8007308:	4553      	cmp	r3, sl
 800730a:	dc01      	bgt.n	8007310 <_printf_float+0x288>
 800730c:	464b      	mov	r3, r9
 800730e:	e794      	b.n	800723a <_printf_float+0x1b2>
 8007310:	2301      	movs	r3, #1
 8007312:	465a      	mov	r2, fp
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af00 	beq.w	8007120 <_printf_float+0x98>
 8007320:	f10a 0a01 	add.w	sl, sl, #1
 8007324:	e7ee      	b.n	8007304 <_printf_float+0x27c>
 8007326:	bf00      	nop
 8007328:	ffffffff 	.word	0xffffffff
 800732c:	7fefffff 	.word	0x7fefffff
 8007330:	08009b70 	.word	0x08009b70
 8007334:	08009b74 	.word	0x08009b74
 8007338:	08009b78 	.word	0x08009b78
 800733c:	08009b7c 	.word	0x08009b7c
 8007340:	08009b80 	.word	0x08009b80
 8007344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800734a:	4553      	cmp	r3, sl
 800734c:	bfa8      	it	ge
 800734e:	4653      	movge	r3, sl
 8007350:	2b00      	cmp	r3, #0
 8007352:	4699      	mov	r9, r3
 8007354:	dc37      	bgt.n	80073c6 <_printf_float+0x33e>
 8007356:	2300      	movs	r3, #0
 8007358:	9307      	str	r3, [sp, #28]
 800735a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800735e:	f104 021a 	add.w	r2, r4, #26
 8007362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007364:	9907      	ldr	r1, [sp, #28]
 8007366:	9306      	str	r3, [sp, #24]
 8007368:	eba3 0309 	sub.w	r3, r3, r9
 800736c:	428b      	cmp	r3, r1
 800736e:	dc31      	bgt.n	80073d4 <_printf_float+0x34c>
 8007370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007372:	459a      	cmp	sl, r3
 8007374:	dc3b      	bgt.n	80073ee <_printf_float+0x366>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	07da      	lsls	r2, r3, #31
 800737a:	d438      	bmi.n	80073ee <_printf_float+0x366>
 800737c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737e:	ebaa 0903 	sub.w	r9, sl, r3
 8007382:	9b06      	ldr	r3, [sp, #24]
 8007384:	ebaa 0303 	sub.w	r3, sl, r3
 8007388:	4599      	cmp	r9, r3
 800738a:	bfa8      	it	ge
 800738c:	4699      	movge	r9, r3
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	dc34      	bgt.n	80073fe <_printf_float+0x376>
 8007394:	f04f 0800 	mov.w	r8, #0
 8007398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800739c:	f104 0b1a 	add.w	fp, r4, #26
 80073a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a2:	ebaa 0303 	sub.w	r3, sl, r3
 80073a6:	eba3 0309 	sub.w	r3, r3, r9
 80073aa:	4543      	cmp	r3, r8
 80073ac:	f77f af76 	ble.w	800729c <_printf_float+0x214>
 80073b0:	2301      	movs	r3, #1
 80073b2:	465a      	mov	r2, fp
 80073b4:	4631      	mov	r1, r6
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b8      	blx	r7
 80073ba:	3001      	adds	r0, #1
 80073bc:	f43f aeb0 	beq.w	8007120 <_printf_float+0x98>
 80073c0:	f108 0801 	add.w	r8, r8, #1
 80073c4:	e7ec      	b.n	80073a0 <_printf_float+0x318>
 80073c6:	4642      	mov	r2, r8
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	d1c1      	bne.n	8007356 <_printf_float+0x2ce>
 80073d2:	e6a5      	b.n	8007120 <_printf_float+0x98>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	9206      	str	r2, [sp, #24]
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f ae9e 	beq.w	8007120 <_printf_float+0x98>
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	9a06      	ldr	r2, [sp, #24]
 80073e8:	3301      	adds	r3, #1
 80073ea:	9307      	str	r3, [sp, #28]
 80073ec:	e7b9      	b.n	8007362 <_printf_float+0x2da>
 80073ee:	9b05      	ldr	r3, [sp, #20]
 80073f0:	465a      	mov	r2, fp
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	d1bf      	bne.n	800737c <_printf_float+0x2f4>
 80073fc:	e690      	b.n	8007120 <_printf_float+0x98>
 80073fe:	9a06      	ldr	r2, [sp, #24]
 8007400:	464b      	mov	r3, r9
 8007402:	4442      	add	r2, r8
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	d1c2      	bne.n	8007394 <_printf_float+0x30c>
 800740e:	e687      	b.n	8007120 <_printf_float+0x98>
 8007410:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007414:	f1b9 0f01 	cmp.w	r9, #1
 8007418:	dc01      	bgt.n	800741e <_printf_float+0x396>
 800741a:	07db      	lsls	r3, r3, #31
 800741c:	d536      	bpl.n	800748c <_printf_float+0x404>
 800741e:	2301      	movs	r3, #1
 8007420:	4642      	mov	r2, r8
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae79 	beq.w	8007120 <_printf_float+0x98>
 800742e:	9b05      	ldr	r3, [sp, #20]
 8007430:	465a      	mov	r2, fp
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f ae71 	beq.w	8007120 <_printf_float+0x98>
 800743e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800744e:	d018      	beq.n	8007482 <_printf_float+0x3fa>
 8007450:	464b      	mov	r3, r9
 8007452:	f108 0201 	add.w	r2, r8, #1
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	d10c      	bne.n	800747a <_printf_float+0x3f2>
 8007460:	e65e      	b.n	8007120 <_printf_float+0x98>
 8007462:	2301      	movs	r3, #1
 8007464:	465a      	mov	r2, fp
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	47b8      	blx	r7
 800746c:	3001      	adds	r0, #1
 800746e:	f43f ae57 	beq.w	8007120 <_printf_float+0x98>
 8007472:	f108 0801 	add.w	r8, r8, #1
 8007476:	45c8      	cmp	r8, r9
 8007478:	dbf3      	blt.n	8007462 <_printf_float+0x3da>
 800747a:	4653      	mov	r3, sl
 800747c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007480:	e6dc      	b.n	800723c <_printf_float+0x1b4>
 8007482:	f04f 0800 	mov.w	r8, #0
 8007486:	f104 0b1a 	add.w	fp, r4, #26
 800748a:	e7f4      	b.n	8007476 <_printf_float+0x3ee>
 800748c:	2301      	movs	r3, #1
 800748e:	4642      	mov	r2, r8
 8007490:	e7e1      	b.n	8007456 <_printf_float+0x3ce>
 8007492:	2301      	movs	r3, #1
 8007494:	464a      	mov	r2, r9
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae3f 	beq.w	8007120 <_printf_float+0x98>
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074aa:	1a5b      	subs	r3, r3, r1
 80074ac:	4543      	cmp	r3, r8
 80074ae:	dcf0      	bgt.n	8007492 <_printf_float+0x40a>
 80074b0:	e6f8      	b.n	80072a4 <_printf_float+0x21c>
 80074b2:	f04f 0800 	mov.w	r8, #0
 80074b6:	f104 0919 	add.w	r9, r4, #25
 80074ba:	e7f4      	b.n	80074a6 <_printf_float+0x41e>

080074bc <_printf_common>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	4616      	mov	r6, r2
 80074c2:	4698      	mov	r8, r3
 80074c4:	688a      	ldr	r2, [r1, #8]
 80074c6:	690b      	ldr	r3, [r1, #16]
 80074c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	bfb8      	it	lt
 80074d0:	4613      	movlt	r3, r2
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074d8:	4607      	mov	r7, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	b10a      	cbz	r2, 80074e2 <_printf_common+0x26>
 80074de:	3301      	adds	r3, #1
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	0699      	lsls	r1, r3, #26
 80074e6:	bf42      	ittt	mi
 80074e8:	6833      	ldrmi	r3, [r6, #0]
 80074ea:	3302      	addmi	r3, #2
 80074ec:	6033      	strmi	r3, [r6, #0]
 80074ee:	6825      	ldr	r5, [r4, #0]
 80074f0:	f015 0506 	ands.w	r5, r5, #6
 80074f4:	d106      	bne.n	8007504 <_printf_common+0x48>
 80074f6:	f104 0a19 	add.w	sl, r4, #25
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	6832      	ldr	r2, [r6, #0]
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	42ab      	cmp	r3, r5
 8007502:	dc26      	bgt.n	8007552 <_printf_common+0x96>
 8007504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	3b00      	subs	r3, #0
 800750c:	bf18      	it	ne
 800750e:	2301      	movne	r3, #1
 8007510:	0692      	lsls	r2, r2, #26
 8007512:	d42b      	bmi.n	800756c <_printf_common+0xb0>
 8007514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007518:	4641      	mov	r1, r8
 800751a:	4638      	mov	r0, r7
 800751c:	47c8      	blx	r9
 800751e:	3001      	adds	r0, #1
 8007520:	d01e      	beq.n	8007560 <_printf_common+0xa4>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	f003 0306 	and.w	r3, r3, #6
 800752a:	2b04      	cmp	r3, #4
 800752c:	bf02      	ittt	eq
 800752e:	68e5      	ldreq	r5, [r4, #12]
 8007530:	6833      	ldreq	r3, [r6, #0]
 8007532:	1aed      	subeq	r5, r5, r3
 8007534:	68a3      	ldr	r3, [r4, #8]
 8007536:	bf0c      	ite	eq
 8007538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800753c:	2500      	movne	r5, #0
 800753e:	4293      	cmp	r3, r2
 8007540:	bfc4      	itt	gt
 8007542:	1a9b      	subgt	r3, r3, r2
 8007544:	18ed      	addgt	r5, r5, r3
 8007546:	2600      	movs	r6, #0
 8007548:	341a      	adds	r4, #26
 800754a:	42b5      	cmp	r5, r6
 800754c:	d11a      	bne.n	8007584 <_printf_common+0xc8>
 800754e:	2000      	movs	r0, #0
 8007550:	e008      	b.n	8007564 <_printf_common+0xa8>
 8007552:	2301      	movs	r3, #1
 8007554:	4652      	mov	r2, sl
 8007556:	4641      	mov	r1, r8
 8007558:	4638      	mov	r0, r7
 800755a:	47c8      	blx	r9
 800755c:	3001      	adds	r0, #1
 800755e:	d103      	bne.n	8007568 <_printf_common+0xac>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	3501      	adds	r5, #1
 800756a:	e7c6      	b.n	80074fa <_printf_common+0x3e>
 800756c:	18e1      	adds	r1, r4, r3
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	2030      	movs	r0, #48	@ 0x30
 8007572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007576:	4422      	add	r2, r4
 8007578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800757c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007580:	3302      	adds	r3, #2
 8007582:	e7c7      	b.n	8007514 <_printf_common+0x58>
 8007584:	2301      	movs	r3, #1
 8007586:	4622      	mov	r2, r4
 8007588:	4641      	mov	r1, r8
 800758a:	4638      	mov	r0, r7
 800758c:	47c8      	blx	r9
 800758e:	3001      	adds	r0, #1
 8007590:	d0e6      	beq.n	8007560 <_printf_common+0xa4>
 8007592:	3601      	adds	r6, #1
 8007594:	e7d9      	b.n	800754a <_printf_common+0x8e>
	...

08007598 <_printf_i>:
 8007598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	7e0f      	ldrb	r7, [r1, #24]
 800759e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075a0:	2f78      	cmp	r7, #120	@ 0x78
 80075a2:	4691      	mov	r9, r2
 80075a4:	4680      	mov	r8, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	469a      	mov	sl, r3
 80075aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075ae:	d807      	bhi.n	80075c0 <_printf_i+0x28>
 80075b0:	2f62      	cmp	r7, #98	@ 0x62
 80075b2:	d80a      	bhi.n	80075ca <_printf_i+0x32>
 80075b4:	2f00      	cmp	r7, #0
 80075b6:	f000 80d2 	beq.w	800775e <_printf_i+0x1c6>
 80075ba:	2f58      	cmp	r7, #88	@ 0x58
 80075bc:	f000 80b9 	beq.w	8007732 <_printf_i+0x19a>
 80075c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075c8:	e03a      	b.n	8007640 <_printf_i+0xa8>
 80075ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ce:	2b15      	cmp	r3, #21
 80075d0:	d8f6      	bhi.n	80075c0 <_printf_i+0x28>
 80075d2:	a101      	add	r1, pc, #4	@ (adr r1, 80075d8 <_printf_i+0x40>)
 80075d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d8:	08007631 	.word	0x08007631
 80075dc:	08007645 	.word	0x08007645
 80075e0:	080075c1 	.word	0x080075c1
 80075e4:	080075c1 	.word	0x080075c1
 80075e8:	080075c1 	.word	0x080075c1
 80075ec:	080075c1 	.word	0x080075c1
 80075f0:	08007645 	.word	0x08007645
 80075f4:	080075c1 	.word	0x080075c1
 80075f8:	080075c1 	.word	0x080075c1
 80075fc:	080075c1 	.word	0x080075c1
 8007600:	080075c1 	.word	0x080075c1
 8007604:	08007745 	.word	0x08007745
 8007608:	0800766f 	.word	0x0800766f
 800760c:	080076ff 	.word	0x080076ff
 8007610:	080075c1 	.word	0x080075c1
 8007614:	080075c1 	.word	0x080075c1
 8007618:	08007767 	.word	0x08007767
 800761c:	080075c1 	.word	0x080075c1
 8007620:	0800766f 	.word	0x0800766f
 8007624:	080075c1 	.word	0x080075c1
 8007628:	080075c1 	.word	0x080075c1
 800762c:	08007707 	.word	0x08007707
 8007630:	6833      	ldr	r3, [r6, #0]
 8007632:	1d1a      	adds	r2, r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6032      	str	r2, [r6, #0]
 8007638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800763c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007640:	2301      	movs	r3, #1
 8007642:	e09d      	b.n	8007780 <_printf_i+0x1e8>
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	6820      	ldr	r0, [r4, #0]
 8007648:	1d19      	adds	r1, r3, #4
 800764a:	6031      	str	r1, [r6, #0]
 800764c:	0606      	lsls	r6, r0, #24
 800764e:	d501      	bpl.n	8007654 <_printf_i+0xbc>
 8007650:	681d      	ldr	r5, [r3, #0]
 8007652:	e003      	b.n	800765c <_printf_i+0xc4>
 8007654:	0645      	lsls	r5, r0, #25
 8007656:	d5fb      	bpl.n	8007650 <_printf_i+0xb8>
 8007658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800765c:	2d00      	cmp	r5, #0
 800765e:	da03      	bge.n	8007668 <_printf_i+0xd0>
 8007660:	232d      	movs	r3, #45	@ 0x2d
 8007662:	426d      	negs	r5, r5
 8007664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007668:	4859      	ldr	r0, [pc, #356]	@ (80077d0 <_printf_i+0x238>)
 800766a:	230a      	movs	r3, #10
 800766c:	e011      	b.n	8007692 <_printf_i+0xfa>
 800766e:	6821      	ldr	r1, [r4, #0]
 8007670:	6833      	ldr	r3, [r6, #0]
 8007672:	0608      	lsls	r0, r1, #24
 8007674:	f853 5b04 	ldr.w	r5, [r3], #4
 8007678:	d402      	bmi.n	8007680 <_printf_i+0xe8>
 800767a:	0649      	lsls	r1, r1, #25
 800767c:	bf48      	it	mi
 800767e:	b2ad      	uxthmi	r5, r5
 8007680:	2f6f      	cmp	r7, #111	@ 0x6f
 8007682:	4853      	ldr	r0, [pc, #332]	@ (80077d0 <_printf_i+0x238>)
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	bf14      	ite	ne
 8007688:	230a      	movne	r3, #10
 800768a:	2308      	moveq	r3, #8
 800768c:	2100      	movs	r1, #0
 800768e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007692:	6866      	ldr	r6, [r4, #4]
 8007694:	60a6      	str	r6, [r4, #8]
 8007696:	2e00      	cmp	r6, #0
 8007698:	bfa2      	ittt	ge
 800769a:	6821      	ldrge	r1, [r4, #0]
 800769c:	f021 0104 	bicge.w	r1, r1, #4
 80076a0:	6021      	strge	r1, [r4, #0]
 80076a2:	b90d      	cbnz	r5, 80076a8 <_printf_i+0x110>
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	d04b      	beq.n	8007740 <_printf_i+0x1a8>
 80076a8:	4616      	mov	r6, r2
 80076aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80076ae:	fb03 5711 	mls	r7, r3, r1, r5
 80076b2:	5dc7      	ldrb	r7, [r0, r7]
 80076b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b8:	462f      	mov	r7, r5
 80076ba:	42bb      	cmp	r3, r7
 80076bc:	460d      	mov	r5, r1
 80076be:	d9f4      	bls.n	80076aa <_printf_i+0x112>
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d10b      	bne.n	80076dc <_printf_i+0x144>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	07df      	lsls	r7, r3, #31
 80076c8:	d508      	bpl.n	80076dc <_printf_i+0x144>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	6861      	ldr	r1, [r4, #4]
 80076ce:	4299      	cmp	r1, r3
 80076d0:	bfde      	ittt	le
 80076d2:	2330      	movle	r3, #48	@ 0x30
 80076d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80076dc:	1b92      	subs	r2, r2, r6
 80076de:	6122      	str	r2, [r4, #16]
 80076e0:	f8cd a000 	str.w	sl, [sp]
 80076e4:	464b      	mov	r3, r9
 80076e6:	aa03      	add	r2, sp, #12
 80076e8:	4621      	mov	r1, r4
 80076ea:	4640      	mov	r0, r8
 80076ec:	f7ff fee6 	bl	80074bc <_printf_common>
 80076f0:	3001      	adds	r0, #1
 80076f2:	d14a      	bne.n	800778a <_printf_i+0x1f2>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f8:	b004      	add	sp, #16
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	f043 0320 	orr.w	r3, r3, #32
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	4833      	ldr	r0, [pc, #204]	@ (80077d4 <_printf_i+0x23c>)
 8007708:	2778      	movs	r7, #120	@ 0x78
 800770a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6831      	ldr	r1, [r6, #0]
 8007712:	061f      	lsls	r7, r3, #24
 8007714:	f851 5b04 	ldr.w	r5, [r1], #4
 8007718:	d402      	bmi.n	8007720 <_printf_i+0x188>
 800771a:	065f      	lsls	r7, r3, #25
 800771c:	bf48      	it	mi
 800771e:	b2ad      	uxthmi	r5, r5
 8007720:	6031      	str	r1, [r6, #0]
 8007722:	07d9      	lsls	r1, r3, #31
 8007724:	bf44      	itt	mi
 8007726:	f043 0320 	orrmi.w	r3, r3, #32
 800772a:	6023      	strmi	r3, [r4, #0]
 800772c:	b11d      	cbz	r5, 8007736 <_printf_i+0x19e>
 800772e:	2310      	movs	r3, #16
 8007730:	e7ac      	b.n	800768c <_printf_i+0xf4>
 8007732:	4827      	ldr	r0, [pc, #156]	@ (80077d0 <_printf_i+0x238>)
 8007734:	e7e9      	b.n	800770a <_printf_i+0x172>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	f023 0320 	bic.w	r3, r3, #32
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	e7f6      	b.n	800772e <_printf_i+0x196>
 8007740:	4616      	mov	r6, r2
 8007742:	e7bd      	b.n	80076c0 <_printf_i+0x128>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	6825      	ldr	r5, [r4, #0]
 8007748:	6961      	ldr	r1, [r4, #20]
 800774a:	1d18      	adds	r0, r3, #4
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	062e      	lsls	r6, r5, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	d501      	bpl.n	8007758 <_printf_i+0x1c0>
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e002      	b.n	800775e <_printf_i+0x1c6>
 8007758:	0668      	lsls	r0, r5, #25
 800775a:	d5fb      	bpl.n	8007754 <_printf_i+0x1bc>
 800775c:	8019      	strh	r1, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	4616      	mov	r6, r2
 8007764:	e7bc      	b.n	80076e0 <_printf_i+0x148>
 8007766:	6833      	ldr	r3, [r6, #0]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	6032      	str	r2, [r6, #0]
 800776c:	681e      	ldr	r6, [r3, #0]
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	4630      	mov	r0, r6
 8007774:	f7f8 fd64 	bl	8000240 <memchr>
 8007778:	b108      	cbz	r0, 800777e <_printf_i+0x1e6>
 800777a:	1b80      	subs	r0, r0, r6
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007788:	e7aa      	b.n	80076e0 <_printf_i+0x148>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	4632      	mov	r2, r6
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d0ad      	beq.n	80076f4 <_printf_i+0x15c>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d413      	bmi.n	80077c6 <_printf_i+0x22e>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e7a6      	b.n	80076f8 <_printf_i+0x160>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4632      	mov	r2, r6
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d09d      	beq.n	80076f4 <_printf_i+0x15c>
 80077b8:	3501      	adds	r5, #1
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	9903      	ldr	r1, [sp, #12]
 80077be:	1a5b      	subs	r3, r3, r1
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dcf2      	bgt.n	80077aa <_printf_i+0x212>
 80077c4:	e7eb      	b.n	800779e <_printf_i+0x206>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f104 0619 	add.w	r6, r4, #25
 80077cc:	e7f5      	b.n	80077ba <_printf_i+0x222>
 80077ce:	bf00      	nop
 80077d0:	08009b82 	.word	0x08009b82
 80077d4:	08009b93 	.word	0x08009b93

080077d8 <siprintf>:
 80077d8:	b40e      	push	{r1, r2, r3}
 80077da:	b500      	push	{lr}
 80077dc:	b09c      	sub	sp, #112	@ 0x70
 80077de:	ab1d      	add	r3, sp, #116	@ 0x74
 80077e0:	9002      	str	r0, [sp, #8]
 80077e2:	9006      	str	r0, [sp, #24]
 80077e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077e8:	4809      	ldr	r0, [pc, #36]	@ (8007810 <siprintf+0x38>)
 80077ea:	9107      	str	r1, [sp, #28]
 80077ec:	9104      	str	r1, [sp, #16]
 80077ee:	4909      	ldr	r1, [pc, #36]	@ (8007814 <siprintf+0x3c>)
 80077f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f4:	9105      	str	r1, [sp, #20]
 80077f6:	6800      	ldr	r0, [r0, #0]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	a902      	add	r1, sp, #8
 80077fc:	f000 ff42 	bl	8008684 <_svfiprintf_r>
 8007800:	9b02      	ldr	r3, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	b01c      	add	sp, #112	@ 0x70
 8007808:	f85d eb04 	ldr.w	lr, [sp], #4
 800780c:	b003      	add	sp, #12
 800780e:	4770      	bx	lr
 8007810:	2000002c 	.word	0x2000002c
 8007814:	ffff0208 	.word	0xffff0208

08007818 <std>:
 8007818:	2300      	movs	r3, #0
 800781a:	b510      	push	{r4, lr}
 800781c:	4604      	mov	r4, r0
 800781e:	e9c0 3300 	strd	r3, r3, [r0]
 8007822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007826:	6083      	str	r3, [r0, #8]
 8007828:	8181      	strh	r1, [r0, #12]
 800782a:	6643      	str	r3, [r0, #100]	@ 0x64
 800782c:	81c2      	strh	r2, [r0, #14]
 800782e:	6183      	str	r3, [r0, #24]
 8007830:	4619      	mov	r1, r3
 8007832:	2208      	movs	r2, #8
 8007834:	305c      	adds	r0, #92	@ 0x5c
 8007836:	f000 f8b1 	bl	800799c <memset>
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x58>)
 800783c:	6263      	str	r3, [r4, #36]	@ 0x24
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x5c>)
 8007840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x60>)
 8007844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x64>)
 8007848:	6323      	str	r3, [r4, #48]	@ 0x30
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x68>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	429c      	cmp	r4, r3
 8007850:	d006      	beq.n	8007860 <std+0x48>
 8007852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007856:	4294      	cmp	r4, r2
 8007858:	d002      	beq.n	8007860 <std+0x48>
 800785a:	33d0      	adds	r3, #208	@ 0xd0
 800785c:	429c      	cmp	r4, r3
 800785e:	d105      	bne.n	800786c <std+0x54>
 8007860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f000 b8ce 	b.w	8007a08 <__retarget_lock_init_recursive>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	08009245 	.word	0x08009245
 8007874:	08009267 	.word	0x08009267
 8007878:	0800929f 	.word	0x0800929f
 800787c:	080092c3 	.word	0x080092c3
 8007880:	20000bbc 	.word	0x20000bbc

08007884 <stdio_exit_handler>:
 8007884:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <stdio_exit_handler+0xc>)
 8007886:	4903      	ldr	r1, [pc, #12]	@ (8007894 <stdio_exit_handler+0x10>)
 8007888:	4803      	ldr	r0, [pc, #12]	@ (8007898 <stdio_exit_handler+0x14>)
 800788a:	f000 b869 	b.w	8007960 <_fwalk_sglue>
 800788e:	bf00      	nop
 8007890:	20000020 	.word	0x20000020
 8007894:	08008ad9 	.word	0x08008ad9
 8007898:	20000030 	.word	0x20000030

0800789c <cleanup_stdio>:
 800789c:	6841      	ldr	r1, [r0, #4]
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <cleanup_stdio+0x34>)
 80078a0:	4299      	cmp	r1, r3
 80078a2:	b510      	push	{r4, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	d001      	beq.n	80078ac <cleanup_stdio+0x10>
 80078a8:	f001 f916 	bl	8008ad8 <_fflush_r>
 80078ac:	68a1      	ldr	r1, [r4, #8]
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <cleanup_stdio+0x38>)
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <cleanup_stdio+0x1e>
 80078b4:	4620      	mov	r0, r4
 80078b6:	f001 f90f 	bl	8008ad8 <_fflush_r>
 80078ba:	68e1      	ldr	r1, [r4, #12]
 80078bc:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <cleanup_stdio+0x3c>)
 80078be:	4299      	cmp	r1, r3
 80078c0:	d004      	beq.n	80078cc <cleanup_stdio+0x30>
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f001 b906 	b.w	8008ad8 <_fflush_r>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	20000bbc 	.word	0x20000bbc
 80078d4:	20000c24 	.word	0x20000c24
 80078d8:	20000c8c 	.word	0x20000c8c

080078dc <global_stdio_init.part.0>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <global_stdio_init.part.0+0x30>)
 80078e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007910 <global_stdio_init.part.0+0x34>)
 80078e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <global_stdio_init.part.0+0x38>)
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	4620      	mov	r0, r4
 80078e8:	2200      	movs	r2, #0
 80078ea:	2104      	movs	r1, #4
 80078ec:	f7ff ff94 	bl	8007818 <std>
 80078f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078f4:	2201      	movs	r2, #1
 80078f6:	2109      	movs	r1, #9
 80078f8:	f7ff ff8e 	bl	8007818 <std>
 80078fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007900:	2202      	movs	r2, #2
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007906:	2112      	movs	r1, #18
 8007908:	f7ff bf86 	b.w	8007818 <std>
 800790c:	20000cf4 	.word	0x20000cf4
 8007910:	20000bbc 	.word	0x20000bbc
 8007914:	08007885 	.word	0x08007885

08007918 <__sfp_lock_acquire>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__sfp_lock_acquire+0x8>)
 800791a:	f000 b876 	b.w	8007a0a <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	20000cf9 	.word	0x20000cf9

08007924 <__sfp_lock_release>:
 8007924:	4801      	ldr	r0, [pc, #4]	@ (800792c <__sfp_lock_release+0x8>)
 8007926:	f000 b871 	b.w	8007a0c <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	20000cf9 	.word	0x20000cf9

08007930 <__sinit>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	f7ff fff0 	bl	8007918 <__sfp_lock_acquire>
 8007938:	6a23      	ldr	r3, [r4, #32]
 800793a:	b11b      	cbz	r3, 8007944 <__sinit+0x14>
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f7ff bff0 	b.w	8007924 <__sfp_lock_release>
 8007944:	4b04      	ldr	r3, [pc, #16]	@ (8007958 <__sinit+0x28>)
 8007946:	6223      	str	r3, [r4, #32]
 8007948:	4b04      	ldr	r3, [pc, #16]	@ (800795c <__sinit+0x2c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f5      	bne.n	800793c <__sinit+0xc>
 8007950:	f7ff ffc4 	bl	80078dc <global_stdio_init.part.0>
 8007954:	e7f2      	b.n	800793c <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	0800789d 	.word	0x0800789d
 800795c:	20000cf4 	.word	0x20000cf4

08007960 <_fwalk_sglue>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4607      	mov	r7, r0
 8007966:	4688      	mov	r8, r1
 8007968:	4614      	mov	r4, r2
 800796a:	2600      	movs	r6, #0
 800796c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007970:	f1b9 0901 	subs.w	r9, r9, #1
 8007974:	d505      	bpl.n	8007982 <_fwalk_sglue+0x22>
 8007976:	6824      	ldr	r4, [r4, #0]
 8007978:	2c00      	cmp	r4, #0
 800797a:	d1f7      	bne.n	800796c <_fwalk_sglue+0xc>
 800797c:	4630      	mov	r0, r6
 800797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d907      	bls.n	8007998 <_fwalk_sglue+0x38>
 8007988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800798c:	3301      	adds	r3, #1
 800798e:	d003      	beq.n	8007998 <_fwalk_sglue+0x38>
 8007990:	4629      	mov	r1, r5
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	4306      	orrs	r6, r0
 8007998:	3568      	adds	r5, #104	@ 0x68
 800799a:	e7e9      	b.n	8007970 <_fwalk_sglue+0x10>

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <_localeconv_r>:
 80079ac:	4800      	ldr	r0, [pc, #0]	@ (80079b0 <_localeconv_r+0x4>)
 80079ae:	4770      	bx	lr
 80079b0:	2000016c 	.word	0x2000016c

080079b4 <__errno>:
 80079b4:	4b01      	ldr	r3, [pc, #4]	@ (80079bc <__errno+0x8>)
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000002c 	.word	0x2000002c

080079c0 <__libc_init_array>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	4d0d      	ldr	r5, [pc, #52]	@ (80079f8 <__libc_init_array+0x38>)
 80079c4:	4c0d      	ldr	r4, [pc, #52]	@ (80079fc <__libc_init_array+0x3c>)
 80079c6:	1b64      	subs	r4, r4, r5
 80079c8:	10a4      	asrs	r4, r4, #2
 80079ca:	2600      	movs	r6, #0
 80079cc:	42a6      	cmp	r6, r4
 80079ce:	d109      	bne.n	80079e4 <__libc_init_array+0x24>
 80079d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007a00 <__libc_init_array+0x40>)
 80079d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007a04 <__libc_init_array+0x44>)
 80079d4:	f002 f880 	bl	8009ad8 <_init>
 80079d8:	1b64      	subs	r4, r4, r5
 80079da:	10a4      	asrs	r4, r4, #2
 80079dc:	2600      	movs	r6, #0
 80079de:	42a6      	cmp	r6, r4
 80079e0:	d105      	bne.n	80079ee <__libc_init_array+0x2e>
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e8:	4798      	blx	r3
 80079ea:	3601      	adds	r6, #1
 80079ec:	e7ee      	b.n	80079cc <__libc_init_array+0xc>
 80079ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f2:	4798      	blx	r3
 80079f4:	3601      	adds	r6, #1
 80079f6:	e7f2      	b.n	80079de <__libc_init_array+0x1e>
 80079f8:	08009ee8 	.word	0x08009ee8
 80079fc:	08009ee8 	.word	0x08009ee8
 8007a00:	08009ee8 	.word	0x08009ee8
 8007a04:	08009eec 	.word	0x08009eec

08007a08 <__retarget_lock_init_recursive>:
 8007a08:	4770      	bx	lr

08007a0a <__retarget_lock_acquire_recursive>:
 8007a0a:	4770      	bx	lr

08007a0c <__retarget_lock_release_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <quorem>:
 8007a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a12:	6903      	ldr	r3, [r0, #16]
 8007a14:	690c      	ldr	r4, [r1, #16]
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	4607      	mov	r7, r0
 8007a1a:	db7e      	blt.n	8007b1a <quorem+0x10c>
 8007a1c:	3c01      	subs	r4, #1
 8007a1e:	f101 0814 	add.w	r8, r1, #20
 8007a22:	00a3      	lsls	r3, r4, #2
 8007a24:	f100 0514 	add.w	r5, r0, #20
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a44:	d32e      	bcc.n	8007aa4 <quorem+0x96>
 8007a46:	f04f 0a00 	mov.w	sl, #0
 8007a4a:	46c4      	mov	ip, r8
 8007a4c:	46ae      	mov	lr, r5
 8007a4e:	46d3      	mov	fp, sl
 8007a50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a54:	b298      	uxth	r0, r3
 8007a56:	fb06 a000 	mla	r0, r6, r0, sl
 8007a5a:	0c02      	lsrs	r2, r0, #16
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	fb06 2303 	mla	r3, r6, r3, r2
 8007a62:	f8de 2000 	ldr.w	r2, [lr]
 8007a66:	b280      	uxth	r0, r0
 8007a68:	b292      	uxth	r2, r2
 8007a6a:	1a12      	subs	r2, r2, r0
 8007a6c:	445a      	add	r2, fp
 8007a6e:	f8de 0000 	ldr.w	r0, [lr]
 8007a72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a80:	b292      	uxth	r2, r2
 8007a82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a86:	45e1      	cmp	r9, ip
 8007a88:	f84e 2b04 	str.w	r2, [lr], #4
 8007a8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a90:	d2de      	bcs.n	8007a50 <quorem+0x42>
 8007a92:	9b00      	ldr	r3, [sp, #0]
 8007a94:	58eb      	ldr	r3, [r5, r3]
 8007a96:	b92b      	cbnz	r3, 8007aa4 <quorem+0x96>
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	3b04      	subs	r3, #4
 8007a9c:	429d      	cmp	r5, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	d32f      	bcc.n	8007b02 <quorem+0xf4>
 8007aa2:	613c      	str	r4, [r7, #16]
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f001 fac5 	bl	8009034 <__mcmp>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	db25      	blt.n	8007afa <quorem+0xec>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ab6:	f8d1 c000 	ldr.w	ip, [r1]
 8007aba:	fa1f fe82 	uxth.w	lr, r2
 8007abe:	fa1f f38c 	uxth.w	r3, ip
 8007ac2:	eba3 030e 	sub.w	r3, r3, lr
 8007ac6:	4403      	add	r3, r0
 8007ac8:	0c12      	lsrs	r2, r2, #16
 8007aca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ace:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ad8:	45c1      	cmp	r9, r8
 8007ada:	f841 3b04 	str.w	r3, [r1], #4
 8007ade:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ae2:	d2e6      	bcs.n	8007ab2 <quorem+0xa4>
 8007ae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aec:	b922      	cbnz	r2, 8007af8 <quorem+0xea>
 8007aee:	3b04      	subs	r3, #4
 8007af0:	429d      	cmp	r5, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	d30b      	bcc.n	8007b0e <quorem+0x100>
 8007af6:	613c      	str	r4, [r7, #16]
 8007af8:	3601      	adds	r6, #1
 8007afa:	4630      	mov	r0, r6
 8007afc:	b003      	add	sp, #12
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	d1cb      	bne.n	8007aa2 <quorem+0x94>
 8007b0a:	3c01      	subs	r4, #1
 8007b0c:	e7c6      	b.n	8007a9c <quorem+0x8e>
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	3b04      	subs	r3, #4
 8007b12:	2a00      	cmp	r2, #0
 8007b14:	d1ef      	bne.n	8007af6 <quorem+0xe8>
 8007b16:	3c01      	subs	r4, #1
 8007b18:	e7ea      	b.n	8007af0 <quorem+0xe2>
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e7ee      	b.n	8007afc <quorem+0xee>
	...

08007b20 <_dtoa_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ed2d 8b02 	vpush	{d8}
 8007b28:	69c7      	ldr	r7, [r0, #28]
 8007b2a:	b091      	sub	sp, #68	@ 0x44
 8007b2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b30:	ec55 4b10 	vmov	r4, r5, d0
 8007b34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007b36:	9107      	str	r1, [sp, #28]
 8007b38:	4681      	mov	r9, r0
 8007b3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b3e:	b97f      	cbnz	r7, 8007b60 <_dtoa_r+0x40>
 8007b40:	2010      	movs	r0, #16
 8007b42:	f000 fe9b 	bl	800887c <malloc>
 8007b46:	4602      	mov	r2, r0
 8007b48:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b4c:	b920      	cbnz	r0, 8007b58 <_dtoa_r+0x38>
 8007b4e:	4ba0      	ldr	r3, [pc, #640]	@ (8007dd0 <_dtoa_r+0x2b0>)
 8007b50:	21ef      	movs	r1, #239	@ 0xef
 8007b52:	48a0      	ldr	r0, [pc, #640]	@ (8007dd4 <_dtoa_r+0x2b4>)
 8007b54:	f001 fc66 	bl	8009424 <__assert_func>
 8007b58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b5c:	6007      	str	r7, [r0, #0]
 8007b5e:	60c7      	str	r7, [r0, #12]
 8007b60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	b159      	cbz	r1, 8007b80 <_dtoa_r+0x60>
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	604a      	str	r2, [r1, #4]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4093      	lsls	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
 8007b72:	4648      	mov	r0, r9
 8007b74:	f001 f824 	bl	8008bc0 <_Bfree>
 8007b78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	1e2b      	subs	r3, r5, #0
 8007b82:	bfbb      	ittet	lt
 8007b84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b88:	9303      	strlt	r3, [sp, #12]
 8007b8a:	2300      	movge	r3, #0
 8007b8c:	2201      	movlt	r2, #1
 8007b8e:	bfac      	ite	ge
 8007b90:	6033      	strge	r3, [r6, #0]
 8007b92:	6032      	strlt	r2, [r6, #0]
 8007b94:	4b90      	ldr	r3, [pc, #576]	@ (8007dd8 <_dtoa_r+0x2b8>)
 8007b96:	9e03      	ldr	r6, [sp, #12]
 8007b98:	43b3      	bics	r3, r6
 8007b9a:	d110      	bne.n	8007bbe <_dtoa_r+0x9e>
 8007b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007ba8:	4323      	orrs	r3, r4
 8007baa:	f000 84de 	beq.w	800856a <_dtoa_r+0xa4a>
 8007bae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bb0:	4f8a      	ldr	r7, [pc, #552]	@ (8007ddc <_dtoa_r+0x2bc>)
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 84e0 	beq.w	8008578 <_dtoa_r+0xa58>
 8007bb8:	1cfb      	adds	r3, r7, #3
 8007bba:	f000 bcdb 	b.w	8008574 <_dtoa_r+0xa54>
 8007bbe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007bc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bca:	d10a      	bne.n	8007be2 <_dtoa_r+0xc2>
 8007bcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bd4:	b113      	cbz	r3, 8007bdc <_dtoa_r+0xbc>
 8007bd6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007bd8:	4b81      	ldr	r3, [pc, #516]	@ (8007de0 <_dtoa_r+0x2c0>)
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	4f81      	ldr	r7, [pc, #516]	@ (8007de4 <_dtoa_r+0x2c4>)
 8007bde:	f000 bccb 	b.w	8008578 <_dtoa_r+0xa58>
 8007be2:	aa0e      	add	r2, sp, #56	@ 0x38
 8007be4:	a90f      	add	r1, sp, #60	@ 0x3c
 8007be6:	4648      	mov	r0, r9
 8007be8:	eeb0 0b48 	vmov.f64	d0, d8
 8007bec:	f001 fad2 	bl	8009194 <__d2b>
 8007bf0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bf6:	9001      	str	r0, [sp, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d045      	beq.n	8007c88 <_dtoa_r+0x168>
 8007bfc:	eeb0 7b48 	vmov.f64	d7, d8
 8007c00:	ee18 1a90 	vmov	r1, s17
 8007c04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007c08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007c0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007c10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007c14:	2500      	movs	r5, #0
 8007c16:	ee07 1a90 	vmov	s15, r1
 8007c1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007c1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007db8 <_dtoa_r+0x298>
 8007c22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007dc0 <_dtoa_r+0x2a0>
 8007c2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007dc8 <_dtoa_r+0x2a8>
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007c3a:	eeb0 7b46 	vmov.f64	d7, d6
 8007c3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007c42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c4e:	ee16 8a90 	vmov	r8, s13
 8007c52:	d508      	bpl.n	8007c66 <_dtoa_r+0x146>
 8007c54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c58:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c60:	bf18      	it	ne
 8007c62:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8007c66:	f1b8 0f16 	cmp.w	r8, #22
 8007c6a:	d82b      	bhi.n	8007cc4 <_dtoa_r+0x1a4>
 8007c6c:	495e      	ldr	r1, [pc, #376]	@ (8007de8 <_dtoa_r+0x2c8>)
 8007c6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007c72:	ed91 7b00 	vldr	d7, [r1]
 8007c76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	d501      	bpl.n	8007c84 <_dtoa_r+0x164>
 8007c80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007c84:	2100      	movs	r1, #0
 8007c86:	e01e      	b.n	8007cc6 <_dtoa_r+0x1a6>
 8007c88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007c90:	2920      	cmp	r1, #32
 8007c92:	bfc1      	itttt	gt
 8007c94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007c98:	408e      	lslgt	r6, r1
 8007c9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007c9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007ca2:	bfd6      	itet	le
 8007ca4:	f1c1 0120 	rsble	r1, r1, #32
 8007ca8:	4331      	orrgt	r1, r6
 8007caa:	fa04 f101 	lslle.w	r1, r4, r1
 8007cae:	ee07 1a90 	vmov	s15, r1
 8007cb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	ee17 1a90 	vmov	r1, s15
 8007cbc:	2501      	movs	r5, #1
 8007cbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007cc2:	e7a8      	b.n	8007c16 <_dtoa_r+0xf6>
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	1e53      	subs	r3, r2, #1
 8007cca:	9306      	str	r3, [sp, #24]
 8007ccc:	bf45      	ittet	mi
 8007cce:	f1c2 0301 	rsbmi	r3, r2, #1
 8007cd2:	9305      	strmi	r3, [sp, #20]
 8007cd4:	2300      	movpl	r3, #0
 8007cd6:	2300      	movmi	r3, #0
 8007cd8:	bf4c      	ite	mi
 8007cda:	9306      	strmi	r3, [sp, #24]
 8007cdc:	9305      	strpl	r3, [sp, #20]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	910c      	str	r1, [sp, #48]	@ 0x30
 8007ce4:	db18      	blt.n	8007d18 <_dtoa_r+0x1f8>
 8007ce6:	9b06      	ldr	r3, [sp, #24]
 8007ce8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007cec:	4443      	add	r3, r8
 8007cee:	9306      	str	r3, [sp, #24]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9a07      	ldr	r2, [sp, #28]
 8007cf4:	2a09      	cmp	r2, #9
 8007cf6:	d849      	bhi.n	8007d8c <_dtoa_r+0x26c>
 8007cf8:	2a05      	cmp	r2, #5
 8007cfa:	bfc4      	itt	gt
 8007cfc:	3a04      	subgt	r2, #4
 8007cfe:	9207      	strgt	r2, [sp, #28]
 8007d00:	9a07      	ldr	r2, [sp, #28]
 8007d02:	f1a2 0202 	sub.w	r2, r2, #2
 8007d06:	bfcc      	ite	gt
 8007d08:	2400      	movgt	r4, #0
 8007d0a:	2401      	movle	r4, #1
 8007d0c:	2a03      	cmp	r2, #3
 8007d0e:	d848      	bhi.n	8007da2 <_dtoa_r+0x282>
 8007d10:	e8df f002 	tbb	[pc, r2]
 8007d14:	3a2c2e0b 	.word	0x3a2c2e0b
 8007d18:	9b05      	ldr	r3, [sp, #20]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	eba3 0308 	sub.w	r3, r3, r8
 8007d20:	9305      	str	r3, [sp, #20]
 8007d22:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d24:	f1c8 0300 	rsb	r3, r8, #0
 8007d28:	e7e3      	b.n	8007cf2 <_dtoa_r+0x1d2>
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	9208      	str	r2, [sp, #32]
 8007d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d30:	2a00      	cmp	r2, #0
 8007d32:	dc39      	bgt.n	8007da8 <_dtoa_r+0x288>
 8007d34:	f04f 0b01 	mov.w	fp, #1
 8007d38:	46da      	mov	sl, fp
 8007d3a:	465a      	mov	r2, fp
 8007d3c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007d40:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007d44:	2100      	movs	r1, #0
 8007d46:	2004      	movs	r0, #4
 8007d48:	f100 0614 	add.w	r6, r0, #20
 8007d4c:	4296      	cmp	r6, r2
 8007d4e:	d930      	bls.n	8007db2 <_dtoa_r+0x292>
 8007d50:	6079      	str	r1, [r7, #4]
 8007d52:	4648      	mov	r0, r9
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	f000 fef3 	bl	8008b40 <_Balloc>
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d146      	bne.n	8007df0 <_dtoa_r+0x2d0>
 8007d62:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <_dtoa_r+0x2cc>)
 8007d64:	4602      	mov	r2, r0
 8007d66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d6a:	e6f2      	b.n	8007b52 <_dtoa_r+0x32>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	e7dd      	b.n	8007d2c <_dtoa_r+0x20c>
 8007d70:	2200      	movs	r2, #0
 8007d72:	9208      	str	r2, [sp, #32]
 8007d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d76:	eb08 0b02 	add.w	fp, r8, r2
 8007d7a:	f10b 0a01 	add.w	sl, fp, #1
 8007d7e:	4652      	mov	r2, sl
 8007d80:	2a01      	cmp	r2, #1
 8007d82:	bfb8      	it	lt
 8007d84:	2201      	movlt	r2, #1
 8007d86:	e7db      	b.n	8007d40 <_dtoa_r+0x220>
 8007d88:	2201      	movs	r2, #1
 8007d8a:	e7f2      	b.n	8007d72 <_dtoa_r+0x252>
 8007d8c:	2401      	movs	r4, #1
 8007d8e:	2200      	movs	r2, #0
 8007d90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007d94:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007d98:	2100      	movs	r1, #0
 8007d9a:	46da      	mov	sl, fp
 8007d9c:	2212      	movs	r2, #18
 8007d9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007da0:	e7ce      	b.n	8007d40 <_dtoa_r+0x220>
 8007da2:	2201      	movs	r2, #1
 8007da4:	9208      	str	r2, [sp, #32]
 8007da6:	e7f5      	b.n	8007d94 <_dtoa_r+0x274>
 8007da8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007dac:	46da      	mov	sl, fp
 8007dae:	465a      	mov	r2, fp
 8007db0:	e7c6      	b.n	8007d40 <_dtoa_r+0x220>
 8007db2:	3101      	adds	r1, #1
 8007db4:	0040      	lsls	r0, r0, #1
 8007db6:	e7c7      	b.n	8007d48 <_dtoa_r+0x228>
 8007db8:	636f4361 	.word	0x636f4361
 8007dbc:	3fd287a7 	.word	0x3fd287a7
 8007dc0:	8b60c8b3 	.word	0x8b60c8b3
 8007dc4:	3fc68a28 	.word	0x3fc68a28
 8007dc8:	509f79fb 	.word	0x509f79fb
 8007dcc:	3fd34413 	.word	0x3fd34413
 8007dd0:	08009bb1 	.word	0x08009bb1
 8007dd4:	08009bc8 	.word	0x08009bc8
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	08009bad 	.word	0x08009bad
 8007de0:	08009b81 	.word	0x08009b81
 8007de4:	08009b80 	.word	0x08009b80
 8007de8:	08009cd0 	.word	0x08009cd0
 8007dec:	08009c20 	.word	0x08009c20
 8007df0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007df4:	f1ba 0f0e 	cmp.w	sl, #14
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	d86f      	bhi.n	8007edc <_dtoa_r+0x3bc>
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	d06d      	beq.n	8007edc <_dtoa_r+0x3bc>
 8007e00:	f1b8 0f00 	cmp.w	r8, #0
 8007e04:	f340 80c2 	ble.w	8007f8c <_dtoa_r+0x46c>
 8007e08:	4aca      	ldr	r2, [pc, #808]	@ (8008134 <_dtoa_r+0x614>)
 8007e0a:	f008 010f 	and.w	r1, r8, #15
 8007e0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e12:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007e16:	ed92 7b00 	vldr	d7, [r2]
 8007e1a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007e1e:	f000 80a9 	beq.w	8007f74 <_dtoa_r+0x454>
 8007e22:	4ac5      	ldr	r2, [pc, #788]	@ (8008138 <_dtoa_r+0x618>)
 8007e24:	ed92 6b08 	vldr	d6, [r2, #32]
 8007e28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007e2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e30:	f001 010f 	and.w	r1, r1, #15
 8007e34:	2203      	movs	r2, #3
 8007e36:	48c0      	ldr	r0, [pc, #768]	@ (8008138 <_dtoa_r+0x618>)
 8007e38:	2900      	cmp	r1, #0
 8007e3a:	f040 809d 	bne.w	8007f78 <_dtoa_r+0x458>
 8007e3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	f000 80c1 	beq.w	8007fd8 <_dtoa_r+0x4b8>
 8007e56:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007e5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e62:	f140 80b9 	bpl.w	8007fd8 <_dtoa_r+0x4b8>
 8007e66:	f1ba 0f00 	cmp.w	sl, #0
 8007e6a:	f000 80b5 	beq.w	8007fd8 <_dtoa_r+0x4b8>
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	dd31      	ble.n	8007ed8 <_dtoa_r+0x3b8>
 8007e74:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007e78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e80:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007e84:	9104      	str	r1, [sp, #16]
 8007e86:	3201      	adds	r2, #1
 8007e88:	465c      	mov	r4, fp
 8007e8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e8e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007e92:	ee07 2a90 	vmov	s15, r2
 8007e96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e9a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007e9e:	ee15 2a90 	vmov	r2, s11
 8007ea2:	ec51 0b15 	vmov	r0, r1, d5
 8007ea6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f040 8098 	bne.w	8007fe0 <_dtoa_r+0x4c0>
 8007eb0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007eb4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007eb8:	ec41 0b17 	vmov	d7, r0, r1
 8007ebc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec4:	f300 8261 	bgt.w	800838a <_dtoa_r+0x86a>
 8007ec8:	eeb1 7b47 	vneg.f64	d7, d7
 8007ecc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed4:	f100 80f5 	bmi.w	80080c2 <_dtoa_r+0x5a2>
 8007ed8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007edc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	f2c0 812c 	blt.w	800813c <_dtoa_r+0x61c>
 8007ee4:	f1b8 0f0e 	cmp.w	r8, #14
 8007ee8:	f300 8128 	bgt.w	800813c <_dtoa_r+0x61c>
 8007eec:	4b91      	ldr	r3, [pc, #580]	@ (8008134 <_dtoa_r+0x614>)
 8007eee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ef2:	ed93 6b00 	vldr	d6, [r3]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da03      	bge.n	8007f04 <_dtoa_r+0x3e4>
 8007efc:	f1ba 0f00 	cmp.w	sl, #0
 8007f00:	f340 80d2 	ble.w	80080a8 <_dtoa_r+0x588>
 8007f04:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f0c:	463e      	mov	r6, r7
 8007f0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007f12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007f16:	ee15 3a10 	vmov	r3, s10
 8007f1a:	3330      	adds	r3, #48	@ 0x30
 8007f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8007f20:	1bf3      	subs	r3, r6, r7
 8007f22:	459a      	cmp	sl, r3
 8007f24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007f28:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007f2c:	f040 80f8 	bne.w	8008120 <_dtoa_r+0x600>
 8007f30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007f34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3c:	f300 80dd 	bgt.w	80080fa <_dtoa_r+0x5da>
 8007f40:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f48:	d104      	bne.n	8007f54 <_dtoa_r+0x434>
 8007f4a:	ee15 3a10 	vmov	r3, s10
 8007f4e:	07db      	lsls	r3, r3, #31
 8007f50:	f100 80d3 	bmi.w	80080fa <_dtoa_r+0x5da>
 8007f54:	9901      	ldr	r1, [sp, #4]
 8007f56:	4648      	mov	r0, r9
 8007f58:	f000 fe32 	bl	8008bc0 <_Bfree>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f60:	7033      	strb	r3, [r6, #0]
 8007f62:	f108 0301 	add.w	r3, r8, #1
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8304 	beq.w	8008578 <_dtoa_r+0xa58>
 8007f70:	601e      	str	r6, [r3, #0]
 8007f72:	e301      	b.n	8008578 <_dtoa_r+0xa58>
 8007f74:	2202      	movs	r2, #2
 8007f76:	e75e      	b.n	8007e36 <_dtoa_r+0x316>
 8007f78:	07cc      	lsls	r4, r1, #31
 8007f7a:	d504      	bpl.n	8007f86 <_dtoa_r+0x466>
 8007f7c:	ed90 6b00 	vldr	d6, [r0]
 8007f80:	3201      	adds	r2, #1
 8007f82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f86:	1049      	asrs	r1, r1, #1
 8007f88:	3008      	adds	r0, #8
 8007f8a:	e755      	b.n	8007e38 <_dtoa_r+0x318>
 8007f8c:	d022      	beq.n	8007fd4 <_dtoa_r+0x4b4>
 8007f8e:	f1c8 0100 	rsb	r1, r8, #0
 8007f92:	4a68      	ldr	r2, [pc, #416]	@ (8008134 <_dtoa_r+0x614>)
 8007f94:	f001 000f 	and.w	r0, r1, #15
 8007f98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007f9c:	ed92 7b00 	vldr	d7, [r2]
 8007fa0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fa8:	4863      	ldr	r0, [pc, #396]	@ (8008138 <_dtoa_r+0x618>)
 8007faa:	1109      	asrs	r1, r1, #4
 8007fac:	2400      	movs	r4, #0
 8007fae:	2202      	movs	r2, #2
 8007fb0:	b929      	cbnz	r1, 8007fbe <_dtoa_r+0x49e>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	f43f af49 	beq.w	8007e4a <_dtoa_r+0x32a>
 8007fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fbc:	e745      	b.n	8007e4a <_dtoa_r+0x32a>
 8007fbe:	07ce      	lsls	r6, r1, #31
 8007fc0:	d505      	bpl.n	8007fce <_dtoa_r+0x4ae>
 8007fc2:	ed90 6b00 	vldr	d6, [r0]
 8007fc6:	3201      	adds	r2, #1
 8007fc8:	2401      	movs	r4, #1
 8007fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fce:	1049      	asrs	r1, r1, #1
 8007fd0:	3008      	adds	r0, #8
 8007fd2:	e7ed      	b.n	8007fb0 <_dtoa_r+0x490>
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	e738      	b.n	8007e4a <_dtoa_r+0x32a>
 8007fd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8007fdc:	4654      	mov	r4, sl
 8007fde:	e754      	b.n	8007e8a <_dtoa_r+0x36a>
 8007fe0:	4a54      	ldr	r2, [pc, #336]	@ (8008134 <_dtoa_r+0x614>)
 8007fe2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007fe6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007fea:	9a08      	ldr	r2, [sp, #32]
 8007fec:	ec41 0b17 	vmov	d7, r0, r1
 8007ff0:	443c      	add	r4, r7
 8007ff2:	b34a      	cbz	r2, 8008048 <_dtoa_r+0x528>
 8007ff4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007ff8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007ffc:	463e      	mov	r6, r7
 8007ffe:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008002:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008006:	ee35 7b47 	vsub.f64	d7, d5, d7
 800800a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800800e:	ee14 2a90 	vmov	r2, s9
 8008012:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008016:	3230      	adds	r2, #48	@ 0x30
 8008018:	ee36 6b45 	vsub.f64	d6, d6, d5
 800801c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008024:	f806 2b01 	strb.w	r2, [r6], #1
 8008028:	d438      	bmi.n	800809c <_dtoa_r+0x57c>
 800802a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800802e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008036:	d462      	bmi.n	80080fe <_dtoa_r+0x5de>
 8008038:	42a6      	cmp	r6, r4
 800803a:	f43f af4d 	beq.w	8007ed8 <_dtoa_r+0x3b8>
 800803e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008042:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008046:	e7e0      	b.n	800800a <_dtoa_r+0x4ea>
 8008048:	4621      	mov	r1, r4
 800804a:	463e      	mov	r6, r7
 800804c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008050:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008054:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008058:	ee14 2a90 	vmov	r2, s9
 800805c:	3230      	adds	r2, #48	@ 0x30
 800805e:	f806 2b01 	strb.w	r2, [r6], #1
 8008062:	42a6      	cmp	r6, r4
 8008064:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008068:	ee36 6b45 	vsub.f64	d6, d6, d5
 800806c:	d119      	bne.n	80080a2 <_dtoa_r+0x582>
 800806e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008072:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008076:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	dc3e      	bgt.n	80080fe <_dtoa_r+0x5de>
 8008080:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008084:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808c:	f57f af24 	bpl.w	8007ed8 <_dtoa_r+0x3b8>
 8008090:	460e      	mov	r6, r1
 8008092:	3901      	subs	r1, #1
 8008094:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008098:	2b30      	cmp	r3, #48	@ 0x30
 800809a:	d0f9      	beq.n	8008090 <_dtoa_r+0x570>
 800809c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80080a0:	e758      	b.n	8007f54 <_dtoa_r+0x434>
 80080a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80080a6:	e7d5      	b.n	8008054 <_dtoa_r+0x534>
 80080a8:	d10b      	bne.n	80080c2 <_dtoa_r+0x5a2>
 80080aa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80080ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80080b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080be:	f2c0 8161 	blt.w	8008384 <_dtoa_r+0x864>
 80080c2:	2400      	movs	r4, #0
 80080c4:	4625      	mov	r5, r4
 80080c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c8:	43db      	mvns	r3, r3
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	463e      	mov	r6, r7
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	4621      	mov	r1, r4
 80080d4:	4648      	mov	r0, r9
 80080d6:	f000 fd73 	bl	8008bc0 <_Bfree>
 80080da:	2d00      	cmp	r5, #0
 80080dc:	d0de      	beq.n	800809c <_dtoa_r+0x57c>
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	d005      	beq.n	80080f0 <_dtoa_r+0x5d0>
 80080e4:	45a8      	cmp	r8, r5
 80080e6:	d003      	beq.n	80080f0 <_dtoa_r+0x5d0>
 80080e8:	4641      	mov	r1, r8
 80080ea:	4648      	mov	r0, r9
 80080ec:	f000 fd68 	bl	8008bc0 <_Bfree>
 80080f0:	4629      	mov	r1, r5
 80080f2:	4648      	mov	r0, r9
 80080f4:	f000 fd64 	bl	8008bc0 <_Bfree>
 80080f8:	e7d0      	b.n	800809c <_dtoa_r+0x57c>
 80080fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80080fe:	4633      	mov	r3, r6
 8008100:	461e      	mov	r6, r3
 8008102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008106:	2a39      	cmp	r2, #57	@ 0x39
 8008108:	d106      	bne.n	8008118 <_dtoa_r+0x5f8>
 800810a:	429f      	cmp	r7, r3
 800810c:	d1f8      	bne.n	8008100 <_dtoa_r+0x5e0>
 800810e:	9a04      	ldr	r2, [sp, #16]
 8008110:	3201      	adds	r2, #1
 8008112:	9204      	str	r2, [sp, #16]
 8008114:	2230      	movs	r2, #48	@ 0x30
 8008116:	703a      	strb	r2, [r7, #0]
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	3201      	adds	r2, #1
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	e7bd      	b.n	800809c <_dtoa_r+0x57c>
 8008120:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008124:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812c:	f47f aeef 	bne.w	8007f0e <_dtoa_r+0x3ee>
 8008130:	e710      	b.n	8007f54 <_dtoa_r+0x434>
 8008132:	bf00      	nop
 8008134:	08009cd0 	.word	0x08009cd0
 8008138:	08009ca8 	.word	0x08009ca8
 800813c:	9908      	ldr	r1, [sp, #32]
 800813e:	2900      	cmp	r1, #0
 8008140:	f000 80e3 	beq.w	800830a <_dtoa_r+0x7ea>
 8008144:	9907      	ldr	r1, [sp, #28]
 8008146:	2901      	cmp	r1, #1
 8008148:	f300 80c8 	bgt.w	80082dc <_dtoa_r+0x7bc>
 800814c:	2d00      	cmp	r5, #0
 800814e:	f000 80c1 	beq.w	80082d4 <_dtoa_r+0x7b4>
 8008152:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008156:	9e05      	ldr	r6, [sp, #20]
 8008158:	461c      	mov	r4, r3
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	4413      	add	r3, r2
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	2101      	movs	r1, #1
 8008166:	4413      	add	r3, r2
 8008168:	4648      	mov	r0, r9
 800816a:	9306      	str	r3, [sp, #24]
 800816c:	f000 fddc 	bl	8008d28 <__i2b>
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	4605      	mov	r5, r0
 8008174:	b166      	cbz	r6, 8008190 <_dtoa_r+0x670>
 8008176:	9a06      	ldr	r2, [sp, #24]
 8008178:	2a00      	cmp	r2, #0
 800817a:	dd09      	ble.n	8008190 <_dtoa_r+0x670>
 800817c:	42b2      	cmp	r2, r6
 800817e:	9905      	ldr	r1, [sp, #20]
 8008180:	bfa8      	it	ge
 8008182:	4632      	movge	r2, r6
 8008184:	1a89      	subs	r1, r1, r2
 8008186:	9105      	str	r1, [sp, #20]
 8008188:	9906      	ldr	r1, [sp, #24]
 800818a:	1ab6      	subs	r6, r6, r2
 800818c:	1a8a      	subs	r2, r1, r2
 800818e:	9206      	str	r2, [sp, #24]
 8008190:	b1fb      	cbz	r3, 80081d2 <_dtoa_r+0x6b2>
 8008192:	9a08      	ldr	r2, [sp, #32]
 8008194:	2a00      	cmp	r2, #0
 8008196:	f000 80bc 	beq.w	8008312 <_dtoa_r+0x7f2>
 800819a:	b19c      	cbz	r4, 80081c4 <_dtoa_r+0x6a4>
 800819c:	4629      	mov	r1, r5
 800819e:	4622      	mov	r2, r4
 80081a0:	4648      	mov	r0, r9
 80081a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081a4:	f000 fe80 	bl	8008ea8 <__pow5mult>
 80081a8:	9a01      	ldr	r2, [sp, #4]
 80081aa:	4601      	mov	r1, r0
 80081ac:	4605      	mov	r5, r0
 80081ae:	4648      	mov	r0, r9
 80081b0:	f000 fdd0 	bl	8008d54 <__multiply>
 80081b4:	9901      	ldr	r1, [sp, #4]
 80081b6:	9004      	str	r0, [sp, #16]
 80081b8:	4648      	mov	r0, r9
 80081ba:	f000 fd01 	bl	8008bc0 <_Bfree>
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	1b1a      	subs	r2, r3, r4
 80081c6:	d004      	beq.n	80081d2 <_dtoa_r+0x6b2>
 80081c8:	9901      	ldr	r1, [sp, #4]
 80081ca:	4648      	mov	r0, r9
 80081cc:	f000 fe6c 	bl	8008ea8 <__pow5mult>
 80081d0:	9001      	str	r0, [sp, #4]
 80081d2:	2101      	movs	r1, #1
 80081d4:	4648      	mov	r0, r9
 80081d6:	f000 fda7 	bl	8008d28 <__i2b>
 80081da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081dc:	4604      	mov	r4, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 81d0 	beq.w	8008584 <_dtoa_r+0xa64>
 80081e4:	461a      	mov	r2, r3
 80081e6:	4601      	mov	r1, r0
 80081e8:	4648      	mov	r0, r9
 80081ea:	f000 fe5d 	bl	8008ea8 <__pow5mult>
 80081ee:	9b07      	ldr	r3, [sp, #28]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	4604      	mov	r4, r0
 80081f4:	f300 8095 	bgt.w	8008322 <_dtoa_r+0x802>
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f040 808b 	bne.w	8008316 <_dtoa_r+0x7f6>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008206:	2a00      	cmp	r2, #0
 8008208:	f040 8087 	bne.w	800831a <_dtoa_r+0x7fa>
 800820c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008210:	0d12      	lsrs	r2, r2, #20
 8008212:	0512      	lsls	r2, r2, #20
 8008214:	2a00      	cmp	r2, #0
 8008216:	f000 8082 	beq.w	800831e <_dtoa_r+0x7fe>
 800821a:	9b05      	ldr	r3, [sp, #20]
 800821c:	3301      	adds	r3, #1
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	9b06      	ldr	r3, [sp, #24]
 8008222:	3301      	adds	r3, #1
 8008224:	9306      	str	r3, [sp, #24]
 8008226:	2301      	movs	r3, #1
 8008228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800822a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 81af 	beq.w	8008590 <_dtoa_r+0xa70>
 8008232:	6922      	ldr	r2, [r4, #16]
 8008234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008238:	6910      	ldr	r0, [r2, #16]
 800823a:	f000 fd29 	bl	8008c90 <__hi0bits>
 800823e:	f1c0 0020 	rsb	r0, r0, #32
 8008242:	9b06      	ldr	r3, [sp, #24]
 8008244:	4418      	add	r0, r3
 8008246:	f010 001f 	ands.w	r0, r0, #31
 800824a:	d076      	beq.n	800833a <_dtoa_r+0x81a>
 800824c:	f1c0 0220 	rsb	r2, r0, #32
 8008250:	2a04      	cmp	r2, #4
 8008252:	dd69      	ble.n	8008328 <_dtoa_r+0x808>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	f1c0 001c 	rsb	r0, r0, #28
 800825a:	4403      	add	r3, r0
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	4406      	add	r6, r0
 8008262:	4403      	add	r3, r0
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	9b05      	ldr	r3, [sp, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd05      	ble.n	8008278 <_dtoa_r+0x758>
 800826c:	9901      	ldr	r1, [sp, #4]
 800826e:	461a      	mov	r2, r3
 8008270:	4648      	mov	r0, r9
 8008272:	f000 fe73 	bl	8008f5c <__lshift>
 8008276:	9001      	str	r0, [sp, #4]
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x76a>
 800827e:	4621      	mov	r1, r4
 8008280:	461a      	mov	r2, r3
 8008282:	4648      	mov	r0, r9
 8008284:	f000 fe6a 	bl	8008f5c <__lshift>
 8008288:	4604      	mov	r4, r0
 800828a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	d056      	beq.n	800833e <_dtoa_r+0x81e>
 8008290:	9801      	ldr	r0, [sp, #4]
 8008292:	4621      	mov	r1, r4
 8008294:	f000 fece 	bl	8009034 <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	da50      	bge.n	800833e <_dtoa_r+0x81e>
 800829c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	9901      	ldr	r1, [sp, #4]
 80082a4:	2300      	movs	r3, #0
 80082a6:	220a      	movs	r2, #10
 80082a8:	4648      	mov	r0, r9
 80082aa:	f000 fcab 	bl	8008c04 <__multadd>
 80082ae:	9b08      	ldr	r3, [sp, #32]
 80082b0:	9001      	str	r0, [sp, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 816e 	beq.w	8008594 <_dtoa_r+0xa74>
 80082b8:	4629      	mov	r1, r5
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	4648      	mov	r0, r9
 80082c0:	f000 fca0 	bl	8008c04 <__multadd>
 80082c4:	f1bb 0f00 	cmp.w	fp, #0
 80082c8:	4605      	mov	r5, r0
 80082ca:	dc64      	bgt.n	8008396 <_dtoa_r+0x876>
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc3e      	bgt.n	8008350 <_dtoa_r+0x830>
 80082d2:	e060      	b.n	8008396 <_dtoa_r+0x876>
 80082d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082d6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082da:	e73c      	b.n	8008156 <_dtoa_r+0x636>
 80082dc:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	bfbf      	itttt	lt
 80082e4:	1ae2      	sublt	r2, r4, r3
 80082e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082e8:	189b      	addlt	r3, r3, r2
 80082ea:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80082ec:	bfae      	itee	ge
 80082ee:	1b1c      	subge	r4, r3, r4
 80082f0:	4623      	movlt	r3, r4
 80082f2:	2400      	movlt	r4, #0
 80082f4:	f1ba 0f00 	cmp.w	sl, #0
 80082f8:	bfb5      	itete	lt
 80082fa:	9a05      	ldrlt	r2, [sp, #20]
 80082fc:	9e05      	ldrge	r6, [sp, #20]
 80082fe:	eba2 060a 	sublt.w	r6, r2, sl
 8008302:	4652      	movge	r2, sl
 8008304:	bfb8      	it	lt
 8008306:	2200      	movlt	r2, #0
 8008308:	e727      	b.n	800815a <_dtoa_r+0x63a>
 800830a:	9e05      	ldr	r6, [sp, #20]
 800830c:	9d08      	ldr	r5, [sp, #32]
 800830e:	461c      	mov	r4, r3
 8008310:	e730      	b.n	8008174 <_dtoa_r+0x654>
 8008312:	461a      	mov	r2, r3
 8008314:	e758      	b.n	80081c8 <_dtoa_r+0x6a8>
 8008316:	2300      	movs	r3, #0
 8008318:	e786      	b.n	8008228 <_dtoa_r+0x708>
 800831a:	9b02      	ldr	r3, [sp, #8]
 800831c:	e784      	b.n	8008228 <_dtoa_r+0x708>
 800831e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008320:	e783      	b.n	800822a <_dtoa_r+0x70a>
 8008322:	2300      	movs	r3, #0
 8008324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008326:	e784      	b.n	8008232 <_dtoa_r+0x712>
 8008328:	d09d      	beq.n	8008266 <_dtoa_r+0x746>
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	321c      	adds	r2, #28
 800832e:	4413      	add	r3, r2
 8008330:	9305      	str	r3, [sp, #20]
 8008332:	9b06      	ldr	r3, [sp, #24]
 8008334:	4416      	add	r6, r2
 8008336:	4413      	add	r3, r2
 8008338:	e794      	b.n	8008264 <_dtoa_r+0x744>
 800833a:	4602      	mov	r2, r0
 800833c:	e7f5      	b.n	800832a <_dtoa_r+0x80a>
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	f8cd 8010 	str.w	r8, [sp, #16]
 8008346:	46d3      	mov	fp, sl
 8008348:	dc21      	bgt.n	800838e <_dtoa_r+0x86e>
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	2b02      	cmp	r3, #2
 800834e:	dd1e      	ble.n	800838e <_dtoa_r+0x86e>
 8008350:	f1bb 0f00 	cmp.w	fp, #0
 8008354:	f47f aeb7 	bne.w	80080c6 <_dtoa_r+0x5a6>
 8008358:	4621      	mov	r1, r4
 800835a:	465b      	mov	r3, fp
 800835c:	2205      	movs	r2, #5
 800835e:	4648      	mov	r0, r9
 8008360:	f000 fc50 	bl	8008c04 <__multadd>
 8008364:	4601      	mov	r1, r0
 8008366:	4604      	mov	r4, r0
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	f000 fe63 	bl	8009034 <__mcmp>
 800836e:	2800      	cmp	r0, #0
 8008370:	f77f aea9 	ble.w	80080c6 <_dtoa_r+0x5a6>
 8008374:	463e      	mov	r6, r7
 8008376:	2331      	movs	r3, #49	@ 0x31
 8008378:	f806 3b01 	strb.w	r3, [r6], #1
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	3301      	adds	r3, #1
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	e6a4      	b.n	80080ce <_dtoa_r+0x5ae>
 8008384:	f8cd 8010 	str.w	r8, [sp, #16]
 8008388:	4654      	mov	r4, sl
 800838a:	4625      	mov	r5, r4
 800838c:	e7f2      	b.n	8008374 <_dtoa_r+0x854>
 800838e:	9b08      	ldr	r3, [sp, #32]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8103 	beq.w	800859c <_dtoa_r+0xa7c>
 8008396:	2e00      	cmp	r6, #0
 8008398:	dd05      	ble.n	80083a6 <_dtoa_r+0x886>
 800839a:	4629      	mov	r1, r5
 800839c:	4632      	mov	r2, r6
 800839e:	4648      	mov	r0, r9
 80083a0:	f000 fddc 	bl	8008f5c <__lshift>
 80083a4:	4605      	mov	r5, r0
 80083a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d058      	beq.n	800845e <_dtoa_r+0x93e>
 80083ac:	6869      	ldr	r1, [r5, #4]
 80083ae:	4648      	mov	r0, r9
 80083b0:	f000 fbc6 	bl	8008b40 <_Balloc>
 80083b4:	4606      	mov	r6, r0
 80083b6:	b928      	cbnz	r0, 80083c4 <_dtoa_r+0x8a4>
 80083b8:	4b82      	ldr	r3, [pc, #520]	@ (80085c4 <_dtoa_r+0xaa4>)
 80083ba:	4602      	mov	r2, r0
 80083bc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083c0:	f7ff bbc7 	b.w	8007b52 <_dtoa_r+0x32>
 80083c4:	692a      	ldr	r2, [r5, #16]
 80083c6:	3202      	adds	r2, #2
 80083c8:	0092      	lsls	r2, r2, #2
 80083ca:	f105 010c 	add.w	r1, r5, #12
 80083ce:	300c      	adds	r0, #12
 80083d0:	f001 f81a 	bl	8009408 <memcpy>
 80083d4:	2201      	movs	r2, #1
 80083d6:	4631      	mov	r1, r6
 80083d8:	4648      	mov	r0, r9
 80083da:	f000 fdbf 	bl	8008f5c <__lshift>
 80083de:	1c7b      	adds	r3, r7, #1
 80083e0:	9305      	str	r3, [sp, #20]
 80083e2:	eb07 030b 	add.w	r3, r7, fp
 80083e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e8:	9b02      	ldr	r3, [sp, #8]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	46a8      	mov	r8, r5
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	4605      	mov	r5, r0
 80083f4:	9b05      	ldr	r3, [sp, #20]
 80083f6:	9801      	ldr	r0, [sp, #4]
 80083f8:	4621      	mov	r1, r4
 80083fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80083fe:	f7ff fb06 	bl	8007a0e <quorem>
 8008402:	4641      	mov	r1, r8
 8008404:	9002      	str	r0, [sp, #8]
 8008406:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800840a:	9801      	ldr	r0, [sp, #4]
 800840c:	f000 fe12 	bl	8009034 <__mcmp>
 8008410:	462a      	mov	r2, r5
 8008412:	9006      	str	r0, [sp, #24]
 8008414:	4621      	mov	r1, r4
 8008416:	4648      	mov	r0, r9
 8008418:	f000 fe28 	bl	800906c <__mdiff>
 800841c:	68c2      	ldr	r2, [r0, #12]
 800841e:	4606      	mov	r6, r0
 8008420:	b9fa      	cbnz	r2, 8008462 <_dtoa_r+0x942>
 8008422:	4601      	mov	r1, r0
 8008424:	9801      	ldr	r0, [sp, #4]
 8008426:	f000 fe05 	bl	8009034 <__mcmp>
 800842a:	4602      	mov	r2, r0
 800842c:	4631      	mov	r1, r6
 800842e:	4648      	mov	r0, r9
 8008430:	920a      	str	r2, [sp, #40]	@ 0x28
 8008432:	f000 fbc5 	bl	8008bc0 <_Bfree>
 8008436:	9b07      	ldr	r3, [sp, #28]
 8008438:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800843a:	9e05      	ldr	r6, [sp, #20]
 800843c:	ea43 0102 	orr.w	r1, r3, r2
 8008440:	9b08      	ldr	r3, [sp, #32]
 8008442:	4319      	orrs	r1, r3
 8008444:	d10f      	bne.n	8008466 <_dtoa_r+0x946>
 8008446:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800844a:	d028      	beq.n	800849e <_dtoa_r+0x97e>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd02      	ble.n	8008458 <_dtoa_r+0x938>
 8008452:	9b02      	ldr	r3, [sp, #8]
 8008454:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008458:	f88b a000 	strb.w	sl, [fp]
 800845c:	e639      	b.n	80080d2 <_dtoa_r+0x5b2>
 800845e:	4628      	mov	r0, r5
 8008460:	e7bd      	b.n	80083de <_dtoa_r+0x8be>
 8008462:	2201      	movs	r2, #1
 8008464:	e7e2      	b.n	800842c <_dtoa_r+0x90c>
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	db04      	blt.n	8008476 <_dtoa_r+0x956>
 800846c:	9907      	ldr	r1, [sp, #28]
 800846e:	430b      	orrs	r3, r1
 8008470:	9908      	ldr	r1, [sp, #32]
 8008472:	430b      	orrs	r3, r1
 8008474:	d120      	bne.n	80084b8 <_dtoa_r+0x998>
 8008476:	2a00      	cmp	r2, #0
 8008478:	ddee      	ble.n	8008458 <_dtoa_r+0x938>
 800847a:	9901      	ldr	r1, [sp, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	4648      	mov	r0, r9
 8008480:	f000 fd6c 	bl	8008f5c <__lshift>
 8008484:	4621      	mov	r1, r4
 8008486:	9001      	str	r0, [sp, #4]
 8008488:	f000 fdd4 	bl	8009034 <__mcmp>
 800848c:	2800      	cmp	r0, #0
 800848e:	dc03      	bgt.n	8008498 <_dtoa_r+0x978>
 8008490:	d1e2      	bne.n	8008458 <_dtoa_r+0x938>
 8008492:	f01a 0f01 	tst.w	sl, #1
 8008496:	d0df      	beq.n	8008458 <_dtoa_r+0x938>
 8008498:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800849c:	d1d9      	bne.n	8008452 <_dtoa_r+0x932>
 800849e:	2339      	movs	r3, #57	@ 0x39
 80084a0:	f88b 3000 	strb.w	r3, [fp]
 80084a4:	4633      	mov	r3, r6
 80084a6:	461e      	mov	r6, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084ae:	2a39      	cmp	r2, #57	@ 0x39
 80084b0:	d053      	beq.n	800855a <_dtoa_r+0xa3a>
 80084b2:	3201      	adds	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	e60c      	b.n	80080d2 <_dtoa_r+0x5b2>
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	dd07      	ble.n	80084cc <_dtoa_r+0x9ac>
 80084bc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80084c0:	d0ed      	beq.n	800849e <_dtoa_r+0x97e>
 80084c2:	f10a 0301 	add.w	r3, sl, #1
 80084c6:	f88b 3000 	strb.w	r3, [fp]
 80084ca:	e602      	b.n	80080d2 <_dtoa_r+0x5b2>
 80084cc:	9b05      	ldr	r3, [sp, #20]
 80084ce:	9a05      	ldr	r2, [sp, #20]
 80084d0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80084d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d029      	beq.n	800852e <_dtoa_r+0xa0e>
 80084da:	9901      	ldr	r1, [sp, #4]
 80084dc:	2300      	movs	r3, #0
 80084de:	220a      	movs	r2, #10
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 fb8f 	bl	8008c04 <__multadd>
 80084e6:	45a8      	cmp	r8, r5
 80084e8:	9001      	str	r0, [sp, #4]
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	f04f 020a 	mov.w	r2, #10
 80084f2:	4641      	mov	r1, r8
 80084f4:	4648      	mov	r0, r9
 80084f6:	d107      	bne.n	8008508 <_dtoa_r+0x9e8>
 80084f8:	f000 fb84 	bl	8008c04 <__multadd>
 80084fc:	4680      	mov	r8, r0
 80084fe:	4605      	mov	r5, r0
 8008500:	9b05      	ldr	r3, [sp, #20]
 8008502:	3301      	adds	r3, #1
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	e775      	b.n	80083f4 <_dtoa_r+0x8d4>
 8008508:	f000 fb7c 	bl	8008c04 <__multadd>
 800850c:	4629      	mov	r1, r5
 800850e:	4680      	mov	r8, r0
 8008510:	2300      	movs	r3, #0
 8008512:	220a      	movs	r2, #10
 8008514:	4648      	mov	r0, r9
 8008516:	f000 fb75 	bl	8008c04 <__multadd>
 800851a:	4605      	mov	r5, r0
 800851c:	e7f0      	b.n	8008500 <_dtoa_r+0x9e0>
 800851e:	f1bb 0f00 	cmp.w	fp, #0
 8008522:	bfcc      	ite	gt
 8008524:	465e      	movgt	r6, fp
 8008526:	2601      	movle	r6, #1
 8008528:	443e      	add	r6, r7
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	9901      	ldr	r1, [sp, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	4648      	mov	r0, r9
 8008534:	f000 fd12 	bl	8008f5c <__lshift>
 8008538:	4621      	mov	r1, r4
 800853a:	9001      	str	r0, [sp, #4]
 800853c:	f000 fd7a 	bl	8009034 <__mcmp>
 8008540:	2800      	cmp	r0, #0
 8008542:	dcaf      	bgt.n	80084a4 <_dtoa_r+0x984>
 8008544:	d102      	bne.n	800854c <_dtoa_r+0xa2c>
 8008546:	f01a 0f01 	tst.w	sl, #1
 800854a:	d1ab      	bne.n	80084a4 <_dtoa_r+0x984>
 800854c:	4633      	mov	r3, r6
 800854e:	461e      	mov	r6, r3
 8008550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008554:	2a30      	cmp	r2, #48	@ 0x30
 8008556:	d0fa      	beq.n	800854e <_dtoa_r+0xa2e>
 8008558:	e5bb      	b.n	80080d2 <_dtoa_r+0x5b2>
 800855a:	429f      	cmp	r7, r3
 800855c:	d1a3      	bne.n	80084a6 <_dtoa_r+0x986>
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	3301      	adds	r3, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	2331      	movs	r3, #49	@ 0x31
 8008566:	703b      	strb	r3, [r7, #0]
 8008568:	e5b3      	b.n	80080d2 <_dtoa_r+0x5b2>
 800856a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800856c:	4f16      	ldr	r7, [pc, #88]	@ (80085c8 <_dtoa_r+0xaa8>)
 800856e:	b11b      	cbz	r3, 8008578 <_dtoa_r+0xa58>
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4638      	mov	r0, r7
 800857a:	b011      	add	sp, #68	@ 0x44
 800857c:	ecbd 8b02 	vpop	{d8}
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b01      	cmp	r3, #1
 8008588:	f77f ae36 	ble.w	80081f8 <_dtoa_r+0x6d8>
 800858c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800858e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008590:	2001      	movs	r0, #1
 8008592:	e656      	b.n	8008242 <_dtoa_r+0x722>
 8008594:	f1bb 0f00 	cmp.w	fp, #0
 8008598:	f77f aed7 	ble.w	800834a <_dtoa_r+0x82a>
 800859c:	463e      	mov	r6, r7
 800859e:	9801      	ldr	r0, [sp, #4]
 80085a0:	4621      	mov	r1, r4
 80085a2:	f7ff fa34 	bl	8007a0e <quorem>
 80085a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80085aa:	f806 ab01 	strb.w	sl, [r6], #1
 80085ae:	1bf2      	subs	r2, r6, r7
 80085b0:	4593      	cmp	fp, r2
 80085b2:	ddb4      	ble.n	800851e <_dtoa_r+0x9fe>
 80085b4:	9901      	ldr	r1, [sp, #4]
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4648      	mov	r0, r9
 80085bc:	f000 fb22 	bl	8008c04 <__multadd>
 80085c0:	9001      	str	r0, [sp, #4]
 80085c2:	e7ec      	b.n	800859e <_dtoa_r+0xa7e>
 80085c4:	08009c20 	.word	0x08009c20
 80085c8:	08009ba4 	.word	0x08009ba4

080085cc <__ssputs_r>:
 80085cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	688e      	ldr	r6, [r1, #8]
 80085d2:	461f      	mov	r7, r3
 80085d4:	42be      	cmp	r6, r7
 80085d6:	680b      	ldr	r3, [r1, #0]
 80085d8:	4682      	mov	sl, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	4690      	mov	r8, r2
 80085de:	d82d      	bhi.n	800863c <__ssputs_r+0x70>
 80085e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085e8:	d026      	beq.n	8008638 <__ssputs_r+0x6c>
 80085ea:	6965      	ldr	r5, [r4, #20]
 80085ec:	6909      	ldr	r1, [r1, #16]
 80085ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f2:	eba3 0901 	sub.w	r9, r3, r1
 80085f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085fa:	1c7b      	adds	r3, r7, #1
 80085fc:	444b      	add	r3, r9
 80085fe:	106d      	asrs	r5, r5, #1
 8008600:	429d      	cmp	r5, r3
 8008602:	bf38      	it	cc
 8008604:	461d      	movcc	r5, r3
 8008606:	0553      	lsls	r3, r2, #21
 8008608:	d527      	bpl.n	800865a <__ssputs_r+0x8e>
 800860a:	4629      	mov	r1, r5
 800860c:	f000 f960 	bl	80088d0 <_malloc_r>
 8008610:	4606      	mov	r6, r0
 8008612:	b360      	cbz	r0, 800866e <__ssputs_r+0xa2>
 8008614:	6921      	ldr	r1, [r4, #16]
 8008616:	464a      	mov	r2, r9
 8008618:	f000 fef6 	bl	8009408 <memcpy>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	6126      	str	r6, [r4, #16]
 800862a:	6165      	str	r5, [r4, #20]
 800862c:	444e      	add	r6, r9
 800862e:	eba5 0509 	sub.w	r5, r5, r9
 8008632:	6026      	str	r6, [r4, #0]
 8008634:	60a5      	str	r5, [r4, #8]
 8008636:	463e      	mov	r6, r7
 8008638:	42be      	cmp	r6, r7
 800863a:	d900      	bls.n	800863e <__ssputs_r+0x72>
 800863c:	463e      	mov	r6, r7
 800863e:	6820      	ldr	r0, [r4, #0]
 8008640:	4632      	mov	r2, r6
 8008642:	4641      	mov	r1, r8
 8008644:	f000 fe6f 	bl	8009326 <memmove>
 8008648:	68a3      	ldr	r3, [r4, #8]
 800864a:	1b9b      	subs	r3, r3, r6
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	4433      	add	r3, r6
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	2000      	movs	r0, #0
 8008656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865a:	462a      	mov	r2, r5
 800865c:	f000 fe35 	bl	80092ca <_realloc_r>
 8008660:	4606      	mov	r6, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d1e0      	bne.n	8008628 <__ssputs_r+0x5c>
 8008666:	6921      	ldr	r1, [r4, #16]
 8008668:	4650      	mov	r0, sl
 800866a:	f000 ff0d 	bl	8009488 <_free_r>
 800866e:	230c      	movs	r3, #12
 8008670:	f8ca 3000 	str.w	r3, [sl]
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008680:	e7e9      	b.n	8008656 <__ssputs_r+0x8a>
	...

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	@ 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d510      	bpl.n	80086ba <_svfiprintf_r+0x36>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b973      	cbnz	r3, 80086ba <_svfiprintf_r+0x36>
 800869c:	2140      	movs	r1, #64	@ 0x40
 800869e:	f000 f917 	bl	80088d0 <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b930      	cbnz	r0, 80086b6 <_svfiprintf_r+0x32>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086b0:	b01d      	add	sp, #116	@ 0x74
 80086b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b6:	2340      	movs	r3, #64	@ 0x40
 80086b8:	616b      	str	r3, [r5, #20]
 80086ba:	2300      	movs	r3, #0
 80086bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086be:	2320      	movs	r3, #32
 80086c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c8:	2330      	movs	r3, #48	@ 0x30
 80086ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008868 <_svfiprintf_r+0x1e4>
 80086ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086d2:	f04f 0901 	mov.w	r9, #1
 80086d6:	4623      	mov	r3, r4
 80086d8:	469a      	mov	sl, r3
 80086da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086de:	b10a      	cbz	r2, 80086e4 <_svfiprintf_r+0x60>
 80086e0:	2a25      	cmp	r2, #37	@ 0x25
 80086e2:	d1f9      	bne.n	80086d8 <_svfiprintf_r+0x54>
 80086e4:	ebba 0b04 	subs.w	fp, sl, r4
 80086e8:	d00b      	beq.n	8008702 <_svfiprintf_r+0x7e>
 80086ea:	465b      	mov	r3, fp
 80086ec:	4622      	mov	r2, r4
 80086ee:	4629      	mov	r1, r5
 80086f0:	4638      	mov	r0, r7
 80086f2:	f7ff ff6b 	bl	80085cc <__ssputs_r>
 80086f6:	3001      	adds	r0, #1
 80086f8:	f000 80a7 	beq.w	800884a <_svfiprintf_r+0x1c6>
 80086fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086fe:	445a      	add	r2, fp
 8008700:	9209      	str	r2, [sp, #36]	@ 0x24
 8008702:	f89a 3000 	ldrb.w	r3, [sl]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 809f 	beq.w	800884a <_svfiprintf_r+0x1c6>
 800870c:	2300      	movs	r3, #0
 800870e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008716:	f10a 0a01 	add.w	sl, sl, #1
 800871a:	9304      	str	r3, [sp, #16]
 800871c:	9307      	str	r3, [sp, #28]
 800871e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008722:	931a      	str	r3, [sp, #104]	@ 0x68
 8008724:	4654      	mov	r4, sl
 8008726:	2205      	movs	r2, #5
 8008728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872c:	484e      	ldr	r0, [pc, #312]	@ (8008868 <_svfiprintf_r+0x1e4>)
 800872e:	f7f7 fd87 	bl	8000240 <memchr>
 8008732:	9a04      	ldr	r2, [sp, #16]
 8008734:	b9d8      	cbnz	r0, 800876e <_svfiprintf_r+0xea>
 8008736:	06d0      	lsls	r0, r2, #27
 8008738:	bf44      	itt	mi
 800873a:	2320      	movmi	r3, #32
 800873c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008740:	0711      	lsls	r1, r2, #28
 8008742:	bf44      	itt	mi
 8008744:	232b      	movmi	r3, #43	@ 0x2b
 8008746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800874a:	f89a 3000 	ldrb.w	r3, [sl]
 800874e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008750:	d015      	beq.n	800877e <_svfiprintf_r+0xfa>
 8008752:	9a07      	ldr	r2, [sp, #28]
 8008754:	4654      	mov	r4, sl
 8008756:	2000      	movs	r0, #0
 8008758:	f04f 0c0a 	mov.w	ip, #10
 800875c:	4621      	mov	r1, r4
 800875e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008762:	3b30      	subs	r3, #48	@ 0x30
 8008764:	2b09      	cmp	r3, #9
 8008766:	d94b      	bls.n	8008800 <_svfiprintf_r+0x17c>
 8008768:	b1b0      	cbz	r0, 8008798 <_svfiprintf_r+0x114>
 800876a:	9207      	str	r2, [sp, #28]
 800876c:	e014      	b.n	8008798 <_svfiprintf_r+0x114>
 800876e:	eba0 0308 	sub.w	r3, r0, r8
 8008772:	fa09 f303 	lsl.w	r3, r9, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	46a2      	mov	sl, r4
 800877c:	e7d2      	b.n	8008724 <_svfiprintf_r+0xa0>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	1d19      	adds	r1, r3, #4
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	9103      	str	r1, [sp, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfbb      	ittet	lt
 800878a:	425b      	neglt	r3, r3
 800878c:	f042 0202 	orrlt.w	r2, r2, #2
 8008790:	9307      	strge	r3, [sp, #28]
 8008792:	9307      	strlt	r3, [sp, #28]
 8008794:	bfb8      	it	lt
 8008796:	9204      	strlt	r2, [sp, #16]
 8008798:	7823      	ldrb	r3, [r4, #0]
 800879a:	2b2e      	cmp	r3, #46	@ 0x2e
 800879c:	d10a      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879e:	7863      	ldrb	r3, [r4, #1]
 80087a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80087a2:	d132      	bne.n	800880a <_svfiprintf_r+0x186>
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	9203      	str	r2, [sp, #12]
 80087ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008878 <_svfiprintf_r+0x1f4>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fd3f 	bl	8000240 <memchr>
 80087c2:	b138      	cbz	r0, 80087d4 <_svfiprintf_r+0x150>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	2240      	movs	r2, #64	@ 0x40
 80087cc:	4082      	lsls	r2, r0
 80087ce:	4313      	orrs	r3, r2
 80087d0:	3401      	adds	r4, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d8:	4824      	ldr	r0, [pc, #144]	@ (800886c <_svfiprintf_r+0x1e8>)
 80087da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087de:	2206      	movs	r2, #6
 80087e0:	f7f7 fd2e 	bl	8000240 <memchr>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d036      	beq.n	8008856 <_svfiprintf_r+0x1d2>
 80087e8:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <_svfiprintf_r+0x1ec>)
 80087ea:	bb1b      	cbnz	r3, 8008834 <_svfiprintf_r+0x1b0>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	3307      	adds	r3, #7
 80087f0:	f023 0307 	bic.w	r3, r3, #7
 80087f4:	3308      	adds	r3, #8
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fa:	4433      	add	r3, r6
 80087fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80087fe:	e76a      	b.n	80086d6 <_svfiprintf_r+0x52>
 8008800:	fb0c 3202 	mla	r2, ip, r2, r3
 8008804:	460c      	mov	r4, r1
 8008806:	2001      	movs	r0, #1
 8008808:	e7a8      	b.n	800875c <_svfiprintf_r+0xd8>
 800880a:	2300      	movs	r3, #0
 800880c:	3401      	adds	r4, #1
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	4619      	mov	r1, r3
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4620      	mov	r0, r4
 8008818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881c:	3a30      	subs	r2, #48	@ 0x30
 800881e:	2a09      	cmp	r2, #9
 8008820:	d903      	bls.n	800882a <_svfiprintf_r+0x1a6>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0c6      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008826:	9105      	str	r1, [sp, #20]
 8008828:	e7c4      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882a:	fb0c 2101 	mla	r1, ip, r1, r2
 800882e:	4604      	mov	r4, r0
 8008830:	2301      	movs	r3, #1
 8008832:	e7f0      	b.n	8008816 <_svfiprintf_r+0x192>
 8008834:	ab03      	add	r3, sp, #12
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	462a      	mov	r2, r5
 800883a:	4b0e      	ldr	r3, [pc, #56]	@ (8008874 <_svfiprintf_r+0x1f0>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	4638      	mov	r0, r7
 8008840:	f7fe fc22 	bl	8007088 <_printf_float>
 8008844:	1c42      	adds	r2, r0, #1
 8008846:	4606      	mov	r6, r0
 8008848:	d1d6      	bne.n	80087f8 <_svfiprintf_r+0x174>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	065b      	lsls	r3, r3, #25
 800884e:	f53f af2d 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008854:	e72c      	b.n	80086b0 <_svfiprintf_r+0x2c>
 8008856:	ab03      	add	r3, sp, #12
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	462a      	mov	r2, r5
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <_svfiprintf_r+0x1f0>)
 800885e:	a904      	add	r1, sp, #16
 8008860:	4638      	mov	r0, r7
 8008862:	f7fe fe99 	bl	8007598 <_printf_i>
 8008866:	e7ed      	b.n	8008844 <_svfiprintf_r+0x1c0>
 8008868:	08009c31 	.word	0x08009c31
 800886c:	08009c3b 	.word	0x08009c3b
 8008870:	08007089 	.word	0x08007089
 8008874:	080085cd 	.word	0x080085cd
 8008878:	08009c37 	.word	0x08009c37

0800887c <malloc>:
 800887c:	4b02      	ldr	r3, [pc, #8]	@ (8008888 <malloc+0xc>)
 800887e:	4601      	mov	r1, r0
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	f000 b825 	b.w	80088d0 <_malloc_r>
 8008886:	bf00      	nop
 8008888:	2000002c 	.word	0x2000002c

0800888c <sbrk_aligned>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	4e0f      	ldr	r6, [pc, #60]	@ (80088cc <sbrk_aligned+0x40>)
 8008890:	460c      	mov	r4, r1
 8008892:	6831      	ldr	r1, [r6, #0]
 8008894:	4605      	mov	r5, r0
 8008896:	b911      	cbnz	r1, 800889e <sbrk_aligned+0x12>
 8008898:	f000 fd94 	bl	80093c4 <_sbrk_r>
 800889c:	6030      	str	r0, [r6, #0]
 800889e:	4621      	mov	r1, r4
 80088a0:	4628      	mov	r0, r5
 80088a2:	f000 fd8f 	bl	80093c4 <_sbrk_r>
 80088a6:	1c43      	adds	r3, r0, #1
 80088a8:	d103      	bne.n	80088b2 <sbrk_aligned+0x26>
 80088aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088ae:	4620      	mov	r0, r4
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	1cc4      	adds	r4, r0, #3
 80088b4:	f024 0403 	bic.w	r4, r4, #3
 80088b8:	42a0      	cmp	r0, r4
 80088ba:	d0f8      	beq.n	80088ae <sbrk_aligned+0x22>
 80088bc:	1a21      	subs	r1, r4, r0
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 fd80 	bl	80093c4 <_sbrk_r>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d1f2      	bne.n	80088ae <sbrk_aligned+0x22>
 80088c8:	e7ef      	b.n	80088aa <sbrk_aligned+0x1e>
 80088ca:	bf00      	nop
 80088cc:	20000cfc 	.word	0x20000cfc

080088d0 <_malloc_r>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	1ccd      	adds	r5, r1, #3
 80088d6:	f025 0503 	bic.w	r5, r5, #3
 80088da:	3508      	adds	r5, #8
 80088dc:	2d0c      	cmp	r5, #12
 80088de:	bf38      	it	cc
 80088e0:	250c      	movcc	r5, #12
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	4606      	mov	r6, r0
 80088e6:	db01      	blt.n	80088ec <_malloc_r+0x1c>
 80088e8:	42a9      	cmp	r1, r5
 80088ea:	d904      	bls.n	80088f6 <_malloc_r+0x26>
 80088ec:	230c      	movs	r3, #12
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	2000      	movs	r0, #0
 80088f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089cc <_malloc_r+0xfc>
 80088fa:	f000 f915 	bl	8008b28 <__malloc_lock>
 80088fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008902:	461c      	mov	r4, r3
 8008904:	bb44      	cbnz	r4, 8008958 <_malloc_r+0x88>
 8008906:	4629      	mov	r1, r5
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff ffbf 	bl	800888c <sbrk_aligned>
 800890e:	1c43      	adds	r3, r0, #1
 8008910:	4604      	mov	r4, r0
 8008912:	d158      	bne.n	80089c6 <_malloc_r+0xf6>
 8008914:	f8d8 4000 	ldr.w	r4, [r8]
 8008918:	4627      	mov	r7, r4
 800891a:	2f00      	cmp	r7, #0
 800891c:	d143      	bne.n	80089a6 <_malloc_r+0xd6>
 800891e:	2c00      	cmp	r4, #0
 8008920:	d04b      	beq.n	80089ba <_malloc_r+0xea>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	4639      	mov	r1, r7
 8008926:	4630      	mov	r0, r6
 8008928:	eb04 0903 	add.w	r9, r4, r3
 800892c:	f000 fd4a 	bl	80093c4 <_sbrk_r>
 8008930:	4581      	cmp	r9, r0
 8008932:	d142      	bne.n	80089ba <_malloc_r+0xea>
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	1a6d      	subs	r5, r5, r1
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa6 	bl	800888c <sbrk_aligned>
 8008940:	3001      	adds	r0, #1
 8008942:	d03a      	beq.n	80089ba <_malloc_r+0xea>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	442b      	add	r3, r5
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	f8d8 3000 	ldr.w	r3, [r8]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	bb62      	cbnz	r2, 80089ac <_malloc_r+0xdc>
 8008952:	f8c8 7000 	str.w	r7, [r8]
 8008956:	e00f      	b.n	8008978 <_malloc_r+0xa8>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	1b52      	subs	r2, r2, r5
 800895c:	d420      	bmi.n	80089a0 <_malloc_r+0xd0>
 800895e:	2a0b      	cmp	r2, #11
 8008960:	d917      	bls.n	8008992 <_malloc_r+0xc2>
 8008962:	1961      	adds	r1, r4, r5
 8008964:	42a3      	cmp	r3, r4
 8008966:	6025      	str	r5, [r4, #0]
 8008968:	bf18      	it	ne
 800896a:	6059      	strne	r1, [r3, #4]
 800896c:	6863      	ldr	r3, [r4, #4]
 800896e:	bf08      	it	eq
 8008970:	f8c8 1000 	streq.w	r1, [r8]
 8008974:	5162      	str	r2, [r4, r5]
 8008976:	604b      	str	r3, [r1, #4]
 8008978:	4630      	mov	r0, r6
 800897a:	f000 f8db 	bl	8008b34 <__malloc_unlock>
 800897e:	f104 000b 	add.w	r0, r4, #11
 8008982:	1d23      	adds	r3, r4, #4
 8008984:	f020 0007 	bic.w	r0, r0, #7
 8008988:	1ac2      	subs	r2, r0, r3
 800898a:	bf1c      	itt	ne
 800898c:	1a1b      	subne	r3, r3, r0
 800898e:	50a3      	strne	r3, [r4, r2]
 8008990:	e7af      	b.n	80088f2 <_malloc_r+0x22>
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	42a3      	cmp	r3, r4
 8008996:	bf0c      	ite	eq
 8008998:	f8c8 2000 	streq.w	r2, [r8]
 800899c:	605a      	strne	r2, [r3, #4]
 800899e:	e7eb      	b.n	8008978 <_malloc_r+0xa8>
 80089a0:	4623      	mov	r3, r4
 80089a2:	6864      	ldr	r4, [r4, #4]
 80089a4:	e7ae      	b.n	8008904 <_malloc_r+0x34>
 80089a6:	463c      	mov	r4, r7
 80089a8:	687f      	ldr	r7, [r7, #4]
 80089aa:	e7b6      	b.n	800891a <_malloc_r+0x4a>
 80089ac:	461a      	mov	r2, r3
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d1fb      	bne.n	80089ac <_malloc_r+0xdc>
 80089b4:	2300      	movs	r3, #0
 80089b6:	6053      	str	r3, [r2, #4]
 80089b8:	e7de      	b.n	8008978 <_malloc_r+0xa8>
 80089ba:	230c      	movs	r3, #12
 80089bc:	6033      	str	r3, [r6, #0]
 80089be:	4630      	mov	r0, r6
 80089c0:	f000 f8b8 	bl	8008b34 <__malloc_unlock>
 80089c4:	e794      	b.n	80088f0 <_malloc_r+0x20>
 80089c6:	6005      	str	r5, [r0, #0]
 80089c8:	e7d6      	b.n	8008978 <_malloc_r+0xa8>
 80089ca:	bf00      	nop
 80089cc:	20000d00 	.word	0x20000d00

080089d0 <__sflush_r>:
 80089d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d8:	0716      	lsls	r6, r2, #28
 80089da:	4605      	mov	r5, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	d454      	bmi.n	8008a8a <__sflush_r+0xba>
 80089e0:	684b      	ldr	r3, [r1, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc02      	bgt.n	80089ec <__sflush_r+0x1c>
 80089e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dd48      	ble.n	8008a7e <__sflush_r+0xae>
 80089ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	d045      	beq.n	8008a7e <__sflush_r+0xae>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089f8:	682f      	ldr	r7, [r5, #0]
 80089fa:	6a21      	ldr	r1, [r4, #32]
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	d030      	beq.n	8008a62 <__sflush_r+0x92>
 8008a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	0759      	lsls	r1, r3, #29
 8008a06:	d505      	bpl.n	8008a14 <__sflush_r+0x44>
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	1ad2      	subs	r2, r2, r3
 8008a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a0e:	b10b      	cbz	r3, 8008a14 <__sflush_r+0x44>
 8008a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a18:	6a21      	ldr	r1, [r4, #32]
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b0      	blx	r6
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	d106      	bne.n	8008a32 <__sflush_r+0x62>
 8008a24:	6829      	ldr	r1, [r5, #0]
 8008a26:	291d      	cmp	r1, #29
 8008a28:	d82b      	bhi.n	8008a82 <__sflush_r+0xb2>
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ad4 <__sflush_r+0x104>)
 8008a2c:	410a      	asrs	r2, r1
 8008a2e:	07d6      	lsls	r6, r2, #31
 8008a30:	d427      	bmi.n	8008a82 <__sflush_r+0xb2>
 8008a32:	2200      	movs	r2, #0
 8008a34:	6062      	str	r2, [r4, #4]
 8008a36:	04d9      	lsls	r1, r3, #19
 8008a38:	6922      	ldr	r2, [r4, #16]
 8008a3a:	6022      	str	r2, [r4, #0]
 8008a3c:	d504      	bpl.n	8008a48 <__sflush_r+0x78>
 8008a3e:	1c42      	adds	r2, r0, #1
 8008a40:	d101      	bne.n	8008a46 <__sflush_r+0x76>
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	b903      	cbnz	r3, 8008a48 <__sflush_r+0x78>
 8008a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a4a:	602f      	str	r7, [r5, #0]
 8008a4c:	b1b9      	cbz	r1, 8008a7e <__sflush_r+0xae>
 8008a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a52:	4299      	cmp	r1, r3
 8008a54:	d002      	beq.n	8008a5c <__sflush_r+0x8c>
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 fd16 	bl	8009488 <_free_r>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a60:	e00d      	b.n	8008a7e <__sflush_r+0xae>
 8008a62:	2301      	movs	r3, #1
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b0      	blx	r6
 8008a68:	4602      	mov	r2, r0
 8008a6a:	1c50      	adds	r0, r2, #1
 8008a6c:	d1c9      	bne.n	8008a02 <__sflush_r+0x32>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0c6      	beq.n	8008a02 <__sflush_r+0x32>
 8008a74:	2b1d      	cmp	r3, #29
 8008a76:	d001      	beq.n	8008a7c <__sflush_r+0xac>
 8008a78:	2b16      	cmp	r3, #22
 8008a7a:	d11e      	bne.n	8008aba <__sflush_r+0xea>
 8008a7c:	602f      	str	r7, [r5, #0]
 8008a7e:	2000      	movs	r0, #0
 8008a80:	e022      	b.n	8008ac8 <__sflush_r+0xf8>
 8008a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a86:	b21b      	sxth	r3, r3
 8008a88:	e01b      	b.n	8008ac2 <__sflush_r+0xf2>
 8008a8a:	690f      	ldr	r7, [r1, #16]
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	d0f6      	beq.n	8008a7e <__sflush_r+0xae>
 8008a90:	0793      	lsls	r3, r2, #30
 8008a92:	680e      	ldr	r6, [r1, #0]
 8008a94:	bf08      	it	eq
 8008a96:	694b      	ldreq	r3, [r1, #20]
 8008a98:	600f      	str	r7, [r1, #0]
 8008a9a:	bf18      	it	ne
 8008a9c:	2300      	movne	r3, #0
 8008a9e:	eba6 0807 	sub.w	r8, r6, r7
 8008aa2:	608b      	str	r3, [r1, #8]
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	dde9      	ble.n	8008a7e <__sflush_r+0xae>
 8008aaa:	6a21      	ldr	r1, [r4, #32]
 8008aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aae:	4643      	mov	r3, r8
 8008ab0:	463a      	mov	r2, r7
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b0      	blx	r6
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	dc08      	bgt.n	8008acc <__sflush_r+0xfc>
 8008aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	4407      	add	r7, r0
 8008ace:	eba8 0800 	sub.w	r8, r8, r0
 8008ad2:	e7e7      	b.n	8008aa4 <__sflush_r+0xd4>
 8008ad4:	dfbffffe 	.word	0xdfbffffe

08008ad8 <_fflush_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b913      	cbnz	r3, 8008ae8 <_fflush_r+0x10>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	b118      	cbz	r0, 8008af2 <_fflush_r+0x1a>
 8008aea:	6a03      	ldr	r3, [r0, #32]
 8008aec:	b90b      	cbnz	r3, 8008af2 <_fflush_r+0x1a>
 8008aee:	f7fe ff1f 	bl	8007930 <__sinit>
 8008af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f3      	beq.n	8008ae2 <_fflush_r+0xa>
 8008afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008afc:	07d0      	lsls	r0, r2, #31
 8008afe:	d404      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b00:	0599      	lsls	r1, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b06:	f7fe ff80 	bl	8007a0a <__retarget_lock_acquire_recursive>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f7ff ff5f 	bl	80089d0 <__sflush_r>
 8008b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b14:	07da      	lsls	r2, r3, #31
 8008b16:	4605      	mov	r5, r0
 8008b18:	d4e4      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	059b      	lsls	r3, r3, #22
 8008b1e:	d4e1      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b22:	f7fe ff73 	bl	8007a0c <__retarget_lock_release_recursive>
 8008b26:	e7dd      	b.n	8008ae4 <_fflush_r+0xc>

08008b28 <__malloc_lock>:
 8008b28:	4801      	ldr	r0, [pc, #4]	@ (8008b30 <__malloc_lock+0x8>)
 8008b2a:	f7fe bf6e 	b.w	8007a0a <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20000cf8 	.word	0x20000cf8

08008b34 <__malloc_unlock>:
 8008b34:	4801      	ldr	r0, [pc, #4]	@ (8008b3c <__malloc_unlock+0x8>)
 8008b36:	f7fe bf69 	b.w	8007a0c <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20000cf8 	.word	0x20000cf8

08008b40 <_Balloc>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	69c6      	ldr	r6, [r0, #28]
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	b976      	cbnz	r6, 8008b68 <_Balloc+0x28>
 8008b4a:	2010      	movs	r0, #16
 8008b4c:	f7ff fe96 	bl	800887c <malloc>
 8008b50:	4602      	mov	r2, r0
 8008b52:	61e0      	str	r0, [r4, #28]
 8008b54:	b920      	cbnz	r0, 8008b60 <_Balloc+0x20>
 8008b56:	4b18      	ldr	r3, [pc, #96]	@ (8008bb8 <_Balloc+0x78>)
 8008b58:	4818      	ldr	r0, [pc, #96]	@ (8008bbc <_Balloc+0x7c>)
 8008b5a:	216b      	movs	r1, #107	@ 0x6b
 8008b5c:	f000 fc62 	bl	8009424 <__assert_func>
 8008b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b64:	6006      	str	r6, [r0, #0]
 8008b66:	60c6      	str	r6, [r0, #12]
 8008b68:	69e6      	ldr	r6, [r4, #28]
 8008b6a:	68f3      	ldr	r3, [r6, #12]
 8008b6c:	b183      	cbz	r3, 8008b90 <_Balloc+0x50>
 8008b6e:	69e3      	ldr	r3, [r4, #28]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b76:	b9b8      	cbnz	r0, 8008ba8 <_Balloc+0x68>
 8008b78:	2101      	movs	r1, #1
 8008b7a:	fa01 f605 	lsl.w	r6, r1, r5
 8008b7e:	1d72      	adds	r2, r6, #5
 8008b80:	0092      	lsls	r2, r2, #2
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 fc6c 	bl	8009460 <_calloc_r>
 8008b88:	b160      	cbz	r0, 8008ba4 <_Balloc+0x64>
 8008b8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b8e:	e00e      	b.n	8008bae <_Balloc+0x6e>
 8008b90:	2221      	movs	r2, #33	@ 0x21
 8008b92:	2104      	movs	r1, #4
 8008b94:	4620      	mov	r0, r4
 8008b96:	f000 fc63 	bl	8009460 <_calloc_r>
 8008b9a:	69e3      	ldr	r3, [r4, #28]
 8008b9c:	60f0      	str	r0, [r6, #12]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e4      	bne.n	8008b6e <_Balloc+0x2e>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	6802      	ldr	r2, [r0, #0]
 8008baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bb4:	e7f7      	b.n	8008ba6 <_Balloc+0x66>
 8008bb6:	bf00      	nop
 8008bb8:	08009bb1 	.word	0x08009bb1
 8008bbc:	08009c42 	.word	0x08009c42

08008bc0 <_Bfree>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	69c6      	ldr	r6, [r0, #28]
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	b976      	cbnz	r6, 8008be8 <_Bfree+0x28>
 8008bca:	2010      	movs	r0, #16
 8008bcc:	f7ff fe56 	bl	800887c <malloc>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	61e8      	str	r0, [r5, #28]
 8008bd4:	b920      	cbnz	r0, 8008be0 <_Bfree+0x20>
 8008bd6:	4b09      	ldr	r3, [pc, #36]	@ (8008bfc <_Bfree+0x3c>)
 8008bd8:	4809      	ldr	r0, [pc, #36]	@ (8008c00 <_Bfree+0x40>)
 8008bda:	218f      	movs	r1, #143	@ 0x8f
 8008bdc:	f000 fc22 	bl	8009424 <__assert_func>
 8008be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008be4:	6006      	str	r6, [r0, #0]
 8008be6:	60c6      	str	r6, [r0, #12]
 8008be8:	b13c      	cbz	r4, 8008bfa <_Bfree+0x3a>
 8008bea:	69eb      	ldr	r3, [r5, #28]
 8008bec:	6862      	ldr	r2, [r4, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf4:	6021      	str	r1, [r4, #0]
 8008bf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}
 8008bfc:	08009bb1 	.word	0x08009bb1
 8008c00:	08009c42 	.word	0x08009c42

08008c04 <__multadd>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	690d      	ldr	r5, [r1, #16]
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	461e      	mov	r6, r3
 8008c10:	f101 0c14 	add.w	ip, r1, #20
 8008c14:	2000      	movs	r0, #0
 8008c16:	f8dc 3000 	ldr.w	r3, [ip]
 8008c1a:	b299      	uxth	r1, r3
 8008c1c:	fb02 6101 	mla	r1, r2, r1, r6
 8008c20:	0c1e      	lsrs	r6, r3, #16
 8008c22:	0c0b      	lsrs	r3, r1, #16
 8008c24:	fb02 3306 	mla	r3, r2, r6, r3
 8008c28:	b289      	uxth	r1, r1
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c30:	4285      	cmp	r5, r0
 8008c32:	f84c 1b04 	str.w	r1, [ip], #4
 8008c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c3a:	dcec      	bgt.n	8008c16 <__multadd+0x12>
 8008c3c:	b30e      	cbz	r6, 8008c82 <__multadd+0x7e>
 8008c3e:	68a3      	ldr	r3, [r4, #8]
 8008c40:	42ab      	cmp	r3, r5
 8008c42:	dc19      	bgt.n	8008c78 <__multadd+0x74>
 8008c44:	6861      	ldr	r1, [r4, #4]
 8008c46:	4638      	mov	r0, r7
 8008c48:	3101      	adds	r1, #1
 8008c4a:	f7ff ff79 	bl	8008b40 <_Balloc>
 8008c4e:	4680      	mov	r8, r0
 8008c50:	b928      	cbnz	r0, 8008c5e <__multadd+0x5a>
 8008c52:	4602      	mov	r2, r0
 8008c54:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <__multadd+0x84>)
 8008c56:	480d      	ldr	r0, [pc, #52]	@ (8008c8c <__multadd+0x88>)
 8008c58:	21ba      	movs	r1, #186	@ 0xba
 8008c5a:	f000 fbe3 	bl	8009424 <__assert_func>
 8008c5e:	6922      	ldr	r2, [r4, #16]
 8008c60:	3202      	adds	r2, #2
 8008c62:	f104 010c 	add.w	r1, r4, #12
 8008c66:	0092      	lsls	r2, r2, #2
 8008c68:	300c      	adds	r0, #12
 8008c6a:	f000 fbcd 	bl	8009408 <memcpy>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4638      	mov	r0, r7
 8008c72:	f7ff ffa5 	bl	8008bc0 <_Bfree>
 8008c76:	4644      	mov	r4, r8
 8008c78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	615e      	str	r6, [r3, #20]
 8008c80:	6125      	str	r5, [r4, #16]
 8008c82:	4620      	mov	r0, r4
 8008c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c88:	08009c20 	.word	0x08009c20
 8008c8c:	08009c42 	.word	0x08009c42

08008c90 <__hi0bits>:
 8008c90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c94:	4603      	mov	r3, r0
 8008c96:	bf36      	itet	cc
 8008c98:	0403      	lslcc	r3, r0, #16
 8008c9a:	2000      	movcs	r0, #0
 8008c9c:	2010      	movcc	r0, #16
 8008c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ca2:	bf3c      	itt	cc
 8008ca4:	021b      	lslcc	r3, r3, #8
 8008ca6:	3008      	addcc	r0, #8
 8008ca8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cac:	bf3c      	itt	cc
 8008cae:	011b      	lslcc	r3, r3, #4
 8008cb0:	3004      	addcc	r0, #4
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb6:	bf3c      	itt	cc
 8008cb8:	009b      	lslcc	r3, r3, #2
 8008cba:	3002      	addcc	r0, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	db05      	blt.n	8008ccc <__hi0bits+0x3c>
 8008cc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008cc4:	f100 0001 	add.w	r0, r0, #1
 8008cc8:	bf08      	it	eq
 8008cca:	2020      	moveq	r0, #32
 8008ccc:	4770      	bx	lr

08008cce <__lo0bits>:
 8008cce:	6803      	ldr	r3, [r0, #0]
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	f013 0007 	ands.w	r0, r3, #7
 8008cd6:	d00b      	beq.n	8008cf0 <__lo0bits+0x22>
 8008cd8:	07d9      	lsls	r1, r3, #31
 8008cda:	d421      	bmi.n	8008d20 <__lo0bits+0x52>
 8008cdc:	0798      	lsls	r0, r3, #30
 8008cde:	bf49      	itett	mi
 8008ce0:	085b      	lsrmi	r3, r3, #1
 8008ce2:	089b      	lsrpl	r3, r3, #2
 8008ce4:	2001      	movmi	r0, #1
 8008ce6:	6013      	strmi	r3, [r2, #0]
 8008ce8:	bf5c      	itt	pl
 8008cea:	6013      	strpl	r3, [r2, #0]
 8008cec:	2002      	movpl	r0, #2
 8008cee:	4770      	bx	lr
 8008cf0:	b299      	uxth	r1, r3
 8008cf2:	b909      	cbnz	r1, 8008cf8 <__lo0bits+0x2a>
 8008cf4:	0c1b      	lsrs	r3, r3, #16
 8008cf6:	2010      	movs	r0, #16
 8008cf8:	b2d9      	uxtb	r1, r3
 8008cfa:	b909      	cbnz	r1, 8008d00 <__lo0bits+0x32>
 8008cfc:	3008      	adds	r0, #8
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	0719      	lsls	r1, r3, #28
 8008d02:	bf04      	itt	eq
 8008d04:	091b      	lsreq	r3, r3, #4
 8008d06:	3004      	addeq	r0, #4
 8008d08:	0799      	lsls	r1, r3, #30
 8008d0a:	bf04      	itt	eq
 8008d0c:	089b      	lsreq	r3, r3, #2
 8008d0e:	3002      	addeq	r0, #2
 8008d10:	07d9      	lsls	r1, r3, #31
 8008d12:	d403      	bmi.n	8008d1c <__lo0bits+0x4e>
 8008d14:	085b      	lsrs	r3, r3, #1
 8008d16:	f100 0001 	add.w	r0, r0, #1
 8008d1a:	d003      	beq.n	8008d24 <__lo0bits+0x56>
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4770      	bx	lr
 8008d20:	2000      	movs	r0, #0
 8008d22:	4770      	bx	lr
 8008d24:	2020      	movs	r0, #32
 8008d26:	4770      	bx	lr

08008d28 <__i2b>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	f7ff ff07 	bl	8008b40 <_Balloc>
 8008d32:	4602      	mov	r2, r0
 8008d34:	b928      	cbnz	r0, 8008d42 <__i2b+0x1a>
 8008d36:	4b05      	ldr	r3, [pc, #20]	@ (8008d4c <__i2b+0x24>)
 8008d38:	4805      	ldr	r0, [pc, #20]	@ (8008d50 <__i2b+0x28>)
 8008d3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008d3e:	f000 fb71 	bl	8009424 <__assert_func>
 8008d42:	2301      	movs	r3, #1
 8008d44:	6144      	str	r4, [r0, #20]
 8008d46:	6103      	str	r3, [r0, #16]
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009c20 	.word	0x08009c20
 8008d50:	08009c42 	.word	0x08009c42

08008d54 <__multiply>:
 8008d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d58:	4614      	mov	r4, r2
 8008d5a:	690a      	ldr	r2, [r1, #16]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	bfa8      	it	ge
 8008d62:	4623      	movge	r3, r4
 8008d64:	460f      	mov	r7, r1
 8008d66:	bfa4      	itt	ge
 8008d68:	460c      	movge	r4, r1
 8008d6a:	461f      	movge	r7, r3
 8008d6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	6861      	ldr	r1, [r4, #4]
 8008d78:	eb0a 0609 	add.w	r6, sl, r9
 8008d7c:	42b3      	cmp	r3, r6
 8008d7e:	b085      	sub	sp, #20
 8008d80:	bfb8      	it	lt
 8008d82:	3101      	addlt	r1, #1
 8008d84:	f7ff fedc 	bl	8008b40 <_Balloc>
 8008d88:	b930      	cbnz	r0, 8008d98 <__multiply+0x44>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	4b44      	ldr	r3, [pc, #272]	@ (8008ea0 <__multiply+0x14c>)
 8008d8e:	4845      	ldr	r0, [pc, #276]	@ (8008ea4 <__multiply+0x150>)
 8008d90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d94:	f000 fb46 	bl	8009424 <__assert_func>
 8008d98:	f100 0514 	add.w	r5, r0, #20
 8008d9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008da0:	462b      	mov	r3, r5
 8008da2:	2200      	movs	r2, #0
 8008da4:	4543      	cmp	r3, r8
 8008da6:	d321      	bcc.n	8008dec <__multiply+0x98>
 8008da8:	f107 0114 	add.w	r1, r7, #20
 8008dac:	f104 0214 	add.w	r2, r4, #20
 8008db0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008db4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008db8:	9302      	str	r3, [sp, #8]
 8008dba:	1b13      	subs	r3, r2, r4
 8008dbc:	3b15      	subs	r3, #21
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	f104 0715 	add.w	r7, r4, #21
 8008dc8:	42ba      	cmp	r2, r7
 8008dca:	bf38      	it	cc
 8008dcc:	2304      	movcc	r3, #4
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	9103      	str	r1, [sp, #12]
 8008dd4:	428b      	cmp	r3, r1
 8008dd6:	d80c      	bhi.n	8008df2 <__multiply+0x9e>
 8008dd8:	2e00      	cmp	r6, #0
 8008dda:	dd03      	ble.n	8008de4 <__multiply+0x90>
 8008ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d05b      	beq.n	8008e9c <__multiply+0x148>
 8008de4:	6106      	str	r6, [r0, #16]
 8008de6:	b005      	add	sp, #20
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	f843 2b04 	str.w	r2, [r3], #4
 8008df0:	e7d8      	b.n	8008da4 <__multiply+0x50>
 8008df2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008df6:	f1ba 0f00 	cmp.w	sl, #0
 8008dfa:	d024      	beq.n	8008e46 <__multiply+0xf2>
 8008dfc:	f104 0e14 	add.w	lr, r4, #20
 8008e00:	46a9      	mov	r9, r5
 8008e02:	f04f 0c00 	mov.w	ip, #0
 8008e06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e0a:	f8d9 3000 	ldr.w	r3, [r9]
 8008e0e:	fa1f fb87 	uxth.w	fp, r7
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008e1c:	f8d9 7000 	ldr.w	r7, [r9]
 8008e20:	4463      	add	r3, ip
 8008e22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e26:	fb0a c70b 	mla	r7, sl, fp, ip
 8008e2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e34:	4572      	cmp	r2, lr
 8008e36:	f849 3b04 	str.w	r3, [r9], #4
 8008e3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008e3e:	d8e2      	bhi.n	8008e06 <__multiply+0xb2>
 8008e40:	9b01      	ldr	r3, [sp, #4]
 8008e42:	f845 c003 	str.w	ip, [r5, r3]
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e4c:	3104      	adds	r1, #4
 8008e4e:	f1b9 0f00 	cmp.w	r9, #0
 8008e52:	d021      	beq.n	8008e98 <__multiply+0x144>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	f104 0c14 	add.w	ip, r4, #20
 8008e5a:	46ae      	mov	lr, r5
 8008e5c:	f04f 0a00 	mov.w	sl, #0
 8008e60:	f8bc b000 	ldrh.w	fp, [ip]
 8008e64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008e68:	fb09 770b 	mla	r7, r9, fp, r7
 8008e6c:	4457      	add	r7, sl
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e74:	f84e 3b04 	str.w	r3, [lr], #4
 8008e78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e80:	f8be 3000 	ldrh.w	r3, [lr]
 8008e84:	fb09 330a 	mla	r3, r9, sl, r3
 8008e88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e8c:	4562      	cmp	r2, ip
 8008e8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e92:	d8e5      	bhi.n	8008e60 <__multiply+0x10c>
 8008e94:	9f01      	ldr	r7, [sp, #4]
 8008e96:	51eb      	str	r3, [r5, r7]
 8008e98:	3504      	adds	r5, #4
 8008e9a:	e799      	b.n	8008dd0 <__multiply+0x7c>
 8008e9c:	3e01      	subs	r6, #1
 8008e9e:	e79b      	b.n	8008dd8 <__multiply+0x84>
 8008ea0:	08009c20 	.word	0x08009c20
 8008ea4:	08009c42 	.word	0x08009c42

08008ea8 <__pow5mult>:
 8008ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eac:	4615      	mov	r5, r2
 8008eae:	f012 0203 	ands.w	r2, r2, #3
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	d007      	beq.n	8008ec8 <__pow5mult+0x20>
 8008eb8:	4c25      	ldr	r4, [pc, #148]	@ (8008f50 <__pow5mult+0xa8>)
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ec2:	f7ff fe9f 	bl	8008c04 <__multadd>
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	10ad      	asrs	r5, r5, #2
 8008eca:	d03d      	beq.n	8008f48 <__pow5mult+0xa0>
 8008ecc:	69fc      	ldr	r4, [r7, #28]
 8008ece:	b97c      	cbnz	r4, 8008ef0 <__pow5mult+0x48>
 8008ed0:	2010      	movs	r0, #16
 8008ed2:	f7ff fcd3 	bl	800887c <malloc>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	61f8      	str	r0, [r7, #28]
 8008eda:	b928      	cbnz	r0, 8008ee8 <__pow5mult+0x40>
 8008edc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <__pow5mult+0xac>)
 8008ede:	481e      	ldr	r0, [pc, #120]	@ (8008f58 <__pow5mult+0xb0>)
 8008ee0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ee4:	f000 fa9e 	bl	8009424 <__assert_func>
 8008ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008eec:	6004      	str	r4, [r0, #0]
 8008eee:	60c4      	str	r4, [r0, #12]
 8008ef0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ef8:	b94c      	cbnz	r4, 8008f0e <__pow5mult+0x66>
 8008efa:	f240 2171 	movw	r1, #625	@ 0x271
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7ff ff12 	bl	8008d28 <__i2b>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	6003      	str	r3, [r0, #0]
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	07eb      	lsls	r3, r5, #31
 8008f14:	d50a      	bpl.n	8008f2c <__pow5mult+0x84>
 8008f16:	4631      	mov	r1, r6
 8008f18:	4622      	mov	r2, r4
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f7ff ff1a 	bl	8008d54 <__multiply>
 8008f20:	4631      	mov	r1, r6
 8008f22:	4680      	mov	r8, r0
 8008f24:	4638      	mov	r0, r7
 8008f26:	f7ff fe4b 	bl	8008bc0 <_Bfree>
 8008f2a:	4646      	mov	r6, r8
 8008f2c:	106d      	asrs	r5, r5, #1
 8008f2e:	d00b      	beq.n	8008f48 <__pow5mult+0xa0>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	b938      	cbnz	r0, 8008f44 <__pow5mult+0x9c>
 8008f34:	4622      	mov	r2, r4
 8008f36:	4621      	mov	r1, r4
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff ff0b 	bl	8008d54 <__multiply>
 8008f3e:	6020      	str	r0, [r4, #0]
 8008f40:	f8c0 9000 	str.w	r9, [r0]
 8008f44:	4604      	mov	r4, r0
 8008f46:	e7e4      	b.n	8008f12 <__pow5mult+0x6a>
 8008f48:	4630      	mov	r0, r6
 8008f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4e:	bf00      	nop
 8008f50:	08009c9c 	.word	0x08009c9c
 8008f54:	08009bb1 	.word	0x08009bb1
 8008f58:	08009c42 	.word	0x08009c42

08008f5c <__lshift>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	6849      	ldr	r1, [r1, #4]
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	4607      	mov	r7, r0
 8008f6e:	4691      	mov	r9, r2
 8008f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f74:	f108 0601 	add.w	r6, r8, #1
 8008f78:	42b3      	cmp	r3, r6
 8008f7a:	db0b      	blt.n	8008f94 <__lshift+0x38>
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff fddf 	bl	8008b40 <_Balloc>
 8008f82:	4605      	mov	r5, r0
 8008f84:	b948      	cbnz	r0, 8008f9a <__lshift+0x3e>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4b28      	ldr	r3, [pc, #160]	@ (800902c <__lshift+0xd0>)
 8008f8a:	4829      	ldr	r0, [pc, #164]	@ (8009030 <__lshift+0xd4>)
 8008f8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f90:	f000 fa48 	bl	8009424 <__assert_func>
 8008f94:	3101      	adds	r1, #1
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	e7ee      	b.n	8008f78 <__lshift+0x1c>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f100 0114 	add.w	r1, r0, #20
 8008fa0:	f100 0210 	add.w	r2, r0, #16
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	4553      	cmp	r3, sl
 8008fa8:	db33      	blt.n	8009012 <__lshift+0xb6>
 8008faa:	6920      	ldr	r0, [r4, #16]
 8008fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fb0:	f104 0314 	add.w	r3, r4, #20
 8008fb4:	f019 091f 	ands.w	r9, r9, #31
 8008fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fc0:	d02b      	beq.n	800901a <__lshift+0xbe>
 8008fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fc6:	468a      	mov	sl, r1
 8008fc8:	2200      	movs	r2, #0
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008fd0:	4310      	orrs	r0, r2
 8008fd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fda:	459c      	cmp	ip, r3
 8008fdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008fe0:	d8f3      	bhi.n	8008fca <__lshift+0x6e>
 8008fe2:	ebac 0304 	sub.w	r3, ip, r4
 8008fe6:	3b15      	subs	r3, #21
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	3304      	adds	r3, #4
 8008fee:	f104 0015 	add.w	r0, r4, #21
 8008ff2:	4584      	cmp	ip, r0
 8008ff4:	bf38      	it	cc
 8008ff6:	2304      	movcc	r3, #4
 8008ff8:	50ca      	str	r2, [r1, r3]
 8008ffa:	b10a      	cbz	r2, 8009000 <__lshift+0xa4>
 8008ffc:	f108 0602 	add.w	r6, r8, #2
 8009000:	3e01      	subs	r6, #1
 8009002:	4638      	mov	r0, r7
 8009004:	612e      	str	r6, [r5, #16]
 8009006:	4621      	mov	r1, r4
 8009008:	f7ff fdda 	bl	8008bc0 <_Bfree>
 800900c:	4628      	mov	r0, r5
 800900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009012:	f842 0f04 	str.w	r0, [r2, #4]!
 8009016:	3301      	adds	r3, #1
 8009018:	e7c5      	b.n	8008fa6 <__lshift+0x4a>
 800901a:	3904      	subs	r1, #4
 800901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009020:	f841 2f04 	str.w	r2, [r1, #4]!
 8009024:	459c      	cmp	ip, r3
 8009026:	d8f9      	bhi.n	800901c <__lshift+0xc0>
 8009028:	e7ea      	b.n	8009000 <__lshift+0xa4>
 800902a:	bf00      	nop
 800902c:	08009c20 	.word	0x08009c20
 8009030:	08009c42 	.word	0x08009c42

08009034 <__mcmp>:
 8009034:	690a      	ldr	r2, [r1, #16]
 8009036:	4603      	mov	r3, r0
 8009038:	6900      	ldr	r0, [r0, #16]
 800903a:	1a80      	subs	r0, r0, r2
 800903c:	b530      	push	{r4, r5, lr}
 800903e:	d10e      	bne.n	800905e <__mcmp+0x2a>
 8009040:	3314      	adds	r3, #20
 8009042:	3114      	adds	r1, #20
 8009044:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009048:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800904c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009050:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009054:	4295      	cmp	r5, r2
 8009056:	d003      	beq.n	8009060 <__mcmp+0x2c>
 8009058:	d205      	bcs.n	8009066 <__mcmp+0x32>
 800905a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800905e:	bd30      	pop	{r4, r5, pc}
 8009060:	42a3      	cmp	r3, r4
 8009062:	d3f3      	bcc.n	800904c <__mcmp+0x18>
 8009064:	e7fb      	b.n	800905e <__mcmp+0x2a>
 8009066:	2001      	movs	r0, #1
 8009068:	e7f9      	b.n	800905e <__mcmp+0x2a>
	...

0800906c <__mdiff>:
 800906c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	4689      	mov	r9, r1
 8009072:	4606      	mov	r6, r0
 8009074:	4611      	mov	r1, r2
 8009076:	4648      	mov	r0, r9
 8009078:	4614      	mov	r4, r2
 800907a:	f7ff ffdb 	bl	8009034 <__mcmp>
 800907e:	1e05      	subs	r5, r0, #0
 8009080:	d112      	bne.n	80090a8 <__mdiff+0x3c>
 8009082:	4629      	mov	r1, r5
 8009084:	4630      	mov	r0, r6
 8009086:	f7ff fd5b 	bl	8008b40 <_Balloc>
 800908a:	4602      	mov	r2, r0
 800908c:	b928      	cbnz	r0, 800909a <__mdiff+0x2e>
 800908e:	4b3f      	ldr	r3, [pc, #252]	@ (800918c <__mdiff+0x120>)
 8009090:	f240 2137 	movw	r1, #567	@ 0x237
 8009094:	483e      	ldr	r0, [pc, #248]	@ (8009190 <__mdiff+0x124>)
 8009096:	f000 f9c5 	bl	8009424 <__assert_func>
 800909a:	2301      	movs	r3, #1
 800909c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090a0:	4610      	mov	r0, r2
 80090a2:	b003      	add	sp, #12
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	bfbc      	itt	lt
 80090aa:	464b      	movlt	r3, r9
 80090ac:	46a1      	movlt	r9, r4
 80090ae:	4630      	mov	r0, r6
 80090b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090b4:	bfba      	itte	lt
 80090b6:	461c      	movlt	r4, r3
 80090b8:	2501      	movlt	r5, #1
 80090ba:	2500      	movge	r5, #0
 80090bc:	f7ff fd40 	bl	8008b40 <_Balloc>
 80090c0:	4602      	mov	r2, r0
 80090c2:	b918      	cbnz	r0, 80090cc <__mdiff+0x60>
 80090c4:	4b31      	ldr	r3, [pc, #196]	@ (800918c <__mdiff+0x120>)
 80090c6:	f240 2145 	movw	r1, #581	@ 0x245
 80090ca:	e7e3      	b.n	8009094 <__mdiff+0x28>
 80090cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090d0:	6926      	ldr	r6, [r4, #16]
 80090d2:	60c5      	str	r5, [r0, #12]
 80090d4:	f109 0310 	add.w	r3, r9, #16
 80090d8:	f109 0514 	add.w	r5, r9, #20
 80090dc:	f104 0e14 	add.w	lr, r4, #20
 80090e0:	f100 0b14 	add.w	fp, r0, #20
 80090e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80090e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	46d9      	mov	r9, fp
 80090f0:	f04f 0c00 	mov.w	ip, #0
 80090f4:	9b01      	ldr	r3, [sp, #4]
 80090f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80090fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	fa1f f38a 	uxth.w	r3, sl
 8009104:	4619      	mov	r1, r3
 8009106:	b283      	uxth	r3, r0
 8009108:	1acb      	subs	r3, r1, r3
 800910a:	0c00      	lsrs	r0, r0, #16
 800910c:	4463      	add	r3, ip
 800910e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009112:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009116:	b29b      	uxth	r3, r3
 8009118:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800911c:	4576      	cmp	r6, lr
 800911e:	f849 3b04 	str.w	r3, [r9], #4
 8009122:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009126:	d8e5      	bhi.n	80090f4 <__mdiff+0x88>
 8009128:	1b33      	subs	r3, r6, r4
 800912a:	3b15      	subs	r3, #21
 800912c:	f023 0303 	bic.w	r3, r3, #3
 8009130:	3415      	adds	r4, #21
 8009132:	3304      	adds	r3, #4
 8009134:	42a6      	cmp	r6, r4
 8009136:	bf38      	it	cc
 8009138:	2304      	movcc	r3, #4
 800913a:	441d      	add	r5, r3
 800913c:	445b      	add	r3, fp
 800913e:	461e      	mov	r6, r3
 8009140:	462c      	mov	r4, r5
 8009142:	4544      	cmp	r4, r8
 8009144:	d30e      	bcc.n	8009164 <__mdiff+0xf8>
 8009146:	f108 0103 	add.w	r1, r8, #3
 800914a:	1b49      	subs	r1, r1, r5
 800914c:	f021 0103 	bic.w	r1, r1, #3
 8009150:	3d03      	subs	r5, #3
 8009152:	45a8      	cmp	r8, r5
 8009154:	bf38      	it	cc
 8009156:	2100      	movcc	r1, #0
 8009158:	440b      	add	r3, r1
 800915a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800915e:	b191      	cbz	r1, 8009186 <__mdiff+0x11a>
 8009160:	6117      	str	r7, [r2, #16]
 8009162:	e79d      	b.n	80090a0 <__mdiff+0x34>
 8009164:	f854 1b04 	ldr.w	r1, [r4], #4
 8009168:	46e6      	mov	lr, ip
 800916a:	0c08      	lsrs	r0, r1, #16
 800916c:	fa1c fc81 	uxtah	ip, ip, r1
 8009170:	4471      	add	r1, lr
 8009172:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009176:	b289      	uxth	r1, r1
 8009178:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800917c:	f846 1b04 	str.w	r1, [r6], #4
 8009180:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009184:	e7dd      	b.n	8009142 <__mdiff+0xd6>
 8009186:	3f01      	subs	r7, #1
 8009188:	e7e7      	b.n	800915a <__mdiff+0xee>
 800918a:	bf00      	nop
 800918c:	08009c20 	.word	0x08009c20
 8009190:	08009c42 	.word	0x08009c42

08009194 <__d2b>:
 8009194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009198:	460f      	mov	r7, r1
 800919a:	2101      	movs	r1, #1
 800919c:	ec59 8b10 	vmov	r8, r9, d0
 80091a0:	4616      	mov	r6, r2
 80091a2:	f7ff fccd 	bl	8008b40 <_Balloc>
 80091a6:	4604      	mov	r4, r0
 80091a8:	b930      	cbnz	r0, 80091b8 <__d2b+0x24>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b23      	ldr	r3, [pc, #140]	@ (800923c <__d2b+0xa8>)
 80091ae:	4824      	ldr	r0, [pc, #144]	@ (8009240 <__d2b+0xac>)
 80091b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80091b4:	f000 f936 	bl	8009424 <__assert_func>
 80091b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091c0:	b10d      	cbz	r5, 80091c6 <__d2b+0x32>
 80091c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	f1b8 0300 	subs.w	r3, r8, #0
 80091cc:	d023      	beq.n	8009216 <__d2b+0x82>
 80091ce:	4668      	mov	r0, sp
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	f7ff fd7c 	bl	8008cce <__lo0bits>
 80091d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091da:	b1d0      	cbz	r0, 8009212 <__d2b+0x7e>
 80091dc:	f1c0 0320 	rsb	r3, r0, #32
 80091e0:	fa02 f303 	lsl.w	r3, r2, r3
 80091e4:	430b      	orrs	r3, r1
 80091e6:	40c2      	lsrs	r2, r0
 80091e8:	6163      	str	r3, [r4, #20]
 80091ea:	9201      	str	r2, [sp, #4]
 80091ec:	9b01      	ldr	r3, [sp, #4]
 80091ee:	61a3      	str	r3, [r4, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bf0c      	ite	eq
 80091f4:	2201      	moveq	r2, #1
 80091f6:	2202      	movne	r2, #2
 80091f8:	6122      	str	r2, [r4, #16]
 80091fa:	b1a5      	cbz	r5, 8009226 <__d2b+0x92>
 80091fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009200:	4405      	add	r5, r0
 8009202:	603d      	str	r5, [r7, #0]
 8009204:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	4620      	mov	r0, r4
 800920c:	b003      	add	sp, #12
 800920e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009212:	6161      	str	r1, [r4, #20]
 8009214:	e7ea      	b.n	80091ec <__d2b+0x58>
 8009216:	a801      	add	r0, sp, #4
 8009218:	f7ff fd59 	bl	8008cce <__lo0bits>
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	6163      	str	r3, [r4, #20]
 8009220:	3020      	adds	r0, #32
 8009222:	2201      	movs	r2, #1
 8009224:	e7e8      	b.n	80091f8 <__d2b+0x64>
 8009226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800922a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800922e:	6038      	str	r0, [r7, #0]
 8009230:	6918      	ldr	r0, [r3, #16]
 8009232:	f7ff fd2d 	bl	8008c90 <__hi0bits>
 8009236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800923a:	e7e5      	b.n	8009208 <__d2b+0x74>
 800923c:	08009c20 	.word	0x08009c20
 8009240:	08009c42 	.word	0x08009c42

08009244 <__sread>:
 8009244:	b510      	push	{r4, lr}
 8009246:	460c      	mov	r4, r1
 8009248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924c:	f000 f8a8 	bl	80093a0 <_read_r>
 8009250:	2800      	cmp	r0, #0
 8009252:	bfab      	itete	ge
 8009254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009256:	89a3      	ldrhlt	r3, [r4, #12]
 8009258:	181b      	addge	r3, r3, r0
 800925a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800925e:	bfac      	ite	ge
 8009260:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009262:	81a3      	strhlt	r3, [r4, #12]
 8009264:	bd10      	pop	{r4, pc}

08009266 <__swrite>:
 8009266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926a:	461f      	mov	r7, r3
 800926c:	898b      	ldrh	r3, [r1, #12]
 800926e:	05db      	lsls	r3, r3, #23
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	4616      	mov	r6, r2
 8009276:	d505      	bpl.n	8009284 <__swrite+0x1e>
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	2302      	movs	r3, #2
 800927e:	2200      	movs	r2, #0
 8009280:	f000 f87c 	bl	800937c <_lseek_r>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	4628      	mov	r0, r5
 8009296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	f000 b8a3 	b.w	80093e4 <_write_r>

0800929e <__sseek>:
 800929e:	b510      	push	{r4, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 f869 	bl	800937c <_lseek_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	bf15      	itete	ne
 80092b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092ba:	81a3      	strheq	r3, [r4, #12]
 80092bc:	bf18      	it	ne
 80092be:	81a3      	strhne	r3, [r4, #12]
 80092c0:	bd10      	pop	{r4, pc}

080092c2 <__sclose>:
 80092c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c6:	f000 b849 	b.w	800935c <_close_r>

080092ca <_realloc_r>:
 80092ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ce:	4680      	mov	r8, r0
 80092d0:	4615      	mov	r5, r2
 80092d2:	460c      	mov	r4, r1
 80092d4:	b921      	cbnz	r1, 80092e0 <_realloc_r+0x16>
 80092d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	4611      	mov	r1, r2
 80092dc:	f7ff baf8 	b.w	80088d0 <_malloc_r>
 80092e0:	b92a      	cbnz	r2, 80092ee <_realloc_r+0x24>
 80092e2:	f000 f8d1 	bl	8009488 <_free_r>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4620      	mov	r0, r4
 80092ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ee:	f000 f927 	bl	8009540 <_malloc_usable_size_r>
 80092f2:	4285      	cmp	r5, r0
 80092f4:	4606      	mov	r6, r0
 80092f6:	d802      	bhi.n	80092fe <_realloc_r+0x34>
 80092f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092fc:	d8f4      	bhi.n	80092e8 <_realloc_r+0x1e>
 80092fe:	4629      	mov	r1, r5
 8009300:	4640      	mov	r0, r8
 8009302:	f7ff fae5 	bl	80088d0 <_malloc_r>
 8009306:	4607      	mov	r7, r0
 8009308:	2800      	cmp	r0, #0
 800930a:	d0ec      	beq.n	80092e6 <_realloc_r+0x1c>
 800930c:	42b5      	cmp	r5, r6
 800930e:	462a      	mov	r2, r5
 8009310:	4621      	mov	r1, r4
 8009312:	bf28      	it	cs
 8009314:	4632      	movcs	r2, r6
 8009316:	f000 f877 	bl	8009408 <memcpy>
 800931a:	4621      	mov	r1, r4
 800931c:	4640      	mov	r0, r8
 800931e:	f000 f8b3 	bl	8009488 <_free_r>
 8009322:	463c      	mov	r4, r7
 8009324:	e7e0      	b.n	80092e8 <_realloc_r+0x1e>

08009326 <memmove>:
 8009326:	4288      	cmp	r0, r1
 8009328:	b510      	push	{r4, lr}
 800932a:	eb01 0402 	add.w	r4, r1, r2
 800932e:	d902      	bls.n	8009336 <memmove+0x10>
 8009330:	4284      	cmp	r4, r0
 8009332:	4623      	mov	r3, r4
 8009334:	d807      	bhi.n	8009346 <memmove+0x20>
 8009336:	1e43      	subs	r3, r0, #1
 8009338:	42a1      	cmp	r1, r4
 800933a:	d008      	beq.n	800934e <memmove+0x28>
 800933c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009340:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009344:	e7f8      	b.n	8009338 <memmove+0x12>
 8009346:	4402      	add	r2, r0
 8009348:	4601      	mov	r1, r0
 800934a:	428a      	cmp	r2, r1
 800934c:	d100      	bne.n	8009350 <memmove+0x2a>
 800934e:	bd10      	pop	{r4, pc}
 8009350:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009354:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009358:	e7f7      	b.n	800934a <memmove+0x24>
	...

0800935c <_close_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d06      	ldr	r5, [pc, #24]	@ (8009378 <_close_r+0x1c>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7f8 fa70 	bl	800184c <_close>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_close_r+0x1a>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_close_r+0x1a>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20000d04 	.word	0x20000d04

0800937c <_lseek_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d07      	ldr	r5, [pc, #28]	@ (800939c <_lseek_r+0x20>)
 8009380:	4604      	mov	r4, r0
 8009382:	4608      	mov	r0, r1
 8009384:	4611      	mov	r1, r2
 8009386:	2200      	movs	r2, #0
 8009388:	602a      	str	r2, [r5, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f7f8 fa85 	bl	800189a <_lseek>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	d102      	bne.n	800939a <_lseek_r+0x1e>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	b103      	cbz	r3, 800939a <_lseek_r+0x1e>
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	20000d04 	.word	0x20000d04

080093a0 <_read_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	@ (80093c0 <_read_r+0x20>)
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f7f8 fa13 	bl	80017da <_read>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_read_r+0x1e>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_read_r+0x1e>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20000d04 	.word	0x20000d04

080093c4 <_sbrk_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d06      	ldr	r5, [pc, #24]	@ (80093e0 <_sbrk_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f8 fa70 	bl	80018b4 <_sbrk>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_sbrk_r+0x1a>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_sbrk_r+0x1a>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000d04 	.word	0x20000d04

080093e4 <_write_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d07      	ldr	r5, [pc, #28]	@ (8009404 <_write_r+0x20>)
 80093e8:	4604      	mov	r4, r0
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	602a      	str	r2, [r5, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f7f8 fa0e 	bl	8001814 <_write>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_write_r+0x1e>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_write_r+0x1e>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	20000d04 	.word	0x20000d04

08009408 <memcpy>:
 8009408:	440a      	add	r2, r1
 800940a:	4291      	cmp	r1, r2
 800940c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009410:	d100      	bne.n	8009414 <memcpy+0xc>
 8009412:	4770      	bx	lr
 8009414:	b510      	push	{r4, lr}
 8009416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800941a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800941e:	4291      	cmp	r1, r2
 8009420:	d1f9      	bne.n	8009416 <memcpy+0xe>
 8009422:	bd10      	pop	{r4, pc}

08009424 <__assert_func>:
 8009424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009426:	4614      	mov	r4, r2
 8009428:	461a      	mov	r2, r3
 800942a:	4b09      	ldr	r3, [pc, #36]	@ (8009450 <__assert_func+0x2c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4605      	mov	r5, r0
 8009430:	68d8      	ldr	r0, [r3, #12]
 8009432:	b954      	cbnz	r4, 800944a <__assert_func+0x26>
 8009434:	4b07      	ldr	r3, [pc, #28]	@ (8009454 <__assert_func+0x30>)
 8009436:	461c      	mov	r4, r3
 8009438:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800943c:	9100      	str	r1, [sp, #0]
 800943e:	462b      	mov	r3, r5
 8009440:	4905      	ldr	r1, [pc, #20]	@ (8009458 <__assert_func+0x34>)
 8009442:	f000 f885 	bl	8009550 <fiprintf>
 8009446:	f000 f8a2 	bl	800958e <abort>
 800944a:	4b04      	ldr	r3, [pc, #16]	@ (800945c <__assert_func+0x38>)
 800944c:	e7f4      	b.n	8009438 <__assert_func+0x14>
 800944e:	bf00      	nop
 8009450:	2000002c 	.word	0x2000002c
 8009454:	08009ede 	.word	0x08009ede
 8009458:	08009eb0 	.word	0x08009eb0
 800945c:	08009ea3 	.word	0x08009ea3

08009460 <_calloc_r>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	fba1 5402 	umull	r5, r4, r1, r2
 8009466:	b93c      	cbnz	r4, 8009478 <_calloc_r+0x18>
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff fa31 	bl	80088d0 <_malloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	b928      	cbnz	r0, 800947e <_calloc_r+0x1e>
 8009472:	2600      	movs	r6, #0
 8009474:	4630      	mov	r0, r6
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	220c      	movs	r2, #12
 800947a:	6002      	str	r2, [r0, #0]
 800947c:	e7f9      	b.n	8009472 <_calloc_r+0x12>
 800947e:	462a      	mov	r2, r5
 8009480:	4621      	mov	r1, r4
 8009482:	f7fe fa8b 	bl	800799c <memset>
 8009486:	e7f5      	b.n	8009474 <_calloc_r+0x14>

08009488 <_free_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4605      	mov	r5, r0
 800948c:	2900      	cmp	r1, #0
 800948e:	d041      	beq.n	8009514 <_free_r+0x8c>
 8009490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009494:	1f0c      	subs	r4, r1, #4
 8009496:	2b00      	cmp	r3, #0
 8009498:	bfb8      	it	lt
 800949a:	18e4      	addlt	r4, r4, r3
 800949c:	f7ff fb44 	bl	8008b28 <__malloc_lock>
 80094a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009518 <_free_r+0x90>)
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	b933      	cbnz	r3, 80094b4 <_free_r+0x2c>
 80094a6:	6063      	str	r3, [r4, #4]
 80094a8:	6014      	str	r4, [r2, #0]
 80094aa:	4628      	mov	r0, r5
 80094ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094b0:	f7ff bb40 	b.w	8008b34 <__malloc_unlock>
 80094b4:	42a3      	cmp	r3, r4
 80094b6:	d908      	bls.n	80094ca <_free_r+0x42>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	1821      	adds	r1, r4, r0
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf01      	itttt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	1809      	addeq	r1, r1, r0
 80094c6:	6021      	streq	r1, [r4, #0]
 80094c8:	e7ed      	b.n	80094a6 <_free_r+0x1e>
 80094ca:	461a      	mov	r2, r3
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	b10b      	cbz	r3, 80094d4 <_free_r+0x4c>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d9fa      	bls.n	80094ca <_free_r+0x42>
 80094d4:	6811      	ldr	r1, [r2, #0]
 80094d6:	1850      	adds	r0, r2, r1
 80094d8:	42a0      	cmp	r0, r4
 80094da:	d10b      	bne.n	80094f4 <_free_r+0x6c>
 80094dc:	6820      	ldr	r0, [r4, #0]
 80094de:	4401      	add	r1, r0
 80094e0:	1850      	adds	r0, r2, r1
 80094e2:	4283      	cmp	r3, r0
 80094e4:	6011      	str	r1, [r2, #0]
 80094e6:	d1e0      	bne.n	80094aa <_free_r+0x22>
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	6053      	str	r3, [r2, #4]
 80094ee:	4408      	add	r0, r1
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	e7da      	b.n	80094aa <_free_r+0x22>
 80094f4:	d902      	bls.n	80094fc <_free_r+0x74>
 80094f6:	230c      	movs	r3, #12
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	e7d6      	b.n	80094aa <_free_r+0x22>
 80094fc:	6820      	ldr	r0, [r4, #0]
 80094fe:	1821      	adds	r1, r4, r0
 8009500:	428b      	cmp	r3, r1
 8009502:	bf04      	itt	eq
 8009504:	6819      	ldreq	r1, [r3, #0]
 8009506:	685b      	ldreq	r3, [r3, #4]
 8009508:	6063      	str	r3, [r4, #4]
 800950a:	bf04      	itt	eq
 800950c:	1809      	addeq	r1, r1, r0
 800950e:	6021      	streq	r1, [r4, #0]
 8009510:	6054      	str	r4, [r2, #4]
 8009512:	e7ca      	b.n	80094aa <_free_r+0x22>
 8009514:	bd38      	pop	{r3, r4, r5, pc}
 8009516:	bf00      	nop
 8009518:	20000d00 	.word	0x20000d00

0800951c <__ascii_mbtowc>:
 800951c:	b082      	sub	sp, #8
 800951e:	b901      	cbnz	r1, 8009522 <__ascii_mbtowc+0x6>
 8009520:	a901      	add	r1, sp, #4
 8009522:	b142      	cbz	r2, 8009536 <__ascii_mbtowc+0x1a>
 8009524:	b14b      	cbz	r3, 800953a <__ascii_mbtowc+0x1e>
 8009526:	7813      	ldrb	r3, [r2, #0]
 8009528:	600b      	str	r3, [r1, #0]
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	1e10      	subs	r0, r2, #0
 800952e:	bf18      	it	ne
 8009530:	2001      	movne	r0, #1
 8009532:	b002      	add	sp, #8
 8009534:	4770      	bx	lr
 8009536:	4610      	mov	r0, r2
 8009538:	e7fb      	b.n	8009532 <__ascii_mbtowc+0x16>
 800953a:	f06f 0001 	mvn.w	r0, #1
 800953e:	e7f8      	b.n	8009532 <__ascii_mbtowc+0x16>

08009540 <_malloc_usable_size_r>:
 8009540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009544:	1f18      	subs	r0, r3, #4
 8009546:	2b00      	cmp	r3, #0
 8009548:	bfbc      	itt	lt
 800954a:	580b      	ldrlt	r3, [r1, r0]
 800954c:	18c0      	addlt	r0, r0, r3
 800954e:	4770      	bx	lr

08009550 <fiprintf>:
 8009550:	b40e      	push	{r1, r2, r3}
 8009552:	b503      	push	{r0, r1, lr}
 8009554:	4601      	mov	r1, r0
 8009556:	ab03      	add	r3, sp, #12
 8009558:	4805      	ldr	r0, [pc, #20]	@ (8009570 <fiprintf+0x20>)
 800955a:	f853 2b04 	ldr.w	r2, [r3], #4
 800955e:	6800      	ldr	r0, [r0, #0]
 8009560:	9301      	str	r3, [sp, #4]
 8009562:	f000 f845 	bl	80095f0 <_vfiprintf_r>
 8009566:	b002      	add	sp, #8
 8009568:	f85d eb04 	ldr.w	lr, [sp], #4
 800956c:	b003      	add	sp, #12
 800956e:	4770      	bx	lr
 8009570:	2000002c 	.word	0x2000002c

08009574 <__ascii_wctomb>:
 8009574:	4603      	mov	r3, r0
 8009576:	4608      	mov	r0, r1
 8009578:	b141      	cbz	r1, 800958c <__ascii_wctomb+0x18>
 800957a:	2aff      	cmp	r2, #255	@ 0xff
 800957c:	d904      	bls.n	8009588 <__ascii_wctomb+0x14>
 800957e:	228a      	movs	r2, #138	@ 0x8a
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009586:	4770      	bx	lr
 8009588:	700a      	strb	r2, [r1, #0]
 800958a:	2001      	movs	r0, #1
 800958c:	4770      	bx	lr

0800958e <abort>:
 800958e:	b508      	push	{r3, lr}
 8009590:	2006      	movs	r0, #6
 8009592:	f000 fa85 	bl	8009aa0 <raise>
 8009596:	2001      	movs	r0, #1
 8009598:	f7f8 f914 	bl	80017c4 <_exit>

0800959c <__sfputc_r>:
 800959c:	6893      	ldr	r3, [r2, #8]
 800959e:	3b01      	subs	r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	b410      	push	{r4}
 80095a4:	6093      	str	r3, [r2, #8]
 80095a6:	da08      	bge.n	80095ba <__sfputc_r+0x1e>
 80095a8:	6994      	ldr	r4, [r2, #24]
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	db01      	blt.n	80095b2 <__sfputc_r+0x16>
 80095ae:	290a      	cmp	r1, #10
 80095b0:	d103      	bne.n	80095ba <__sfputc_r+0x1e>
 80095b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b6:	f000 b933 	b.w	8009820 <__swbuf_r>
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	1c58      	adds	r0, r3, #1
 80095be:	6010      	str	r0, [r2, #0]
 80095c0:	7019      	strb	r1, [r3, #0]
 80095c2:	4608      	mov	r0, r1
 80095c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <__sfputs_r>:
 80095ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	4614      	mov	r4, r2
 80095d2:	18d5      	adds	r5, r2, r3
 80095d4:	42ac      	cmp	r4, r5
 80095d6:	d101      	bne.n	80095dc <__sfputs_r+0x12>
 80095d8:	2000      	movs	r0, #0
 80095da:	e007      	b.n	80095ec <__sfputs_r+0x22>
 80095dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e0:	463a      	mov	r2, r7
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ffda 	bl	800959c <__sfputc_r>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d1f3      	bne.n	80095d4 <__sfputs_r+0xa>
 80095ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095f0 <_vfiprintf_r>:
 80095f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f4:	460d      	mov	r5, r1
 80095f6:	b09d      	sub	sp, #116	@ 0x74
 80095f8:	4614      	mov	r4, r2
 80095fa:	4698      	mov	r8, r3
 80095fc:	4606      	mov	r6, r0
 80095fe:	b118      	cbz	r0, 8009608 <_vfiprintf_r+0x18>
 8009600:	6a03      	ldr	r3, [r0, #32]
 8009602:	b90b      	cbnz	r3, 8009608 <_vfiprintf_r+0x18>
 8009604:	f7fe f994 	bl	8007930 <__sinit>
 8009608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800960a:	07d9      	lsls	r1, r3, #31
 800960c:	d405      	bmi.n	800961a <_vfiprintf_r+0x2a>
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	059a      	lsls	r2, r3, #22
 8009612:	d402      	bmi.n	800961a <_vfiprintf_r+0x2a>
 8009614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009616:	f7fe f9f8 	bl	8007a0a <__retarget_lock_acquire_recursive>
 800961a:	89ab      	ldrh	r3, [r5, #12]
 800961c:	071b      	lsls	r3, r3, #28
 800961e:	d501      	bpl.n	8009624 <_vfiprintf_r+0x34>
 8009620:	692b      	ldr	r3, [r5, #16]
 8009622:	b99b      	cbnz	r3, 800964c <_vfiprintf_r+0x5c>
 8009624:	4629      	mov	r1, r5
 8009626:	4630      	mov	r0, r6
 8009628:	f000 f938 	bl	800989c <__swsetup_r>
 800962c:	b170      	cbz	r0, 800964c <_vfiprintf_r+0x5c>
 800962e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009630:	07dc      	lsls	r4, r3, #31
 8009632:	d504      	bpl.n	800963e <_vfiprintf_r+0x4e>
 8009634:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009638:	b01d      	add	sp, #116	@ 0x74
 800963a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963e:	89ab      	ldrh	r3, [r5, #12]
 8009640:	0598      	lsls	r0, r3, #22
 8009642:	d4f7      	bmi.n	8009634 <_vfiprintf_r+0x44>
 8009644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009646:	f7fe f9e1 	bl	8007a0c <__retarget_lock_release_recursive>
 800964a:	e7f3      	b.n	8009634 <_vfiprintf_r+0x44>
 800964c:	2300      	movs	r3, #0
 800964e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009650:	2320      	movs	r3, #32
 8009652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009656:	f8cd 800c 	str.w	r8, [sp, #12]
 800965a:	2330      	movs	r3, #48	@ 0x30
 800965c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800980c <_vfiprintf_r+0x21c>
 8009660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009664:	f04f 0901 	mov.w	r9, #1
 8009668:	4623      	mov	r3, r4
 800966a:	469a      	mov	sl, r3
 800966c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009670:	b10a      	cbz	r2, 8009676 <_vfiprintf_r+0x86>
 8009672:	2a25      	cmp	r2, #37	@ 0x25
 8009674:	d1f9      	bne.n	800966a <_vfiprintf_r+0x7a>
 8009676:	ebba 0b04 	subs.w	fp, sl, r4
 800967a:	d00b      	beq.n	8009694 <_vfiprintf_r+0xa4>
 800967c:	465b      	mov	r3, fp
 800967e:	4622      	mov	r2, r4
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ffa1 	bl	80095ca <__sfputs_r>
 8009688:	3001      	adds	r0, #1
 800968a:	f000 80a7 	beq.w	80097dc <_vfiprintf_r+0x1ec>
 800968e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009690:	445a      	add	r2, fp
 8009692:	9209      	str	r2, [sp, #36]	@ 0x24
 8009694:	f89a 3000 	ldrb.w	r3, [sl]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 809f 	beq.w	80097dc <_vfiprintf_r+0x1ec>
 800969e:	2300      	movs	r3, #0
 80096a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a8:	f10a 0a01 	add.w	sl, sl, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	9307      	str	r3, [sp, #28]
 80096b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80096b6:	4654      	mov	r4, sl
 80096b8:	2205      	movs	r2, #5
 80096ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096be:	4853      	ldr	r0, [pc, #332]	@ (800980c <_vfiprintf_r+0x21c>)
 80096c0:	f7f6 fdbe 	bl	8000240 <memchr>
 80096c4:	9a04      	ldr	r2, [sp, #16]
 80096c6:	b9d8      	cbnz	r0, 8009700 <_vfiprintf_r+0x110>
 80096c8:	06d1      	lsls	r1, r2, #27
 80096ca:	bf44      	itt	mi
 80096cc:	2320      	movmi	r3, #32
 80096ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d2:	0713      	lsls	r3, r2, #28
 80096d4:	bf44      	itt	mi
 80096d6:	232b      	movmi	r3, #43	@ 0x2b
 80096d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096dc:	f89a 3000 	ldrb.w	r3, [sl]
 80096e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e2:	d015      	beq.n	8009710 <_vfiprintf_r+0x120>
 80096e4:	9a07      	ldr	r2, [sp, #28]
 80096e6:	4654      	mov	r4, sl
 80096e8:	2000      	movs	r0, #0
 80096ea:	f04f 0c0a 	mov.w	ip, #10
 80096ee:	4621      	mov	r1, r4
 80096f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096f4:	3b30      	subs	r3, #48	@ 0x30
 80096f6:	2b09      	cmp	r3, #9
 80096f8:	d94b      	bls.n	8009792 <_vfiprintf_r+0x1a2>
 80096fa:	b1b0      	cbz	r0, 800972a <_vfiprintf_r+0x13a>
 80096fc:	9207      	str	r2, [sp, #28]
 80096fe:	e014      	b.n	800972a <_vfiprintf_r+0x13a>
 8009700:	eba0 0308 	sub.w	r3, r0, r8
 8009704:	fa09 f303 	lsl.w	r3, r9, r3
 8009708:	4313      	orrs	r3, r2
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	46a2      	mov	sl, r4
 800970e:	e7d2      	b.n	80096b6 <_vfiprintf_r+0xc6>
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	1d19      	adds	r1, r3, #4
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	9103      	str	r1, [sp, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	bfbb      	ittet	lt
 800971c:	425b      	neglt	r3, r3
 800971e:	f042 0202 	orrlt.w	r2, r2, #2
 8009722:	9307      	strge	r3, [sp, #28]
 8009724:	9307      	strlt	r3, [sp, #28]
 8009726:	bfb8      	it	lt
 8009728:	9204      	strlt	r2, [sp, #16]
 800972a:	7823      	ldrb	r3, [r4, #0]
 800972c:	2b2e      	cmp	r3, #46	@ 0x2e
 800972e:	d10a      	bne.n	8009746 <_vfiprintf_r+0x156>
 8009730:	7863      	ldrb	r3, [r4, #1]
 8009732:	2b2a      	cmp	r3, #42	@ 0x2a
 8009734:	d132      	bne.n	800979c <_vfiprintf_r+0x1ac>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	1d1a      	adds	r2, r3, #4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	9203      	str	r2, [sp, #12]
 800973e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009742:	3402      	adds	r4, #2
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800981c <_vfiprintf_r+0x22c>
 800974a:	7821      	ldrb	r1, [r4, #0]
 800974c:	2203      	movs	r2, #3
 800974e:	4650      	mov	r0, sl
 8009750:	f7f6 fd76 	bl	8000240 <memchr>
 8009754:	b138      	cbz	r0, 8009766 <_vfiprintf_r+0x176>
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	eba0 000a 	sub.w	r0, r0, sl
 800975c:	2240      	movs	r2, #64	@ 0x40
 800975e:	4082      	lsls	r2, r0
 8009760:	4313      	orrs	r3, r2
 8009762:	3401      	adds	r4, #1
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976a:	4829      	ldr	r0, [pc, #164]	@ (8009810 <_vfiprintf_r+0x220>)
 800976c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009770:	2206      	movs	r2, #6
 8009772:	f7f6 fd65 	bl	8000240 <memchr>
 8009776:	2800      	cmp	r0, #0
 8009778:	d03f      	beq.n	80097fa <_vfiprintf_r+0x20a>
 800977a:	4b26      	ldr	r3, [pc, #152]	@ (8009814 <_vfiprintf_r+0x224>)
 800977c:	bb1b      	cbnz	r3, 80097c6 <_vfiprintf_r+0x1d6>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	3308      	adds	r3, #8
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	443b      	add	r3, r7
 800978e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009790:	e76a      	b.n	8009668 <_vfiprintf_r+0x78>
 8009792:	fb0c 3202 	mla	r2, ip, r2, r3
 8009796:	460c      	mov	r4, r1
 8009798:	2001      	movs	r0, #1
 800979a:	e7a8      	b.n	80096ee <_vfiprintf_r+0xfe>
 800979c:	2300      	movs	r3, #0
 800979e:	3401      	adds	r4, #1
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	4619      	mov	r1, r3
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	4620      	mov	r0, r4
 80097aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ae:	3a30      	subs	r2, #48	@ 0x30
 80097b0:	2a09      	cmp	r2, #9
 80097b2:	d903      	bls.n	80097bc <_vfiprintf_r+0x1cc>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0c6      	beq.n	8009746 <_vfiprintf_r+0x156>
 80097b8:	9105      	str	r1, [sp, #20]
 80097ba:	e7c4      	b.n	8009746 <_vfiprintf_r+0x156>
 80097bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c0:	4604      	mov	r4, r0
 80097c2:	2301      	movs	r3, #1
 80097c4:	e7f0      	b.n	80097a8 <_vfiprintf_r+0x1b8>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4b12      	ldr	r3, [pc, #72]	@ (8009818 <_vfiprintf_r+0x228>)
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7fd fc59 	bl	8007088 <_printf_float>
 80097d6:	4607      	mov	r7, r0
 80097d8:	1c78      	adds	r0, r7, #1
 80097da:	d1d6      	bne.n	800978a <_vfiprintf_r+0x19a>
 80097dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097de:	07d9      	lsls	r1, r3, #31
 80097e0:	d405      	bmi.n	80097ee <_vfiprintf_r+0x1fe>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d402      	bmi.n	80097ee <_vfiprintf_r+0x1fe>
 80097e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097ea:	f7fe f90f 	bl	8007a0c <__retarget_lock_release_recursive>
 80097ee:	89ab      	ldrh	r3, [r5, #12]
 80097f0:	065b      	lsls	r3, r3, #25
 80097f2:	f53f af1f 	bmi.w	8009634 <_vfiprintf_r+0x44>
 80097f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097f8:	e71e      	b.n	8009638 <_vfiprintf_r+0x48>
 80097fa:	ab03      	add	r3, sp, #12
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	462a      	mov	r2, r5
 8009800:	4b05      	ldr	r3, [pc, #20]	@ (8009818 <_vfiprintf_r+0x228>)
 8009802:	a904      	add	r1, sp, #16
 8009804:	4630      	mov	r0, r6
 8009806:	f7fd fec7 	bl	8007598 <_printf_i>
 800980a:	e7e4      	b.n	80097d6 <_vfiprintf_r+0x1e6>
 800980c:	08009c31 	.word	0x08009c31
 8009810:	08009c3b 	.word	0x08009c3b
 8009814:	08007089 	.word	0x08007089
 8009818:	080095cb 	.word	0x080095cb
 800981c:	08009c37 	.word	0x08009c37

08009820 <__swbuf_r>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	460e      	mov	r6, r1
 8009824:	4614      	mov	r4, r2
 8009826:	4605      	mov	r5, r0
 8009828:	b118      	cbz	r0, 8009832 <__swbuf_r+0x12>
 800982a:	6a03      	ldr	r3, [r0, #32]
 800982c:	b90b      	cbnz	r3, 8009832 <__swbuf_r+0x12>
 800982e:	f7fe f87f 	bl	8007930 <__sinit>
 8009832:	69a3      	ldr	r3, [r4, #24]
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	071a      	lsls	r2, r3, #28
 800983a:	d501      	bpl.n	8009840 <__swbuf_r+0x20>
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	b943      	cbnz	r3, 8009852 <__swbuf_r+0x32>
 8009840:	4621      	mov	r1, r4
 8009842:	4628      	mov	r0, r5
 8009844:	f000 f82a 	bl	800989c <__swsetup_r>
 8009848:	b118      	cbz	r0, 8009852 <__swbuf_r+0x32>
 800984a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800984e:	4638      	mov	r0, r7
 8009850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	1a98      	subs	r0, r3, r2
 8009858:	6963      	ldr	r3, [r4, #20]
 800985a:	b2f6      	uxtb	r6, r6
 800985c:	4283      	cmp	r3, r0
 800985e:	4637      	mov	r7, r6
 8009860:	dc05      	bgt.n	800986e <__swbuf_r+0x4e>
 8009862:	4621      	mov	r1, r4
 8009864:	4628      	mov	r0, r5
 8009866:	f7ff f937 	bl	8008ad8 <_fflush_r>
 800986a:	2800      	cmp	r0, #0
 800986c:	d1ed      	bne.n	800984a <__swbuf_r+0x2a>
 800986e:	68a3      	ldr	r3, [r4, #8]
 8009870:	3b01      	subs	r3, #1
 8009872:	60a3      	str	r3, [r4, #8]
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	1c5a      	adds	r2, r3, #1
 8009878:	6022      	str	r2, [r4, #0]
 800987a:	701e      	strb	r6, [r3, #0]
 800987c:	6962      	ldr	r2, [r4, #20]
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	429a      	cmp	r2, r3
 8009882:	d004      	beq.n	800988e <__swbuf_r+0x6e>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	07db      	lsls	r3, r3, #31
 8009888:	d5e1      	bpl.n	800984e <__swbuf_r+0x2e>
 800988a:	2e0a      	cmp	r6, #10
 800988c:	d1df      	bne.n	800984e <__swbuf_r+0x2e>
 800988e:	4621      	mov	r1, r4
 8009890:	4628      	mov	r0, r5
 8009892:	f7ff f921 	bl	8008ad8 <_fflush_r>
 8009896:	2800      	cmp	r0, #0
 8009898:	d0d9      	beq.n	800984e <__swbuf_r+0x2e>
 800989a:	e7d6      	b.n	800984a <__swbuf_r+0x2a>

0800989c <__swsetup_r>:
 800989c:	b538      	push	{r3, r4, r5, lr}
 800989e:	4b29      	ldr	r3, [pc, #164]	@ (8009944 <__swsetup_r+0xa8>)
 80098a0:	4605      	mov	r5, r0
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	460c      	mov	r4, r1
 80098a6:	b118      	cbz	r0, 80098b0 <__swsetup_r+0x14>
 80098a8:	6a03      	ldr	r3, [r0, #32]
 80098aa:	b90b      	cbnz	r3, 80098b0 <__swsetup_r+0x14>
 80098ac:	f7fe f840 	bl	8007930 <__sinit>
 80098b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b4:	0719      	lsls	r1, r3, #28
 80098b6:	d422      	bmi.n	80098fe <__swsetup_r+0x62>
 80098b8:	06da      	lsls	r2, r3, #27
 80098ba:	d407      	bmi.n	80098cc <__swsetup_r+0x30>
 80098bc:	2209      	movs	r2, #9
 80098be:	602a      	str	r2, [r5, #0]
 80098c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098ca:	e033      	b.n	8009934 <__swsetup_r+0x98>
 80098cc:	0758      	lsls	r0, r3, #29
 80098ce:	d512      	bpl.n	80098f6 <__swsetup_r+0x5a>
 80098d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098d2:	b141      	cbz	r1, 80098e6 <__swsetup_r+0x4a>
 80098d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098d8:	4299      	cmp	r1, r3
 80098da:	d002      	beq.n	80098e2 <__swsetup_r+0x46>
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff fdd3 	bl	8009488 <_free_r>
 80098e2:	2300      	movs	r3, #0
 80098e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	2300      	movs	r3, #0
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f043 0308 	orr.w	r3, r3, #8
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	b94b      	cbnz	r3, 8009916 <__swsetup_r+0x7a>
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990c:	d003      	beq.n	8009916 <__swsetup_r+0x7a>
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	f000 f83f 	bl	8009994 <__smakebuf_r>
 8009916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991a:	f013 0201 	ands.w	r2, r3, #1
 800991e:	d00a      	beq.n	8009936 <__swsetup_r+0x9a>
 8009920:	2200      	movs	r2, #0
 8009922:	60a2      	str	r2, [r4, #8]
 8009924:	6962      	ldr	r2, [r4, #20]
 8009926:	4252      	negs	r2, r2
 8009928:	61a2      	str	r2, [r4, #24]
 800992a:	6922      	ldr	r2, [r4, #16]
 800992c:	b942      	cbnz	r2, 8009940 <__swsetup_r+0xa4>
 800992e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009932:	d1c5      	bne.n	80098c0 <__swsetup_r+0x24>
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	0799      	lsls	r1, r3, #30
 8009938:	bf58      	it	pl
 800993a:	6962      	ldrpl	r2, [r4, #20]
 800993c:	60a2      	str	r2, [r4, #8]
 800993e:	e7f4      	b.n	800992a <__swsetup_r+0x8e>
 8009940:	2000      	movs	r0, #0
 8009942:	e7f7      	b.n	8009934 <__swsetup_r+0x98>
 8009944:	2000002c 	.word	0x2000002c

08009948 <__swhatbuf_r>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	460c      	mov	r4, r1
 800994c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009950:	2900      	cmp	r1, #0
 8009952:	b096      	sub	sp, #88	@ 0x58
 8009954:	4615      	mov	r5, r2
 8009956:	461e      	mov	r6, r3
 8009958:	da0d      	bge.n	8009976 <__swhatbuf_r+0x2e>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009960:	f04f 0100 	mov.w	r1, #0
 8009964:	bf14      	ite	ne
 8009966:	2340      	movne	r3, #64	@ 0x40
 8009968:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800996c:	2000      	movs	r0, #0
 800996e:	6031      	str	r1, [r6, #0]
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	b016      	add	sp, #88	@ 0x58
 8009974:	bd70      	pop	{r4, r5, r6, pc}
 8009976:	466a      	mov	r2, sp
 8009978:	f000 f848 	bl	8009a0c <_fstat_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	dbec      	blt.n	800995a <__swhatbuf_r+0x12>
 8009980:	9901      	ldr	r1, [sp, #4]
 8009982:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009986:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800998a:	4259      	negs	r1, r3
 800998c:	4159      	adcs	r1, r3
 800998e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009992:	e7eb      	b.n	800996c <__swhatbuf_r+0x24>

08009994 <__smakebuf_r>:
 8009994:	898b      	ldrh	r3, [r1, #12]
 8009996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009998:	079d      	lsls	r5, r3, #30
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	d507      	bpl.n	80099b0 <__smakebuf_r+0x1c>
 80099a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099a4:	6023      	str	r3, [r4, #0]
 80099a6:	6123      	str	r3, [r4, #16]
 80099a8:	2301      	movs	r3, #1
 80099aa:	6163      	str	r3, [r4, #20]
 80099ac:	b003      	add	sp, #12
 80099ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b0:	ab01      	add	r3, sp, #4
 80099b2:	466a      	mov	r2, sp
 80099b4:	f7ff ffc8 	bl	8009948 <__swhatbuf_r>
 80099b8:	9f00      	ldr	r7, [sp, #0]
 80099ba:	4605      	mov	r5, r0
 80099bc:	4639      	mov	r1, r7
 80099be:	4630      	mov	r0, r6
 80099c0:	f7fe ff86 	bl	80088d0 <_malloc_r>
 80099c4:	b948      	cbnz	r0, 80099da <__smakebuf_r+0x46>
 80099c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ca:	059a      	lsls	r2, r3, #22
 80099cc:	d4ee      	bmi.n	80099ac <__smakebuf_r+0x18>
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f043 0302 	orr.w	r3, r3, #2
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	e7e2      	b.n	80099a0 <__smakebuf_r+0xc>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	6020      	str	r0, [r4, #0]
 80099de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e2:	81a3      	strh	r3, [r4, #12]
 80099e4:	9b01      	ldr	r3, [sp, #4]
 80099e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099ea:	b15b      	cbz	r3, 8009a04 <__smakebuf_r+0x70>
 80099ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 f81d 	bl	8009a30 <_isatty_r>
 80099f6:	b128      	cbz	r0, 8009a04 <__smakebuf_r+0x70>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f023 0303 	bic.w	r3, r3, #3
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	431d      	orrs	r5, r3
 8009a08:	81a5      	strh	r5, [r4, #12]
 8009a0a:	e7cf      	b.n	80099ac <__smakebuf_r+0x18>

08009a0c <_fstat_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d07      	ldr	r5, [pc, #28]	@ (8009a2c <_fstat_r+0x20>)
 8009a10:	2300      	movs	r3, #0
 8009a12:	4604      	mov	r4, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	4611      	mov	r1, r2
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	f7f7 ff23 	bl	8001864 <_fstat>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	d102      	bne.n	8009a28 <_fstat_r+0x1c>
 8009a22:	682b      	ldr	r3, [r5, #0]
 8009a24:	b103      	cbz	r3, 8009a28 <_fstat_r+0x1c>
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	bd38      	pop	{r3, r4, r5, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20000d04 	.word	0x20000d04

08009a30 <_isatty_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4d06      	ldr	r5, [pc, #24]	@ (8009a4c <_isatty_r+0x1c>)
 8009a34:	2300      	movs	r3, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f7 ff22 	bl	8001884 <_isatty>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_isatty_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_isatty_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000d04 	.word	0x20000d04

08009a50 <_raise_r>:
 8009a50:	291f      	cmp	r1, #31
 8009a52:	b538      	push	{r3, r4, r5, lr}
 8009a54:	4605      	mov	r5, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	d904      	bls.n	8009a64 <_raise_r+0x14>
 8009a5a:	2316      	movs	r3, #22
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a66:	b112      	cbz	r2, 8009a6e <_raise_r+0x1e>
 8009a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a6c:	b94b      	cbnz	r3, 8009a82 <_raise_r+0x32>
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f000 f830 	bl	8009ad4 <_getpid_r>
 8009a74:	4622      	mov	r2, r4
 8009a76:	4601      	mov	r1, r0
 8009a78:	4628      	mov	r0, r5
 8009a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a7e:	f000 b817 	b.w	8009ab0 <_kill_r>
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d00a      	beq.n	8009a9c <_raise_r+0x4c>
 8009a86:	1c59      	adds	r1, r3, #1
 8009a88:	d103      	bne.n	8009a92 <_raise_r+0x42>
 8009a8a:	2316      	movs	r3, #22
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	e7e7      	b.n	8009a62 <_raise_r+0x12>
 8009a92:	2100      	movs	r1, #0
 8009a94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	4798      	blx	r3
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	e7e0      	b.n	8009a62 <_raise_r+0x12>

08009aa0 <raise>:
 8009aa0:	4b02      	ldr	r3, [pc, #8]	@ (8009aac <raise+0xc>)
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f7ff bfd3 	b.w	8009a50 <_raise_r>
 8009aaa:	bf00      	nop
 8009aac:	2000002c 	.word	0x2000002c

08009ab0 <_kill_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	@ (8009ad0 <_kill_r+0x20>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	4611      	mov	r1, r2
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	f7f7 fe71 	bl	80017a4 <_kill>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	d102      	bne.n	8009acc <_kill_r+0x1c>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b103      	cbz	r3, 8009acc <_kill_r+0x1c>
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	bd38      	pop	{r3, r4, r5, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000d04 	.word	0x20000d04

08009ad4 <_getpid_r>:
 8009ad4:	f7f7 be5e 	b.w	8001794 <_getpid>

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
