
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  080097e0  080097e0  0000a7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bc0  08009bc0  0000b31c  2**0
                  CONTENTS
  4 .ARM          00000008  08009bc0  08009bc0  0000abc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bc8  08009bc8  0000b31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bc8  08009bc8  0000abc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bcc  08009bcc  0000abcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009bd0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08009dac  0000b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  08009e4c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000970  2000031c  08009eec  0000b31c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c8c  08009eec  0000bc8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a38e  00000000  00000000  0000b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000345f  00000000  00000000  000256d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001628  00000000  00000000  00028b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001142  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b6fd  00000000  00000000  0002b2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a07b  00000000  00000000  0005699f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010bfaa  00000000  00000000  00070a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017c9c4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006db0  00000000  00000000  0017ca08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  001837b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000031c 	.word	0x2000031c
 800021c:	00000000 	.word	0x00000000
 8000220:	080097c8 	.word	0x080097c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000320 	.word	0x20000320
 800023c:	080097c8 	.word	0x080097c8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <func_clear_values>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Clear variable values
void func_clear_values(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
//	float *volt_value_ptr = &measured_voltage_value;
//	float *adc_value_ptr = &adc_value;

	adc_value = 0.0;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <func_clear_values+0x20>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	measured_voltage_value = 0.0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <func_clear_values+0x24>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]

}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000ab0 	.word	0x20000ab0
 8000604:	20000abc 	.word	0x20000abc

08000608 <func_init_sensor_connection_status>:

// Initial sensor connection status
void func_init_sensor_connection_status(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
//	int *sensor_status_ptr = &sensor_status;
	func_clear_values();
 800060c:	f7ff ffe8 	bl	80005e0 <func_clear_values>

	HAL_ADC_Stop(&hadc1);
 8000610:	4819      	ldr	r0, [pc, #100]	@ (8000678 <func_init_sensor_connection_status+0x70>)
 8000612:	f001 fa09 	bl	8001a28 <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000616:	4818      	ldr	r0, [pc, #96]	@ (8000678 <func_init_sensor_connection_status+0x70>)
 8000618:	f001 f938 	bl	800188c <HAL_ADC_Start>

	//Get new measurements
	func_get_adc_value(); // Does not need to be an average
 800061c:	f000 f8b4 	bl	8000788 <func_get_adc_value>
	func_adc_to_voltage();
 8000620:	f000 f8c6 	bl	80007b0 <func_adc_to_voltage>

//	if(measured_voltage_value < 0.1)
	if(measured_voltage_value < 0.1){
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <func_init_sensor_connection_status+0x74>)
 8000626:	edd3 7a00 	vldr	s15, [r3]
 800062a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800062e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000670 <func_init_sensor_connection_status+0x68>
 8000632:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063a:	d513      	bpl.n	8000664 <func_init_sensor_connection_status+0x5c>
		sprintf(output_message, "+++ SENSOR DISCONNECTED +++\r\n");
 800063c:	4910      	ldr	r1, [pc, #64]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 800063e:	4811      	ldr	r0, [pc, #68]	@ (8000684 <func_init_sensor_connection_status+0x7c>)
 8000640:	f006 ff42 	bl	80074c8 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <func_init_sensor_connection_status+0x7c>)
 8000646:	f7ff fe4b 	bl	80002e0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000652:	490c      	ldr	r1, [pc, #48]	@ (8000684 <func_init_sensor_connection_status+0x7c>)
 8000654:	480c      	ldr	r0, [pc, #48]	@ (8000688 <func_init_sensor_connection_status+0x80>)
 8000656:	f004 ffb7 	bl	80055c8 <HAL_UART_Transmit>
		HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800065e:	f001 f8ad 	bl	80017bc <HAL_Delay>
	} else {
		sensor_status = 0;
	}
}
 8000662:	e002      	b.n	800066a <func_init_sensor_connection_status+0x62>
		sensor_status = 0;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <func_init_sensor_connection_status+0x84>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	9999999a 	.word	0x9999999a
 8000674:	3fb99999 	.word	0x3fb99999
 8000678:	20000370 	.word	0x20000370
 800067c:	20000abc 	.word	0x20000abc
 8000680:	080097e0 	.word	0x080097e0
 8000684:	20000acc 	.word	0x20000acc
 8000688:	20000514 	.word	0x20000514
 800068c:	20000000 	.word	0x20000000

08000690 <func_monitor_sensor_status>:

// Sensor connection monitoring
void func_monitor_sensor_status(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	if(measured_voltage_value < 0.1){
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <func_monitor_sensor_status+0x38>)
 8000696:	edd3 7a00 	vldr	s15, [r3]
 800069a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800069e:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80006c0 <func_monitor_sensor_status+0x30>
 80006a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d400      	bmi.n	80006ae <func_monitor_sensor_status+0x1e>
		sensor_status = 1;
	}
}
 80006ac:	e002      	b.n	80006b4 <func_monitor_sensor_status+0x24>
		sensor_status = 1;
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <func_monitor_sensor_status+0x3c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	9999999a 	.word	0x9999999a
 80006c4:	3fb99999 	.word	0x3fb99999
 80006c8:	20000abc 	.word	0x20000abc
 80006cc:	20000000 	.word	0x20000000

080006d0 <func_calibrate_sensor>:

// Calibrate sensor
void func_calibrate_sensor(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	while(start_up){
 80006d4:	e006      	b.n	80006e4 <func_calibrate_sensor+0x14>
		// Take initial measurement
		func_new_measurement();
 80006d6:	f000 f84d 	bl	8000774 <func_new_measurement>

		// Set auto-zero value
		func_auto_zero();
 80006da:	f000 f8c5 	bl	8000868 <func_auto_zero>
		start_up = 0;
 80006de:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <func_calibrate_sensor+0x24>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
	while(start_up){
 80006e4:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <func_calibrate_sensor+0x24>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f4      	bne.n	80006d6 <func_calibrate_sensor+0x6>
	}
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000004 	.word	0x20000004

080006f8 <func_average_adc_measurement>:

// Average measurement
void func_average_adc_measurement(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    // Initialize accumulation variables
    adc_sum = 0.0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <func_average_adc_measurement+0x68>)
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
    sample_count = 0.0;
 8000704:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <func_average_adc_measurement+0x6c>)
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
    sampling_done = 0;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <func_average_adc_measurement+0x70>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <func_average_adc_measurement+0x74>)
 8000714:	f004 fa6c 	bl	8004bf0 <HAL_TIM_Base_Start_IT>

    // Wait for 1000ms
    HAL_Delay(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071c:	f001 f84e 	bl	80017bc <HAL_Delay>

    // Stop the timer
    HAL_TIM_Base_Stop_IT(&htim2);
 8000720:	4812      	ldr	r0, [pc, #72]	@ (800076c <func_average_adc_measurement+0x74>)
 8000722:	f004 fadd 	bl	8004ce0 <HAL_TIM_Base_Stop_IT>

    // Calculate average
    if (sample_count > 0) {
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <func_average_adc_measurement+0x6c>)
 8000728:	edd3 7a00 	vldr	s15, [r3]
 800072c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000734:	dd0b      	ble.n	800074e <func_average_adc_measurement+0x56>
    	avg_adc_value = adc_sum / sample_count; // Average ADC value stored
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <func_average_adc_measurement+0x68>)
 8000738:	edd3 6a00 	vldr	s13, [r3]
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <func_average_adc_measurement+0x6c>)
 800073e:	ed93 7a00 	vldr	s14, [r3]
 8000742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <func_average_adc_measurement+0x78>)
 8000748:	edc3 7a00 	vstr	s15, [r3]
 800074c:	e003      	b.n	8000756 <func_average_adc_measurement+0x5e>
    } else {
    	avg_adc_value = 0.0; // Default value if no samples were taken
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <func_average_adc_measurement+0x78>)
 8000750:	f04f 0200 	mov.w	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
    }

    // Mark sampling as done
    sampling_done = 1;
 8000756:	4b04      	ldr	r3, [pc, #16]	@ (8000768 <func_average_adc_measurement+0x70>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000aa4 	.word	0x20000aa4
 8000764:	20000aa8 	.word	0x20000aa8
 8000768:	20000aac 	.word	0x20000aac
 800076c:	200004c8 	.word	0x200004c8
 8000770:	20000ab4 	.word	0x20000ab4

08000774 <func_new_measurement>:

// Get measurement values
void func_new_measurement(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	func_average_adc_measurement();
 8000778:	f7ff ffbe 	bl	80006f8 <func_average_adc_measurement>
	func_adc_to_voltage();
 800077c:	f000 f818 	bl	80007b0 <func_adc_to_voltage>
	func_voltage_to_psi();
 8000780:	f000 f854 	bl	800082c <func_voltage_to_psi>

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <func_get_adc_value>:
// Get ADC value
void func_get_adc_value(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
//	float *adc_ptr = &adc_value;
	adc_value = HAL_ADC_GetValue(&hadc1);
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <func_get_adc_value+0x1c>)
 800078e:	f001 fb1a 	bl	8001dc6 <HAL_ADC_GetValue>
 8000792:	ee07 0a90 	vmov	s15, r0
 8000796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800079a:	4b03      	ldr	r3, [pc, #12]	@ (80007a8 <func_get_adc_value+0x20>)
 800079c:	edc3 7a00 	vstr	s15, [r3]


//	float current_adc_value = HAL_ADC_GetValue(&hadc1);
//	filtered_adc_value = apply_low_pass_filter(current_adc_value, filtered_adc_value);
//	adc_value = filtered_adc_value;
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000370 	.word	0x20000370
 80007a8:	20000ab0 	.word	0x20000ab0
 80007ac:	00000000 	.word	0x00000000

080007b0 <func_adc_to_voltage>:
//    return (FILTER_ALPHA * current_value) + ((1 - FILTER_ALPHA) * previous_filtered_value);
//}


// ADC to voltage
void func_adc_to_voltage(void){
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
//	float *voltage_ptr = &measured_voltage_value;
//	measured_voltage_value = (adc_value / 4095) * 3.3;
	if(sensor_status){
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <func_adc_to_voltage+0x68>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d012      	beq.n	80007e2 <func_adc_to_voltage+0x32>
		measured_voltage_value = (adc_value / 4095) * 3.3;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <func_adc_to_voltage+0x6c>)
 80007be:	ed93 7a00 	vldr	s14, [r3]
 80007c2:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000820 <func_adc_to_voltage+0x70>
 80007c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007ce:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8000810 <func_adc_to_voltage+0x60>
 80007d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <func_adc_to_voltage+0x74>)
 80007dc:	edc3 7a00 	vstr	s15, [r3]
	} else {
		measured_voltage_value = (avg_adc_value / 4095) * 3.3;
	}
}
 80007e0:	e011      	b.n	8000806 <func_adc_to_voltage+0x56>
		measured_voltage_value = (avg_adc_value / 4095) * 3.3;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <func_adc_to_voltage+0x78>)
 80007e4:	ed93 7a00 	vldr	s14, [r3]
 80007e8:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000820 <func_adc_to_voltage+0x70>
 80007ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f4:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8000810 <func_adc_to_voltage+0x60>
 80007f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <func_adc_to_voltage+0x74>)
 8000802:	edc3 7a00 	vstr	s15, [r3]
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	66666666 	.word	0x66666666
 8000814:	400a6666 	.word	0x400a6666
 8000818:	20000000 	.word	0x20000000
 800081c:	20000ab0 	.word	0x20000ab0
 8000820:	457ff000 	.word	0x457ff000
 8000824:	20000abc 	.word	0x20000abc
 8000828:	20000ab4 	.word	0x20000ab4

0800082c <func_voltage_to_psi>:

// Voltage to psi
void func_voltage_to_psi(void){
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
//	float *psi_ptr = &measured_psi_pressure;
	measured_psi_pressure = (((measured_voltage_value - OUTPUT_VOLTAGE_MIN) *
 8000830:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <func_voltage_to_psi+0x34>)
 8000832:	edd3 7a00 	vldr	s15, [r3]
 8000836:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800083a:	ee27 7a87 	vmul.f32	s14, s15, s14
  	  	  (PSI_PRESSURE_MAX  - PSI_PRESSURE_MIN)) / (OUTPUT_VOLTAGE_MAX - OUTPUT_VOLTAGE_MIN)) + PSI_PRESSURE_MIN;
 800083e:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000846:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800084a:	ee77 7ac7 	vsub.f32	s15, s15, s14
	measured_psi_pressure = (((measured_voltage_value - OUTPUT_VOLTAGE_MIN) *
 800084e:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <func_voltage_to_psi+0x38>)
 8000850:	edc3 7a00 	vstr	s15, [r3]

}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	20000abc 	.word	0x20000abc
 8000864:	20000ab8 	.word	0x20000ab8

08000868 <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	auto_zero_pressure_value =  measured_psi_pressure - KNOWN_REF_PRESSURE;
 800086c:	4b04      	ldr	r3, [pc, #16]	@ (8000880 <func_auto_zero+0x18>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <func_auto_zero+0x1c>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000ab8 	.word	0x20000ab8
 8000884:	20000ac0 	.word	0x20000ac0

08000888 <func_corrected_pressure>:

// Corrected pressure
void func_corrected_pressure(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	corrected_pressure_value = measured_psi_pressure - auto_zero_pressure_value;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <func_corrected_pressure+0x24>)
 800088e:	ed93 7a00 	vldr	s14, [r3]
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <func_corrected_pressure+0x28>)
 8000894:	edd3 7a00 	vldr	s15, [r3]
 8000898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <func_corrected_pressure+0x2c>)
 800089e:	edc3 7a00 	vstr	s15, [r3]
//	func_psi_to_cmh2o();
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	20000ab8 	.word	0x20000ab8
 80008b0:	20000ac0 	.word	0x20000ac0
 80008b4:	20000ac4 	.word	0x20000ac4

080008b8 <func_psi_to_cmh2o>:

// psi to cmh2o
void func_psi_to_cmh2o(void){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	corrected_cmh2o_pressure = corrected_pressure_value * 70.307;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <func_psi_to_cmh2o+0x38>)
 80008be:	edd3 7a00 	vldr	s15, [r3]
 80008c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008c6:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80008e8 <func_psi_to_cmh2o+0x30>
 80008ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <func_psi_to_cmh2o+0x3c>)
 80008d4:	edc3 7a00 	vstr	s15, [r3]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	f3af 8000 	nop.w
 80008e8:	e353f7cf 	.word	0xe353f7cf
 80008ec:	405193a5 	.word	0x405193a5
 80008f0:	20000ac4 	.word	0x20000ac4
 80008f4:	20000ac8 	.word	0x20000ac8

080008f8 <func_corrected_measurement>:

// Corrected measurement
void func_corrected_measurement(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	func_corrected_pressure();
 80008fc:	f7ff ffc4 	bl	8000888 <func_corrected_pressure>
	func_psi_to_cmh2o();
 8000900:	f7ff ffda 	bl	80008b8 <func_psi_to_cmh2o>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000918:	d11a      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x48>
        if (!sampling_done) {
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d116      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x48>
        	func_get_adc_value();
 8000922:	f7ff ff31 	bl	8000788 <func_get_adc_value>
            adc_sum += adc_value;
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000928:	ed93 7a00 	vldr	s14, [r3]
 800092c:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800092e:	edd3 7a00 	vldr	s15, [r3]
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000938:	edc3 7a00 	vstr	s15, [r3]
            sample_count++;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800093e:	edd3 7a00 	vldr	s15, [r3]
 8000942:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800094c:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000aac 	.word	0x20000aac
 800095c:	20000aa4 	.word	0x20000aa4
 8000960:	20000ab0 	.word	0x20000ab0
 8000964:	20000aa8 	.word	0x20000aa8

08000968 <HAL_ADC_ConvCpltCallback>:

// DMA Transfer Complete callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
        // Handle ADC DMA transfer complete
    }
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 febe 	bl	8001702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f85f 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 fa39 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 fa19 	bl	8000dc4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000992:	f000 f9b9 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000996:	f000 f9e7 	bl	8000d68 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800099a:	f000 f8c7 	bl	8000b2c <MX_ADC1_Init>
  MX_ETH_Init();
 800099e:	f000 f917 	bl	8000bd0 <MX_ETH_Init>
  MX_TIM2_Init();
 80009a2:	f000 f963 	bl	8000c6c <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <main+0xac>)
 80009a8:	f000 ff70 	bl	800188c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009b0:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <main+0xac>)
 80009b2:	f001 f86d 	bl	8001a90 <HAL_ADC_PollForConversion>

	  // Check initial sensor connection.
	  while(sensor_status){
 80009b6:	e001      	b.n	80009bc <main+0x40>
		  func_init_sensor_connection_status();
 80009b8:	f7ff fe26 	bl	8000608 <func_init_sensor_connection_status>
	  while(sensor_status){
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <main+0xb0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f9      	bne.n	80009b8 <main+0x3c>
	  }

	  // Ongoing sensor connection status
	  func_monitor_sensor_status();
 80009c4:	f7ff fe64 	bl	8000690 <func_monitor_sensor_status>

	  //Sensor calibration
	  func_calibrate_sensor();
 80009c8:	f7ff fe82 	bl	80006d0 <func_calibrate_sensor>

	  // Take and correct measurement
	  func_new_measurement();
 80009cc:	f7ff fed2 	bl	8000774 <func_new_measurement>
	  func_corrected_measurement();
 80009d0:	f7ff ff92 	bl	80008f8 <func_corrected_measurement>

	  sprintf(output_message, "ADC Value: %.2f, Voltage: %.2fV, %.2fcmH2O\r\n", adc_value, measured_voltage_value, corrected_cmh2o_pressure);
 80009d4:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <main+0xb4>)
 80009d6:	edd3 7a00 	vldr	s15, [r3]
 80009da:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <main+0xb8>)
 80009e0:	edd3 7a00 	vldr	s15, [r3]
 80009e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <main+0xbc>)
 80009ea:	edd3 6a00 	vldr	s13, [r3]
 80009ee:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80009f2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80009f6:	ed8d 7b00 	vstr	d7, [sp]
 80009fa:	ec53 2b15 	vmov	r2, r3, d5
 80009fe:	490f      	ldr	r1, [pc, #60]	@ (8000a3c <main+0xc0>)
 8000a00:	480f      	ldr	r0, [pc, #60]	@ (8000a40 <main+0xc4>)
 8000a02:	f006 fd61 	bl	80074c8 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <main+0xc4>)
 8000a08:	f7ff fc6a 	bl	80002e0 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a14:	490a      	ldr	r1, [pc, #40]	@ (8000a40 <main+0xc4>)
 8000a16:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <main+0xc8>)
 8000a18:	f004 fdd6 	bl	80055c8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000a1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a20:	f000 fecc 	bl	80017bc <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000a24:	e7bf      	b.n	80009a6 <main+0x2a>
 8000a26:	bf00      	nop
 8000a28:	20000370 	.word	0x20000370
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000ab0 	.word	0x20000ab0
 8000a34:	20000abc 	.word	0x20000abc
 8000a38:	20000ac8 	.word	0x20000ac8
 8000a3c:	08009800 	.word	0x08009800
 8000a40:	20000acc 	.word	0x20000acc
 8000a44:	20000514 	.word	0x20000514

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	@ 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2234      	movs	r2, #52	@ 0x34
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 fe18 	bl	800768c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a6c:	f002 ff0c 	bl	8003888 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a2b      	ldr	r2, [pc, #172]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <SystemClock_Config+0xdc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <SystemClock_Config+0xe0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000abc:	2360      	movs	r3, #96	@ 0x60
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 ff39 	bl	8003948 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000adc:	f000 fa4c 	bl	8000f78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae0:	f002 fee2 	bl	80038a8 <HAL_PWREx_EnableOverDrive>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aea:	f000 fa45 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2103      	movs	r1, #3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f003 f9ca 	bl	8003ea4 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b16:	f000 fa2f 	bl	8000f78 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	463b      	mov	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <MX_ADC1_Init+0x9c>)
 8000b42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b66:	4b17      	ldr	r3, [pc, #92]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <MX_ADC1_Init+0xa0>)
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b72:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000b8e:	f000 fe39 	bl	8001804 <HAL_ADC_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 f9ee 	bl	8000f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000b9c:	230d      	movs	r3, #13
 8000b9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_ADC1_Init+0x98>)
 8000bae:	f001 f92b 	bl	8001e08 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bb8:	f000 f9de 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000370 	.word	0x20000370
 8000bc8:	40012000 	.word	0x40012000
 8000bcc:	0f000001 	.word	0x0f000001

08000bd0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000bd6:	4a20      	ldr	r2, [pc, #128]	@ (8000c58 <MX_ETH_Init+0x88>)
 8000bd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000be8:	22e1      	movs	r2, #225	@ 0xe1
 8000bea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c00:	4a16      	ldr	r2, [pc, #88]	@ (8000c5c <MX_ETH_Init+0x8c>)
 8000c02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c06:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c0a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <MX_ETH_Init+0x90>)
 8000c10:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c14:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_ETH_Init+0x94>)
 8000c16:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c1a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c1e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <MX_ETH_Init+0x84>)
 8000c22:	f001 ffd9 	bl	8002bd8 <HAL_ETH_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c2c:	f000 f9a4 	bl	8000f78 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c30:	2238      	movs	r2, #56	@ 0x38
 8000c32:	2100      	movs	r1, #0
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_ETH_Init+0x98>)
 8000c36:	f006 fd29 	bl	800768c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <MX_ETH_Init+0x98>)
 8000c3c:	2221      	movs	r2, #33	@ 0x21
 8000c3e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c40:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <MX_ETH_Init+0x98>)
 8000c42:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c46:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <MX_ETH_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000418 	.word	0x20000418
 8000c58:	40028000 	.word	0x40028000
 8000c5c:	20000b30 	.word	0x20000b30
 8000c60:	2000027c 	.word	0x2000027c
 8000c64:	200001dc 	.word	0x200001dc
 8000c68:	20000338 	.word	0x20000338

08000c6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000c8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000c94:	225f      	movs	r2, #95	@ 0x5f
 8000c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb2:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000cb4:	f003 ff44 	bl	8004b40 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cbe:	f000 f95b 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000cd0:	f004 f954 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cda:	f000 f94d 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <MX_TIM2_Init+0x98>)
 8000cec:	f004 fb72 	bl	80053d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cf6:	f000 f93f 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200004c8 	.word	0x200004c8

08000d08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <MX_USART3_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d4c:	f004 fbee 	bl	800552c <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 f90f 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000514 	.word	0x20000514
 8000d64:	40004800 	.word	0x40004800

08000d68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2206      	movs	r2, #6
 8000d78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	f002 fc23 	bl	80035f6 <HAL_PCD_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f8df 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000059c 	.word	0x2000059c

08000dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <MX_DMA_Init+0x38>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <MX_DMA_Init+0x38>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_DMA_Init+0x38>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2038      	movs	r0, #56	@ 0x38
 8000de8:	f001 fb43 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dec:	2038      	movs	r0, #56	@ 0x38
 8000dee:	f001 fb5c 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	@ 0x30
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b54      	ldr	r3, [pc, #336]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a53      	ldr	r2, [pc, #332]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b51      	ldr	r3, [pc, #324]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a4d      	ldr	r2, [pc, #308]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b48      	ldr	r3, [pc, #288]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a47      	ldr	r2, [pc, #284]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a41      	ldr	r2, [pc, #260]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b3c      	ldr	r3, [pc, #240]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b39      	ldr	r3, [pc, #228]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8e:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a35      	ldr	r2, [pc, #212]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <MX_GPIO_Init+0x168>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4830      	ldr	r0, [pc, #192]	@ (8000f6c <MX_GPIO_Init+0x16c>)
 8000eac:	f002 fb66 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000eb6:	482e      	ldr	r0, [pc, #184]	@ (8000f70 <MX_GPIO_Init+0x170>)
 8000eb8:	f002 fb60 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2140      	movs	r1, #64	@ 0x40
 8000ec0:	482c      	ldr	r0, [pc, #176]	@ (8000f74 <MX_GPIO_Init+0x174>)
 8000ec2:	f002 fb5b 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4823      	ldr	r0, [pc, #140]	@ (8000f6c <MX_GPIO_Init+0x16c>)
 8000ede:	f002 f9a1 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481c      	ldr	r0, [pc, #112]	@ (8000f6c <MX_GPIO_Init+0x16c>)
 8000efa:	f002 f993 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000efe:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4816      	ldr	r0, [pc, #88]	@ (8000f70 <MX_GPIO_Init+0x170>)
 8000f18:	f002 f984 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4810      	ldr	r0, [pc, #64]	@ (8000f74 <MX_GPIO_Init+0x174>)
 8000f34:	f002 f976 	bl	8003224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <MX_GPIO_Init+0x174>)
 8000f4c:	f002 f96a 	bl	8003224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2028      	movs	r0, #40	@ 0x28
 8000f56:	f001 fa8c 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	f001 faa5 	bl	80024aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	@ 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40021800 	.word	0x40021800

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x44>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a31      	ldr	r2, [pc, #196]	@ (80010b0 <HAL_ADC_MspInit+0xe4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d15c      	bne.n	80010a8 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a30      	ldr	r2, [pc, #192]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a2a      	ldr	r2, [pc, #168]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <HAL_ADC_MspInit+0xe8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 800101e:	2308      	movs	r3, #8
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4821      	ldr	r0, [pc, #132]	@ (80010b8 <HAL_ADC_MspInit+0xec>)
 8001032:	f002 f8f7 	bl	8003224 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <HAL_ADC_MspInit+0xf4>)
 800103a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001050:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001054:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001058:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800105c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800106c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800106e:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001070:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001074:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800107c:	480f      	ldr	r0, [pc, #60]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 800107e:	f001 fa2f 	bl	80024e0 <HAL_DMA_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001088:	f7ff ff76 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_ADC_MspInit+0xf0>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2012      	movs	r0, #18
 800109e:	f001 f9e8 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f001 fa01 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	@ 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40012000 	.word	0x40012000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	200003b8 	.word	0x200003b8
 80010c0:	40026410 	.word	0x40026410

080010c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08e      	sub	sp, #56	@ 0x38
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	@ (800121c <HAL_ETH_MspInit+0x158>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f040 8096 	bne.w	8001214 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fc:	623b      	str	r3, [r7, #32]
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a46      	ldr	r2, [pc, #280]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001106:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
 800110c:	4b44      	ldr	r3, [pc, #272]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a40      	ldr	r2, [pc, #256]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800111e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30
 8001124:	4b3e      	ldr	r3, [pc, #248]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a3a      	ldr	r2, [pc, #232]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a34      	ldr	r2, [pc, #208]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	6313      	str	r3, [r2, #48]	@ 0x30
 800116c:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001178:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 800117e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001182:	6313      	str	r3, [r2, #48]	@ 0x30
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001190:	2332      	movs	r3, #50	@ 0x32
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a0:	230b      	movs	r3, #11
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	481e      	ldr	r0, [pc, #120]	@ (8001224 <HAL_ETH_MspInit+0x160>)
 80011ac:	f002 f83a 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011b0:	2386      	movs	r3, #134	@ 0x86
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c0:	230b      	movs	r3, #11
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4817      	ldr	r0, [pc, #92]	@ (8001228 <HAL_ETH_MspInit+0x164>)
 80011cc:	f002 f82a 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e2:	230b      	movs	r3, #11
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <HAL_ETH_MspInit+0x168>)
 80011ee:	f002 f819 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011f2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001204:	230b      	movs	r3, #11
 8001206:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <HAL_ETH_MspInit+0x16c>)
 8001210:	f002 f808 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3738      	adds	r7, #56	@ 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40028000 	.word	0x40028000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40021800 	.word	0x40021800

08001234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001244:	d113      	bne.n	800126e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_TIM_Base_MspInit+0x44>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <HAL_TIM_Base_MspInit+0x44>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6413      	str	r3, [r2, #64]	@ 0x40
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_TIM_Base_MspInit+0x44>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	201c      	movs	r0, #28
 8001264:	f001 f905 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001268:	201c      	movs	r0, #28
 800126a:	f001 f91e 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ae      	sub	sp, #184	@ 0xb8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2290      	movs	r2, #144	@ 0x90
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f006 f9f5 	bl	800768c <memset>
  if(huart->Instance==USART3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <HAL_UART_MspInit+0xc4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d144      	bne.n	8001336 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012b0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f818 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012c6:	f7ff fe57 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_UART_MspInit+0xc8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <HAL_UART_MspInit+0xcc>)
 8001322:	f001 ff7f 	bl	8003224 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2027      	movs	r0, #39	@ 0x27
 800132c:	f001 f8a1 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001330:	2027      	movs	r0, #39	@ 0x27
 8001332:	f001 f8ba 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	37b8      	adds	r7, #184	@ 0xb8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004800 	.word	0x40004800
 8001344:	40023800 	.word	0x40023800
 8001348:	40020c00 	.word	0x40020c00

0800134c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ae      	sub	sp, #184	@ 0xb8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2290      	movs	r2, #144	@ 0x90
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f006 f98d 	bl	800768c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800137a:	d159      	bne.n	8001430 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800137c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001380:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f002 ffaf 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001398:	f7ff fdee 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	4a25      	ldr	r2, [pc, #148]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a8:	4b23      	ldr	r3, [pc, #140]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013b4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ce:	230a      	movs	r3, #10
 80013d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013d8:	4619      	mov	r1, r3
 80013da:	4818      	ldr	r0, [pc, #96]	@ (800143c <HAL_PCD_MspInit+0xf0>)
 80013dc:	f001 ff22 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4810      	ldr	r0, [pc, #64]	@ (800143c <HAL_PCD_MspInit+0xf0>)
 80013fc:	f001 ff12 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 8001402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001404:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 8001406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140a:	6353      	str	r3, [r2, #52]	@ 0x34
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 800140e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	4a06      	ldr	r2, [pc, #24]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6453      	str	r3, [r2, #68]	@ 0x44
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <HAL_PCD_MspInit+0xec>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	37b8      	adds	r7, #184	@ 0xb8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f971 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014a4:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <ADC_IRQHandler+0x10>)
 80014a6:	f000 fb7e 	bl	8001ba6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000370 	.word	0x20000370

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f003 fc40 	bl	8004d3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200004c8 	.word	0x200004c8

080014c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <USART3_IRQHandler+0x10>)
 80014ce:	f004 f8ff 	bl	80056d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000514 	.word	0x20000514

080014dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014e4:	f002 f864 	bl	80035b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <DMA2_Stream0_IRQHandler+0x10>)
 80014f2:	f001 f935 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200003b8 	.word	0x200003b8

08001500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return 1;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_kill>:

int _kill(int pid, int sig)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800151a:	f006 f8c3 	bl	80076a4 <__errno>
 800151e:	4603      	mov	r3, r0
 8001520:	2216      	movs	r2, #22
 8001522:	601a      	str	r2, [r3, #0]
  return -1;
 8001524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_exit>:

void _exit (int status)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001538:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffe7 	bl	8001510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001542:	bf00      	nop
 8001544:	e7fd      	b.n	8001542 <_exit+0x12>

08001546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e00a      	b.n	800156e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001558:	f3af 8000 	nop.w
 800155c:	4601      	mov	r1, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	60ba      	str	r2, [r7, #8]
 8001564:	b2ca      	uxtb	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	dbf0      	blt.n	8001558 <_read+0x12>
  }

  return len;
 8001576:	687b      	ldr	r3, [r7, #4]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e009      	b.n	80015a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf1      	blt.n	8001592 <_write+0x12>
  }
  return len;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_close>:

int _close(int file)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e0:	605a      	str	r2, [r3, #4]
  return 0;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_isatty>:

int _isatty(int file)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	@ (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	@ (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	@ (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f006 f828 	bl	80076a4 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20080000 	.word	0x20080000
 8001680:	00000400 	.word	0x00000400
 8001684:	20000b38 	.word	0x20000b38
 8001688:	20000c90 	.word	0x20000c90

0800168c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	@ (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	@ (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	@ (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	@ (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f005 ffe7 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f94b 	bl	800097c <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016f4:	08009bd0 	.word	0x08009bd0
  ldr r2, =_sbss
 80016f8:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80016fc:	20000c8c 	.word	0x20000c8c

08001700 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <CAN1_RX0_IRQHandler>

08001702 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f000 fea8 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170c:	2000      	movs	r0, #0
 800170e:	f000 f805 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001712:	f7ff fc37 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fec3 	bl	80024c6 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001758:	f000 fe8b 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	@ (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000008 	.word	0x20000008
 8001774:	20000010 	.word	0x20000010
 8001778:	2000000c 	.word	0x2000000c

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000010 	.word	0x20000010
 80017a0:	20000b3c 	.word	0x20000b3c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000b3c 	.word	0x20000b3c

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000010 	.word	0x20000010

08001804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e031      	b.n	800187e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fbd2 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d116      	bne.n	8001870 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_ADC_Init+0x84>)
 8001848:	4013      	ands	r3, r2
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fc2e 	bl	80020b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
 800186e:	e001      	b.n	8001874 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	ffffeefd 	.word	0xffffeefd

0800188c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Start+0x1a>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e0ad      	b.n	8001a02 <HAL_ADC_Start+0x176>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d018      	beq.n	80018ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018cc:	4b50      	ldr	r3, [pc, #320]	@ (8001a10 <HAL_ADC_Start+0x184>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a50      	ldr	r2, [pc, #320]	@ (8001a14 <HAL_ADC_Start+0x188>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d175      	bne.n	80019e8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001900:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <HAL_ADC_Start+0x18c>)
 8001902:	4013      	ands	r3, r2
 8001904:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001922:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001936:	d106      	bne.n	8001946 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f023 0206 	bic.w	r2, r3, #6
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44
 8001944:	e002      	b.n	800194c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800195e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a1c <HAL_ADC_Start+0x190>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 031f 	and.w	r3, r3, #31
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d143      	bne.n	8001a00 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e03a      	b.n	8001a00 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a24      	ldr	r2, [pc, #144]	@ (8001a20 <HAL_ADC_Start+0x194>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d10e      	bne.n	80019b2 <HAL_ADC_Start+0x126>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_ADC_Start+0x190>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d120      	bne.n	8001a00 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_ADC_Start+0x198>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d11b      	bne.n	8001a00 <HAL_ADC_Start+0x174>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d114      	bne.n	8001a00 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	e00b      	b.n	8001a00 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f043 0210 	orr.w	r2, r3, #16
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	fffff8fe 	.word	0xfffff8fe
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	40012000 	.word	0x40012000
 8001a24:	40012200 	.word	0x40012200

08001a28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Stop+0x16>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e01f      	b.n	8001a7e <HAL_ADC_Stop+0x56>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d107      	bne.n	8001a74 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <HAL_ADC_Stop+0x64>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	ffffeefe 	.word	0xffffeefe

08001a90 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aac:	d113      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001abc:	d10b      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e063      	b.n	8001b9e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fe65 	bl	80017a4 <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001adc:	e021      	b.n	8001b22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ae4:	d01d      	beq.n	8001b22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <HAL_ADC_PollForConversion+0x6c>
 8001aec:	f7ff fe5a 	bl	80017a4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d212      	bcs.n	8001b22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d00b      	beq.n	8001b22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	f043 0204 	orr.w	r2, r3, #4
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e03d      	b.n	8001b9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d1d6      	bne.n	8001ade <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0212 	mvn.w	r2, #18
 8001b38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d123      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d11f      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d049      	beq.n	8001c70 <HAL_ADC_IRQHandler+0xca>
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d046      	beq.n	8001c70 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d12b      	bne.n	8001c60 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d127      	bne.n	8001c60 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d119      	bne.n	8001c60 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0220 	bic.w	r2, r2, #32
 8001c3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7fe fe81 	bl	8000968 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f06f 0212 	mvn.w	r2, #18
 8001c6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d057      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x190>
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d054      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d139      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12b      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d124      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d11d      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f043 0201 	orr.w	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fabe 	bl	80022a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 020c 	mvn.w	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d44:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d017      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x1d6>
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10d      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f837 	bl	8001de0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f06f 0201 	mvn.w	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d8a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d015      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x218>
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f043 0202 	orr.w	r2, r3, #2
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f820 	bl	8001df4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0220 	mvn.w	r2, #32
 8001dbc:	601a      	str	r2, [r3, #0]
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x1c>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e136      	b.n	8002092 <HAL_ADC_ConfigChannel+0x28a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d93a      	bls.n	8001eaa <HAL_ADC_ConfigChannel+0xa2>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e3c:	d035      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68d9      	ldr	r1, [r3, #12]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	3b1e      	subs	r3, #30
 8001e54:	2207      	movs	r2, #7
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a8d      	ldr	r2, [pc, #564]	@ (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10a      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68d9      	ldr	r1, [r3, #12]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e82:	e035      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68d9      	ldr	r1, [r3, #12]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	4603      	mov	r3, r0
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4403      	add	r3, r0
 8001e9c:	3b1e      	subs	r3, #30
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea8:	e022      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	400a      	ands	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6919      	ldr	r1, [r3, #16]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4403      	add	r3, r0
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d824      	bhi.n	8001f42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b05      	subs	r3, #5
 8001f0a:	221f      	movs	r2, #31
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b05      	subs	r3, #5
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f40:	e04c      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d824      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	3b23      	subs	r3, #35	@ 0x23
 8001f5c:	221f      	movs	r2, #31
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3b23      	subs	r3, #35	@ 0x23
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f92:	e023      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b41      	subs	r3, #65	@ 0x41
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43da      	mvns	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b41      	subs	r3, #65	@ 0x41
 8001fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a30      	ldr	r2, [pc, #192]	@ (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ffa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	@ (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10f      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x21e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d10b      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002014:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002018:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a22      	ldr	r2, [pc, #136]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002020:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002024:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1e      	ldr	r2, [pc, #120]	@ (80020a4 <HAL_ADC_ConfigChannel+0x29c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12b      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x23a>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b11      	cmp	r3, #17
 8002040:	d122      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002048:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800204c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a15      	ldr	r2, [pc, #84]	@ (80020a8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002058:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <HAL_ADC_ConfigChannel+0x298>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d111      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_ADC_ConfigChannel+0x2a4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_ADC_ConfigChannel+0x2a8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9a      	lsrs	r2, r3, #18
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800207a:	e002      	b.n	8002082 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	10000012 	.word	0x10000012
 80020a4:	40012000 	.word	0x40012000
 80020a8:	40012300 	.word	0x40012300
 80020ac:	20000008 	.word	0x20000008
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020bc:	4b78      	ldr	r3, [pc, #480]	@ (80022a0 <ADC_Init+0x1ec>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a77      	ldr	r2, [pc, #476]	@ (80022a0 <ADC_Init+0x1ec>)
 80020c2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020c8:	4b75      	ldr	r3, [pc, #468]	@ (80022a0 <ADC_Init+0x1ec>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4973      	ldr	r1, [pc, #460]	@ (80022a0 <ADC_Init+0x1ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800212a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	4a58      	ldr	r2, [pc, #352]	@ (80022a4 <ADC_Init+0x1f0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002156:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6899      	ldr	r1, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	e00f      	b.n	80021ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800219c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0202 	bic.w	r2, r2, #2
 80021bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	005a      	lsls	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	3b01      	subs	r3, #1
 8002208:	035a      	lsls	r2, r3, #13
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	e007      	b.n	8002224 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002222:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	3b01      	subs	r3, #1
 8002240:	051a      	lsls	r2, r3, #20
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002266:	025a      	lsls	r2, r3, #9
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	029a      	lsls	r2, r3, #10
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	40012300 	.word	0x40012300
 80022a4:	0f000001 	.word	0x0f000001

080022a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff f95a 	bl	80017a4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e099      	b.n	8002630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251c:	e00f      	b.n	800253e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251e:	f7ff f941 	bl	80017a4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b05      	cmp	r3, #5
 800252a:	d908      	bls.n	800253e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e078      	b.n	8002630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e8      	bne.n	800251e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <HAL_DMA_Init+0x158>)
 8002558:	4013      	ands	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	2b04      	cmp	r3, #4
 8002596:	d107      	bne.n	80025a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4313      	orrs	r3, r2
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0307 	bic.w	r3, r3, #7
 80025be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d117      	bne.n	8002602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fa7b 	bl	8002ae0 <DMA_CheckFifoParam>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025fe:	2301      	movs	r3, #1
 8002600:	e016      	b.n	8002630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa32 	bl	8002a74 <DMA_CalcBaseAndBitshift>
 8002610:	4603      	mov	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	223f      	movs	r2, #63	@ 0x3f
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	e010803f 	.word	0xe010803f

0800263c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800264a:	f7ff f8ab 	bl	80017a4 <HAL_GetTick>
 800264e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d008      	beq.n	800266e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	@ 0x80
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e052      	b.n	8002714 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0216 	bic.w	r2, r2, #22
 800267c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800268c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_DMA_Abort+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0208 	bic.w	r2, r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026be:	e013      	b.n	80026e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c0:	f7ff f870 	bl	80017a4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d90c      	bls.n	80026e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e015      	b.n	8002714 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e4      	bne.n	80026c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	223f      	movs	r2, #63	@ 0x3f
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d004      	beq.n	800273a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00c      	b.n	8002754 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2205      	movs	r2, #5
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800276c:	4b8e      	ldr	r3, [pc, #568]	@ (80029a8 <HAL_DMA_IRQHandler+0x248>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a8e      	ldr	r2, [pc, #568]	@ (80029ac <HAL_DMA_IRQHandler+0x24c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278a:	2208      	movs	r2, #8
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	2208      	movs	r2, #8
 80027ba:	409a      	lsls	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2201      	movs	r2, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	2201      	movs	r2, #1
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2204      	movs	r2, #4
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	2204      	movs	r2, #4
 8002826:	409a      	lsls	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f043 0204 	orr.w	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	2210      	movs	r2, #16
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d043      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03c      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	2210      	movs	r2, #16
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e01f      	b.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0208 	bic.w	r2, r2, #8
 80028be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	2220      	movs	r2, #32
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 808f 	beq.w	8002a00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8087 	beq.w	8002a00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	2220      	movs	r2, #32
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b05      	cmp	r3, #5
 8002908:	d136      	bne.n	8002978 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0216 	bic.w	r2, r2, #22
 8002918:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002928:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_DMA_IRQHandler+0x1da>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	223f      	movs	r2, #63	@ 0x3f
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d07e      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
        }
        return;
 8002976:	e079      	b.n	8002a6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01d      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	2b00      	cmp	r3, #0
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e02c      	b.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
 80029a6:	bf00      	nop
 80029a8:	20000008 	.word	0x20000008
 80029ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e01e      	b.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10f      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0210 	bic.w	r2, r2, #16
 80029de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d032      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2205      	movs	r2, #5
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d307      	bcc.n	8002a48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f2      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x2cc>
 8002a46:	e000      	b.n	8002a4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e000      	b.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a6c:	bf00      	nop
    }
  }
}
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3b10      	subs	r3, #16
 8002a84:	4a13      	ldr	r2, [pc, #76]	@ (8002ad4 <DMA_CalcBaseAndBitshift+0x60>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d908      	bls.n	8002ab4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <DMA_CalcBaseAndBitshift+0x68>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	1d1a      	adds	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ab2:	e006      	b.n	8002ac2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <DMA_CalcBaseAndBitshift+0x68>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	aaaaaaab 	.word	0xaaaaaaab
 8002ad8:	08009848 	.word	0x08009848
 8002adc:	fffffc00 	.word	0xfffffc00

08002ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11f      	bne.n	8002b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d856      	bhi.n	8002bae <DMA_CheckFifoParam+0xce>
 8002b00:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <DMA_CheckFifoParam+0x28>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b2b 	.word	0x08002b2b
 8002b10:	08002b19 	.word	0x08002b19
 8002b14:	08002baf 	.word	0x08002baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d046      	beq.n	8002bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b28:	e043      	b.n	8002bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b32:	d140      	bne.n	8002bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b38:	e03d      	b.n	8002bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b42:	d121      	bne.n	8002b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d837      	bhi.n	8002bba <DMA_CheckFifoParam+0xda>
 8002b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <DMA_CheckFifoParam+0x70>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b67 	.word	0x08002b67
 8002b58:	08002b61 	.word	0x08002b61
 8002b5c:	08002b79 	.word	0x08002b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e030      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d025      	beq.n	8002bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b76:	e022      	b.n	8002bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b80:	d11f      	bne.n	8002bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b86:	e01c      	b.n	8002bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d903      	bls.n	8002b96 <DMA_CheckFifoParam+0xb6>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d003      	beq.n	8002b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b94:	e018      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9a:	e015      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00e      	beq.n	8002bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bac:	e00b      	b.n	8002bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e00a      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e008      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e006      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e004      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop

08002bd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06a      	b.n	8002cc0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2223      	movs	r2, #35	@ 0x23
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fa61 	bl	80010c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <HAL_ETH_Init+0xf0>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	4a30      	ldr	r2, [pc, #192]	@ (8002cc8 <HAL_ETH_Init+0xf0>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <HAL_ETH_Init+0xf0>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <HAL_ETH_Init+0xf4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_ETH_Init+0xf4>)
 8002c20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c24:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c26:	4b29      	ldr	r3, [pc, #164]	@ (8002ccc <HAL_ETH_Init+0xf4>)
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4927      	ldr	r1, [pc, #156]	@ (8002ccc <HAL_ETH_Init+0xf4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_ETH_Init+0xf4>)
 8002c36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fda8 	bl	80017a4 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c56:	e011      	b.n	8002c7c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c58:	f7fe fda4 	bl	80017a4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c66:	d909      	bls.n	8002c7c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	22e0      	movs	r2, #224	@ 0xe0
 8002c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e021      	b.n	8002cc0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e4      	bne.n	8002c58 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f958 	bl	8002f44 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f9ff 	bl	8003098 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa55 	bl	800314a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9bd 	bl	8003028 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40013800 	.word	0x40013800

08002cd0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4b51      	ldr	r3, [pc, #324]	@ (8002e2c <ETH_SetMACConfig+0x15c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	7c1b      	ldrb	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <ETH_SetMACConfig+0x28>
 8002cf2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002cf6:	e000      	b.n	8002cfa <ETH_SetMACConfig+0x2a>
 8002cf8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	7c5b      	ldrb	r3, [r3, #17]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <ETH_SetMACConfig+0x38>
 8002d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d06:	e000      	b.n	8002d0a <ETH_SetMACConfig+0x3a>
 8002d08:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d0a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d10:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7fdb      	ldrb	r3, [r3, #31]
 8002d16:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d18:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	7f92      	ldrb	r2, [r2, #30]
 8002d24:	2a00      	cmp	r2, #0
 8002d26:	d102      	bne.n	8002d2e <ETH_SetMACConfig+0x5e>
 8002d28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d2c:	e000      	b.n	8002d30 <ETH_SetMACConfig+0x60>
 8002d2e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d30:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	7f1b      	ldrb	r3, [r3, #28]
 8002d36:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d38:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	791b      	ldrb	r3, [r3, #4]
 8002d44:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d102      	bne.n	8002d58 <ETH_SetMACConfig+0x88>
 8002d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d56:	e000      	b.n	8002d5a <ETH_SetMACConfig+0x8a>
 8002d58:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	7bdb      	ldrb	r3, [r3, #15]
 8002d60:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d62:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d70:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d72:	4313      	orrs	r3, r2
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fe fd16 	bl	80017bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002db6:	2a00      	cmp	r2, #0
 8002db8:	d101      	bne.n	8002dbe <ETH_SetMACConfig+0xee>
 8002dba:	2280      	movs	r2, #128	@ 0x80
 8002dbc:	e000      	b.n	8002dc0 <ETH_SetMACConfig+0xf0>
 8002dbe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dc0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002dce:	2a01      	cmp	r2, #1
 8002dd0:	d101      	bne.n	8002dd6 <ETH_SetMACConfig+0x106>
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	e000      	b.n	8002dd8 <ETH_SetMACConfig+0x108>
 8002dd6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dd8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002de0:	2a01      	cmp	r2, #1
 8002de2:	d101      	bne.n	8002de8 <ETH_SetMACConfig+0x118>
 8002de4:	2204      	movs	r2, #4
 8002de6:	e000      	b.n	8002dea <ETH_SetMACConfig+0x11a>
 8002de8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002df2:	2a01      	cmp	r2, #1
 8002df4:	d101      	bne.n	8002dfa <ETH_SetMACConfig+0x12a>
 8002df6:	2202      	movs	r2, #2
 8002df8:	e000      	b.n	8002dfc <ETH_SetMACConfig+0x12c>
 8002dfa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7fe fcd1 	bl	80017bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	ff20810f 	.word	0xff20810f

08002e30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4b3d      	ldr	r3, [pc, #244]	@ (8002f40 <ETH_SetDMAConfig+0x110>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	7b1b      	ldrb	r3, [r3, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <ETH_SetDMAConfig+0x2c>
 8002e56:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e5a:	e000      	b.n	8002e5e <ETH_SetDMAConfig+0x2e>
 8002e5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7b5b      	ldrb	r3, [r3, #13]
 8002e62:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e64:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	7f52      	ldrb	r2, [r2, #29]
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d102      	bne.n	8002e74 <ETH_SetDMAConfig+0x44>
 8002e6e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e72:	e000      	b.n	8002e76 <ETH_SetDMAConfig+0x46>
 8002e74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e76:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	7b9b      	ldrb	r3, [r3, #14]
 8002e7c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e7e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7f1b      	ldrb	r3, [r3, #28]
 8002e8a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	7f9b      	ldrb	r3, [r3, #30]
 8002e92:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e94:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ea2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7fe fc78 	bl	80017bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	791b      	ldrb	r3, [r3, #4]
 8002ede:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ee4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002eea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ef0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ef8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002efa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f02:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f08:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f16:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fe fc49 	bl	80017bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	f8de3f23 	.word	0xf8de3f23

08002f44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b0a6      	sub	sp, #152	@ 0x98
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f80:	2300      	movs	r3, #0
 8002f82:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fa6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff fe86 	bl	8002cd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ff8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ffa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ffe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003000:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003004:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800300c:	2300      	movs	r3, #0
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff08 	bl	8002e30 <ETH_SetDMAConfig>
}
 8003020:	bf00      	nop
 8003022:	3798      	adds	r7, #152	@ 0x98
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3305      	adds	r3, #5
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	3204      	adds	r2, #4
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <ETH_MACAddressConfig+0x68>)
 800304a:	4413      	add	r3, r2
 800304c:	461a      	mov	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3303      	adds	r3, #3
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	061a      	lsls	r2, r3, #24
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3302      	adds	r3, #2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3301      	adds	r3, #1
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4313      	orrs	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <ETH_MACAddressConfig+0x6c>)
 800307a:	4413      	add	r3, r2
 800307c:	461a      	mov	r2, r3
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40028040 	.word	0x40028040
 8003094:	40028044 	.word	0x40028044

08003098 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e03e      	b.n	8003124 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	3206      	adds	r2, #6
 80030d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d80c      	bhi.n	8003108 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68d9      	ldr	r1, [r3, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e004      	b.n	8003112 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d9bd      	bls.n	80030a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800313c:	611a      	str	r2, [r3, #16]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800314a:	b480      	push	{r7}
 800314c:	b085      	sub	sp, #20
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	e046      	b.n	80031e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6919      	ldr	r1, [r3, #16]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2200      	movs	r2, #0
 8003180:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003194:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 800319c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	3212      	adds	r2, #18
 80031b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d80c      	bhi.n	80031d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	e004      	b.n	80031e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	461a      	mov	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d9b5      	bls.n	8003158 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691a      	ldr	r2, [r3, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003216:	60da      	str	r2, [r3, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e175      	b.n	8003530 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	f040 8164 	bne.w	800352a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d005      	beq.n	800327a <HAL_GPIO_Init+0x56>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d130      	bne.n	80032dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	2201      	movs	r2, #1
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 0201 	and.w	r2, r3, #1
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d017      	beq.n	8003318 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d123      	bne.n	800336c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80be 	beq.w	800352a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	4b66      	ldr	r3, [pc, #408]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	4a65      	ldr	r2, [pc, #404]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ba:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <HAL_GPIO_Init+0x324>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033c6:	4a61      	ldr	r2, [pc, #388]	@ (800354c <HAL_GPIO_Init+0x328>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a58      	ldr	r2, [pc, #352]	@ (8003550 <HAL_GPIO_Init+0x32c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d037      	beq.n	8003462 <HAL_GPIO_Init+0x23e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a57      	ldr	r2, [pc, #348]	@ (8003554 <HAL_GPIO_Init+0x330>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_GPIO_Init+0x23a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <HAL_GPIO_Init+0x334>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02b      	beq.n	800345a <HAL_GPIO_Init+0x236>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a55      	ldr	r2, [pc, #340]	@ (800355c <HAL_GPIO_Init+0x338>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d025      	beq.n	8003456 <HAL_GPIO_Init+0x232>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a54      	ldr	r2, [pc, #336]	@ (8003560 <HAL_GPIO_Init+0x33c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <HAL_GPIO_Init+0x22e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a53      	ldr	r2, [pc, #332]	@ (8003564 <HAL_GPIO_Init+0x340>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d019      	beq.n	800344e <HAL_GPIO_Init+0x22a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a52      	ldr	r2, [pc, #328]	@ (8003568 <HAL_GPIO_Init+0x344>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x226>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a51      	ldr	r2, [pc, #324]	@ (800356c <HAL_GPIO_Init+0x348>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x222>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a50      	ldr	r2, [pc, #320]	@ (8003570 <HAL_GPIO_Init+0x34c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x21e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4f      	ldr	r2, [pc, #316]	@ (8003574 <HAL_GPIO_Init+0x350>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x21a>
 800343a:	2309      	movs	r3, #9
 800343c:	e012      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800343e:	230a      	movs	r3, #10
 8003440:	e010      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003442:	2308      	movs	r3, #8
 8003444:	e00e      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003446:	2307      	movs	r3, #7
 8003448:	e00c      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344a:	2306      	movs	r3, #6
 800344c:	e00a      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800344e:	2305      	movs	r3, #5
 8003450:	e008      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003452:	2304      	movs	r3, #4
 8003454:	e006      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003456:	2303      	movs	r3, #3
 8003458:	e004      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345a:	2302      	movs	r3, #2
 800345c:	e002      	b.n	8003464 <HAL_GPIO_Init+0x240>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_GPIO_Init+0x240>
 8003462:	2300      	movs	r3, #0
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f002 0203 	and.w	r2, r2, #3
 800346a:	0092      	lsls	r2, r2, #2
 800346c:	4093      	lsls	r3, r2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003474:	4935      	ldr	r1, [pc, #212]	@ (800354c <HAL_GPIO_Init+0x328>)
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	3302      	adds	r3, #2
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003482:	4b3d      	ldr	r3, [pc, #244]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034a6:	4a34      	ldr	r2, [pc, #208]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034d0:	4a29      	ldr	r2, [pc, #164]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034d6:	4b28      	ldr	r3, [pc, #160]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_GPIO_Init+0x354>)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003524:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <HAL_GPIO_Init+0x354>)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3301      	adds	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	f67f ae86 	bls.w	8003244 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800
 800356c:	40021c00 	.word	0x40021c00
 8003570:	40022000 	.word	0x40022000
 8003574:	40022400 	.word	0x40022400
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d006      	beq.n	80035d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f806 	bl	80035e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f8:	b08f      	sub	sp, #60	@ 0x3c
 80035fa:	af0a      	add	r7, sp, #40	@ 0x28
 80035fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e116      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fe92 	bl	800134c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 f86a 	bl	8006720 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	687e      	ldr	r6, [r7, #4]
 8003654:	466d      	mov	r5, sp
 8003656:	f106 0410 	add.w	r4, r6, #16
 800365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003666:	e885 0003 	stmia.w	r5, {r0, r1}
 800366a:	1d33      	adds	r3, r6, #4
 800366c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800366e:	6838      	ldr	r0, [r7, #0]
 8003670:	f002 fffe 	bl	8006670 <USB_CoreInit>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0d7      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f003 f858 	bl	8006742 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e04a      	b.n	800372e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	333d      	adds	r3, #61	@ 0x3d
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	333c      	adds	r3, #60	@ 0x3c
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	b298      	uxth	r0, r3
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3344      	adds	r3, #68	@ 0x44
 80036d4:	4602      	mov	r2, r0
 80036d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3340      	adds	r3, #64	@ 0x40
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	3348      	adds	r3, #72	@ 0x48
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	334c      	adds	r3, #76	@ 0x4c
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3354      	adds	r3, #84	@ 0x54
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3af      	bcc.n	8003698 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e044      	b.n	80037c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	3301      	adds	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3b5      	bcc.n	800373e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	687e      	ldr	r6, [r7, #4]
 80037da:	466d      	mov	r5, sp
 80037dc:	f106 0410 	add.w	r4, r6, #16
 80037e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80037f0:	1d33      	adds	r3, r6, #4
 80037f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f002 fff1 	bl	80067dc <USB_DevInit>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e014      	b.n	8003836 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	2b01      	cmp	r3, #1
 8003822:	d102      	bne.n	800382a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f80b 	bl	8003840 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 f9af 	bl	8006b92 <USB_DevDisconnect>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003840 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_PCDEx_ActivateLPM+0x44>)
 8003870:	4313      	orrs	r3, r2
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	10000003 	.word	0x10000003

08003888 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40007000 	.word	0x40007000

080038a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	4a22      	ldr	r2, [pc, #136]	@ (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_PWREx_EnableOverDrive+0x98>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d6:	f7fd ff65 	bl	80017a4 <HAL_GetTick>
 80038da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038dc:	e009      	b.n	80038f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038de:	f7fd ff61 	bl	80017a4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ec:	d901      	bls.n	80038f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e022      	b.n	8003938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038f2:	4b14      	ldr	r3, [pc, #80]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fe:	d1ee      	bne.n	80038de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003900:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0f      	ldr	r2, [pc, #60]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800390a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800390c:	f7fd ff4a 	bl	80017a4 <HAL_GetTick>
 8003910:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003912:	e009      	b.n	8003928 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003914:	f7fd ff46 	bl	80017a4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003922:	d901      	bls.n	8003928 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e007      	b.n	8003938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_PWREx_EnableOverDrive+0x9c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003934:	d1ee      	bne.n	8003914 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	40007000 	.word	0x40007000

08003948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e29b      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8087 	beq.w	8003a7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800396c:	4b96      	ldr	r3, [pc, #600]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00c      	beq.n	8003992 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003978:	4b93      	ldr	r3, [pc, #588]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d112      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
 8003984:	4b90      	ldr	r3, [pc, #576]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003990:	d10b      	bne.n	80039aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003992:	4b8d      	ldr	r3, [pc, #564]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d06c      	beq.n	8003a78 <HAL_RCC_OscConfig+0x130>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d168      	bne.n	8003a78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e275      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x7a>
 80039b4:	4b84      	ldr	r3, [pc, #528]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a83      	ldr	r2, [pc, #524]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e02e      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x9c>
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7b      	ldr	r2, [pc, #492]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 80039ee:	4b76      	ldr	r3, [pc, #472]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a75      	ldr	r2, [pc, #468]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b73      	ldr	r3, [pc, #460]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a72      	ldr	r2, [pc, #456]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xd8>
 8003a08:	4b6f      	ldr	r3, [pc, #444]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a28:	f7fd febc 	bl	80017a4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd feb8 	bl	80017a4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e229      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fd fea8 	bl	80017a4 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fd fea4 	bl	80017a4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	@ 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e215      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x110>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d069      	beq.n	8003b5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a86:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x190>
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b47      	ldr	r3, [pc, #284]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1e9      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b41      	ldr	r3, [pc, #260]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	493d      	ldr	r1, [pc, #244]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e040      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b39      	ldr	r3, [pc, #228]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a38      	ldr	r2, [pc, #224]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fd fe5a 	bl	80017a4 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af4:	f7fd fe56 	bl	80017a4 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e1c7      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4929      	ldr	r1, [pc, #164]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
 8003b26:	e018      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fe36 	bl	80017a4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd fe32 	bl	80017a4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1a3      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d038      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	4a15      	ldr	r2, [pc, #84]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fe13 	bl	80017a4 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fe0f 	bl	80017a4 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e180      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x23a>
 8003ba0:	e01a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	4a08      	ldr	r2, [pc, #32]	@ (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd fdf9 	bl	80017a4 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7fd fdf5 	bl	80017a4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d903      	bls.n	8003bcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e166      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
 8003bc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b92      	ldr	r3, [pc, #584]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80a4 	beq.w	8003d2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b8c      	ldr	r3, [pc, #560]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b89      	ldr	r3, [pc, #548]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	4a88      	ldr	r2, [pc, #544]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfe:	4b86      	ldr	r3, [pc, #536]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0e:	4b83      	ldr	r3, [pc, #524]	@ (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c1a:	4b80      	ldr	r3, [pc, #512]	@ (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a7f      	ldr	r2, [pc, #508]	@ (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fd fdbd 	bl	80017a4 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fdb9 	bl	80017a4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	@ 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e12a      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c40:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x31a>
 8003c54:	4b70      	ldr	r3, [pc, #448]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a6f      	ldr	r2, [pc, #444]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	e02d      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x33c>
 8003c6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c76:	4b68      	ldr	r3, [pc, #416]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7a:	4a67      	ldr	r2, [pc, #412]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c82:	e01c      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
 8003c8c:	4b62      	ldr	r3, [pc, #392]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a61      	ldr	r2, [pc, #388]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c98:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a5b      	ldr	r2, [pc, #364]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb2:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fd6d 	bl	80017a4 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fd fd69 	bl	80017a4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e0d8      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCC_OscConfig+0x386>
 8003cf0:	e014      	b.n	8003d1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fd57 	bl	80017a4 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fd fd53 	bl	80017a4 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e0c2      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d10:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ee      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	4a3c      	ldr	r2, [pc, #240]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80ae 	beq.w	8003e94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d38:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d06d      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d14b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4c:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fd24 	bl	80017a4 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fd20 	bl	80017a4 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e091      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	4b29      	ldr	r3, [pc, #164]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	3b01      	subs	r3, #1
 8003d98:	041b      	lsls	r3, r3, #16
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	061b      	lsls	r3, r3, #24
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	491b      	ldr	r1, [pc, #108]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fcf2 	bl	80017a4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fcee 	bl	80017a4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e05f      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
 8003de2:	e057      	b.n	8003e94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd fcd8 	bl	80017a4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fd fcd4 	bl	80017a4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e045      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x4b0>
 8003e16:	e03d      	b.n	8003e94 <HAL_RCC_OscConfig+0x54c>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e20:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <HAL_RCC_OscConfig+0x558>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d030      	beq.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d129      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d122      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d119      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d10f      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0d0      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d910      	bls.n	8003eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b67      	ldr	r3, [pc, #412]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 020f 	bic.w	r2, r3, #15
 8003ed2:	4965      	ldr	r1, [pc, #404]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d040      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f66:	4b41      	ldr	r3, [pc, #260]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e073      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f76:	4b3d      	ldr	r3, [pc, #244]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06b      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4936      	ldr	r1, [pc, #216]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd fc04 	bl	80017a4 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fc00 	bl	80017a4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e053      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b27      	ldr	r3, [pc, #156]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d210      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	4922      	ldr	r1, [pc, #136]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004022:	4b12      	ldr	r3, [pc, #72]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	490a      	ldr	r1, [pc, #40]	@ (8004070 <HAL_RCC_ClockConfig+0x1cc>)
 8004048:	5ccb      	ldrb	r3, [r1, r3]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <HAL_RCC_ClockConfig+0x1d0>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_ClockConfig+0x1d4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fb60 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	08009830 	.word	0x08009830
 8004074:	20000008 	.word	0x20000008
 8004078:	2000000c 	.word	0x2000000c

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b094      	sub	sp, #80	@ 0x50
 8004082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	647b      	str	r3, [r7, #68]	@ 0x44
 8004088:	2300      	movs	r3, #0
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	2300      	movs	r3, #0
 800408e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004094:	4b79      	ldr	r3, [pc, #484]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d00d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x40>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	f200 80e1 	bhi.w	8004268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x34>
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ae:	e0db      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b73      	ldr	r3, [pc, #460]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b4:	e0db      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b73      	ldr	r3, [pc, #460]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x208>)
 80040b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ba:	e0d8      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040c6:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	2200      	movs	r2, #0
 80040da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	2300      	movs	r3, #0
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	0159      	lsls	r1, r3, #5
 80040fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004100:	0150      	lsls	r0, r2, #5
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4621      	mov	r1, r4
 8004108:	1a51      	subs	r1, r2, r1
 800410a:	6139      	str	r1, [r7, #16]
 800410c:	4629      	mov	r1, r5
 800410e:	eb63 0301 	sbc.w	r3, r3, r1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004120:	4659      	mov	r1, fp
 8004122:	018b      	lsls	r3, r1, #6
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412a:	4651      	mov	r1, sl
 800412c:	018a      	lsls	r2, r1, #6
 800412e:	4651      	mov	r1, sl
 8004130:	ebb2 0801 	subs.w	r8, r2, r1
 8004134:	4659      	mov	r1, fp
 8004136:	eb63 0901 	sbc.w	r9, r3, r1
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414e:	4690      	mov	r8, r2
 8004150:	4699      	mov	r9, r3
 8004152:	4623      	mov	r3, r4
 8004154:	eb18 0303 	adds.w	r3, r8, r3
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	462b      	mov	r3, r5
 800415c:	eb49 0303 	adc.w	r3, r9, r3
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800416e:	4629      	mov	r1, r5
 8004170:	024b      	lsls	r3, r1, #9
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004178:	4621      	mov	r1, r4
 800417a:	024a      	lsls	r2, r1, #9
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800418c:	f7fc f8b0 	bl	80002f0 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004198:	e058      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b38      	ldr	r3, [pc, #224]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	4611      	mov	r1, r2
 80041a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	0159      	lsls	r1, r3, #5
 80041c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c6:	0150      	lsls	r0, r2, #5
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4641      	mov	r1, r8
 80041ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80041d2:	4649      	mov	r1, r9
 80041d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041ec:	ebb2 040a 	subs.w	r4, r2, sl
 80041f0:	eb63 050b 	sbc.w	r5, r3, fp
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	00eb      	lsls	r3, r5, #3
 80041fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004202:	00e2      	lsls	r2, r4, #3
 8004204:	4614      	mov	r4, r2
 8004206:	461d      	mov	r5, r3
 8004208:	4643      	mov	r3, r8
 800420a:	18e3      	adds	r3, r4, r3
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	464b      	mov	r3, r9
 8004210:	eb45 0303 	adc.w	r3, r5, r3
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004222:	4629      	mov	r1, r5
 8004224:	028b      	lsls	r3, r1, #10
 8004226:	4621      	mov	r1, r4
 8004228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800422c:	4621      	mov	r1, r4
 800422e:	028a      	lsls	r2, r1, #10
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004236:	2200      	movs	r2, #0
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	61fa      	str	r2, [r7, #28]
 800423c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004240:	f7fc f856 	bl	80002f0 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800425c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004266:	e002      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x204>)
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800426c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004270:	4618      	mov	r0, r3
 8004272:	3750      	adds	r7, #80	@ 0x50
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800
 8004280:	00f42400 	.word	0x00f42400
 8004284:	007a1200 	.word	0x007a1200

08004288 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800428c:	4b03      	ldr	r3, [pc, #12]	@ (800429c <HAL_RCC_GetHCLKFreq+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000008 	.word	0x20000008

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a4:	f7ff fff0 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0a9b      	lsrs	r3, r3, #10
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	@ (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800
 80042c4:	08009840 	.word	0x08009840

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042cc:	f7ff ffdc 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0b5b      	lsrs	r3, r3, #13
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	@ (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	08009840 	.word	0x08009840

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004318:	4b69      	ldr	r3, [pc, #420]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4a68      	ldr	r2, [pc, #416]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004322:	6093      	str	r3, [r2, #8]
 8004324:	4b66      	ldr	r3, [pc, #408]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	4964      	ldr	r1, [pc, #400]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d017      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800434a:	4b5d      	ldr	r3, [pc, #372]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	4959      	ldr	r1, [pc, #356]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004386:	4b4e      	ldr	r3, [pc, #312]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800438c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	494a      	ldr	r1, [pc, #296]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808b 	beq.w	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d4:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	4a39      	ldr	r2, [pc, #228]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043de:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e0:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043ec:	4b35      	ldr	r3, [pc, #212]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fd f9d4 	bl	80017a4 <HAL_GetTick>
 80043fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004400:	f7fd f9d0 	bl	80017a4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	@ 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e38f      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004412:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d035      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d02e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004444:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004446:	4b1e      	ldr	r3, [pc, #120]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004450:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004452:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a1a      	ldr	r2, [pc, #104]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800445e:	4a18      	ldr	r2, [pc, #96]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004464:	4b16      	ldr	r3, [pc, #88]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d114      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd f998 	bl	80017a4 <HAL_GetTick>
 8004474:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fd f994 	bl	80017a4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e351      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0ee      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a6:	d111      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044a8:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044b4:	4b04      	ldr	r3, [pc, #16]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	4901      	ldr	r1, [pc, #4]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
 80044be:	e00b      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	0ffffcff 	.word	0x0ffffcff
 80044cc:	4bac      	ldr	r3, [pc, #688]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4aab      	ldr	r2, [pc, #684]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044d6:	6093      	str	r3, [r2, #8]
 80044d8:	4ba9      	ldr	r3, [pc, #676]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e4:	49a6      	ldr	r1, [pc, #664]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044f6:	4ba2      	ldr	r3, [pc, #648]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fc:	4aa0      	ldr	r2, [pc, #640]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004502:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004506:	4b9e      	ldr	r3, [pc, #632]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004508:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	499b      	ldr	r1, [pc, #620]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004524:	4b96      	ldr	r3, [pc, #600]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004532:	4993      	ldr	r1, [pc, #588]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004546:	4b8e      	ldr	r3, [pc, #568]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004554:	498a      	ldr	r1, [pc, #552]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004568:	4b85      	ldr	r3, [pc, #532]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004576:	4982      	ldr	r1, [pc, #520]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800458a:	4b7d      	ldr	r3, [pc, #500]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004590:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4979      	ldr	r1, [pc, #484]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ac:	4b74      	ldr	r3, [pc, #464]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	4971      	ldr	r1, [pc, #452]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d4:	f023 020c 	bic.w	r2, r3, #12
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045dc:	4968      	ldr	r1, [pc, #416]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f0:	4b63      	ldr	r3, [pc, #396]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fe:	4960      	ldr	r1, [pc, #384]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004612:	4b5b      	ldr	r3, [pc, #364]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004618:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	4957      	ldr	r1, [pc, #348]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004634:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	494f      	ldr	r1, [pc, #316]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004656:	4b4a      	ldr	r3, [pc, #296]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	4946      	ldr	r1, [pc, #280]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004678:	4b41      	ldr	r3, [pc, #260]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	493e      	ldr	r1, [pc, #248]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800469a:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a8:	4935      	ldr	r1, [pc, #212]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046bc:	4b30      	ldr	r3, [pc, #192]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ca:	492d      	ldr	r1, [pc, #180]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d011      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046de:	4b28      	ldr	r3, [pc, #160]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ec:	4924      	ldr	r1, [pc, #144]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fc:	d101      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800470e:	2301      	movs	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800471e:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	4914      	ldr	r1, [pc, #80]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004750:	490b      	ldr	r1, [pc, #44]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004774:	4902      	ldr	r1, [pc, #8]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800477c:	e002      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004790:	4b8a      	ldr	r3, [pc, #552]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004796:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	4986      	ldr	r1, [pc, #536]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047b4:	4b81      	ldr	r3, [pc, #516]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c4:	497d      	ldr	r1, [pc, #500]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d006      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80d6 	beq.w	800498c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047e0:	4b76      	ldr	r3, [pc, #472]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a75      	ldr	r2, [pc, #468]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fc ffda 	bl	80017a4 <HAL_GetTick>
 80047f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047f4:	f7fc ffd6 	bl	80017a4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e195      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004806:	4b6d      	ldr	r3, [pc, #436]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d021      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d11d      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004826:	4b65      	ldr	r3, [pc, #404]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004834:	4b61      	ldr	r3, [pc, #388]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800483a:	0e1b      	lsrs	r3, r3, #24
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	019a      	lsls	r2, r3, #6
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	071b      	lsls	r3, r3, #28
 800485a:	4958      	ldr	r1, [pc, #352]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004876:	d00a      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02e      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800488c:	d129      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800488e:	4b4b      	ldr	r3, [pc, #300]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800489c:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	493e      	ldr	r1, [pc, #248]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048ca:	4b3c      	ldr	r3, [pc, #240]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d0:	f023 021f 	bic.w	r2, r3, #31
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	3b01      	subs	r3, #1
 80048da:	4938      	ldr	r1, [pc, #224]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01d      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ee:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048fc:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004902:	0f1b      	lsrs	r3, r3, #28
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	019a      	lsls	r2, r3, #6
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	431a      	orrs	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	431a      	orrs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	071b      	lsls	r3, r3, #28
 8004922:	4926      	ldr	r1, [pc, #152]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d011      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	019a      	lsls	r2, r3, #6
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	491a      	ldr	r1, [pc, #104]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800495a:	4b18      	ldr	r3, [pc, #96]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a17      	ldr	r2, [pc, #92]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004966:	f7fc ff1d 	bl	80017a4 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800496e:	f7fc ff19 	bl	80017a4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b64      	cmp	r3, #100	@ 0x64
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e0d8      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	f040 80ce 	bne.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004994:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a08      	ldr	r2, [pc, #32]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fc ff00 	bl	80017a4 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049a6:	e00b      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fc fefc 	bl	80017a4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d904      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0bb      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049c0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049cc:	d0ec      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02e      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d12a      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049f6:	4b51      	ldr	r3, [pc, #324]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a04:	4b4d      	ldr	r3, [pc, #308]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	0f1b      	lsrs	r3, r3, #28
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	019a      	lsls	r2, r3, #6
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	061b      	lsls	r3, r3, #24
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	071b      	lsls	r3, r3, #28
 8004a2a:	4944      	ldr	r1, [pc, #272]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a32:	4b42      	ldr	r3, [pc, #264]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	3b01      	subs	r3, #1
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	493d      	ldr	r1, [pc, #244]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d022      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a60:	d11d      	bne.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a62:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a70:	4b32      	ldr	r3, [pc, #200]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a76:	0f1b      	lsrs	r3, r3, #28
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	4929      	ldr	r1, [pc, #164]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d028      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	0e1b      	lsrs	r3, r3, #24
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ab8:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	061b      	lsls	r3, r3, #24
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	4917      	ldr	r1, [pc, #92]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ae6:	4b15      	ldr	r3, [pc, #84]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	4911      	ldr	r1, [pc, #68]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004afc:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0e      	ldr	r2, [pc, #56]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fc fe4c 	bl	80017a4 <HAL_GetTick>
 8004b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b10:	f7fc fe48 	bl	80017a4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e007      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b2e:	d1ef      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3720      	adds	r7, #32
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e049      	b.n	8004be6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fb64 	bl	8001234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 faee 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e054      	b.n	8004cb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a26      	ldr	r2, [pc, #152]	@ (8004cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c32:	d01d      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a22      	ldr	r2, [pc, #136]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a21      	ldr	r2, [pc, #132]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d115      	bne.n	8004c9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xec>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d015      	beq.n	8004cae <HAL_TIM_Base_Start_IT+0xbe>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c88:	d011      	beq.n	8004cae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0201 	orr.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	e008      	b.n	8004cae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40010400 	.word	0x40010400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40001800 	.word	0x40001800
 8004cdc:	00010007 	.word	0x00010007

08004ce0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a1a      	ldr	r2, [r3, #32]
 8004cfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10f      	bne.n	8004d28 <HAL_TIM_Base_Stop_IT+0x48>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_Base_Stop_IT+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d122      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d11b      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0202 	mvn.w	r2, #2
 8004d6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f9cf 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004d86:	e005      	b.n	8004d94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f9c1 	bl	8005110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f9d2 	bl	8005138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d122      	bne.n	8004dee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d11b      	bne.n	8004dee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0204 	mvn.w	r2, #4
 8004dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f9a5 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004dda:	e005      	b.n	8004de8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f997 	bl	8005110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9a8 	bl	8005138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d122      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d11b      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f06f 0208 	mvn.w	r2, #8
 8004e12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2204      	movs	r2, #4
 8004e18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f97b 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004e2e:	e005      	b.n	8004e3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f96d 	bl	8005110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f97e 	bl	8005138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d122      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d11b      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f06f 0210 	mvn.w	r2, #16
 8004e66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f951 	bl	8005124 <HAL_TIM_IC_CaptureCallback>
 8004e82:	e005      	b.n	8004e90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f943 	bl	8005110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f954 	bl	8005138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0201 	mvn.w	r2, #1
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fb fd23 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ecc:	2b80      	cmp	r3, #128	@ 0x80
 8004ece:	d10e      	bne.n	8004eee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eda:	2b80      	cmp	r3, #128	@ 0x80
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb0b 	bl	8005504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f08:	2b80      	cmp	r3, #128	@ 0x80
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fafe 	bl	8005518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d10e      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f34:	2b40      	cmp	r3, #64	@ 0x40
 8004f36:	d107      	bne.n	8004f48 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f902 	bl	800514c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0220 	mvn.w	r2, #32
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fabe 	bl	80054f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIM_ConfigClockSource+0x1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e0b4      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x186>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	4b56      	ldr	r3, [pc, #344]	@ (800510c <HAL_TIM_ConfigClockSource+0x190>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd0:	d03e      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0xd4>
 8004fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd6:	f200 8087 	bhi.w	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fde:	f000 8086 	beq.w	80050ee <HAL_TIM_ConfigClockSource+0x172>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe6:	d87f      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b70      	cmp	r3, #112	@ 0x70
 8004fea:	d01a      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0xa6>
 8004fec:	2b70      	cmp	r3, #112	@ 0x70
 8004fee:	d87b      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b60      	cmp	r3, #96	@ 0x60
 8004ff2:	d050      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x11a>
 8004ff4:	2b60      	cmp	r3, #96	@ 0x60
 8004ff6:	d877      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b50      	cmp	r3, #80	@ 0x50
 8004ffa:	d03c      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0xfa>
 8004ffc:	2b50      	cmp	r3, #80	@ 0x50
 8004ffe:	d873      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b40      	cmp	r3, #64	@ 0x40
 8005002:	d058      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005004:	2b40      	cmp	r3, #64	@ 0x40
 8005006:	d86f      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b30      	cmp	r3, #48	@ 0x30
 800500a:	d064      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b30      	cmp	r3, #48	@ 0x30
 800500e:	d86b      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d060      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b20      	cmp	r3, #32
 8005016:	d867      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05c      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b10      	cmp	r3, #16
 800501e:	d05a      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005020:	e062      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005032:	f000 f9af 	bl	8005394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	609a      	str	r2, [r3, #8]
      break;
 800504e:	e04f      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005060:	f000 f998 	bl	8005394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005072:	609a      	str	r2, [r3, #8]
      break;
 8005074:	e03c      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005082:	461a      	mov	r2, r3
 8005084:	f000 f90c 	bl	80052a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2150      	movs	r1, #80	@ 0x50
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f965 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 8005094:	e02c      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 f92b 	bl	80052fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2160      	movs	r1, #96	@ 0x60
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f955 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050b4:	e01c      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f8ec 	bl	80052a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2140      	movs	r1, #64	@ 0x40
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f945 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050d4:	e00c      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f000 f93c 	bl	800535e <TIM_ITRx_SetConfig>
      break;
 80050e6:	e003      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      break;
 80050ec:	e000      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	fffeff88 	.word	0xfffeff88

08005110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a40      	ldr	r2, [pc, #256]	@ (8005274 <TIM_Base_SetConfig+0x114>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517e:	d00f      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a3d      	ldr	r2, [pc, #244]	@ (8005278 <TIM_Base_SetConfig+0x118>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3c      	ldr	r2, [pc, #240]	@ (800527c <TIM_Base_SetConfig+0x11c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3b      	ldr	r2, [pc, #236]	@ (8005280 <TIM_Base_SetConfig+0x120>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3a      	ldr	r2, [pc, #232]	@ (8005284 <TIM_Base_SetConfig+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005274 <TIM_Base_SetConfig+0x114>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d02b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c0:	d027      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a2c      	ldr	r2, [pc, #176]	@ (8005278 <TIM_Base_SetConfig+0x118>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d023      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a2b      	ldr	r2, [pc, #172]	@ (800527c <TIM_Base_SetConfig+0x11c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01f      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005280 <TIM_Base_SetConfig+0x120>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a29      	ldr	r2, [pc, #164]	@ (8005284 <TIM_Base_SetConfig+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d017      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a28      	ldr	r2, [pc, #160]	@ (8005288 <TIM_Base_SetConfig+0x128>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a27      	ldr	r2, [pc, #156]	@ (800528c <TIM_Base_SetConfig+0x12c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a26      	ldr	r2, [pc, #152]	@ (8005290 <TIM_Base_SetConfig+0x130>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a25      	ldr	r2, [pc, #148]	@ (8005294 <TIM_Base_SetConfig+0x134>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a24      	ldr	r2, [pc, #144]	@ (8005298 <TIM_Base_SetConfig+0x138>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a23      	ldr	r2, [pc, #140]	@ (800529c <TIM_Base_SetConfig+0x13c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d108      	bne.n	8005224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <TIM_Base_SetConfig+0x114>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_Base_SetConfig+0xf8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a0c      	ldr	r2, [pc, #48]	@ (8005284 <TIM_Base_SetConfig+0x124>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d103      	bne.n	8005260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	615a      	str	r2, [r3, #20]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40010400 	.word	0x40010400
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400
 8005290:	40014800 	.word	0x40014800
 8005294:	40001800 	.word	0x40001800
 8005298:	40001c00 	.word	0x40001c00
 800529c:	40002000 	.word	0x40002000

080052a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f023 030a 	bic.w	r3, r3, #10
 80052dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	621a      	str	r2, [r3, #32]
}
 80052f2:	bf00      	nop
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0210 	bic.w	r2, r3, #16
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800533a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	f043 0307 	orr.w	r3, r3, #7
 8005380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	021a      	lsls	r2, r3, #8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e06d      	b.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d01d      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1d      	ldr	r2, [pc, #116]	@ (80054dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1c      	ldr	r2, [pc, #112]	@ (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a15      	ldr	r2, [pc, #84]	@ (80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a16      	ldr	r2, [pc, #88]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a15      	ldr	r2, [pc, #84]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40001800 	.word	0x40001800

080054f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e040      	b.n	80055c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fb fe94 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2224      	movs	r2, #36	@ 0x24
 8005558:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0201 	bic.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fbc2 	bl	8005cf4 <UART_SetConfig>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e022      	b.n	80055c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fe1a 	bl	80061bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fea1 	bl	8006300 <UART_CheckIdleState>
 80055be:	4603      	mov	r3, r0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	@ 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d171      	bne.n	80056c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_UART_Transmit+0x24>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e06a      	b.n	80056c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2221      	movs	r2, #33	@ 0x21
 80055fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055fe:	f7fc f8d1 	bl	80017a4 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561c:	d108      	bne.n	8005630 <HAL_UART_Transmit+0x68>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	e003      	b.n	8005638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005638:	e02c      	b.n	8005694 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2180      	movs	r1, #128	@ 0x80
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fea8 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e038      	b.n	80056c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	3302      	adds	r3, #2
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e007      	b.n	8005682 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1cc      	bne.n	800563a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2140      	movs	r1, #64	@ 0x40
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fe75 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e005      	b.n	80056c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e000      	b.n	80056c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
  }
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
	...

080056d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b0ba      	sub	sp, #232	@ 0xe8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056fe:	4013      	ands	r3, r2
 8005700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d115      	bne.n	8005738 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00f      	beq.n	8005738 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 82ac 	beq.w	8005c86 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
      }
      return;
 8005736:	e2a6      	b.n	8005c86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8117 	beq.w	8005970 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800574e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005752:	4b85      	ldr	r3, [pc, #532]	@ (8005968 <HAL_UART_IRQHandler+0x298>)
 8005754:	4013      	ands	r3, r2
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 810a 	beq.w	8005970 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_UART_IRQHandler+0xbc>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800576c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005782:	f043 0201 	orr.w	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d011      	beq.n	80057bc <HAL_UART_IRQHandler+0xec>
 8005798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2202      	movs	r2, #2
 80057aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d011      	beq.n	80057ec <HAL_UART_IRQHandler+0x11c>
 80057c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2204      	movs	r2, #4
 80057da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e2:	f043 0202 	orr.w	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d017      	beq.n	8005828 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005808:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2208      	movs	r2, #8
 8005816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581e:	f043 0208 	orr.w	r2, r3, #8
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800582c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_UART_IRQHandler+0x18a>
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005848:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005850:	f043 0220 	orr.w	r2, r3, #32
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8212 	beq.w	8005c8a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d04f      	beq.n	8005952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe37 	bl	8006526 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c2:	2b40      	cmp	r3, #64	@ 0x40
 80058c4:	d141      	bne.n	800594a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3308      	adds	r3, #8
 80058cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800590a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1d9      	bne.n	80058c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005916:	2b00      	cmp	r3, #0
 8005918:	d013      	beq.n	8005942 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	4a13      	ldr	r2, [pc, #76]	@ (800596c <HAL_UART_IRQHandler+0x29c>)
 8005920:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005926:	4618      	mov	r0, r3
 8005928:	f7fc fef8 	bl	800271c <HAL_DMA_Abort_IT>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d017      	beq.n	8005962 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800593c:	4610      	mov	r0, r2
 800593e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e00f      	b.n	8005962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9b6 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e00b      	b.n	8005962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f9b2 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e007      	b.n	8005962 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f9ae 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005960:	e193      	b.n	8005c8a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005962:	bf00      	nop
    return;
 8005964:	e191      	b.n	8005c8a <HAL_UART_IRQHandler+0x5ba>
 8005966:	bf00      	nop
 8005968:	04000120 	.word	0x04000120
 800596c:	080065ef 	.word	0x080065ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 814c 	bne.w	8005c12 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8145 	beq.w	8005c12 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 813e 	beq.w	8005c12 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2210      	movs	r2, #16
 800599c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	f040 80b6 	bne.w	8005b1a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8165 	beq.w	8005c8e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059ce:	429a      	cmp	r2, r3
 80059d0:	f080 815d 	bcs.w	8005c8e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059e8:	f000 8086 	beq.w	8005af8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1da      	bne.n	80059ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e1      	bne.n	8005a36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3308      	adds	r3, #8
 8005a78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3308      	adds	r3, #8
 8005a92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e3      	bne.n	8005a72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ac8:	f023 0310 	bic.w	r3, r3, #16
 8005acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ada:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005adc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ae0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e4      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fc fda2 	bl	800263c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8d8 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b18:	e0b9      	b.n	8005c8e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 80ab 	beq.w	8005c92 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80a6 	beq.w	8005c92 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e4      	bne.n	8005b46 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ba0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e3      	bne.n	8005b7c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f023 0310 	bic.w	r3, r3, #16
 8005bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e4      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f85c 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c10:	e03f      	b.n	8005c92 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <HAL_UART_IRQHandler+0x56c>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f853 	bl	8005ce0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c3a:	e02d      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01c      	beq.n	8005c96 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
    }
    return;
 8005c64:	e017      	b.n	8005c96 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
 8005c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fccb 	bl	800661a <UART_EndTransmit_IT>
    return;
 8005c84:	e008      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c86:	bf00      	nop
 8005c88:	e006      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c8a:	bf00      	nop
 8005c8c:	e004      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c8e:	bf00      	nop
 8005c90:	e002      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005c92:	bf00      	nop
 8005c94:	e000      	b.n	8005c98 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005c96:	bf00      	nop
  }

}
 8005c98:	37e8      	adds	r7, #232	@ 0xe8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop

08005ca0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4ba6      	ldr	r3, [pc, #664]	@ (8005fb8 <UART_SetConfig+0x2c4>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a94      	ldr	r2, [pc, #592]	@ (8005fbc <UART_SetConfig+0x2c8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d120      	bne.n	8005db2 <UART_SetConfig+0xbe>
 8005d70:	4b93      	ldr	r3, [pc, #588]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d816      	bhi.n	8005dac <UART_SetConfig+0xb8>
 8005d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d84 <UART_SetConfig+0x90>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005d95 	.word	0x08005d95
 8005d88:	08005da1 	.word	0x08005da1
 8005d8c:	08005d9b 	.word	0x08005d9b
 8005d90:	08005da7 	.word	0x08005da7
 8005d94:	2301      	movs	r3, #1
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e150      	b.n	800603c <UART_SetConfig+0x348>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	77fb      	strb	r3, [r7, #31]
 8005d9e:	e14d      	b.n	800603c <UART_SetConfig+0x348>
 8005da0:	2304      	movs	r3, #4
 8005da2:	77fb      	strb	r3, [r7, #31]
 8005da4:	e14a      	b.n	800603c <UART_SetConfig+0x348>
 8005da6:	2308      	movs	r3, #8
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e147      	b.n	800603c <UART_SetConfig+0x348>
 8005dac:	2310      	movs	r3, #16
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e144      	b.n	800603c <UART_SetConfig+0x348>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a83      	ldr	r2, [pc, #524]	@ (8005fc4 <UART_SetConfig+0x2d0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d132      	bne.n	8005e22 <UART_SetConfig+0x12e>
 8005dbc:	4b80      	ldr	r3, [pc, #512]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b0c      	cmp	r3, #12
 8005dc8:	d828      	bhi.n	8005e1c <UART_SetConfig+0x128>
 8005dca:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <UART_SetConfig+0xdc>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e05 	.word	0x08005e05
 8005dd4:	08005e1d 	.word	0x08005e1d
 8005dd8:	08005e1d 	.word	0x08005e1d
 8005ddc:	08005e1d 	.word	0x08005e1d
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e1d 	.word	0x08005e1d
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005e1d 	.word	0x08005e1d
 8005df0:	08005e0b 	.word	0x08005e0b
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e1d 	.word	0x08005e1d
 8005e00:	08005e17 	.word	0x08005e17
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e118      	b.n	800603c <UART_SetConfig+0x348>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	77fb      	strb	r3, [r7, #31]
 8005e0e:	e115      	b.n	800603c <UART_SetConfig+0x348>
 8005e10:	2304      	movs	r3, #4
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e112      	b.n	800603c <UART_SetConfig+0x348>
 8005e16:	2308      	movs	r3, #8
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e10f      	b.n	800603c <UART_SetConfig+0x348>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	e10c      	b.n	800603c <UART_SetConfig+0x348>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a68      	ldr	r2, [pc, #416]	@ (8005fc8 <UART_SetConfig+0x2d4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d120      	bne.n	8005e6e <UART_SetConfig+0x17a>
 8005e2c:	4b64      	ldr	r3, [pc, #400]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e36:	2b30      	cmp	r3, #48	@ 0x30
 8005e38:	d013      	beq.n	8005e62 <UART_SetConfig+0x16e>
 8005e3a:	2b30      	cmp	r3, #48	@ 0x30
 8005e3c:	d814      	bhi.n	8005e68 <UART_SetConfig+0x174>
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d009      	beq.n	8005e56 <UART_SetConfig+0x162>
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d810      	bhi.n	8005e68 <UART_SetConfig+0x174>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <UART_SetConfig+0x15c>
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d006      	beq.n	8005e5c <UART_SetConfig+0x168>
 8005e4e:	e00b      	b.n	8005e68 <UART_SetConfig+0x174>
 8005e50:	2300      	movs	r3, #0
 8005e52:	77fb      	strb	r3, [r7, #31]
 8005e54:	e0f2      	b.n	800603c <UART_SetConfig+0x348>
 8005e56:	2302      	movs	r3, #2
 8005e58:	77fb      	strb	r3, [r7, #31]
 8005e5a:	e0ef      	b.n	800603c <UART_SetConfig+0x348>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	77fb      	strb	r3, [r7, #31]
 8005e60:	e0ec      	b.n	800603c <UART_SetConfig+0x348>
 8005e62:	2308      	movs	r3, #8
 8005e64:	77fb      	strb	r3, [r7, #31]
 8005e66:	e0e9      	b.n	800603c <UART_SetConfig+0x348>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e0e6      	b.n	800603c <UART_SetConfig+0x348>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a56      	ldr	r2, [pc, #344]	@ (8005fcc <UART_SetConfig+0x2d8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d120      	bne.n	8005eba <UART_SetConfig+0x1c6>
 8005e78:	4b51      	ldr	r3, [pc, #324]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e84:	d013      	beq.n	8005eae <UART_SetConfig+0x1ba>
 8005e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e88:	d814      	bhi.n	8005eb4 <UART_SetConfig+0x1c0>
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	d009      	beq.n	8005ea2 <UART_SetConfig+0x1ae>
 8005e8e:	2b80      	cmp	r3, #128	@ 0x80
 8005e90:	d810      	bhi.n	8005eb4 <UART_SetConfig+0x1c0>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <UART_SetConfig+0x1a8>
 8005e96:	2b40      	cmp	r3, #64	@ 0x40
 8005e98:	d006      	beq.n	8005ea8 <UART_SetConfig+0x1b4>
 8005e9a:	e00b      	b.n	8005eb4 <UART_SetConfig+0x1c0>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e0cc      	b.n	800603c <UART_SetConfig+0x348>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e0c9      	b.n	800603c <UART_SetConfig+0x348>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e0c6      	b.n	800603c <UART_SetConfig+0x348>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e0c3      	b.n	800603c <UART_SetConfig+0x348>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e0c0      	b.n	800603c <UART_SetConfig+0x348>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a44      	ldr	r2, [pc, #272]	@ (8005fd0 <UART_SetConfig+0x2dc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d125      	bne.n	8005f10 <UART_SetConfig+0x21c>
 8005ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ece:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed2:	d017      	beq.n	8005f04 <UART_SetConfig+0x210>
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed8:	d817      	bhi.n	8005f0a <UART_SetConfig+0x216>
 8005eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ede:	d00b      	beq.n	8005ef8 <UART_SetConfig+0x204>
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d811      	bhi.n	8005f0a <UART_SetConfig+0x216>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <UART_SetConfig+0x1fe>
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eee:	d006      	beq.n	8005efe <UART_SetConfig+0x20a>
 8005ef0:	e00b      	b.n	8005f0a <UART_SetConfig+0x216>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e0a1      	b.n	800603c <UART_SetConfig+0x348>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e09e      	b.n	800603c <UART_SetConfig+0x348>
 8005efe:	2304      	movs	r3, #4
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e09b      	b.n	800603c <UART_SetConfig+0x348>
 8005f04:	2308      	movs	r3, #8
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e098      	b.n	800603c <UART_SetConfig+0x348>
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e095      	b.n	800603c <UART_SetConfig+0x348>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a2f      	ldr	r2, [pc, #188]	@ (8005fd4 <UART_SetConfig+0x2e0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d125      	bne.n	8005f66 <UART_SetConfig+0x272>
 8005f1a:	4b29      	ldr	r3, [pc, #164]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f28:	d017      	beq.n	8005f5a <UART_SetConfig+0x266>
 8005f2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f2e:	d817      	bhi.n	8005f60 <UART_SetConfig+0x26c>
 8005f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f34:	d00b      	beq.n	8005f4e <UART_SetConfig+0x25a>
 8005f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3a:	d811      	bhi.n	8005f60 <UART_SetConfig+0x26c>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <UART_SetConfig+0x254>
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f44:	d006      	beq.n	8005f54 <UART_SetConfig+0x260>
 8005f46:	e00b      	b.n	8005f60 <UART_SetConfig+0x26c>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e076      	b.n	800603c <UART_SetConfig+0x348>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e073      	b.n	800603c <UART_SetConfig+0x348>
 8005f54:	2304      	movs	r3, #4
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e070      	b.n	800603c <UART_SetConfig+0x348>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e06d      	b.n	800603c <UART_SetConfig+0x348>
 8005f60:	2310      	movs	r3, #16
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e06a      	b.n	800603c <UART_SetConfig+0x348>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd8 <UART_SetConfig+0x2e4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d138      	bne.n	8005fe2 <UART_SetConfig+0x2ee>
 8005f70:	4b13      	ldr	r3, [pc, #76]	@ (8005fc0 <UART_SetConfig+0x2cc>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005f7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f7e:	d017      	beq.n	8005fb0 <UART_SetConfig+0x2bc>
 8005f80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f84:	d82a      	bhi.n	8005fdc <UART_SetConfig+0x2e8>
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f8a:	d00b      	beq.n	8005fa4 <UART_SetConfig+0x2b0>
 8005f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f90:	d824      	bhi.n	8005fdc <UART_SetConfig+0x2e8>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <UART_SetConfig+0x2aa>
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9a:	d006      	beq.n	8005faa <UART_SetConfig+0x2b6>
 8005f9c:	e01e      	b.n	8005fdc <UART_SetConfig+0x2e8>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e04b      	b.n	800603c <UART_SetConfig+0x348>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e048      	b.n	800603c <UART_SetConfig+0x348>
 8005faa:	2304      	movs	r3, #4
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e045      	b.n	800603c <UART_SetConfig+0x348>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e042      	b.n	800603c <UART_SetConfig+0x348>
 8005fb6:	bf00      	nop
 8005fb8:	efff69f3 	.word	0xefff69f3
 8005fbc:	40011000 	.word	0x40011000
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40004400 	.word	0x40004400
 8005fc8:	40004800 	.word	0x40004800
 8005fcc:	40004c00 	.word	0x40004c00
 8005fd0:	40005000 	.word	0x40005000
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	40007800 	.word	0x40007800
 8005fdc:	2310      	movs	r3, #16
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e02c      	b.n	800603c <UART_SetConfig+0x348>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a72      	ldr	r2, [pc, #456]	@ (80061b0 <UART_SetConfig+0x4bc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d125      	bne.n	8006038 <UART_SetConfig+0x344>
 8005fec:	4b71      	ldr	r3, [pc, #452]	@ (80061b4 <UART_SetConfig+0x4c0>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ff6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ffa:	d017      	beq.n	800602c <UART_SetConfig+0x338>
 8005ffc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006000:	d817      	bhi.n	8006032 <UART_SetConfig+0x33e>
 8006002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006006:	d00b      	beq.n	8006020 <UART_SetConfig+0x32c>
 8006008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800600c:	d811      	bhi.n	8006032 <UART_SetConfig+0x33e>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <UART_SetConfig+0x326>
 8006012:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006016:	d006      	beq.n	8006026 <UART_SetConfig+0x332>
 8006018:	e00b      	b.n	8006032 <UART_SetConfig+0x33e>
 800601a:	2300      	movs	r3, #0
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e00d      	b.n	800603c <UART_SetConfig+0x348>
 8006020:	2302      	movs	r3, #2
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e00a      	b.n	800603c <UART_SetConfig+0x348>
 8006026:	2304      	movs	r3, #4
 8006028:	77fb      	strb	r3, [r7, #31]
 800602a:	e007      	b.n	800603c <UART_SetConfig+0x348>
 800602c:	2308      	movs	r3, #8
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e004      	b.n	800603c <UART_SetConfig+0x348>
 8006032:	2310      	movs	r3, #16
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e001      	b.n	800603c <UART_SetConfig+0x348>
 8006038:	2310      	movs	r3, #16
 800603a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006044:	d15b      	bne.n	80060fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006046:	7ffb      	ldrb	r3, [r7, #31]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d828      	bhi.n	800609e <UART_SetConfig+0x3aa>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <UART_SetConfig+0x360>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006079 	.word	0x08006079
 8006058:	08006081 	.word	0x08006081
 800605c:	08006089 	.word	0x08006089
 8006060:	0800609f 	.word	0x0800609f
 8006064:	0800608f 	.word	0x0800608f
 8006068:	0800609f 	.word	0x0800609f
 800606c:	0800609f 	.word	0x0800609f
 8006070:	0800609f 	.word	0x0800609f
 8006074:	08006097 	.word	0x08006097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fe f912 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 800607c:	61b8      	str	r0, [r7, #24]
        break;
 800607e:	e013      	b.n	80060a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006080:	f7fe f922 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 8006084:	61b8      	str	r0, [r7, #24]
        break;
 8006086:	e00f      	b.n	80060a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006088:	4b4b      	ldr	r3, [pc, #300]	@ (80061b8 <UART_SetConfig+0x4c4>)
 800608a:	61bb      	str	r3, [r7, #24]
        break;
 800608c:	e00c      	b.n	80060a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608e:	f7fd fff5 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8006092:	61b8      	str	r0, [r7, #24]
        break;
 8006094:	e008      	b.n	80060a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609a:	61bb      	str	r3, [r7, #24]
        break;
 800609c:	e004      	b.n	80060a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	77bb      	strb	r3, [r7, #30]
        break;
 80060a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d074      	beq.n	8006198 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	005a      	lsls	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b0f      	cmp	r3, #15
 80060c8:	d916      	bls.n	80060f8 <UART_SetConfig+0x404>
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d212      	bcs.n	80060f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f023 030f 	bic.w	r3, r3, #15
 80060da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	89fb      	ldrh	r3, [r7, #14]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	89fa      	ldrh	r2, [r7, #14]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	e04f      	b.n	8006198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	77bb      	strb	r3, [r7, #30]
 80060fc:	e04c      	b.n	8006198 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060fe:	7ffb      	ldrb	r3, [r7, #31]
 8006100:	2b08      	cmp	r3, #8
 8006102:	d828      	bhi.n	8006156 <UART_SetConfig+0x462>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <UART_SetConfig+0x418>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	08006157 	.word	0x08006157
 800611c:	08006147 	.word	0x08006147
 8006120:	08006157 	.word	0x08006157
 8006124:	08006157 	.word	0x08006157
 8006128:	08006157 	.word	0x08006157
 800612c:	0800614f 	.word	0x0800614f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006130:	f7fe f8b6 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8006134:	61b8      	str	r0, [r7, #24]
        break;
 8006136:	e013      	b.n	8006160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7fe f8c6 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 800613c:	61b8      	str	r0, [r7, #24]
        break;
 800613e:	e00f      	b.n	8006160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006140:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <UART_SetConfig+0x4c4>)
 8006142:	61bb      	str	r3, [r7, #24]
        break;
 8006144:	e00c      	b.n	8006160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006146:	f7fd ff99 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800614a:	61b8      	str	r0, [r7, #24]
        break;
 800614c:	e008      	b.n	8006160 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006152:	61bb      	str	r3, [r7, #24]
        break;
 8006154:	e004      	b.n	8006160 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	77bb      	strb	r3, [r7, #30]
        break;
 800615e:	bf00      	nop
    }

    if (pclk != 0U)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d018      	beq.n	8006198 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	085a      	lsrs	r2, r3, #1
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	441a      	add	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	2b0f      	cmp	r3, #15
 800617e:	d909      	bls.n	8006194 <UART_SetConfig+0x4a0>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006186:	d205      	bcs.n	8006194 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	b29a      	uxth	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	e001      	b.n	8006198 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40007c00 	.word	0x40007c00
 80061b4:	40023800 	.word	0x40023800
 80061b8:	00f42400 	.word	0x00f42400

080061bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ba:	d10a      	bne.n	80062d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006310:	f7fb fa48 	bl	80017a4 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d10e      	bne.n	8006342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f831 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e027      	b.n	8006392 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d10e      	bne.n	800636e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f81b 	bl	800639a <UART_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e011      	b.n	8006392 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b09c      	sub	sp, #112	@ 0x70
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	603b      	str	r3, [r7, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063aa:	e0a7      	b.n	80064fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063b2:	f000 80a3 	beq.w	80064fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b6:	f7fb f9f5 	bl	80017a4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <UART_WaitOnFlagUntilTimeout+0x32>
 80063c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d13f      	bne.n	800644c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80063da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80063e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ec:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80063f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e6      	bne.n	80063cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	663b      	str	r3, [r7, #96]	@ 0x60
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800641e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006420:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800642c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e068      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	d050      	beq.n	80064fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006468:	d148      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006472:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006488:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
 8006494:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	613b      	str	r3, [r7, #16]
   return(result);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80064c6:	623a      	str	r2, [r7, #32]
 80064c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	69f9      	ldr	r1, [r7, #28]
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e010      	b.n	800651e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	bf0c      	ite	eq
 800650c:	2301      	moveq	r3, #1
 800650e:	2300      	movne	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	429a      	cmp	r2, r3
 8006518:	f43f af48 	beq.w	80063ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3770      	adds	r7, #112	@ 0x70
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006526:	b480      	push	{r7}
 8006528:	b095      	sub	sp, #84	@ 0x54
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800654c:	643b      	str	r3, [r7, #64]	@ 0x40
 800654e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e6      	bne.n	800652e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e5      	bne.n	8006560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006598:	2b01      	cmp	r3, #1
 800659a:	d118      	bne.n	80065ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f023 0310 	bic.w	r3, r3, #16
 80065b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6979      	ldr	r1, [r7, #20]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	613b      	str	r3, [r7, #16]
   return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e6      	bne.n	800659c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065e2:	bf00      	nop
 80065e4:	3754      	adds	r7, #84	@ 0x54
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fb51 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b088      	sub	sp, #32
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6979      	ldr	r1, [r7, #20]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fb1d 	bl	8005ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006666:	bf00      	nop
 8006668:	3720      	adds	r7, #32
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006670:	b084      	sub	sp, #16
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	f107 001c 	add.w	r0, r7, #28
 800667e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	2b01      	cmp	r3, #1
 8006686:	d120      	bne.n	80066ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	4b20      	ldr	r3, [pc, #128]	@ (800671c <USB_CoreInit+0xac>)
 800669a:	4013      	ands	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d105      	bne.n	80066be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa96 	bl	8006bf0 <USB_CoreReset>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
 80066c8:	e010      	b.n	80066ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa8a 	bl	8006bf0 <USB_CoreReset>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d10b      	bne.n	800670a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f043 0206 	orr.w	r2, r3, #6
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006716:	b004      	add	sp, #16
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	ffbdffbf 	.word	0xffbdffbf

08006720 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f023 0201 	bic.w	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d115      	bne.n	8006790 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006770:	2001      	movs	r0, #1
 8006772:	f7fb f823 	bl	80017bc <HAL_Delay>
      ms++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa29 	bl	8006bd4 <USB_GetMode>
 8006782:	4603      	mov	r3, r0
 8006784:	2b01      	cmp	r3, #1
 8006786:	d01e      	beq.n	80067c6 <USB_SetCurrentMode+0x84>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b31      	cmp	r3, #49	@ 0x31
 800678c:	d9f0      	bls.n	8006770 <USB_SetCurrentMode+0x2e>
 800678e:	e01a      	b.n	80067c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d115      	bne.n	80067c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067a2:	2001      	movs	r0, #1
 80067a4:	f7fb f80a 	bl	80017bc <HAL_Delay>
      ms++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa10 	bl	8006bd4 <USB_GetMode>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <USB_SetCurrentMode+0x84>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b31      	cmp	r3, #49	@ 0x31
 80067be:	d9f0      	bls.n	80067a2 <USB_SetCurrentMode+0x60>
 80067c0:	e001      	b.n	80067c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e005      	b.n	80067d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b32      	cmp	r3, #50	@ 0x32
 80067ca:	d101      	bne.n	80067d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067dc:	b084      	sub	sp, #16
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80067ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e009      	b.n	8006810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3340      	adds	r3, #64	@ 0x40
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b0e      	cmp	r3, #14
 8006814:	d9f2      	bls.n	80067fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11c      	bne.n	8006856 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006834:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e005      	b.n	8006862 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006874:	4619      	mov	r1, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687c:	461a      	mov	r2, r3
 800687e:	680b      	ldr	r3, [r1, #0]
 8006880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006884:	2b01      	cmp	r3, #1
 8006886:	d10c      	bne.n	80068a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800688e:	2100      	movs	r1, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f965 	bl	8006b60 <USB_SetDevSpeed>
 8006896:	e008      	b.n	80068aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006898:	2101      	movs	r1, #1
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f960 	bl	8006b60 <USB_SetDevSpeed>
 80068a0:	e003      	b.n	80068aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068a2:	2103      	movs	r1, #3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f95b 	bl	8006b60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068aa:	2110      	movs	r1, #16
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f8f3 	bl	8006a98 <USB_FlushTxFifo>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f91f 	bl	8006b00 <USB_FlushRxFifo>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d2:	461a      	mov	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e043      	b.n	800697e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800690c:	d118      	bne.n	8006940 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	461a      	mov	r2, r3
 8006922:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	e013      	b.n	8006952 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006936:	461a      	mov	r2, r3
 8006938:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e008      	b.n	8006952 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694c:	461a      	mov	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695e:	461a      	mov	r2, r3
 8006960:	2300      	movs	r3, #0
 8006962:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006970:	461a      	mov	r2, r3
 8006972:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	3301      	adds	r3, #1
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	429a      	cmp	r2, r3
 8006984:	d3b7      	bcc.n	80068f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	e043      	b.n	8006a14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800699e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069a2:	d118      	bne.n	80069d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e013      	b.n	80069e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	e008      	b.n	80069e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e2:	461a      	mov	r2, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f4:	461a      	mov	r2, r3
 80069f6:	2300      	movs	r3, #0
 80069f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	461a      	mov	r2, r3
 8006a08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3301      	adds	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3b7      	bcc.n	800698c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f043 0210 	orr.w	r2, r3, #16
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699a      	ldr	r2, [r3, #24]
 8006a54:	4b0e      	ldr	r3, [pc, #56]	@ (8006a90 <USB_DevInit+0x2b4>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f043 0208 	orr.w	r2, r3, #8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d105      	bne.n	8006a80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699a      	ldr	r2, [r3, #24]
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <USB_DevInit+0x2b8>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8c:	b004      	add	sp, #16
 8006a8e:	4770      	bx	lr
 8006a90:	803c3800 	.word	0x803c3800
 8006a94:	40000004 	.word	0x40000004

08006a98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a13      	ldr	r2, [pc, #76]	@ (8006afc <USB_FlushTxFifo+0x64>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e01b      	b.n	8006af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	daf2      	bge.n	8006aa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	019b      	lsls	r3, r3, #6
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4a08      	ldr	r2, [pc, #32]	@ (8006afc <USB_FlushTxFifo+0x64>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e006      	b.n	8006af0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d0f0      	beq.n	8006ad0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	00030d40 	.word	0x00030d40

08006b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a11      	ldr	r2, [pc, #68]	@ (8006b5c <USB_FlushRxFifo+0x5c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e018      	b.n	8006b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	daf2      	bge.n	8006b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3301      	adds	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <USB_FlushRxFifo+0x5c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e006      	b.n	8006b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d0f0      	beq.n	8006b30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	00030d40 	.word	0x00030d40

08006b60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b80:	4313      	orrs	r3, r2
 8006b82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bac:	f023 0303 	bic.w	r3, r3, #3
 8006bb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bc0:	f043 0302 	orr.w	r3, r3, #2
 8006bc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f003 0301 	and.w	r3, r3, #1
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a13      	ldr	r2, [pc, #76]	@ (8006c54 <USB_CoreReset+0x64>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e01b      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	daf2      	bge.n	8006bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f043 0201 	orr.w	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a09      	ldr	r2, [pc, #36]	@ (8006c54 <USB_CoreReset+0x64>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e006      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d0f0      	beq.n	8006c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	00030d40 	.word	0x00030d40

08006c58 <__cvt>:
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	ed2d 8b02 	vpush	{d8}
 8006c5e:	eeb0 8b40 	vmov.f64	d8, d0
 8006c62:	b085      	sub	sp, #20
 8006c64:	4617      	mov	r7, r2
 8006c66:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006c68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c6a:	ee18 2a90 	vmov	r2, s17
 8006c6e:	f025 0520 	bic.w	r5, r5, #32
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	bfb6      	itet	lt
 8006c76:	222d      	movlt	r2, #45	@ 0x2d
 8006c78:	2200      	movge	r2, #0
 8006c7a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006c7e:	2d46      	cmp	r5, #70	@ 0x46
 8006c80:	460c      	mov	r4, r1
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	d004      	beq.n	8006c90 <__cvt+0x38>
 8006c86:	2d45      	cmp	r5, #69	@ 0x45
 8006c88:	d100      	bne.n	8006c8c <__cvt+0x34>
 8006c8a:	3401      	adds	r4, #1
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	e000      	b.n	8006c92 <__cvt+0x3a>
 8006c90:	2103      	movs	r1, #3
 8006c92:	ab03      	add	r3, sp, #12
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	ab02      	add	r3, sp, #8
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	4633      	mov	r3, r6
 8006c9e:	eeb0 0b48 	vmov.f64	d0, d8
 8006ca2:	f000 fdb5 	bl	8007810 <_dtoa_r>
 8006ca6:	2d47      	cmp	r5, #71	@ 0x47
 8006ca8:	d114      	bne.n	8006cd4 <__cvt+0x7c>
 8006caa:	07fb      	lsls	r3, r7, #31
 8006cac:	d50a      	bpl.n	8006cc4 <__cvt+0x6c>
 8006cae:	1902      	adds	r2, r0, r4
 8006cb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	bf08      	it	eq
 8006cba:	9203      	streq	r2, [sp, #12]
 8006cbc:	2130      	movs	r1, #48	@ 0x30
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d319      	bcc.n	8006cf8 <__cvt+0xa0>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cc8:	1a1b      	subs	r3, r3, r0
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	b005      	add	sp, #20
 8006cce:	ecbd 8b02 	vpop	{d8}
 8006cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd4:	2d46      	cmp	r5, #70	@ 0x46
 8006cd6:	eb00 0204 	add.w	r2, r0, r4
 8006cda:	d1e9      	bne.n	8006cb0 <__cvt+0x58>
 8006cdc:	7803      	ldrb	r3, [r0, #0]
 8006cde:	2b30      	cmp	r3, #48	@ 0x30
 8006ce0:	d107      	bne.n	8006cf2 <__cvt+0x9a>
 8006ce2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cea:	bf1c      	itt	ne
 8006cec:	f1c4 0401 	rsbne	r4, r4, #1
 8006cf0:	6034      	strne	r4, [r6, #0]
 8006cf2:	6833      	ldr	r3, [r6, #0]
 8006cf4:	441a      	add	r2, r3
 8006cf6:	e7db      	b.n	8006cb0 <__cvt+0x58>
 8006cf8:	1c5c      	adds	r4, r3, #1
 8006cfa:	9403      	str	r4, [sp, #12]
 8006cfc:	7019      	strb	r1, [r3, #0]
 8006cfe:	e7de      	b.n	8006cbe <__cvt+0x66>

08006d00 <__exponent>:
 8006d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d02:	2900      	cmp	r1, #0
 8006d04:	bfba      	itte	lt
 8006d06:	4249      	neglt	r1, r1
 8006d08:	232d      	movlt	r3, #45	@ 0x2d
 8006d0a:	232b      	movge	r3, #43	@ 0x2b
 8006d0c:	2909      	cmp	r1, #9
 8006d0e:	7002      	strb	r2, [r0, #0]
 8006d10:	7043      	strb	r3, [r0, #1]
 8006d12:	dd29      	ble.n	8006d68 <__exponent+0x68>
 8006d14:	f10d 0307 	add.w	r3, sp, #7
 8006d18:	461d      	mov	r5, r3
 8006d1a:	270a      	movs	r7, #10
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d22:	fb07 1416 	mls	r4, r7, r6, r1
 8006d26:	3430      	adds	r4, #48	@ 0x30
 8006d28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	2c63      	cmp	r4, #99	@ 0x63
 8006d30:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006d34:	4631      	mov	r1, r6
 8006d36:	dcf1      	bgt.n	8006d1c <__exponent+0x1c>
 8006d38:	3130      	adds	r1, #48	@ 0x30
 8006d3a:	1e94      	subs	r4, r2, #2
 8006d3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d40:	1c41      	adds	r1, r0, #1
 8006d42:	4623      	mov	r3, r4
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	d30a      	bcc.n	8006d5e <__exponent+0x5e>
 8006d48:	f10d 0309 	add.w	r3, sp, #9
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	42ac      	cmp	r4, r5
 8006d50:	bf88      	it	hi
 8006d52:	2300      	movhi	r3, #0
 8006d54:	3302      	adds	r3, #2
 8006d56:	4403      	add	r3, r0
 8006d58:	1a18      	subs	r0, r3, r0
 8006d5a:	b003      	add	sp, #12
 8006d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d66:	e7ed      	b.n	8006d44 <__exponent+0x44>
 8006d68:	2330      	movs	r3, #48	@ 0x30
 8006d6a:	3130      	adds	r1, #48	@ 0x30
 8006d6c:	7083      	strb	r3, [r0, #2]
 8006d6e:	70c1      	strb	r1, [r0, #3]
 8006d70:	1d03      	adds	r3, r0, #4
 8006d72:	e7f1      	b.n	8006d58 <__exponent+0x58>
 8006d74:	0000      	movs	r0, r0
	...

08006d78 <_printf_float>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	b08d      	sub	sp, #52	@ 0x34
 8006d7e:	460c      	mov	r4, r1
 8006d80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d84:	4616      	mov	r6, r2
 8006d86:	461f      	mov	r7, r3
 8006d88:	4605      	mov	r5, r0
 8006d8a:	f000 fc87 	bl	800769c <_localeconv_r>
 8006d8e:	f8d0 b000 	ldr.w	fp, [r0]
 8006d92:	4658      	mov	r0, fp
 8006d94:	f7f9 faa4 	bl	80002e0 <strlen>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006da0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	9005      	str	r0, [sp, #20]
 8006da8:	3307      	adds	r3, #7
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	f103 0108 	add.w	r1, r3, #8
 8006db2:	f8c8 1000 	str.w	r1, [r8]
 8006db6:	ed93 0b00 	vldr	d0, [r3]
 8006dba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007018 <_printf_float+0x2a0>
 8006dbe:	eeb0 7bc0 	vabs.f64	d7, d0
 8006dc2:	eeb4 7b46 	vcmp.f64	d7, d6
 8006dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006dce:	dd24      	ble.n	8006e1a <_printf_float+0xa2>
 8006dd0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	d502      	bpl.n	8006de0 <_printf_float+0x68>
 8006dda:	232d      	movs	r3, #45	@ 0x2d
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de0:	498f      	ldr	r1, [pc, #572]	@ (8007020 <_printf_float+0x2a8>)
 8006de2:	4b90      	ldr	r3, [pc, #576]	@ (8007024 <_printf_float+0x2ac>)
 8006de4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006de8:	bf94      	ite	ls
 8006dea:	4688      	movls	r8, r1
 8006dec:	4698      	movhi	r8, r3
 8006dee:	f022 0204 	bic.w	r2, r2, #4
 8006df2:	2303      	movs	r3, #3
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f04f 0a00 	mov.w	sl, #0
 8006dfc:	9700      	str	r7, [sp, #0]
 8006dfe:	4633      	mov	r3, r6
 8006e00:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e02:	4621      	mov	r1, r4
 8006e04:	4628      	mov	r0, r5
 8006e06:	f000 f9d1 	bl	80071ac <_printf_common>
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f040 8089 	bne.w	8006f22 <_printf_float+0x1aa>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e14:	b00d      	add	sp, #52	@ 0x34
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	d709      	bvc.n	8006e38 <_printf_float+0xc0>
 8006e24:	ee10 3a90 	vmov	r3, s1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bfbc      	itt	lt
 8006e2c:	232d      	movlt	r3, #45	@ 0x2d
 8006e2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e32:	497d      	ldr	r1, [pc, #500]	@ (8007028 <_printf_float+0x2b0>)
 8006e34:	4b7d      	ldr	r3, [pc, #500]	@ (800702c <_printf_float+0x2b4>)
 8006e36:	e7d5      	b.n	8006de4 <_printf_float+0x6c>
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	1c59      	adds	r1, r3, #1
 8006e3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006e40:	d139      	bne.n	8006eb6 <_printf_float+0x13e>
 8006e42:	2306      	movs	r3, #6
 8006e44:	6063      	str	r3, [r4, #4]
 8006e46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6022      	str	r2, [r4, #0]
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006e56:	ab09      	add	r3, sp, #36	@ 0x24
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	6861      	ldr	r1, [r4, #4]
 8006e5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e60:	4628      	mov	r0, r5
 8006e62:	f7ff fef9 	bl	8006c58 <__cvt>
 8006e66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	d129      	bne.n	8006ec4 <_printf_float+0x14c>
 8006e70:	1cc8      	adds	r0, r1, #3
 8006e72:	db02      	blt.n	8006e7a <_printf_float+0x102>
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	4299      	cmp	r1, r3
 8006e78:	dd41      	ble.n	8006efe <_printf_float+0x186>
 8006e7a:	f1a9 0902 	sub.w	r9, r9, #2
 8006e7e:	fa5f f989 	uxtb.w	r9, r9
 8006e82:	3901      	subs	r1, #1
 8006e84:	464a      	mov	r2, r9
 8006e86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e8c:	f7ff ff38 	bl	8006d00 <__exponent>
 8006e90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e92:	1813      	adds	r3, r2, r0
 8006e94:	2a01      	cmp	r2, #1
 8006e96:	4682      	mov	sl, r0
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	dc02      	bgt.n	8006ea2 <_printf_float+0x12a>
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	07d2      	lsls	r2, r2, #31
 8006ea0:	d501      	bpl.n	8006ea6 <_printf_float+0x12e>
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0a6      	beq.n	8006dfc <_printf_float+0x84>
 8006eae:	232d      	movs	r3, #45	@ 0x2d
 8006eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eb4:	e7a2      	b.n	8006dfc <_printf_float+0x84>
 8006eb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006eba:	d1c4      	bne.n	8006e46 <_printf_float+0xce>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1c2      	bne.n	8006e46 <_printf_float+0xce>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e7bf      	b.n	8006e44 <_printf_float+0xcc>
 8006ec4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006ec8:	d9db      	bls.n	8006e82 <_printf_float+0x10a>
 8006eca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006ece:	d118      	bne.n	8006f02 <_printf_float+0x18a>
 8006ed0:	2900      	cmp	r1, #0
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	dd0b      	ble.n	8006eee <_printf_float+0x176>
 8006ed6:	6121      	str	r1, [r4, #16]
 8006ed8:	b913      	cbnz	r3, 8006ee0 <_printf_float+0x168>
 8006eda:	6822      	ldr	r2, [r4, #0]
 8006edc:	07d0      	lsls	r0, r2, #31
 8006ede:	d502      	bpl.n	8006ee6 <_printf_float+0x16e>
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	440b      	add	r3, r1
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ee8:	f04f 0a00 	mov.w	sl, #0
 8006eec:	e7db      	b.n	8006ea6 <_printf_float+0x12e>
 8006eee:	b913      	cbnz	r3, 8006ef6 <_printf_float+0x17e>
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	07d2      	lsls	r2, r2, #31
 8006ef4:	d501      	bpl.n	8006efa <_printf_float+0x182>
 8006ef6:	3302      	adds	r3, #2
 8006ef8:	e7f4      	b.n	8006ee4 <_printf_float+0x16c>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e7f2      	b.n	8006ee4 <_printf_float+0x16c>
 8006efe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006f02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f04:	4299      	cmp	r1, r3
 8006f06:	db05      	blt.n	8006f14 <_printf_float+0x19c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	6121      	str	r1, [r4, #16]
 8006f0c:	07d8      	lsls	r0, r3, #31
 8006f0e:	d5ea      	bpl.n	8006ee6 <_printf_float+0x16e>
 8006f10:	1c4b      	adds	r3, r1, #1
 8006f12:	e7e7      	b.n	8006ee4 <_printf_float+0x16c>
 8006f14:	2900      	cmp	r1, #0
 8006f16:	bfd4      	ite	le
 8006f18:	f1c1 0202 	rsble	r2, r1, #2
 8006f1c:	2201      	movgt	r2, #1
 8006f1e:	4413      	add	r3, r2
 8006f20:	e7e0      	b.n	8006ee4 <_printf_float+0x16c>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	055a      	lsls	r2, r3, #21
 8006f26:	d407      	bmi.n	8006f38 <_printf_float+0x1c0>
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	4642      	mov	r2, r8
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	d12a      	bne.n	8006f8c <_printf_float+0x214>
 8006f36:	e76b      	b.n	8006e10 <_printf_float+0x98>
 8006f38:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006f3c:	f240 80e0 	bls.w	8007100 <_printf_float+0x388>
 8006f40:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006f44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	d133      	bne.n	8006fb6 <_printf_float+0x23e>
 8006f4e:	4a38      	ldr	r2, [pc, #224]	@ (8007030 <_printf_float+0x2b8>)
 8006f50:	2301      	movs	r3, #1
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b8      	blx	r7
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f43f af59 	beq.w	8006e10 <_printf_float+0x98>
 8006f5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f62:	4543      	cmp	r3, r8
 8006f64:	db02      	blt.n	8006f6c <_printf_float+0x1f4>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	07d8      	lsls	r0, r3, #31
 8006f6a:	d50f      	bpl.n	8006f8c <_printf_float+0x214>
 8006f6c:	9b05      	ldr	r3, [sp, #20]
 8006f6e:	465a      	mov	r2, fp
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f af4a 	beq.w	8006e10 <_printf_float+0x98>
 8006f7c:	f04f 0900 	mov.w	r9, #0
 8006f80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f84:	f104 0a1a 	add.w	sl, r4, #26
 8006f88:	45c8      	cmp	r8, r9
 8006f8a:	dc09      	bgt.n	8006fa0 <_printf_float+0x228>
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	079b      	lsls	r3, r3, #30
 8006f90:	f100 8107 	bmi.w	80071a2 <_printf_float+0x42a>
 8006f94:	68e0      	ldr	r0, [r4, #12]
 8006f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f98:	4298      	cmp	r0, r3
 8006f9a:	bfb8      	it	lt
 8006f9c:	4618      	movlt	r0, r3
 8006f9e:	e739      	b.n	8006e14 <_printf_float+0x9c>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f af30 	beq.w	8006e10 <_printf_float+0x98>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7e8      	b.n	8006f88 <_printf_float+0x210>
 8006fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dc3b      	bgt.n	8007034 <_printf_float+0x2bc>
 8006fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8007030 <_printf_float+0x2b8>)
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	f43f af22 	beq.w	8006e10 <_printf_float+0x98>
 8006fcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006fd0:	ea59 0303 	orrs.w	r3, r9, r3
 8006fd4:	d102      	bne.n	8006fdc <_printf_float+0x264>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	07d9      	lsls	r1, r3, #31
 8006fda:	d5d7      	bpl.n	8006f8c <_printf_float+0x214>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	465a      	mov	r2, fp
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	f43f af12 	beq.w	8006e10 <_printf_float+0x98>
 8006fec:	f04f 0a00 	mov.w	sl, #0
 8006ff0:	f104 0b1a 	add.w	fp, r4, #26
 8006ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff6:	425b      	negs	r3, r3
 8006ff8:	4553      	cmp	r3, sl
 8006ffa:	dc01      	bgt.n	8007000 <_printf_float+0x288>
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	e794      	b.n	8006f2a <_printf_float+0x1b2>
 8007000:	2301      	movs	r3, #1
 8007002:	465a      	mov	r2, fp
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af00 	beq.w	8006e10 <_printf_float+0x98>
 8007010:	f10a 0a01 	add.w	sl, sl, #1
 8007014:	e7ee      	b.n	8006ff4 <_printf_float+0x27c>
 8007016:	bf00      	nop
 8007018:	ffffffff 	.word	0xffffffff
 800701c:	7fefffff 	.word	0x7fefffff
 8007020:	08009850 	.word	0x08009850
 8007024:	08009854 	.word	0x08009854
 8007028:	08009858 	.word	0x08009858
 800702c:	0800985c 	.word	0x0800985c
 8007030:	08009860 	.word	0x08009860
 8007034:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007036:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800703a:	4553      	cmp	r3, sl
 800703c:	bfa8      	it	ge
 800703e:	4653      	movge	r3, sl
 8007040:	2b00      	cmp	r3, #0
 8007042:	4699      	mov	r9, r3
 8007044:	dc37      	bgt.n	80070b6 <_printf_float+0x33e>
 8007046:	2300      	movs	r3, #0
 8007048:	9307      	str	r3, [sp, #28]
 800704a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800704e:	f104 021a 	add.w	r2, r4, #26
 8007052:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007054:	9907      	ldr	r1, [sp, #28]
 8007056:	9306      	str	r3, [sp, #24]
 8007058:	eba3 0309 	sub.w	r3, r3, r9
 800705c:	428b      	cmp	r3, r1
 800705e:	dc31      	bgt.n	80070c4 <_printf_float+0x34c>
 8007060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007062:	459a      	cmp	sl, r3
 8007064:	dc3b      	bgt.n	80070de <_printf_float+0x366>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	07da      	lsls	r2, r3, #31
 800706a:	d438      	bmi.n	80070de <_printf_float+0x366>
 800706c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800706e:	ebaa 0903 	sub.w	r9, sl, r3
 8007072:	9b06      	ldr	r3, [sp, #24]
 8007074:	ebaa 0303 	sub.w	r3, sl, r3
 8007078:	4599      	cmp	r9, r3
 800707a:	bfa8      	it	ge
 800707c:	4699      	movge	r9, r3
 800707e:	f1b9 0f00 	cmp.w	r9, #0
 8007082:	dc34      	bgt.n	80070ee <_printf_float+0x376>
 8007084:	f04f 0800 	mov.w	r8, #0
 8007088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800708c:	f104 0b1a 	add.w	fp, r4, #26
 8007090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007092:	ebaa 0303 	sub.w	r3, sl, r3
 8007096:	eba3 0309 	sub.w	r3, r3, r9
 800709a:	4543      	cmp	r3, r8
 800709c:	f77f af76 	ble.w	8006f8c <_printf_float+0x214>
 80070a0:	2301      	movs	r3, #1
 80070a2:	465a      	mov	r2, fp
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f aeb0 	beq.w	8006e10 <_printf_float+0x98>
 80070b0:	f108 0801 	add.w	r8, r8, #1
 80070b4:	e7ec      	b.n	8007090 <_printf_float+0x318>
 80070b6:	4642      	mov	r2, r8
 80070b8:	4631      	mov	r1, r6
 80070ba:	4628      	mov	r0, r5
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d1c1      	bne.n	8007046 <_printf_float+0x2ce>
 80070c2:	e6a5      	b.n	8006e10 <_printf_float+0x98>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	9206      	str	r2, [sp, #24]
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f ae9e 	beq.w	8006e10 <_printf_float+0x98>
 80070d4:	9b07      	ldr	r3, [sp, #28]
 80070d6:	9a06      	ldr	r2, [sp, #24]
 80070d8:	3301      	adds	r3, #1
 80070da:	9307      	str	r3, [sp, #28]
 80070dc:	e7b9      	b.n	8007052 <_printf_float+0x2da>
 80070de:	9b05      	ldr	r3, [sp, #20]
 80070e0:	465a      	mov	r2, fp
 80070e2:	4631      	mov	r1, r6
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b8      	blx	r7
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1bf      	bne.n	800706c <_printf_float+0x2f4>
 80070ec:	e690      	b.n	8006e10 <_printf_float+0x98>
 80070ee:	9a06      	ldr	r2, [sp, #24]
 80070f0:	464b      	mov	r3, r9
 80070f2:	4442      	add	r2, r8
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	d1c2      	bne.n	8007084 <_printf_float+0x30c>
 80070fe:	e687      	b.n	8006e10 <_printf_float+0x98>
 8007100:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007104:	f1b9 0f01 	cmp.w	r9, #1
 8007108:	dc01      	bgt.n	800710e <_printf_float+0x396>
 800710a:	07db      	lsls	r3, r3, #31
 800710c:	d536      	bpl.n	800717c <_printf_float+0x404>
 800710e:	2301      	movs	r3, #1
 8007110:	4642      	mov	r2, r8
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	f43f ae79 	beq.w	8006e10 <_printf_float+0x98>
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	465a      	mov	r2, fp
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae71 	beq.w	8006e10 <_printf_float+0x98>
 800712e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800713e:	d018      	beq.n	8007172 <_printf_float+0x3fa>
 8007140:	464b      	mov	r3, r9
 8007142:	f108 0201 	add.w	r2, r8, #1
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	d10c      	bne.n	800716a <_printf_float+0x3f2>
 8007150:	e65e      	b.n	8006e10 <_printf_float+0x98>
 8007152:	2301      	movs	r3, #1
 8007154:	465a      	mov	r2, fp
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f ae57 	beq.w	8006e10 <_printf_float+0x98>
 8007162:	f108 0801 	add.w	r8, r8, #1
 8007166:	45c8      	cmp	r8, r9
 8007168:	dbf3      	blt.n	8007152 <_printf_float+0x3da>
 800716a:	4653      	mov	r3, sl
 800716c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007170:	e6dc      	b.n	8006f2c <_printf_float+0x1b4>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	f104 0b1a 	add.w	fp, r4, #26
 800717a:	e7f4      	b.n	8007166 <_printf_float+0x3ee>
 800717c:	2301      	movs	r3, #1
 800717e:	4642      	mov	r2, r8
 8007180:	e7e1      	b.n	8007146 <_printf_float+0x3ce>
 8007182:	2301      	movs	r3, #1
 8007184:	464a      	mov	r2, r9
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	f43f ae3f 	beq.w	8006e10 <_printf_float+0x98>
 8007192:	f108 0801 	add.w	r8, r8, #1
 8007196:	68e3      	ldr	r3, [r4, #12]
 8007198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800719a:	1a5b      	subs	r3, r3, r1
 800719c:	4543      	cmp	r3, r8
 800719e:	dcf0      	bgt.n	8007182 <_printf_float+0x40a>
 80071a0:	e6f8      	b.n	8006f94 <_printf_float+0x21c>
 80071a2:	f04f 0800 	mov.w	r8, #0
 80071a6:	f104 0919 	add.w	r9, r4, #25
 80071aa:	e7f4      	b.n	8007196 <_printf_float+0x41e>

080071ac <_printf_common>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	4616      	mov	r6, r2
 80071b2:	4698      	mov	r8, r3
 80071b4:	688a      	ldr	r2, [r1, #8]
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071bc:	4293      	cmp	r3, r2
 80071be:	bfb8      	it	lt
 80071c0:	4613      	movlt	r3, r2
 80071c2:	6033      	str	r3, [r6, #0]
 80071c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071c8:	4607      	mov	r7, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	b10a      	cbz	r2, 80071d2 <_printf_common+0x26>
 80071ce:	3301      	adds	r3, #1
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	0699      	lsls	r1, r3, #26
 80071d6:	bf42      	ittt	mi
 80071d8:	6833      	ldrmi	r3, [r6, #0]
 80071da:	3302      	addmi	r3, #2
 80071dc:	6033      	strmi	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	f015 0506 	ands.w	r5, r5, #6
 80071e4:	d106      	bne.n	80071f4 <_printf_common+0x48>
 80071e6:	f104 0a19 	add.w	sl, r4, #25
 80071ea:	68e3      	ldr	r3, [r4, #12]
 80071ec:	6832      	ldr	r2, [r6, #0]
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	42ab      	cmp	r3, r5
 80071f2:	dc26      	bgt.n	8007242 <_printf_common+0x96>
 80071f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	3b00      	subs	r3, #0
 80071fc:	bf18      	it	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	0692      	lsls	r2, r2, #26
 8007202:	d42b      	bmi.n	800725c <_printf_common+0xb0>
 8007204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007208:	4641      	mov	r1, r8
 800720a:	4638      	mov	r0, r7
 800720c:	47c8      	blx	r9
 800720e:	3001      	adds	r0, #1
 8007210:	d01e      	beq.n	8007250 <_printf_common+0xa4>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	f003 0306 	and.w	r3, r3, #6
 800721a:	2b04      	cmp	r3, #4
 800721c:	bf02      	ittt	eq
 800721e:	68e5      	ldreq	r5, [r4, #12]
 8007220:	6833      	ldreq	r3, [r6, #0]
 8007222:	1aed      	subeq	r5, r5, r3
 8007224:	68a3      	ldr	r3, [r4, #8]
 8007226:	bf0c      	ite	eq
 8007228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800722c:	2500      	movne	r5, #0
 800722e:	4293      	cmp	r3, r2
 8007230:	bfc4      	itt	gt
 8007232:	1a9b      	subgt	r3, r3, r2
 8007234:	18ed      	addgt	r5, r5, r3
 8007236:	2600      	movs	r6, #0
 8007238:	341a      	adds	r4, #26
 800723a:	42b5      	cmp	r5, r6
 800723c:	d11a      	bne.n	8007274 <_printf_common+0xc8>
 800723e:	2000      	movs	r0, #0
 8007240:	e008      	b.n	8007254 <_printf_common+0xa8>
 8007242:	2301      	movs	r3, #1
 8007244:	4652      	mov	r2, sl
 8007246:	4641      	mov	r1, r8
 8007248:	4638      	mov	r0, r7
 800724a:	47c8      	blx	r9
 800724c:	3001      	adds	r0, #1
 800724e:	d103      	bne.n	8007258 <_printf_common+0xac>
 8007250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	3501      	adds	r5, #1
 800725a:	e7c6      	b.n	80071ea <_printf_common+0x3e>
 800725c:	18e1      	adds	r1, r4, r3
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	2030      	movs	r0, #48	@ 0x30
 8007262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007266:	4422      	add	r2, r4
 8007268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800726c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007270:	3302      	adds	r3, #2
 8007272:	e7c7      	b.n	8007204 <_printf_common+0x58>
 8007274:	2301      	movs	r3, #1
 8007276:	4622      	mov	r2, r4
 8007278:	4641      	mov	r1, r8
 800727a:	4638      	mov	r0, r7
 800727c:	47c8      	blx	r9
 800727e:	3001      	adds	r0, #1
 8007280:	d0e6      	beq.n	8007250 <_printf_common+0xa4>
 8007282:	3601      	adds	r6, #1
 8007284:	e7d9      	b.n	800723a <_printf_common+0x8e>
	...

08007288 <_printf_i>:
 8007288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	7e0f      	ldrb	r7, [r1, #24]
 800728e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007290:	2f78      	cmp	r7, #120	@ 0x78
 8007292:	4691      	mov	r9, r2
 8007294:	4680      	mov	r8, r0
 8007296:	460c      	mov	r4, r1
 8007298:	469a      	mov	sl, r3
 800729a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800729e:	d807      	bhi.n	80072b0 <_printf_i+0x28>
 80072a0:	2f62      	cmp	r7, #98	@ 0x62
 80072a2:	d80a      	bhi.n	80072ba <_printf_i+0x32>
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	f000 80d2 	beq.w	800744e <_printf_i+0x1c6>
 80072aa:	2f58      	cmp	r7, #88	@ 0x58
 80072ac:	f000 80b9 	beq.w	8007422 <_printf_i+0x19a>
 80072b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072b8:	e03a      	b.n	8007330 <_printf_i+0xa8>
 80072ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072be:	2b15      	cmp	r3, #21
 80072c0:	d8f6      	bhi.n	80072b0 <_printf_i+0x28>
 80072c2:	a101      	add	r1, pc, #4	@ (adr r1, 80072c8 <_printf_i+0x40>)
 80072c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007335 	.word	0x08007335
 80072d0:	080072b1 	.word	0x080072b1
 80072d4:	080072b1 	.word	0x080072b1
 80072d8:	080072b1 	.word	0x080072b1
 80072dc:	080072b1 	.word	0x080072b1
 80072e0:	08007335 	.word	0x08007335
 80072e4:	080072b1 	.word	0x080072b1
 80072e8:	080072b1 	.word	0x080072b1
 80072ec:	080072b1 	.word	0x080072b1
 80072f0:	080072b1 	.word	0x080072b1
 80072f4:	08007435 	.word	0x08007435
 80072f8:	0800735f 	.word	0x0800735f
 80072fc:	080073ef 	.word	0x080073ef
 8007300:	080072b1 	.word	0x080072b1
 8007304:	080072b1 	.word	0x080072b1
 8007308:	08007457 	.word	0x08007457
 800730c:	080072b1 	.word	0x080072b1
 8007310:	0800735f 	.word	0x0800735f
 8007314:	080072b1 	.word	0x080072b1
 8007318:	080072b1 	.word	0x080072b1
 800731c:	080073f7 	.word	0x080073f7
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6032      	str	r2, [r6, #0]
 8007328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800732c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007330:	2301      	movs	r3, #1
 8007332:	e09d      	b.n	8007470 <_printf_i+0x1e8>
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	6820      	ldr	r0, [r4, #0]
 8007338:	1d19      	adds	r1, r3, #4
 800733a:	6031      	str	r1, [r6, #0]
 800733c:	0606      	lsls	r6, r0, #24
 800733e:	d501      	bpl.n	8007344 <_printf_i+0xbc>
 8007340:	681d      	ldr	r5, [r3, #0]
 8007342:	e003      	b.n	800734c <_printf_i+0xc4>
 8007344:	0645      	lsls	r5, r0, #25
 8007346:	d5fb      	bpl.n	8007340 <_printf_i+0xb8>
 8007348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800734c:	2d00      	cmp	r5, #0
 800734e:	da03      	bge.n	8007358 <_printf_i+0xd0>
 8007350:	232d      	movs	r3, #45	@ 0x2d
 8007352:	426d      	negs	r5, r5
 8007354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007358:	4859      	ldr	r0, [pc, #356]	@ (80074c0 <_printf_i+0x238>)
 800735a:	230a      	movs	r3, #10
 800735c:	e011      	b.n	8007382 <_printf_i+0xfa>
 800735e:	6821      	ldr	r1, [r4, #0]
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	0608      	lsls	r0, r1, #24
 8007364:	f853 5b04 	ldr.w	r5, [r3], #4
 8007368:	d402      	bmi.n	8007370 <_printf_i+0xe8>
 800736a:	0649      	lsls	r1, r1, #25
 800736c:	bf48      	it	mi
 800736e:	b2ad      	uxthmi	r5, r5
 8007370:	2f6f      	cmp	r7, #111	@ 0x6f
 8007372:	4853      	ldr	r0, [pc, #332]	@ (80074c0 <_printf_i+0x238>)
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	bf14      	ite	ne
 8007378:	230a      	movne	r3, #10
 800737a:	2308      	moveq	r3, #8
 800737c:	2100      	movs	r1, #0
 800737e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007382:	6866      	ldr	r6, [r4, #4]
 8007384:	60a6      	str	r6, [r4, #8]
 8007386:	2e00      	cmp	r6, #0
 8007388:	bfa2      	ittt	ge
 800738a:	6821      	ldrge	r1, [r4, #0]
 800738c:	f021 0104 	bicge.w	r1, r1, #4
 8007390:	6021      	strge	r1, [r4, #0]
 8007392:	b90d      	cbnz	r5, 8007398 <_printf_i+0x110>
 8007394:	2e00      	cmp	r6, #0
 8007396:	d04b      	beq.n	8007430 <_printf_i+0x1a8>
 8007398:	4616      	mov	r6, r2
 800739a:	fbb5 f1f3 	udiv	r1, r5, r3
 800739e:	fb03 5711 	mls	r7, r3, r1, r5
 80073a2:	5dc7      	ldrb	r7, [r0, r7]
 80073a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073a8:	462f      	mov	r7, r5
 80073aa:	42bb      	cmp	r3, r7
 80073ac:	460d      	mov	r5, r1
 80073ae:	d9f4      	bls.n	800739a <_printf_i+0x112>
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d10b      	bne.n	80073cc <_printf_i+0x144>
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	07df      	lsls	r7, r3, #31
 80073b8:	d508      	bpl.n	80073cc <_printf_i+0x144>
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	6861      	ldr	r1, [r4, #4]
 80073be:	4299      	cmp	r1, r3
 80073c0:	bfde      	ittt	le
 80073c2:	2330      	movle	r3, #48	@ 0x30
 80073c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073cc:	1b92      	subs	r2, r2, r6
 80073ce:	6122      	str	r2, [r4, #16]
 80073d0:	f8cd a000 	str.w	sl, [sp]
 80073d4:	464b      	mov	r3, r9
 80073d6:	aa03      	add	r2, sp, #12
 80073d8:	4621      	mov	r1, r4
 80073da:	4640      	mov	r0, r8
 80073dc:	f7ff fee6 	bl	80071ac <_printf_common>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d14a      	bne.n	800747a <_printf_i+0x1f2>
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e8:	b004      	add	sp, #16
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f043 0320 	orr.w	r3, r3, #32
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	4833      	ldr	r0, [pc, #204]	@ (80074c4 <_printf_i+0x23c>)
 80073f8:	2778      	movs	r7, #120	@ 0x78
 80073fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	6831      	ldr	r1, [r6, #0]
 8007402:	061f      	lsls	r7, r3, #24
 8007404:	f851 5b04 	ldr.w	r5, [r1], #4
 8007408:	d402      	bmi.n	8007410 <_printf_i+0x188>
 800740a:	065f      	lsls	r7, r3, #25
 800740c:	bf48      	it	mi
 800740e:	b2ad      	uxthmi	r5, r5
 8007410:	6031      	str	r1, [r6, #0]
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	bf44      	itt	mi
 8007416:	f043 0320 	orrmi.w	r3, r3, #32
 800741a:	6023      	strmi	r3, [r4, #0]
 800741c:	b11d      	cbz	r5, 8007426 <_printf_i+0x19e>
 800741e:	2310      	movs	r3, #16
 8007420:	e7ac      	b.n	800737c <_printf_i+0xf4>
 8007422:	4827      	ldr	r0, [pc, #156]	@ (80074c0 <_printf_i+0x238>)
 8007424:	e7e9      	b.n	80073fa <_printf_i+0x172>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	f023 0320 	bic.w	r3, r3, #32
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	e7f6      	b.n	800741e <_printf_i+0x196>
 8007430:	4616      	mov	r6, r2
 8007432:	e7bd      	b.n	80073b0 <_printf_i+0x128>
 8007434:	6833      	ldr	r3, [r6, #0]
 8007436:	6825      	ldr	r5, [r4, #0]
 8007438:	6961      	ldr	r1, [r4, #20]
 800743a:	1d18      	adds	r0, r3, #4
 800743c:	6030      	str	r0, [r6, #0]
 800743e:	062e      	lsls	r6, r5, #24
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	d501      	bpl.n	8007448 <_printf_i+0x1c0>
 8007444:	6019      	str	r1, [r3, #0]
 8007446:	e002      	b.n	800744e <_printf_i+0x1c6>
 8007448:	0668      	lsls	r0, r5, #25
 800744a:	d5fb      	bpl.n	8007444 <_printf_i+0x1bc>
 800744c:	8019      	strh	r1, [r3, #0]
 800744e:	2300      	movs	r3, #0
 8007450:	6123      	str	r3, [r4, #16]
 8007452:	4616      	mov	r6, r2
 8007454:	e7bc      	b.n	80073d0 <_printf_i+0x148>
 8007456:	6833      	ldr	r3, [r6, #0]
 8007458:	1d1a      	adds	r2, r3, #4
 800745a:	6032      	str	r2, [r6, #0]
 800745c:	681e      	ldr	r6, [r3, #0]
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	2100      	movs	r1, #0
 8007462:	4630      	mov	r0, r6
 8007464:	f7f8 feec 	bl	8000240 <memchr>
 8007468:	b108      	cbz	r0, 800746e <_printf_i+0x1e6>
 800746a:	1b80      	subs	r0, r0, r6
 800746c:	6060      	str	r0, [r4, #4]
 800746e:	6863      	ldr	r3, [r4, #4]
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	2300      	movs	r3, #0
 8007474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007478:	e7aa      	b.n	80073d0 <_printf_i+0x148>
 800747a:	6923      	ldr	r3, [r4, #16]
 800747c:	4632      	mov	r2, r6
 800747e:	4649      	mov	r1, r9
 8007480:	4640      	mov	r0, r8
 8007482:	47d0      	blx	sl
 8007484:	3001      	adds	r0, #1
 8007486:	d0ad      	beq.n	80073e4 <_printf_i+0x15c>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	079b      	lsls	r3, r3, #30
 800748c:	d413      	bmi.n	80074b6 <_printf_i+0x22e>
 800748e:	68e0      	ldr	r0, [r4, #12]
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	4298      	cmp	r0, r3
 8007494:	bfb8      	it	lt
 8007496:	4618      	movlt	r0, r3
 8007498:	e7a6      	b.n	80073e8 <_printf_i+0x160>
 800749a:	2301      	movs	r3, #1
 800749c:	4632      	mov	r2, r6
 800749e:	4649      	mov	r1, r9
 80074a0:	4640      	mov	r0, r8
 80074a2:	47d0      	blx	sl
 80074a4:	3001      	adds	r0, #1
 80074a6:	d09d      	beq.n	80073e4 <_printf_i+0x15c>
 80074a8:	3501      	adds	r5, #1
 80074aa:	68e3      	ldr	r3, [r4, #12]
 80074ac:	9903      	ldr	r1, [sp, #12]
 80074ae:	1a5b      	subs	r3, r3, r1
 80074b0:	42ab      	cmp	r3, r5
 80074b2:	dcf2      	bgt.n	800749a <_printf_i+0x212>
 80074b4:	e7eb      	b.n	800748e <_printf_i+0x206>
 80074b6:	2500      	movs	r5, #0
 80074b8:	f104 0619 	add.w	r6, r4, #25
 80074bc:	e7f5      	b.n	80074aa <_printf_i+0x222>
 80074be:	bf00      	nop
 80074c0:	08009862 	.word	0x08009862
 80074c4:	08009873 	.word	0x08009873

080074c8 <siprintf>:
 80074c8:	b40e      	push	{r1, r2, r3}
 80074ca:	b500      	push	{lr}
 80074cc:	b09c      	sub	sp, #112	@ 0x70
 80074ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80074d0:	9002      	str	r0, [sp, #8]
 80074d2:	9006      	str	r0, [sp, #24]
 80074d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074d8:	4809      	ldr	r0, [pc, #36]	@ (8007500 <siprintf+0x38>)
 80074da:	9107      	str	r1, [sp, #28]
 80074dc:	9104      	str	r1, [sp, #16]
 80074de:	4909      	ldr	r1, [pc, #36]	@ (8007504 <siprintf+0x3c>)
 80074e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e4:	9105      	str	r1, [sp, #20]
 80074e6:	6800      	ldr	r0, [r0, #0]
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	a902      	add	r1, sp, #8
 80074ec:	f000 ff42 	bl	8008374 <_svfiprintf_r>
 80074f0:	9b02      	ldr	r3, [sp, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	701a      	strb	r2, [r3, #0]
 80074f6:	b01c      	add	sp, #112	@ 0x70
 80074f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074fc:	b003      	add	sp, #12
 80074fe:	4770      	bx	lr
 8007500:	20000020 	.word	0x20000020
 8007504:	ffff0208 	.word	0xffff0208

08007508 <std>:
 8007508:	2300      	movs	r3, #0
 800750a:	b510      	push	{r4, lr}
 800750c:	4604      	mov	r4, r0
 800750e:	e9c0 3300 	strd	r3, r3, [r0]
 8007512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	8181      	strh	r1, [r0, #12]
 800751a:	6643      	str	r3, [r0, #100]	@ 0x64
 800751c:	81c2      	strh	r2, [r0, #14]
 800751e:	6183      	str	r3, [r0, #24]
 8007520:	4619      	mov	r1, r3
 8007522:	2208      	movs	r2, #8
 8007524:	305c      	adds	r0, #92	@ 0x5c
 8007526:	f000 f8b1 	bl	800768c <memset>
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <std+0x58>)
 800752c:	6263      	str	r3, [r4, #36]	@ 0x24
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <std+0x5c>)
 8007530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <std+0x60>)
 8007534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <std+0x64>)
 8007538:	6323      	str	r3, [r4, #48]	@ 0x30
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <std+0x68>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	429c      	cmp	r4, r3
 8007540:	d006      	beq.n	8007550 <std+0x48>
 8007542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007546:	4294      	cmp	r4, r2
 8007548:	d002      	beq.n	8007550 <std+0x48>
 800754a:	33d0      	adds	r3, #208	@ 0xd0
 800754c:	429c      	cmp	r4, r3
 800754e:	d105      	bne.n	800755c <std+0x54>
 8007550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f000 b8ce 	b.w	80076f8 <__retarget_lock_init_recursive>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	08008f35 	.word	0x08008f35
 8007564:	08008f57 	.word	0x08008f57
 8007568:	08008f8f 	.word	0x08008f8f
 800756c:	08008fb3 	.word	0x08008fb3
 8007570:	20000b40 	.word	0x20000b40

08007574 <stdio_exit_handler>:
 8007574:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <stdio_exit_handler+0xc>)
 8007576:	4903      	ldr	r1, [pc, #12]	@ (8007584 <stdio_exit_handler+0x10>)
 8007578:	4803      	ldr	r0, [pc, #12]	@ (8007588 <stdio_exit_handler+0x14>)
 800757a:	f000 b869 	b.w	8007650 <_fwalk_sglue>
 800757e:	bf00      	nop
 8007580:	20000014 	.word	0x20000014
 8007584:	080087c9 	.word	0x080087c9
 8007588:	20000024 	.word	0x20000024

0800758c <cleanup_stdio>:
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <cleanup_stdio+0x34>)
 8007590:	4299      	cmp	r1, r3
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	d001      	beq.n	800759c <cleanup_stdio+0x10>
 8007598:	f001 f916 	bl	80087c8 <_fflush_r>
 800759c:	68a1      	ldr	r1, [r4, #8]
 800759e:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <cleanup_stdio+0x38>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <cleanup_stdio+0x1e>
 80075a4:	4620      	mov	r0, r4
 80075a6:	f001 f90f 	bl	80087c8 <_fflush_r>
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <cleanup_stdio+0x3c>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d004      	beq.n	80075bc <cleanup_stdio+0x30>
 80075b2:	4620      	mov	r0, r4
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f001 b906 	b.w	80087c8 <_fflush_r>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	20000b40 	.word	0x20000b40
 80075c4:	20000ba8 	.word	0x20000ba8
 80075c8:	20000c10 	.word	0x20000c10

080075cc <global_stdio_init.part.0>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <global_stdio_init.part.0+0x30>)
 80075d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007600 <global_stdio_init.part.0+0x34>)
 80075d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <global_stdio_init.part.0+0x38>)
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	2104      	movs	r1, #4
 80075dc:	f7ff ff94 	bl	8007508 <std>
 80075e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e4:	2201      	movs	r2, #1
 80075e6:	2109      	movs	r1, #9
 80075e8:	f7ff ff8e 	bl	8007508 <std>
 80075ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075f0:	2202      	movs	r2, #2
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f6:	2112      	movs	r1, #18
 80075f8:	f7ff bf86 	b.w	8007508 <std>
 80075fc:	20000c78 	.word	0x20000c78
 8007600:	20000b40 	.word	0x20000b40
 8007604:	08007575 	.word	0x08007575

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 b876 	b.w	80076fa <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20000c7d 	.word	0x20000c7d

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 b871 	b.w	80076fc <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20000c7d 	.word	0x20000c7d

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sfp_lock_acquire>
 8007628:	6a23      	ldr	r3, [r4, #32]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sfp_lock_release>
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <__sinit+0x28>)
 8007636:	6223      	str	r3, [r4, #32]
 8007638:	4b04      	ldr	r3, [pc, #16]	@ (800764c <__sinit+0x2c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f5      	bne.n	800762c <__sinit+0xc>
 8007640:	f7ff ffc4 	bl	80075cc <global_stdio_init.part.0>
 8007644:	e7f2      	b.n	800762c <__sinit+0xc>
 8007646:	bf00      	nop
 8007648:	0800758d 	.word	0x0800758d
 800764c:	20000c78 	.word	0x20000c78

08007650 <_fwalk_sglue>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4688      	mov	r8, r1
 8007658:	4614      	mov	r4, r2
 800765a:	2600      	movs	r6, #0
 800765c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007660:	f1b9 0901 	subs.w	r9, r9, #1
 8007664:	d505      	bpl.n	8007672 <_fwalk_sglue+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1f7      	bne.n	800765c <_fwalk_sglue+0xc>
 800766c:	4630      	mov	r0, r6
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <_fwalk_sglue+0x38>
 8007678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	d003      	beq.n	8007688 <_fwalk_sglue+0x38>
 8007680:	4629      	mov	r1, r5
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	4306      	orrs	r6, r0
 8007688:	3568      	adds	r5, #104	@ 0x68
 800768a:	e7e9      	b.n	8007660 <_fwalk_sglue+0x10>

0800768c <memset>:
 800768c:	4402      	add	r2, r0
 800768e:	4603      	mov	r3, r0
 8007690:	4293      	cmp	r3, r2
 8007692:	d100      	bne.n	8007696 <memset+0xa>
 8007694:	4770      	bx	lr
 8007696:	f803 1b01 	strb.w	r1, [r3], #1
 800769a:	e7f9      	b.n	8007690 <memset+0x4>

0800769c <_localeconv_r>:
 800769c:	4800      	ldr	r0, [pc, #0]	@ (80076a0 <_localeconv_r+0x4>)
 800769e:	4770      	bx	lr
 80076a0:	20000160 	.word	0x20000160

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	@ (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000020 	.word	0x20000020

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4d0d      	ldr	r5, [pc, #52]	@ (80076e8 <__libc_init_array+0x38>)
 80076b4:	4c0d      	ldr	r4, [pc, #52]	@ (80076ec <__libc_init_array+0x3c>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	2600      	movs	r6, #0
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	4d0b      	ldr	r5, [pc, #44]	@ (80076f0 <__libc_init_array+0x40>)
 80076c2:	4c0c      	ldr	r4, [pc, #48]	@ (80076f4 <__libc_init_array+0x44>)
 80076c4:	f002 f880 	bl	80097c8 <_init>
 80076c8:	1b64      	subs	r4, r4, r5
 80076ca:	10a4      	asrs	r4, r4, #2
 80076cc:	2600      	movs	r6, #0
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	08009bc8 	.word	0x08009bc8
 80076ec:	08009bc8 	.word	0x08009bc8
 80076f0:	08009bc8 	.word	0x08009bc8
 80076f4:	08009bcc 	.word	0x08009bcc

080076f8 <__retarget_lock_init_recursive>:
 80076f8:	4770      	bx	lr

080076fa <__retarget_lock_acquire_recursive>:
 80076fa:	4770      	bx	lr

080076fc <__retarget_lock_release_recursive>:
 80076fc:	4770      	bx	lr

080076fe <quorem>:
 80076fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007702:	6903      	ldr	r3, [r0, #16]
 8007704:	690c      	ldr	r4, [r1, #16]
 8007706:	42a3      	cmp	r3, r4
 8007708:	4607      	mov	r7, r0
 800770a:	db7e      	blt.n	800780a <quorem+0x10c>
 800770c:	3c01      	subs	r4, #1
 800770e:	f101 0814 	add.w	r8, r1, #20
 8007712:	00a3      	lsls	r3, r4, #2
 8007714:	f100 0514 	add.w	r5, r0, #20
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007728:	3301      	adds	r3, #1
 800772a:	429a      	cmp	r2, r3
 800772c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007730:	fbb2 f6f3 	udiv	r6, r2, r3
 8007734:	d32e      	bcc.n	8007794 <quorem+0x96>
 8007736:	f04f 0a00 	mov.w	sl, #0
 800773a:	46c4      	mov	ip, r8
 800773c:	46ae      	mov	lr, r5
 800773e:	46d3      	mov	fp, sl
 8007740:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007744:	b298      	uxth	r0, r3
 8007746:	fb06 a000 	mla	r0, r6, r0, sl
 800774a:	0c02      	lsrs	r2, r0, #16
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	fb06 2303 	mla	r3, r6, r3, r2
 8007752:	f8de 2000 	ldr.w	r2, [lr]
 8007756:	b280      	uxth	r0, r0
 8007758:	b292      	uxth	r2, r2
 800775a:	1a12      	subs	r2, r2, r0
 800775c:	445a      	add	r2, fp
 800775e:	f8de 0000 	ldr.w	r0, [lr]
 8007762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007766:	b29b      	uxth	r3, r3
 8007768:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800776c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007770:	b292      	uxth	r2, r2
 8007772:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007776:	45e1      	cmp	r9, ip
 8007778:	f84e 2b04 	str.w	r2, [lr], #4
 800777c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007780:	d2de      	bcs.n	8007740 <quorem+0x42>
 8007782:	9b00      	ldr	r3, [sp, #0]
 8007784:	58eb      	ldr	r3, [r5, r3]
 8007786:	b92b      	cbnz	r3, 8007794 <quorem+0x96>
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	3b04      	subs	r3, #4
 800778c:	429d      	cmp	r5, r3
 800778e:	461a      	mov	r2, r3
 8007790:	d32f      	bcc.n	80077f2 <quorem+0xf4>
 8007792:	613c      	str	r4, [r7, #16]
 8007794:	4638      	mov	r0, r7
 8007796:	f001 fac5 	bl	8008d24 <__mcmp>
 800779a:	2800      	cmp	r0, #0
 800779c:	db25      	blt.n	80077ea <quorem+0xec>
 800779e:	4629      	mov	r1, r5
 80077a0:	2000      	movs	r0, #0
 80077a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80077a6:	f8d1 c000 	ldr.w	ip, [r1]
 80077aa:	fa1f fe82 	uxth.w	lr, r2
 80077ae:	fa1f f38c 	uxth.w	r3, ip
 80077b2:	eba3 030e 	sub.w	r3, r3, lr
 80077b6:	4403      	add	r3, r0
 80077b8:	0c12      	lsrs	r2, r2, #16
 80077ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80077be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c8:	45c1      	cmp	r9, r8
 80077ca:	f841 3b04 	str.w	r3, [r1], #4
 80077ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077d2:	d2e6      	bcs.n	80077a2 <quorem+0xa4>
 80077d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077dc:	b922      	cbnz	r2, 80077e8 <quorem+0xea>
 80077de:	3b04      	subs	r3, #4
 80077e0:	429d      	cmp	r5, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	d30b      	bcc.n	80077fe <quorem+0x100>
 80077e6:	613c      	str	r4, [r7, #16]
 80077e8:	3601      	adds	r6, #1
 80077ea:	4630      	mov	r0, r6
 80077ec:	b003      	add	sp, #12
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	d1cb      	bne.n	8007792 <quorem+0x94>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	e7c6      	b.n	800778c <quorem+0x8e>
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	3b04      	subs	r3, #4
 8007802:	2a00      	cmp	r2, #0
 8007804:	d1ef      	bne.n	80077e6 <quorem+0xe8>
 8007806:	3c01      	subs	r4, #1
 8007808:	e7ea      	b.n	80077e0 <quorem+0xe2>
 800780a:	2000      	movs	r0, #0
 800780c:	e7ee      	b.n	80077ec <quorem+0xee>
	...

08007810 <_dtoa_r>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	ed2d 8b02 	vpush	{d8}
 8007818:	69c7      	ldr	r7, [r0, #28]
 800781a:	b091      	sub	sp, #68	@ 0x44
 800781c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007820:	ec55 4b10 	vmov	r4, r5, d0
 8007824:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007826:	9107      	str	r1, [sp, #28]
 8007828:	4681      	mov	r9, r0
 800782a:	9209      	str	r2, [sp, #36]	@ 0x24
 800782c:	930d      	str	r3, [sp, #52]	@ 0x34
 800782e:	b97f      	cbnz	r7, 8007850 <_dtoa_r+0x40>
 8007830:	2010      	movs	r0, #16
 8007832:	f000 fe9b 	bl	800856c <malloc>
 8007836:	4602      	mov	r2, r0
 8007838:	f8c9 001c 	str.w	r0, [r9, #28]
 800783c:	b920      	cbnz	r0, 8007848 <_dtoa_r+0x38>
 800783e:	4ba0      	ldr	r3, [pc, #640]	@ (8007ac0 <_dtoa_r+0x2b0>)
 8007840:	21ef      	movs	r1, #239	@ 0xef
 8007842:	48a0      	ldr	r0, [pc, #640]	@ (8007ac4 <_dtoa_r+0x2b4>)
 8007844:	f001 fc66 	bl	8009114 <__assert_func>
 8007848:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800784c:	6007      	str	r7, [r0, #0]
 800784e:	60c7      	str	r7, [r0, #12]
 8007850:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007854:	6819      	ldr	r1, [r3, #0]
 8007856:	b159      	cbz	r1, 8007870 <_dtoa_r+0x60>
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	604a      	str	r2, [r1, #4]
 800785c:	2301      	movs	r3, #1
 800785e:	4093      	lsls	r3, r2
 8007860:	608b      	str	r3, [r1, #8]
 8007862:	4648      	mov	r0, r9
 8007864:	f001 f824 	bl	80088b0 <_Bfree>
 8007868:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	1e2b      	subs	r3, r5, #0
 8007872:	bfbb      	ittet	lt
 8007874:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007878:	9303      	strlt	r3, [sp, #12]
 800787a:	2300      	movge	r3, #0
 800787c:	2201      	movlt	r2, #1
 800787e:	bfac      	ite	ge
 8007880:	6033      	strge	r3, [r6, #0]
 8007882:	6032      	strlt	r2, [r6, #0]
 8007884:	4b90      	ldr	r3, [pc, #576]	@ (8007ac8 <_dtoa_r+0x2b8>)
 8007886:	9e03      	ldr	r6, [sp, #12]
 8007888:	43b3      	bics	r3, r6
 800788a:	d110      	bne.n	80078ae <_dtoa_r+0x9e>
 800788c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800788e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007898:	4323      	orrs	r3, r4
 800789a:	f000 84de 	beq.w	800825a <_dtoa_r+0xa4a>
 800789e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078a0:	4f8a      	ldr	r7, [pc, #552]	@ (8007acc <_dtoa_r+0x2bc>)
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 84e0 	beq.w	8008268 <_dtoa_r+0xa58>
 80078a8:	1cfb      	adds	r3, r7, #3
 80078aa:	f000 bcdb 	b.w	8008264 <_dtoa_r+0xa54>
 80078ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80078b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	d10a      	bne.n	80078d2 <_dtoa_r+0xc2>
 80078bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078be:	2301      	movs	r3, #1
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078c4:	b113      	cbz	r3, 80078cc <_dtoa_r+0xbc>
 80078c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80078c8:	4b81      	ldr	r3, [pc, #516]	@ (8007ad0 <_dtoa_r+0x2c0>)
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4f81      	ldr	r7, [pc, #516]	@ (8007ad4 <_dtoa_r+0x2c4>)
 80078ce:	f000 bccb 	b.w	8008268 <_dtoa_r+0xa58>
 80078d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80078d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80078d6:	4648      	mov	r0, r9
 80078d8:	eeb0 0b48 	vmov.f64	d0, d8
 80078dc:	f001 fad2 	bl	8008e84 <__d2b>
 80078e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80078e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078e6:	9001      	str	r0, [sp, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d045      	beq.n	8007978 <_dtoa_r+0x168>
 80078ec:	eeb0 7b48 	vmov.f64	d7, d8
 80078f0:	ee18 1a90 	vmov	r1, s17
 80078f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80078f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80078fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007900:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007904:	2500      	movs	r5, #0
 8007906:	ee07 1a90 	vmov	s15, r1
 800790a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800790e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007aa8 <_dtoa_r+0x298>
 8007912:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007916:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007ab0 <_dtoa_r+0x2a0>
 800791a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800791e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007ab8 <_dtoa_r+0x2a8>
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800792a:	eeb0 7b46 	vmov.f64	d7, d6
 800792e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007932:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007936:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800793a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800793e:	ee16 8a90 	vmov	r8, s13
 8007942:	d508      	bpl.n	8007956 <_dtoa_r+0x146>
 8007944:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007948:	eeb4 6b47 	vcmp.f64	d6, d7
 800794c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007950:	bf18      	it	ne
 8007952:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8007956:	f1b8 0f16 	cmp.w	r8, #22
 800795a:	d82b      	bhi.n	80079b4 <_dtoa_r+0x1a4>
 800795c:	495e      	ldr	r1, [pc, #376]	@ (8007ad8 <_dtoa_r+0x2c8>)
 800795e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007962:	ed91 7b00 	vldr	d7, [r1]
 8007966:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	d501      	bpl.n	8007974 <_dtoa_r+0x164>
 8007970:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007974:	2100      	movs	r1, #0
 8007976:	e01e      	b.n	80079b6 <_dtoa_r+0x1a6>
 8007978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800797a:	4413      	add	r3, r2
 800797c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007980:	2920      	cmp	r1, #32
 8007982:	bfc1      	itttt	gt
 8007984:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007988:	408e      	lslgt	r6, r1
 800798a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800798e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007992:	bfd6      	itet	le
 8007994:	f1c1 0120 	rsble	r1, r1, #32
 8007998:	4331      	orrgt	r1, r6
 800799a:	fa04 f101 	lslle.w	r1, r4, r1
 800799e:	ee07 1a90 	vmov	s15, r1
 80079a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80079a6:	3b01      	subs	r3, #1
 80079a8:	ee17 1a90 	vmov	r1, s15
 80079ac:	2501      	movs	r5, #1
 80079ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80079b2:	e7a8      	b.n	8007906 <_dtoa_r+0xf6>
 80079b4:	2101      	movs	r1, #1
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	1e53      	subs	r3, r2, #1
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	bf45      	ittet	mi
 80079be:	f1c2 0301 	rsbmi	r3, r2, #1
 80079c2:	9305      	strmi	r3, [sp, #20]
 80079c4:	2300      	movpl	r3, #0
 80079c6:	2300      	movmi	r3, #0
 80079c8:	bf4c      	ite	mi
 80079ca:	9306      	strmi	r3, [sp, #24]
 80079cc:	9305      	strpl	r3, [sp, #20]
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80079d4:	db18      	blt.n	8007a08 <_dtoa_r+0x1f8>
 80079d6:	9b06      	ldr	r3, [sp, #24]
 80079d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80079dc:	4443      	add	r3, r8
 80079de:	9306      	str	r3, [sp, #24]
 80079e0:	2300      	movs	r3, #0
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	2a09      	cmp	r2, #9
 80079e6:	d849      	bhi.n	8007a7c <_dtoa_r+0x26c>
 80079e8:	2a05      	cmp	r2, #5
 80079ea:	bfc4      	itt	gt
 80079ec:	3a04      	subgt	r2, #4
 80079ee:	9207      	strgt	r2, [sp, #28]
 80079f0:	9a07      	ldr	r2, [sp, #28]
 80079f2:	f1a2 0202 	sub.w	r2, r2, #2
 80079f6:	bfcc      	ite	gt
 80079f8:	2400      	movgt	r4, #0
 80079fa:	2401      	movle	r4, #1
 80079fc:	2a03      	cmp	r2, #3
 80079fe:	d848      	bhi.n	8007a92 <_dtoa_r+0x282>
 8007a00:	e8df f002 	tbb	[pc, r2]
 8007a04:	3a2c2e0b 	.word	0x3a2c2e0b
 8007a08:	9b05      	ldr	r3, [sp, #20]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	eba3 0308 	sub.w	r3, r3, r8
 8007a10:	9305      	str	r3, [sp, #20]
 8007a12:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a14:	f1c8 0300 	rsb	r3, r8, #0
 8007a18:	e7e3      	b.n	80079e2 <_dtoa_r+0x1d2>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	9208      	str	r2, [sp, #32]
 8007a1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	dc39      	bgt.n	8007a98 <_dtoa_r+0x288>
 8007a24:	f04f 0b01 	mov.w	fp, #1
 8007a28:	46da      	mov	sl, fp
 8007a2a:	465a      	mov	r2, fp
 8007a2c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007a30:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007a34:	2100      	movs	r1, #0
 8007a36:	2004      	movs	r0, #4
 8007a38:	f100 0614 	add.w	r6, r0, #20
 8007a3c:	4296      	cmp	r6, r2
 8007a3e:	d930      	bls.n	8007aa2 <_dtoa_r+0x292>
 8007a40:	6079      	str	r1, [r7, #4]
 8007a42:	4648      	mov	r0, r9
 8007a44:	9304      	str	r3, [sp, #16]
 8007a46:	f000 fef3 	bl	8008830 <_Balloc>
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d146      	bne.n	8007ae0 <_dtoa_r+0x2d0>
 8007a52:	4b22      	ldr	r3, [pc, #136]	@ (8007adc <_dtoa_r+0x2cc>)
 8007a54:	4602      	mov	r2, r0
 8007a56:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a5a:	e6f2      	b.n	8007842 <_dtoa_r+0x32>
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	e7dd      	b.n	8007a1c <_dtoa_r+0x20c>
 8007a60:	2200      	movs	r2, #0
 8007a62:	9208      	str	r2, [sp, #32]
 8007a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a66:	eb08 0b02 	add.w	fp, r8, r2
 8007a6a:	f10b 0a01 	add.w	sl, fp, #1
 8007a6e:	4652      	mov	r2, sl
 8007a70:	2a01      	cmp	r2, #1
 8007a72:	bfb8      	it	lt
 8007a74:	2201      	movlt	r2, #1
 8007a76:	e7db      	b.n	8007a30 <_dtoa_r+0x220>
 8007a78:	2201      	movs	r2, #1
 8007a7a:	e7f2      	b.n	8007a62 <_dtoa_r+0x252>
 8007a7c:	2401      	movs	r4, #1
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007a84:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007a88:	2100      	movs	r1, #0
 8007a8a:	46da      	mov	sl, fp
 8007a8c:	2212      	movs	r2, #18
 8007a8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a90:	e7ce      	b.n	8007a30 <_dtoa_r+0x220>
 8007a92:	2201      	movs	r2, #1
 8007a94:	9208      	str	r2, [sp, #32]
 8007a96:	e7f5      	b.n	8007a84 <_dtoa_r+0x274>
 8007a98:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007a9c:	46da      	mov	sl, fp
 8007a9e:	465a      	mov	r2, fp
 8007aa0:	e7c6      	b.n	8007a30 <_dtoa_r+0x220>
 8007aa2:	3101      	adds	r1, #1
 8007aa4:	0040      	lsls	r0, r0, #1
 8007aa6:	e7c7      	b.n	8007a38 <_dtoa_r+0x228>
 8007aa8:	636f4361 	.word	0x636f4361
 8007aac:	3fd287a7 	.word	0x3fd287a7
 8007ab0:	8b60c8b3 	.word	0x8b60c8b3
 8007ab4:	3fc68a28 	.word	0x3fc68a28
 8007ab8:	509f79fb 	.word	0x509f79fb
 8007abc:	3fd34413 	.word	0x3fd34413
 8007ac0:	08009891 	.word	0x08009891
 8007ac4:	080098a8 	.word	0x080098a8
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	0800988d 	.word	0x0800988d
 8007ad0:	08009861 	.word	0x08009861
 8007ad4:	08009860 	.word	0x08009860
 8007ad8:	080099b0 	.word	0x080099b0
 8007adc:	08009900 	.word	0x08009900
 8007ae0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ae8:	6010      	str	r0, [r2, #0]
 8007aea:	d86f      	bhi.n	8007bcc <_dtoa_r+0x3bc>
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	d06d      	beq.n	8007bcc <_dtoa_r+0x3bc>
 8007af0:	f1b8 0f00 	cmp.w	r8, #0
 8007af4:	f340 80c2 	ble.w	8007c7c <_dtoa_r+0x46c>
 8007af8:	4aca      	ldr	r2, [pc, #808]	@ (8007e24 <_dtoa_r+0x614>)
 8007afa:	f008 010f 	and.w	r1, r8, #15
 8007afe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007b02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007b06:	ed92 7b00 	vldr	d7, [r2]
 8007b0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007b0e:	f000 80a9 	beq.w	8007c64 <_dtoa_r+0x454>
 8007b12:	4ac5      	ldr	r2, [pc, #788]	@ (8007e28 <_dtoa_r+0x618>)
 8007b14:	ed92 6b08 	vldr	d6, [r2, #32]
 8007b18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007b1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007b20:	f001 010f 	and.w	r1, r1, #15
 8007b24:	2203      	movs	r2, #3
 8007b26:	48c0      	ldr	r0, [pc, #768]	@ (8007e28 <_dtoa_r+0x618>)
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	f040 809d 	bne.w	8007c68 <_dtoa_r+0x458>
 8007b2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007b36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b40:	2900      	cmp	r1, #0
 8007b42:	f000 80c1 	beq.w	8007cc8 <_dtoa_r+0x4b8>
 8007b46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007b4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	f140 80b9 	bpl.w	8007cc8 <_dtoa_r+0x4b8>
 8007b56:	f1ba 0f00 	cmp.w	sl, #0
 8007b5a:	f000 80b5 	beq.w	8007cc8 <_dtoa_r+0x4b8>
 8007b5e:	f1bb 0f00 	cmp.w	fp, #0
 8007b62:	dd31      	ble.n	8007bc8 <_dtoa_r+0x3b8>
 8007b64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b70:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007b74:	9104      	str	r1, [sp, #16]
 8007b76:	3201      	adds	r2, #1
 8007b78:	465c      	mov	r4, fp
 8007b7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007b7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007b82:	ee07 2a90 	vmov	s15, r2
 8007b86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007b8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007b8e:	ee15 2a90 	vmov	r2, s11
 8007b92:	ec51 0b15 	vmov	r0, r1, d5
 8007b96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007b9a:	2c00      	cmp	r4, #0
 8007b9c:	f040 8098 	bne.w	8007cd0 <_dtoa_r+0x4c0>
 8007ba0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007ba4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ba8:	ec41 0b17 	vmov	d7, r0, r1
 8007bac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb4:	f300 8261 	bgt.w	800807a <_dtoa_r+0x86a>
 8007bb8:	eeb1 7b47 	vneg.f64	d7, d7
 8007bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	f100 80f5 	bmi.w	8007db2 <_dtoa_r+0x5a2>
 8007bc8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007bcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	f2c0 812c 	blt.w	8007e2c <_dtoa_r+0x61c>
 8007bd4:	f1b8 0f0e 	cmp.w	r8, #14
 8007bd8:	f300 8128 	bgt.w	8007e2c <_dtoa_r+0x61c>
 8007bdc:	4b91      	ldr	r3, [pc, #580]	@ (8007e24 <_dtoa_r+0x614>)
 8007bde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007be2:	ed93 6b00 	vldr	d6, [r3]
 8007be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da03      	bge.n	8007bf4 <_dtoa_r+0x3e4>
 8007bec:	f1ba 0f00 	cmp.w	sl, #0
 8007bf0:	f340 80d2 	ble.w	8007d98 <_dtoa_r+0x588>
 8007bf4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bfc:	463e      	mov	r6, r7
 8007bfe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007c02:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007c06:	ee15 3a10 	vmov	r3, s10
 8007c0a:	3330      	adds	r3, #48	@ 0x30
 8007c0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c10:	1bf3      	subs	r3, r6, r7
 8007c12:	459a      	cmp	sl, r3
 8007c14:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007c18:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007c1c:	f040 80f8 	bne.w	8007e10 <_dtoa_r+0x600>
 8007c20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007c24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c2c:	f300 80dd 	bgt.w	8007dea <_dtoa_r+0x5da>
 8007c30:	eeb4 7b46 	vcmp.f64	d7, d6
 8007c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c38:	d104      	bne.n	8007c44 <_dtoa_r+0x434>
 8007c3a:	ee15 3a10 	vmov	r3, s10
 8007c3e:	07db      	lsls	r3, r3, #31
 8007c40:	f100 80d3 	bmi.w	8007dea <_dtoa_r+0x5da>
 8007c44:	9901      	ldr	r1, [sp, #4]
 8007c46:	4648      	mov	r0, r9
 8007c48:	f000 fe32 	bl	80088b0 <_Bfree>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c50:	7033      	strb	r3, [r6, #0]
 8007c52:	f108 0301 	add.w	r3, r8, #1
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8304 	beq.w	8008268 <_dtoa_r+0xa58>
 8007c60:	601e      	str	r6, [r3, #0]
 8007c62:	e301      	b.n	8008268 <_dtoa_r+0xa58>
 8007c64:	2202      	movs	r2, #2
 8007c66:	e75e      	b.n	8007b26 <_dtoa_r+0x316>
 8007c68:	07cc      	lsls	r4, r1, #31
 8007c6a:	d504      	bpl.n	8007c76 <_dtoa_r+0x466>
 8007c6c:	ed90 6b00 	vldr	d6, [r0]
 8007c70:	3201      	adds	r2, #1
 8007c72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c76:	1049      	asrs	r1, r1, #1
 8007c78:	3008      	adds	r0, #8
 8007c7a:	e755      	b.n	8007b28 <_dtoa_r+0x318>
 8007c7c:	d022      	beq.n	8007cc4 <_dtoa_r+0x4b4>
 8007c7e:	f1c8 0100 	rsb	r1, r8, #0
 8007c82:	4a68      	ldr	r2, [pc, #416]	@ (8007e24 <_dtoa_r+0x614>)
 8007c84:	f001 000f 	and.w	r0, r1, #15
 8007c88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007c8c:	ed92 7b00 	vldr	d7, [r2]
 8007c90:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007c94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c98:	4863      	ldr	r0, [pc, #396]	@ (8007e28 <_dtoa_r+0x618>)
 8007c9a:	1109      	asrs	r1, r1, #4
 8007c9c:	2400      	movs	r4, #0
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	b929      	cbnz	r1, 8007cae <_dtoa_r+0x49e>
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	f43f af49 	beq.w	8007b3a <_dtoa_r+0x32a>
 8007ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cac:	e745      	b.n	8007b3a <_dtoa_r+0x32a>
 8007cae:	07ce      	lsls	r6, r1, #31
 8007cb0:	d505      	bpl.n	8007cbe <_dtoa_r+0x4ae>
 8007cb2:	ed90 6b00 	vldr	d6, [r0]
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	2401      	movs	r4, #1
 8007cba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cbe:	1049      	asrs	r1, r1, #1
 8007cc0:	3008      	adds	r0, #8
 8007cc2:	e7ed      	b.n	8007ca0 <_dtoa_r+0x490>
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	e738      	b.n	8007b3a <_dtoa_r+0x32a>
 8007cc8:	f8cd 8010 	str.w	r8, [sp, #16]
 8007ccc:	4654      	mov	r4, sl
 8007cce:	e754      	b.n	8007b7a <_dtoa_r+0x36a>
 8007cd0:	4a54      	ldr	r2, [pc, #336]	@ (8007e24 <_dtoa_r+0x614>)
 8007cd2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007cd6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007cda:	9a08      	ldr	r2, [sp, #32]
 8007cdc:	ec41 0b17 	vmov	d7, r0, r1
 8007ce0:	443c      	add	r4, r7
 8007ce2:	b34a      	cbz	r2, 8007d38 <_dtoa_r+0x528>
 8007ce4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007ce8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007cec:	463e      	mov	r6, r7
 8007cee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007cf2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007cf6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cfa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007cfe:	ee14 2a90 	vmov	r2, s9
 8007d02:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d06:	3230      	adds	r2, #48	@ 0x30
 8007d08:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d14:	f806 2b01 	strb.w	r2, [r6], #1
 8007d18:	d438      	bmi.n	8007d8c <_dtoa_r+0x57c>
 8007d1a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007d1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d26:	d462      	bmi.n	8007dee <_dtoa_r+0x5de>
 8007d28:	42a6      	cmp	r6, r4
 8007d2a:	f43f af4d 	beq.w	8007bc8 <_dtoa_r+0x3b8>
 8007d2e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007d32:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d36:	e7e0      	b.n	8007cfa <_dtoa_r+0x4ea>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	463e      	mov	r6, r7
 8007d3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d40:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007d44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007d48:	ee14 2a90 	vmov	r2, s9
 8007d4c:	3230      	adds	r2, #48	@ 0x30
 8007d4e:	f806 2b01 	strb.w	r2, [r6], #1
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007d58:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007d5c:	d119      	bne.n	8007d92 <_dtoa_r+0x582>
 8007d5e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007d62:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007d66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6e:	dc3e      	bgt.n	8007dee <_dtoa_r+0x5de>
 8007d70:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007d74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7c:	f57f af24 	bpl.w	8007bc8 <_dtoa_r+0x3b8>
 8007d80:	460e      	mov	r6, r1
 8007d82:	3901      	subs	r1, #1
 8007d84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d88:	2b30      	cmp	r3, #48	@ 0x30
 8007d8a:	d0f9      	beq.n	8007d80 <_dtoa_r+0x570>
 8007d8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d90:	e758      	b.n	8007c44 <_dtoa_r+0x434>
 8007d92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007d96:	e7d5      	b.n	8007d44 <_dtoa_r+0x534>
 8007d98:	d10b      	bne.n	8007db2 <_dtoa_r+0x5a2>
 8007d9a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007d9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007da2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007da6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dae:	f2c0 8161 	blt.w	8008074 <_dtoa_r+0x864>
 8007db2:	2400      	movs	r4, #0
 8007db4:	4625      	mov	r5, r4
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	43db      	mvns	r3, r3
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	463e      	mov	r6, r7
 8007dbe:	f04f 0800 	mov.w	r8, #0
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4648      	mov	r0, r9
 8007dc6:	f000 fd73 	bl	80088b0 <_Bfree>
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	d0de      	beq.n	8007d8c <_dtoa_r+0x57c>
 8007dce:	f1b8 0f00 	cmp.w	r8, #0
 8007dd2:	d005      	beq.n	8007de0 <_dtoa_r+0x5d0>
 8007dd4:	45a8      	cmp	r8, r5
 8007dd6:	d003      	beq.n	8007de0 <_dtoa_r+0x5d0>
 8007dd8:	4641      	mov	r1, r8
 8007dda:	4648      	mov	r0, r9
 8007ddc:	f000 fd68 	bl	80088b0 <_Bfree>
 8007de0:	4629      	mov	r1, r5
 8007de2:	4648      	mov	r0, r9
 8007de4:	f000 fd64 	bl	80088b0 <_Bfree>
 8007de8:	e7d0      	b.n	8007d8c <_dtoa_r+0x57c>
 8007dea:	f8cd 8010 	str.w	r8, [sp, #16]
 8007dee:	4633      	mov	r3, r6
 8007df0:	461e      	mov	r6, r3
 8007df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df6:	2a39      	cmp	r2, #57	@ 0x39
 8007df8:	d106      	bne.n	8007e08 <_dtoa_r+0x5f8>
 8007dfa:	429f      	cmp	r7, r3
 8007dfc:	d1f8      	bne.n	8007df0 <_dtoa_r+0x5e0>
 8007dfe:	9a04      	ldr	r2, [sp, #16]
 8007e00:	3201      	adds	r2, #1
 8007e02:	9204      	str	r2, [sp, #16]
 8007e04:	2230      	movs	r2, #48	@ 0x30
 8007e06:	703a      	strb	r2, [r7, #0]
 8007e08:	781a      	ldrb	r2, [r3, #0]
 8007e0a:	3201      	adds	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e7bd      	b.n	8007d8c <_dtoa_r+0x57c>
 8007e10:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1c:	f47f aeef 	bne.w	8007bfe <_dtoa_r+0x3ee>
 8007e20:	e710      	b.n	8007c44 <_dtoa_r+0x434>
 8007e22:	bf00      	nop
 8007e24:	080099b0 	.word	0x080099b0
 8007e28:	08009988 	.word	0x08009988
 8007e2c:	9908      	ldr	r1, [sp, #32]
 8007e2e:	2900      	cmp	r1, #0
 8007e30:	f000 80e3 	beq.w	8007ffa <_dtoa_r+0x7ea>
 8007e34:	9907      	ldr	r1, [sp, #28]
 8007e36:	2901      	cmp	r1, #1
 8007e38:	f300 80c8 	bgt.w	8007fcc <_dtoa_r+0x7bc>
 8007e3c:	2d00      	cmp	r5, #0
 8007e3e:	f000 80c1 	beq.w	8007fc4 <_dtoa_r+0x7b4>
 8007e42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007e46:	9e05      	ldr	r6, [sp, #20]
 8007e48:	461c      	mov	r4, r3
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	9b05      	ldr	r3, [sp, #20]
 8007e4e:	4413      	add	r3, r2
 8007e50:	9305      	str	r3, [sp, #20]
 8007e52:	9b06      	ldr	r3, [sp, #24]
 8007e54:	2101      	movs	r1, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	4648      	mov	r0, r9
 8007e5a:	9306      	str	r3, [sp, #24]
 8007e5c:	f000 fddc 	bl	8008a18 <__i2b>
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	4605      	mov	r5, r0
 8007e64:	b166      	cbz	r6, 8007e80 <_dtoa_r+0x670>
 8007e66:	9a06      	ldr	r2, [sp, #24]
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	dd09      	ble.n	8007e80 <_dtoa_r+0x670>
 8007e6c:	42b2      	cmp	r2, r6
 8007e6e:	9905      	ldr	r1, [sp, #20]
 8007e70:	bfa8      	it	ge
 8007e72:	4632      	movge	r2, r6
 8007e74:	1a89      	subs	r1, r1, r2
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	9906      	ldr	r1, [sp, #24]
 8007e7a:	1ab6      	subs	r6, r6, r2
 8007e7c:	1a8a      	subs	r2, r1, r2
 8007e7e:	9206      	str	r2, [sp, #24]
 8007e80:	b1fb      	cbz	r3, 8007ec2 <_dtoa_r+0x6b2>
 8007e82:	9a08      	ldr	r2, [sp, #32]
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	f000 80bc 	beq.w	8008002 <_dtoa_r+0x7f2>
 8007e8a:	b19c      	cbz	r4, 8007eb4 <_dtoa_r+0x6a4>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4648      	mov	r0, r9
 8007e92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e94:	f000 fe80 	bl	8008b98 <__pow5mult>
 8007e98:	9a01      	ldr	r2, [sp, #4]
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	4648      	mov	r0, r9
 8007ea0:	f000 fdd0 	bl	8008a44 <__multiply>
 8007ea4:	9901      	ldr	r1, [sp, #4]
 8007ea6:	9004      	str	r0, [sp, #16]
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f000 fd01 	bl	80088b0 <_Bfree>
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eb2:	9201      	str	r2, [sp, #4]
 8007eb4:	1b1a      	subs	r2, r3, r4
 8007eb6:	d004      	beq.n	8007ec2 <_dtoa_r+0x6b2>
 8007eb8:	9901      	ldr	r1, [sp, #4]
 8007eba:	4648      	mov	r0, r9
 8007ebc:	f000 fe6c 	bl	8008b98 <__pow5mult>
 8007ec0:	9001      	str	r0, [sp, #4]
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	4648      	mov	r0, r9
 8007ec6:	f000 fda7 	bl	8008a18 <__i2b>
 8007eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ecc:	4604      	mov	r4, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 81d0 	beq.w	8008274 <_dtoa_r+0xa64>
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	4648      	mov	r0, r9
 8007eda:	f000 fe5d 	bl	8008b98 <__pow5mult>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	f300 8095 	bgt.w	8008012 <_dtoa_r+0x802>
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f040 808b 	bne.w	8008006 <_dtoa_r+0x7f6>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	f040 8087 	bne.w	800800a <_dtoa_r+0x7fa>
 8007efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007f00:	0d12      	lsrs	r2, r2, #20
 8007f02:	0512      	lsls	r2, r2, #20
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f000 8082 	beq.w	800800e <_dtoa_r+0x7fe>
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	9305      	str	r3, [sp, #20]
 8007f10:	9b06      	ldr	r3, [sp, #24]
 8007f12:	3301      	adds	r3, #1
 8007f14:	9306      	str	r3, [sp, #24]
 8007f16:	2301      	movs	r3, #1
 8007f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 81af 	beq.w	8008280 <_dtoa_r+0xa70>
 8007f22:	6922      	ldr	r2, [r4, #16]
 8007f24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f28:	6910      	ldr	r0, [r2, #16]
 8007f2a:	f000 fd29 	bl	8008980 <__hi0bits>
 8007f2e:	f1c0 0020 	rsb	r0, r0, #32
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	4418      	add	r0, r3
 8007f36:	f010 001f 	ands.w	r0, r0, #31
 8007f3a:	d076      	beq.n	800802a <_dtoa_r+0x81a>
 8007f3c:	f1c0 0220 	rsb	r2, r0, #32
 8007f40:	2a04      	cmp	r2, #4
 8007f42:	dd69      	ble.n	8008018 <_dtoa_r+0x808>
 8007f44:	9b05      	ldr	r3, [sp, #20]
 8007f46:	f1c0 001c 	rsb	r0, r0, #28
 8007f4a:	4403      	add	r3, r0
 8007f4c:	9305      	str	r3, [sp, #20]
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	4406      	add	r6, r0
 8007f52:	4403      	add	r3, r0
 8007f54:	9306      	str	r3, [sp, #24]
 8007f56:	9b05      	ldr	r3, [sp, #20]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dd05      	ble.n	8007f68 <_dtoa_r+0x758>
 8007f5c:	9901      	ldr	r1, [sp, #4]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4648      	mov	r0, r9
 8007f62:	f000 fe73 	bl	8008c4c <__lshift>
 8007f66:	9001      	str	r0, [sp, #4]
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dd05      	ble.n	8007f7a <_dtoa_r+0x76a>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	461a      	mov	r2, r3
 8007f72:	4648      	mov	r0, r9
 8007f74:	f000 fe6a 	bl	8008c4c <__lshift>
 8007f78:	4604      	mov	r4, r0
 8007f7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d056      	beq.n	800802e <_dtoa_r+0x81e>
 8007f80:	9801      	ldr	r0, [sp, #4]
 8007f82:	4621      	mov	r1, r4
 8007f84:	f000 fece 	bl	8008d24 <__mcmp>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	da50      	bge.n	800802e <_dtoa_r+0x81e>
 8007f8c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	9901      	ldr	r1, [sp, #4]
 8007f94:	2300      	movs	r3, #0
 8007f96:	220a      	movs	r2, #10
 8007f98:	4648      	mov	r0, r9
 8007f9a:	f000 fcab 	bl	80088f4 <__multadd>
 8007f9e:	9b08      	ldr	r3, [sp, #32]
 8007fa0:	9001      	str	r0, [sp, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 816e 	beq.w	8008284 <_dtoa_r+0xa74>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	2300      	movs	r3, #0
 8007fac:	220a      	movs	r2, #10
 8007fae:	4648      	mov	r0, r9
 8007fb0:	f000 fca0 	bl	80088f4 <__multadd>
 8007fb4:	f1bb 0f00 	cmp.w	fp, #0
 8007fb8:	4605      	mov	r5, r0
 8007fba:	dc64      	bgt.n	8008086 <_dtoa_r+0x876>
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dc3e      	bgt.n	8008040 <_dtoa_r+0x830>
 8007fc2:	e060      	b.n	8008086 <_dtoa_r+0x876>
 8007fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fca:	e73c      	b.n	8007e46 <_dtoa_r+0x636>
 8007fcc:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	bfbf      	itttt	lt
 8007fd4:	1ae2      	sublt	r2, r4, r3
 8007fd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fd8:	189b      	addlt	r3, r3, r2
 8007fda:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007fdc:	bfae      	itee	ge
 8007fde:	1b1c      	subge	r4, r3, r4
 8007fe0:	4623      	movlt	r3, r4
 8007fe2:	2400      	movlt	r4, #0
 8007fe4:	f1ba 0f00 	cmp.w	sl, #0
 8007fe8:	bfb5      	itete	lt
 8007fea:	9a05      	ldrlt	r2, [sp, #20]
 8007fec:	9e05      	ldrge	r6, [sp, #20]
 8007fee:	eba2 060a 	sublt.w	r6, r2, sl
 8007ff2:	4652      	movge	r2, sl
 8007ff4:	bfb8      	it	lt
 8007ff6:	2200      	movlt	r2, #0
 8007ff8:	e727      	b.n	8007e4a <_dtoa_r+0x63a>
 8007ffa:	9e05      	ldr	r6, [sp, #20]
 8007ffc:	9d08      	ldr	r5, [sp, #32]
 8007ffe:	461c      	mov	r4, r3
 8008000:	e730      	b.n	8007e64 <_dtoa_r+0x654>
 8008002:	461a      	mov	r2, r3
 8008004:	e758      	b.n	8007eb8 <_dtoa_r+0x6a8>
 8008006:	2300      	movs	r3, #0
 8008008:	e786      	b.n	8007f18 <_dtoa_r+0x708>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	e784      	b.n	8007f18 <_dtoa_r+0x708>
 800800e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008010:	e783      	b.n	8007f1a <_dtoa_r+0x70a>
 8008012:	2300      	movs	r3, #0
 8008014:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008016:	e784      	b.n	8007f22 <_dtoa_r+0x712>
 8008018:	d09d      	beq.n	8007f56 <_dtoa_r+0x746>
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	321c      	adds	r2, #28
 800801e:	4413      	add	r3, r2
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	9b06      	ldr	r3, [sp, #24]
 8008024:	4416      	add	r6, r2
 8008026:	4413      	add	r3, r2
 8008028:	e794      	b.n	8007f54 <_dtoa_r+0x744>
 800802a:	4602      	mov	r2, r0
 800802c:	e7f5      	b.n	800801a <_dtoa_r+0x80a>
 800802e:	f1ba 0f00 	cmp.w	sl, #0
 8008032:	f8cd 8010 	str.w	r8, [sp, #16]
 8008036:	46d3      	mov	fp, sl
 8008038:	dc21      	bgt.n	800807e <_dtoa_r+0x86e>
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b02      	cmp	r3, #2
 800803e:	dd1e      	ble.n	800807e <_dtoa_r+0x86e>
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	f47f aeb7 	bne.w	8007db6 <_dtoa_r+0x5a6>
 8008048:	4621      	mov	r1, r4
 800804a:	465b      	mov	r3, fp
 800804c:	2205      	movs	r2, #5
 800804e:	4648      	mov	r0, r9
 8008050:	f000 fc50 	bl	80088f4 <__multadd>
 8008054:	4601      	mov	r1, r0
 8008056:	4604      	mov	r4, r0
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	f000 fe63 	bl	8008d24 <__mcmp>
 800805e:	2800      	cmp	r0, #0
 8008060:	f77f aea9 	ble.w	8007db6 <_dtoa_r+0x5a6>
 8008064:	463e      	mov	r6, r7
 8008066:	2331      	movs	r3, #49	@ 0x31
 8008068:	f806 3b01 	strb.w	r3, [r6], #1
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	3301      	adds	r3, #1
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	e6a4      	b.n	8007dbe <_dtoa_r+0x5ae>
 8008074:	f8cd 8010 	str.w	r8, [sp, #16]
 8008078:	4654      	mov	r4, sl
 800807a:	4625      	mov	r5, r4
 800807c:	e7f2      	b.n	8008064 <_dtoa_r+0x854>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8103 	beq.w	800828c <_dtoa_r+0xa7c>
 8008086:	2e00      	cmp	r6, #0
 8008088:	dd05      	ble.n	8008096 <_dtoa_r+0x886>
 800808a:	4629      	mov	r1, r5
 800808c:	4632      	mov	r2, r6
 800808e:	4648      	mov	r0, r9
 8008090:	f000 fddc 	bl	8008c4c <__lshift>
 8008094:	4605      	mov	r5, r0
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d058      	beq.n	800814e <_dtoa_r+0x93e>
 800809c:	6869      	ldr	r1, [r5, #4]
 800809e:	4648      	mov	r0, r9
 80080a0:	f000 fbc6 	bl	8008830 <_Balloc>
 80080a4:	4606      	mov	r6, r0
 80080a6:	b928      	cbnz	r0, 80080b4 <_dtoa_r+0x8a4>
 80080a8:	4b82      	ldr	r3, [pc, #520]	@ (80082b4 <_dtoa_r+0xaa4>)
 80080aa:	4602      	mov	r2, r0
 80080ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080b0:	f7ff bbc7 	b.w	8007842 <_dtoa_r+0x32>
 80080b4:	692a      	ldr	r2, [r5, #16]
 80080b6:	3202      	adds	r2, #2
 80080b8:	0092      	lsls	r2, r2, #2
 80080ba:	f105 010c 	add.w	r1, r5, #12
 80080be:	300c      	adds	r0, #12
 80080c0:	f001 f81a 	bl	80090f8 <memcpy>
 80080c4:	2201      	movs	r2, #1
 80080c6:	4631      	mov	r1, r6
 80080c8:	4648      	mov	r0, r9
 80080ca:	f000 fdbf 	bl	8008c4c <__lshift>
 80080ce:	1c7b      	adds	r3, r7, #1
 80080d0:	9305      	str	r3, [sp, #20]
 80080d2:	eb07 030b 	add.w	r3, r7, fp
 80080d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	46a8      	mov	r8, r5
 80080e0:	9308      	str	r3, [sp, #32]
 80080e2:	4605      	mov	r5, r0
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	9801      	ldr	r0, [sp, #4]
 80080e8:	4621      	mov	r1, r4
 80080ea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80080ee:	f7ff fb06 	bl	80076fe <quorem>
 80080f2:	4641      	mov	r1, r8
 80080f4:	9002      	str	r0, [sp, #8]
 80080f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80080fa:	9801      	ldr	r0, [sp, #4]
 80080fc:	f000 fe12 	bl	8008d24 <__mcmp>
 8008100:	462a      	mov	r2, r5
 8008102:	9006      	str	r0, [sp, #24]
 8008104:	4621      	mov	r1, r4
 8008106:	4648      	mov	r0, r9
 8008108:	f000 fe28 	bl	8008d5c <__mdiff>
 800810c:	68c2      	ldr	r2, [r0, #12]
 800810e:	4606      	mov	r6, r0
 8008110:	b9fa      	cbnz	r2, 8008152 <_dtoa_r+0x942>
 8008112:	4601      	mov	r1, r0
 8008114:	9801      	ldr	r0, [sp, #4]
 8008116:	f000 fe05 	bl	8008d24 <__mcmp>
 800811a:	4602      	mov	r2, r0
 800811c:	4631      	mov	r1, r6
 800811e:	4648      	mov	r0, r9
 8008120:	920a      	str	r2, [sp, #40]	@ 0x28
 8008122:	f000 fbc5 	bl	80088b0 <_Bfree>
 8008126:	9b07      	ldr	r3, [sp, #28]
 8008128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800812a:	9e05      	ldr	r6, [sp, #20]
 800812c:	ea43 0102 	orr.w	r1, r3, r2
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	4319      	orrs	r1, r3
 8008134:	d10f      	bne.n	8008156 <_dtoa_r+0x946>
 8008136:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800813a:	d028      	beq.n	800818e <_dtoa_r+0x97e>
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd02      	ble.n	8008148 <_dtoa_r+0x938>
 8008142:	9b02      	ldr	r3, [sp, #8]
 8008144:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008148:	f88b a000 	strb.w	sl, [fp]
 800814c:	e639      	b.n	8007dc2 <_dtoa_r+0x5b2>
 800814e:	4628      	mov	r0, r5
 8008150:	e7bd      	b.n	80080ce <_dtoa_r+0x8be>
 8008152:	2201      	movs	r2, #1
 8008154:	e7e2      	b.n	800811c <_dtoa_r+0x90c>
 8008156:	9b06      	ldr	r3, [sp, #24]
 8008158:	2b00      	cmp	r3, #0
 800815a:	db04      	blt.n	8008166 <_dtoa_r+0x956>
 800815c:	9907      	ldr	r1, [sp, #28]
 800815e:	430b      	orrs	r3, r1
 8008160:	9908      	ldr	r1, [sp, #32]
 8008162:	430b      	orrs	r3, r1
 8008164:	d120      	bne.n	80081a8 <_dtoa_r+0x998>
 8008166:	2a00      	cmp	r2, #0
 8008168:	ddee      	ble.n	8008148 <_dtoa_r+0x938>
 800816a:	9901      	ldr	r1, [sp, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	4648      	mov	r0, r9
 8008170:	f000 fd6c 	bl	8008c4c <__lshift>
 8008174:	4621      	mov	r1, r4
 8008176:	9001      	str	r0, [sp, #4]
 8008178:	f000 fdd4 	bl	8008d24 <__mcmp>
 800817c:	2800      	cmp	r0, #0
 800817e:	dc03      	bgt.n	8008188 <_dtoa_r+0x978>
 8008180:	d1e2      	bne.n	8008148 <_dtoa_r+0x938>
 8008182:	f01a 0f01 	tst.w	sl, #1
 8008186:	d0df      	beq.n	8008148 <_dtoa_r+0x938>
 8008188:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800818c:	d1d9      	bne.n	8008142 <_dtoa_r+0x932>
 800818e:	2339      	movs	r3, #57	@ 0x39
 8008190:	f88b 3000 	strb.w	r3, [fp]
 8008194:	4633      	mov	r3, r6
 8008196:	461e      	mov	r6, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800819e:	2a39      	cmp	r2, #57	@ 0x39
 80081a0:	d053      	beq.n	800824a <_dtoa_r+0xa3a>
 80081a2:	3201      	adds	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	e60c      	b.n	8007dc2 <_dtoa_r+0x5b2>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	dd07      	ble.n	80081bc <_dtoa_r+0x9ac>
 80081ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80081b0:	d0ed      	beq.n	800818e <_dtoa_r+0x97e>
 80081b2:	f10a 0301 	add.w	r3, sl, #1
 80081b6:	f88b 3000 	strb.w	r3, [fp]
 80081ba:	e602      	b.n	8007dc2 <_dtoa_r+0x5b2>
 80081bc:	9b05      	ldr	r3, [sp, #20]
 80081be:	9a05      	ldr	r2, [sp, #20]
 80081c0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80081c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d029      	beq.n	800821e <_dtoa_r+0xa0e>
 80081ca:	9901      	ldr	r1, [sp, #4]
 80081cc:	2300      	movs	r3, #0
 80081ce:	220a      	movs	r2, #10
 80081d0:	4648      	mov	r0, r9
 80081d2:	f000 fb8f 	bl	80088f4 <__multadd>
 80081d6:	45a8      	cmp	r8, r5
 80081d8:	9001      	str	r0, [sp, #4]
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	f04f 020a 	mov.w	r2, #10
 80081e2:	4641      	mov	r1, r8
 80081e4:	4648      	mov	r0, r9
 80081e6:	d107      	bne.n	80081f8 <_dtoa_r+0x9e8>
 80081e8:	f000 fb84 	bl	80088f4 <__multadd>
 80081ec:	4680      	mov	r8, r0
 80081ee:	4605      	mov	r5, r0
 80081f0:	9b05      	ldr	r3, [sp, #20]
 80081f2:	3301      	adds	r3, #1
 80081f4:	9305      	str	r3, [sp, #20]
 80081f6:	e775      	b.n	80080e4 <_dtoa_r+0x8d4>
 80081f8:	f000 fb7c 	bl	80088f4 <__multadd>
 80081fc:	4629      	mov	r1, r5
 80081fe:	4680      	mov	r8, r0
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	4648      	mov	r0, r9
 8008206:	f000 fb75 	bl	80088f4 <__multadd>
 800820a:	4605      	mov	r5, r0
 800820c:	e7f0      	b.n	80081f0 <_dtoa_r+0x9e0>
 800820e:	f1bb 0f00 	cmp.w	fp, #0
 8008212:	bfcc      	ite	gt
 8008214:	465e      	movgt	r6, fp
 8008216:	2601      	movle	r6, #1
 8008218:	443e      	add	r6, r7
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	9901      	ldr	r1, [sp, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	4648      	mov	r0, r9
 8008224:	f000 fd12 	bl	8008c4c <__lshift>
 8008228:	4621      	mov	r1, r4
 800822a:	9001      	str	r0, [sp, #4]
 800822c:	f000 fd7a 	bl	8008d24 <__mcmp>
 8008230:	2800      	cmp	r0, #0
 8008232:	dcaf      	bgt.n	8008194 <_dtoa_r+0x984>
 8008234:	d102      	bne.n	800823c <_dtoa_r+0xa2c>
 8008236:	f01a 0f01 	tst.w	sl, #1
 800823a:	d1ab      	bne.n	8008194 <_dtoa_r+0x984>
 800823c:	4633      	mov	r3, r6
 800823e:	461e      	mov	r6, r3
 8008240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008244:	2a30      	cmp	r2, #48	@ 0x30
 8008246:	d0fa      	beq.n	800823e <_dtoa_r+0xa2e>
 8008248:	e5bb      	b.n	8007dc2 <_dtoa_r+0x5b2>
 800824a:	429f      	cmp	r7, r3
 800824c:	d1a3      	bne.n	8008196 <_dtoa_r+0x986>
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	3301      	adds	r3, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	2331      	movs	r3, #49	@ 0x31
 8008256:	703b      	strb	r3, [r7, #0]
 8008258:	e5b3      	b.n	8007dc2 <_dtoa_r+0x5b2>
 800825a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800825c:	4f16      	ldr	r7, [pc, #88]	@ (80082b8 <_dtoa_r+0xaa8>)
 800825e:	b11b      	cbz	r3, 8008268 <_dtoa_r+0xa58>
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	4638      	mov	r0, r7
 800826a:	b011      	add	sp, #68	@ 0x44
 800826c:	ecbd 8b02 	vpop	{d8}
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	9b07      	ldr	r3, [sp, #28]
 8008276:	2b01      	cmp	r3, #1
 8008278:	f77f ae36 	ble.w	8007ee8 <_dtoa_r+0x6d8>
 800827c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800827e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008280:	2001      	movs	r0, #1
 8008282:	e656      	b.n	8007f32 <_dtoa_r+0x722>
 8008284:	f1bb 0f00 	cmp.w	fp, #0
 8008288:	f77f aed7 	ble.w	800803a <_dtoa_r+0x82a>
 800828c:	463e      	mov	r6, r7
 800828e:	9801      	ldr	r0, [sp, #4]
 8008290:	4621      	mov	r1, r4
 8008292:	f7ff fa34 	bl	80076fe <quorem>
 8008296:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800829a:	f806 ab01 	strb.w	sl, [r6], #1
 800829e:	1bf2      	subs	r2, r6, r7
 80082a0:	4593      	cmp	fp, r2
 80082a2:	ddb4      	ble.n	800820e <_dtoa_r+0x9fe>
 80082a4:	9901      	ldr	r1, [sp, #4]
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fb22 	bl	80088f4 <__multadd>
 80082b0:	9001      	str	r0, [sp, #4]
 80082b2:	e7ec      	b.n	800828e <_dtoa_r+0xa7e>
 80082b4:	08009900 	.word	0x08009900
 80082b8:	08009884 	.word	0x08009884

080082bc <__ssputs_r>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	688e      	ldr	r6, [r1, #8]
 80082c2:	461f      	mov	r7, r3
 80082c4:	42be      	cmp	r6, r7
 80082c6:	680b      	ldr	r3, [r1, #0]
 80082c8:	4682      	mov	sl, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	4690      	mov	r8, r2
 80082ce:	d82d      	bhi.n	800832c <__ssputs_r+0x70>
 80082d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082d8:	d026      	beq.n	8008328 <__ssputs_r+0x6c>
 80082da:	6965      	ldr	r5, [r4, #20]
 80082dc:	6909      	ldr	r1, [r1, #16]
 80082de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082e2:	eba3 0901 	sub.w	r9, r3, r1
 80082e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ea:	1c7b      	adds	r3, r7, #1
 80082ec:	444b      	add	r3, r9
 80082ee:	106d      	asrs	r5, r5, #1
 80082f0:	429d      	cmp	r5, r3
 80082f2:	bf38      	it	cc
 80082f4:	461d      	movcc	r5, r3
 80082f6:	0553      	lsls	r3, r2, #21
 80082f8:	d527      	bpl.n	800834a <__ssputs_r+0x8e>
 80082fa:	4629      	mov	r1, r5
 80082fc:	f000 f960 	bl	80085c0 <_malloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	b360      	cbz	r0, 800835e <__ssputs_r+0xa2>
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	464a      	mov	r2, r9
 8008308:	f000 fef6 	bl	80090f8 <memcpy>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	6126      	str	r6, [r4, #16]
 800831a:	6165      	str	r5, [r4, #20]
 800831c:	444e      	add	r6, r9
 800831e:	eba5 0509 	sub.w	r5, r5, r9
 8008322:	6026      	str	r6, [r4, #0]
 8008324:	60a5      	str	r5, [r4, #8]
 8008326:	463e      	mov	r6, r7
 8008328:	42be      	cmp	r6, r7
 800832a:	d900      	bls.n	800832e <__ssputs_r+0x72>
 800832c:	463e      	mov	r6, r7
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	4632      	mov	r2, r6
 8008332:	4641      	mov	r1, r8
 8008334:	f000 fe6f 	bl	8009016 <memmove>
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	1b9b      	subs	r3, r3, r6
 800833c:	60a3      	str	r3, [r4, #8]
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	4433      	add	r3, r6
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	2000      	movs	r0, #0
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	462a      	mov	r2, r5
 800834c:	f000 fe35 	bl	8008fba <_realloc_r>
 8008350:	4606      	mov	r6, r0
 8008352:	2800      	cmp	r0, #0
 8008354:	d1e0      	bne.n	8008318 <__ssputs_r+0x5c>
 8008356:	6921      	ldr	r1, [r4, #16]
 8008358:	4650      	mov	r0, sl
 800835a:	f000 ff0d 	bl	8009178 <_free_r>
 800835e:	230c      	movs	r3, #12
 8008360:	f8ca 3000 	str.w	r3, [sl]
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008370:	e7e9      	b.n	8008346 <__ssputs_r+0x8a>
	...

08008374 <_svfiprintf_r>:
 8008374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	4698      	mov	r8, r3
 800837a:	898b      	ldrh	r3, [r1, #12]
 800837c:	061b      	lsls	r3, r3, #24
 800837e:	b09d      	sub	sp, #116	@ 0x74
 8008380:	4607      	mov	r7, r0
 8008382:	460d      	mov	r5, r1
 8008384:	4614      	mov	r4, r2
 8008386:	d510      	bpl.n	80083aa <_svfiprintf_r+0x36>
 8008388:	690b      	ldr	r3, [r1, #16]
 800838a:	b973      	cbnz	r3, 80083aa <_svfiprintf_r+0x36>
 800838c:	2140      	movs	r1, #64	@ 0x40
 800838e:	f000 f917 	bl	80085c0 <_malloc_r>
 8008392:	6028      	str	r0, [r5, #0]
 8008394:	6128      	str	r0, [r5, #16]
 8008396:	b930      	cbnz	r0, 80083a6 <_svfiprintf_r+0x32>
 8008398:	230c      	movs	r3, #12
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083a0:	b01d      	add	sp, #116	@ 0x74
 80083a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a6:	2340      	movs	r3, #64	@ 0x40
 80083a8:	616b      	str	r3, [r5, #20]
 80083aa:	2300      	movs	r3, #0
 80083ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ae:	2320      	movs	r3, #32
 80083b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80083b8:	2330      	movs	r3, #48	@ 0x30
 80083ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008558 <_svfiprintf_r+0x1e4>
 80083be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c2:	f04f 0901 	mov.w	r9, #1
 80083c6:	4623      	mov	r3, r4
 80083c8:	469a      	mov	sl, r3
 80083ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ce:	b10a      	cbz	r2, 80083d4 <_svfiprintf_r+0x60>
 80083d0:	2a25      	cmp	r2, #37	@ 0x25
 80083d2:	d1f9      	bne.n	80083c8 <_svfiprintf_r+0x54>
 80083d4:	ebba 0b04 	subs.w	fp, sl, r4
 80083d8:	d00b      	beq.n	80083f2 <_svfiprintf_r+0x7e>
 80083da:	465b      	mov	r3, fp
 80083dc:	4622      	mov	r2, r4
 80083de:	4629      	mov	r1, r5
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7ff ff6b 	bl	80082bc <__ssputs_r>
 80083e6:	3001      	adds	r0, #1
 80083e8:	f000 80a7 	beq.w	800853a <_svfiprintf_r+0x1c6>
 80083ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ee:	445a      	add	r2, fp
 80083f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f2:	f89a 3000 	ldrb.w	r3, [sl]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 809f 	beq.w	800853a <_svfiprintf_r+0x1c6>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008406:	f10a 0a01 	add.w	sl, sl, #1
 800840a:	9304      	str	r3, [sp, #16]
 800840c:	9307      	str	r3, [sp, #28]
 800840e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008412:	931a      	str	r3, [sp, #104]	@ 0x68
 8008414:	4654      	mov	r4, sl
 8008416:	2205      	movs	r2, #5
 8008418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800841c:	484e      	ldr	r0, [pc, #312]	@ (8008558 <_svfiprintf_r+0x1e4>)
 800841e:	f7f7 ff0f 	bl	8000240 <memchr>
 8008422:	9a04      	ldr	r2, [sp, #16]
 8008424:	b9d8      	cbnz	r0, 800845e <_svfiprintf_r+0xea>
 8008426:	06d0      	lsls	r0, r2, #27
 8008428:	bf44      	itt	mi
 800842a:	2320      	movmi	r3, #32
 800842c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008430:	0711      	lsls	r1, r2, #28
 8008432:	bf44      	itt	mi
 8008434:	232b      	movmi	r3, #43	@ 0x2b
 8008436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800843a:	f89a 3000 	ldrb.w	r3, [sl]
 800843e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008440:	d015      	beq.n	800846e <_svfiprintf_r+0xfa>
 8008442:	9a07      	ldr	r2, [sp, #28]
 8008444:	4654      	mov	r4, sl
 8008446:	2000      	movs	r0, #0
 8008448:	f04f 0c0a 	mov.w	ip, #10
 800844c:	4621      	mov	r1, r4
 800844e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008452:	3b30      	subs	r3, #48	@ 0x30
 8008454:	2b09      	cmp	r3, #9
 8008456:	d94b      	bls.n	80084f0 <_svfiprintf_r+0x17c>
 8008458:	b1b0      	cbz	r0, 8008488 <_svfiprintf_r+0x114>
 800845a:	9207      	str	r2, [sp, #28]
 800845c:	e014      	b.n	8008488 <_svfiprintf_r+0x114>
 800845e:	eba0 0308 	sub.w	r3, r0, r8
 8008462:	fa09 f303 	lsl.w	r3, r9, r3
 8008466:	4313      	orrs	r3, r2
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	46a2      	mov	sl, r4
 800846c:	e7d2      	b.n	8008414 <_svfiprintf_r+0xa0>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	9103      	str	r1, [sp, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfbb      	ittet	lt
 800847a:	425b      	neglt	r3, r3
 800847c:	f042 0202 	orrlt.w	r2, r2, #2
 8008480:	9307      	strge	r3, [sp, #28]
 8008482:	9307      	strlt	r3, [sp, #28]
 8008484:	bfb8      	it	lt
 8008486:	9204      	strlt	r2, [sp, #16]
 8008488:	7823      	ldrb	r3, [r4, #0]
 800848a:	2b2e      	cmp	r3, #46	@ 0x2e
 800848c:	d10a      	bne.n	80084a4 <_svfiprintf_r+0x130>
 800848e:	7863      	ldrb	r3, [r4, #1]
 8008490:	2b2a      	cmp	r3, #42	@ 0x2a
 8008492:	d132      	bne.n	80084fa <_svfiprintf_r+0x186>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9203      	str	r2, [sp, #12]
 800849c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084a0:	3402      	adds	r4, #2
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008568 <_svfiprintf_r+0x1f4>
 80084a8:	7821      	ldrb	r1, [r4, #0]
 80084aa:	2203      	movs	r2, #3
 80084ac:	4650      	mov	r0, sl
 80084ae:	f7f7 fec7 	bl	8000240 <memchr>
 80084b2:	b138      	cbz	r0, 80084c4 <_svfiprintf_r+0x150>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	eba0 000a 	sub.w	r0, r0, sl
 80084ba:	2240      	movs	r2, #64	@ 0x40
 80084bc:	4082      	lsls	r2, r0
 80084be:	4313      	orrs	r3, r2
 80084c0:	3401      	adds	r4, #1
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	4824      	ldr	r0, [pc, #144]	@ (800855c <_svfiprintf_r+0x1e8>)
 80084ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084ce:	2206      	movs	r2, #6
 80084d0:	f7f7 feb6 	bl	8000240 <memchr>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d036      	beq.n	8008546 <_svfiprintf_r+0x1d2>
 80084d8:	4b21      	ldr	r3, [pc, #132]	@ (8008560 <_svfiprintf_r+0x1ec>)
 80084da:	bb1b      	cbnz	r3, 8008524 <_svfiprintf_r+0x1b0>
 80084dc:	9b03      	ldr	r3, [sp, #12]
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	3308      	adds	r3, #8
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ea:	4433      	add	r3, r6
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	e76a      	b.n	80083c6 <_svfiprintf_r+0x52>
 80084f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f4:	460c      	mov	r4, r1
 80084f6:	2001      	movs	r0, #1
 80084f8:	e7a8      	b.n	800844c <_svfiprintf_r+0xd8>
 80084fa:	2300      	movs	r3, #0
 80084fc:	3401      	adds	r4, #1
 80084fe:	9305      	str	r3, [sp, #20]
 8008500:	4619      	mov	r1, r3
 8008502:	f04f 0c0a 	mov.w	ip, #10
 8008506:	4620      	mov	r0, r4
 8008508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800850c:	3a30      	subs	r2, #48	@ 0x30
 800850e:	2a09      	cmp	r2, #9
 8008510:	d903      	bls.n	800851a <_svfiprintf_r+0x1a6>
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0c6      	beq.n	80084a4 <_svfiprintf_r+0x130>
 8008516:	9105      	str	r1, [sp, #20]
 8008518:	e7c4      	b.n	80084a4 <_svfiprintf_r+0x130>
 800851a:	fb0c 2101 	mla	r1, ip, r1, r2
 800851e:	4604      	mov	r4, r0
 8008520:	2301      	movs	r3, #1
 8008522:	e7f0      	b.n	8008506 <_svfiprintf_r+0x192>
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	462a      	mov	r2, r5
 800852a:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <_svfiprintf_r+0x1f0>)
 800852c:	a904      	add	r1, sp, #16
 800852e:	4638      	mov	r0, r7
 8008530:	f7fe fc22 	bl	8006d78 <_printf_float>
 8008534:	1c42      	adds	r2, r0, #1
 8008536:	4606      	mov	r6, r0
 8008538:	d1d6      	bne.n	80084e8 <_svfiprintf_r+0x174>
 800853a:	89ab      	ldrh	r3, [r5, #12]
 800853c:	065b      	lsls	r3, r3, #25
 800853e:	f53f af2d 	bmi.w	800839c <_svfiprintf_r+0x28>
 8008542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008544:	e72c      	b.n	80083a0 <_svfiprintf_r+0x2c>
 8008546:	ab03      	add	r3, sp, #12
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	462a      	mov	r2, r5
 800854c:	4b05      	ldr	r3, [pc, #20]	@ (8008564 <_svfiprintf_r+0x1f0>)
 800854e:	a904      	add	r1, sp, #16
 8008550:	4638      	mov	r0, r7
 8008552:	f7fe fe99 	bl	8007288 <_printf_i>
 8008556:	e7ed      	b.n	8008534 <_svfiprintf_r+0x1c0>
 8008558:	08009911 	.word	0x08009911
 800855c:	0800991b 	.word	0x0800991b
 8008560:	08006d79 	.word	0x08006d79
 8008564:	080082bd 	.word	0x080082bd
 8008568:	08009917 	.word	0x08009917

0800856c <malloc>:
 800856c:	4b02      	ldr	r3, [pc, #8]	@ (8008578 <malloc+0xc>)
 800856e:	4601      	mov	r1, r0
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f000 b825 	b.w	80085c0 <_malloc_r>
 8008576:	bf00      	nop
 8008578:	20000020 	.word	0x20000020

0800857c <sbrk_aligned>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	4e0f      	ldr	r6, [pc, #60]	@ (80085bc <sbrk_aligned+0x40>)
 8008580:	460c      	mov	r4, r1
 8008582:	6831      	ldr	r1, [r6, #0]
 8008584:	4605      	mov	r5, r0
 8008586:	b911      	cbnz	r1, 800858e <sbrk_aligned+0x12>
 8008588:	f000 fd94 	bl	80090b4 <_sbrk_r>
 800858c:	6030      	str	r0, [r6, #0]
 800858e:	4621      	mov	r1, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 fd8f 	bl	80090b4 <_sbrk_r>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d103      	bne.n	80085a2 <sbrk_aligned+0x26>
 800859a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800859e:	4620      	mov	r0, r4
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
 80085a2:	1cc4      	adds	r4, r0, #3
 80085a4:	f024 0403 	bic.w	r4, r4, #3
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d0f8      	beq.n	800859e <sbrk_aligned+0x22>
 80085ac:	1a21      	subs	r1, r4, r0
 80085ae:	4628      	mov	r0, r5
 80085b0:	f000 fd80 	bl	80090b4 <_sbrk_r>
 80085b4:	3001      	adds	r0, #1
 80085b6:	d1f2      	bne.n	800859e <sbrk_aligned+0x22>
 80085b8:	e7ef      	b.n	800859a <sbrk_aligned+0x1e>
 80085ba:	bf00      	nop
 80085bc:	20000c80 	.word	0x20000c80

080085c0 <_malloc_r>:
 80085c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c4:	1ccd      	adds	r5, r1, #3
 80085c6:	f025 0503 	bic.w	r5, r5, #3
 80085ca:	3508      	adds	r5, #8
 80085cc:	2d0c      	cmp	r5, #12
 80085ce:	bf38      	it	cc
 80085d0:	250c      	movcc	r5, #12
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	4606      	mov	r6, r0
 80085d6:	db01      	blt.n	80085dc <_malloc_r+0x1c>
 80085d8:	42a9      	cmp	r1, r5
 80085da:	d904      	bls.n	80085e6 <_malloc_r+0x26>
 80085dc:	230c      	movs	r3, #12
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	2000      	movs	r0, #0
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086bc <_malloc_r+0xfc>
 80085ea:	f000 f915 	bl	8008818 <__malloc_lock>
 80085ee:	f8d8 3000 	ldr.w	r3, [r8]
 80085f2:	461c      	mov	r4, r3
 80085f4:	bb44      	cbnz	r4, 8008648 <_malloc_r+0x88>
 80085f6:	4629      	mov	r1, r5
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff ffbf 	bl	800857c <sbrk_aligned>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	4604      	mov	r4, r0
 8008602:	d158      	bne.n	80086b6 <_malloc_r+0xf6>
 8008604:	f8d8 4000 	ldr.w	r4, [r8]
 8008608:	4627      	mov	r7, r4
 800860a:	2f00      	cmp	r7, #0
 800860c:	d143      	bne.n	8008696 <_malloc_r+0xd6>
 800860e:	2c00      	cmp	r4, #0
 8008610:	d04b      	beq.n	80086aa <_malloc_r+0xea>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	4639      	mov	r1, r7
 8008616:	4630      	mov	r0, r6
 8008618:	eb04 0903 	add.w	r9, r4, r3
 800861c:	f000 fd4a 	bl	80090b4 <_sbrk_r>
 8008620:	4581      	cmp	r9, r0
 8008622:	d142      	bne.n	80086aa <_malloc_r+0xea>
 8008624:	6821      	ldr	r1, [r4, #0]
 8008626:	1a6d      	subs	r5, r5, r1
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff ffa6 	bl	800857c <sbrk_aligned>
 8008630:	3001      	adds	r0, #1
 8008632:	d03a      	beq.n	80086aa <_malloc_r+0xea>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	442b      	add	r3, r5
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	f8d8 3000 	ldr.w	r3, [r8]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	bb62      	cbnz	r2, 800869c <_malloc_r+0xdc>
 8008642:	f8c8 7000 	str.w	r7, [r8]
 8008646:	e00f      	b.n	8008668 <_malloc_r+0xa8>
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	1b52      	subs	r2, r2, r5
 800864c:	d420      	bmi.n	8008690 <_malloc_r+0xd0>
 800864e:	2a0b      	cmp	r2, #11
 8008650:	d917      	bls.n	8008682 <_malloc_r+0xc2>
 8008652:	1961      	adds	r1, r4, r5
 8008654:	42a3      	cmp	r3, r4
 8008656:	6025      	str	r5, [r4, #0]
 8008658:	bf18      	it	ne
 800865a:	6059      	strne	r1, [r3, #4]
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	bf08      	it	eq
 8008660:	f8c8 1000 	streq.w	r1, [r8]
 8008664:	5162      	str	r2, [r4, r5]
 8008666:	604b      	str	r3, [r1, #4]
 8008668:	4630      	mov	r0, r6
 800866a:	f000 f8db 	bl	8008824 <__malloc_unlock>
 800866e:	f104 000b 	add.w	r0, r4, #11
 8008672:	1d23      	adds	r3, r4, #4
 8008674:	f020 0007 	bic.w	r0, r0, #7
 8008678:	1ac2      	subs	r2, r0, r3
 800867a:	bf1c      	itt	ne
 800867c:	1a1b      	subne	r3, r3, r0
 800867e:	50a3      	strne	r3, [r4, r2]
 8008680:	e7af      	b.n	80085e2 <_malloc_r+0x22>
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	42a3      	cmp	r3, r4
 8008686:	bf0c      	ite	eq
 8008688:	f8c8 2000 	streq.w	r2, [r8]
 800868c:	605a      	strne	r2, [r3, #4]
 800868e:	e7eb      	b.n	8008668 <_malloc_r+0xa8>
 8008690:	4623      	mov	r3, r4
 8008692:	6864      	ldr	r4, [r4, #4]
 8008694:	e7ae      	b.n	80085f4 <_malloc_r+0x34>
 8008696:	463c      	mov	r4, r7
 8008698:	687f      	ldr	r7, [r7, #4]
 800869a:	e7b6      	b.n	800860a <_malloc_r+0x4a>
 800869c:	461a      	mov	r2, r3
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	d1fb      	bne.n	800869c <_malloc_r+0xdc>
 80086a4:	2300      	movs	r3, #0
 80086a6:	6053      	str	r3, [r2, #4]
 80086a8:	e7de      	b.n	8008668 <_malloc_r+0xa8>
 80086aa:	230c      	movs	r3, #12
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f8b8 	bl	8008824 <__malloc_unlock>
 80086b4:	e794      	b.n	80085e0 <_malloc_r+0x20>
 80086b6:	6005      	str	r5, [r0, #0]
 80086b8:	e7d6      	b.n	8008668 <_malloc_r+0xa8>
 80086ba:	bf00      	nop
 80086bc:	20000c84 	.word	0x20000c84

080086c0 <__sflush_r>:
 80086c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	0716      	lsls	r6, r2, #28
 80086ca:	4605      	mov	r5, r0
 80086cc:	460c      	mov	r4, r1
 80086ce:	d454      	bmi.n	800877a <__sflush_r+0xba>
 80086d0:	684b      	ldr	r3, [r1, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dc02      	bgt.n	80086dc <__sflush_r+0x1c>
 80086d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	dd48      	ble.n	800876e <__sflush_r+0xae>
 80086dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086de:	2e00      	cmp	r6, #0
 80086e0:	d045      	beq.n	800876e <__sflush_r+0xae>
 80086e2:	2300      	movs	r3, #0
 80086e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086e8:	682f      	ldr	r7, [r5, #0]
 80086ea:	6a21      	ldr	r1, [r4, #32]
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	d030      	beq.n	8008752 <__sflush_r+0x92>
 80086f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	0759      	lsls	r1, r3, #29
 80086f6:	d505      	bpl.n	8008704 <__sflush_r+0x44>
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086fe:	b10b      	cbz	r3, 8008704 <__sflush_r+0x44>
 8008700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008702:	1ad2      	subs	r2, r2, r3
 8008704:	2300      	movs	r3, #0
 8008706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008708:	6a21      	ldr	r1, [r4, #32]
 800870a:	4628      	mov	r0, r5
 800870c:	47b0      	blx	r6
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	d106      	bne.n	8008722 <__sflush_r+0x62>
 8008714:	6829      	ldr	r1, [r5, #0]
 8008716:	291d      	cmp	r1, #29
 8008718:	d82b      	bhi.n	8008772 <__sflush_r+0xb2>
 800871a:	4a2a      	ldr	r2, [pc, #168]	@ (80087c4 <__sflush_r+0x104>)
 800871c:	410a      	asrs	r2, r1
 800871e:	07d6      	lsls	r6, r2, #31
 8008720:	d427      	bmi.n	8008772 <__sflush_r+0xb2>
 8008722:	2200      	movs	r2, #0
 8008724:	6062      	str	r2, [r4, #4]
 8008726:	04d9      	lsls	r1, r3, #19
 8008728:	6922      	ldr	r2, [r4, #16]
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	d504      	bpl.n	8008738 <__sflush_r+0x78>
 800872e:	1c42      	adds	r2, r0, #1
 8008730:	d101      	bne.n	8008736 <__sflush_r+0x76>
 8008732:	682b      	ldr	r3, [r5, #0]
 8008734:	b903      	cbnz	r3, 8008738 <__sflush_r+0x78>
 8008736:	6560      	str	r0, [r4, #84]	@ 0x54
 8008738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800873a:	602f      	str	r7, [r5, #0]
 800873c:	b1b9      	cbz	r1, 800876e <__sflush_r+0xae>
 800873e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008742:	4299      	cmp	r1, r3
 8008744:	d002      	beq.n	800874c <__sflush_r+0x8c>
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fd16 	bl	8009178 <_free_r>
 800874c:	2300      	movs	r3, #0
 800874e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008750:	e00d      	b.n	800876e <__sflush_r+0xae>
 8008752:	2301      	movs	r3, #1
 8008754:	4628      	mov	r0, r5
 8008756:	47b0      	blx	r6
 8008758:	4602      	mov	r2, r0
 800875a:	1c50      	adds	r0, r2, #1
 800875c:	d1c9      	bne.n	80086f2 <__sflush_r+0x32>
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0c6      	beq.n	80086f2 <__sflush_r+0x32>
 8008764:	2b1d      	cmp	r3, #29
 8008766:	d001      	beq.n	800876c <__sflush_r+0xac>
 8008768:	2b16      	cmp	r3, #22
 800876a:	d11e      	bne.n	80087aa <__sflush_r+0xea>
 800876c:	602f      	str	r7, [r5, #0]
 800876e:	2000      	movs	r0, #0
 8008770:	e022      	b.n	80087b8 <__sflush_r+0xf8>
 8008772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008776:	b21b      	sxth	r3, r3
 8008778:	e01b      	b.n	80087b2 <__sflush_r+0xf2>
 800877a:	690f      	ldr	r7, [r1, #16]
 800877c:	2f00      	cmp	r7, #0
 800877e:	d0f6      	beq.n	800876e <__sflush_r+0xae>
 8008780:	0793      	lsls	r3, r2, #30
 8008782:	680e      	ldr	r6, [r1, #0]
 8008784:	bf08      	it	eq
 8008786:	694b      	ldreq	r3, [r1, #20]
 8008788:	600f      	str	r7, [r1, #0]
 800878a:	bf18      	it	ne
 800878c:	2300      	movne	r3, #0
 800878e:	eba6 0807 	sub.w	r8, r6, r7
 8008792:	608b      	str	r3, [r1, #8]
 8008794:	f1b8 0f00 	cmp.w	r8, #0
 8008798:	dde9      	ble.n	800876e <__sflush_r+0xae>
 800879a:	6a21      	ldr	r1, [r4, #32]
 800879c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800879e:	4643      	mov	r3, r8
 80087a0:	463a      	mov	r2, r7
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b0      	blx	r6
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dc08      	bgt.n	80087bc <__sflush_r+0xfc>
 80087aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087bc:	4407      	add	r7, r0
 80087be:	eba8 0800 	sub.w	r8, r8, r0
 80087c2:	e7e7      	b.n	8008794 <__sflush_r+0xd4>
 80087c4:	dfbffffe 	.word	0xdfbffffe

080087c8 <_fflush_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	690b      	ldr	r3, [r1, #16]
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b913      	cbnz	r3, 80087d8 <_fflush_r+0x10>
 80087d2:	2500      	movs	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	b118      	cbz	r0, 80087e2 <_fflush_r+0x1a>
 80087da:	6a03      	ldr	r3, [r0, #32]
 80087dc:	b90b      	cbnz	r3, 80087e2 <_fflush_r+0x1a>
 80087de:	f7fe ff1f 	bl	8007620 <__sinit>
 80087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f3      	beq.n	80087d2 <_fflush_r+0xa>
 80087ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087ec:	07d0      	lsls	r0, r2, #31
 80087ee:	d404      	bmi.n	80087fa <_fflush_r+0x32>
 80087f0:	0599      	lsls	r1, r3, #22
 80087f2:	d402      	bmi.n	80087fa <_fflush_r+0x32>
 80087f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f6:	f7fe ff80 	bl	80076fa <__retarget_lock_acquire_recursive>
 80087fa:	4628      	mov	r0, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7ff ff5f 	bl	80086c0 <__sflush_r>
 8008802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008804:	07da      	lsls	r2, r3, #31
 8008806:	4605      	mov	r5, r0
 8008808:	d4e4      	bmi.n	80087d4 <_fflush_r+0xc>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	059b      	lsls	r3, r3, #22
 800880e:	d4e1      	bmi.n	80087d4 <_fflush_r+0xc>
 8008810:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008812:	f7fe ff73 	bl	80076fc <__retarget_lock_release_recursive>
 8008816:	e7dd      	b.n	80087d4 <_fflush_r+0xc>

08008818 <__malloc_lock>:
 8008818:	4801      	ldr	r0, [pc, #4]	@ (8008820 <__malloc_lock+0x8>)
 800881a:	f7fe bf6e 	b.w	80076fa <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	20000c7c 	.word	0x20000c7c

08008824 <__malloc_unlock>:
 8008824:	4801      	ldr	r0, [pc, #4]	@ (800882c <__malloc_unlock+0x8>)
 8008826:	f7fe bf69 	b.w	80076fc <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	20000c7c 	.word	0x20000c7c

08008830 <_Balloc>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	69c6      	ldr	r6, [r0, #28]
 8008834:	4604      	mov	r4, r0
 8008836:	460d      	mov	r5, r1
 8008838:	b976      	cbnz	r6, 8008858 <_Balloc+0x28>
 800883a:	2010      	movs	r0, #16
 800883c:	f7ff fe96 	bl	800856c <malloc>
 8008840:	4602      	mov	r2, r0
 8008842:	61e0      	str	r0, [r4, #28]
 8008844:	b920      	cbnz	r0, 8008850 <_Balloc+0x20>
 8008846:	4b18      	ldr	r3, [pc, #96]	@ (80088a8 <_Balloc+0x78>)
 8008848:	4818      	ldr	r0, [pc, #96]	@ (80088ac <_Balloc+0x7c>)
 800884a:	216b      	movs	r1, #107	@ 0x6b
 800884c:	f000 fc62 	bl	8009114 <__assert_func>
 8008850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008854:	6006      	str	r6, [r0, #0]
 8008856:	60c6      	str	r6, [r0, #12]
 8008858:	69e6      	ldr	r6, [r4, #28]
 800885a:	68f3      	ldr	r3, [r6, #12]
 800885c:	b183      	cbz	r3, 8008880 <_Balloc+0x50>
 800885e:	69e3      	ldr	r3, [r4, #28]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008866:	b9b8      	cbnz	r0, 8008898 <_Balloc+0x68>
 8008868:	2101      	movs	r1, #1
 800886a:	fa01 f605 	lsl.w	r6, r1, r5
 800886e:	1d72      	adds	r2, r6, #5
 8008870:	0092      	lsls	r2, r2, #2
 8008872:	4620      	mov	r0, r4
 8008874:	f000 fc6c 	bl	8009150 <_calloc_r>
 8008878:	b160      	cbz	r0, 8008894 <_Balloc+0x64>
 800887a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800887e:	e00e      	b.n	800889e <_Balloc+0x6e>
 8008880:	2221      	movs	r2, #33	@ 0x21
 8008882:	2104      	movs	r1, #4
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fc63 	bl	8009150 <_calloc_r>
 800888a:	69e3      	ldr	r3, [r4, #28]
 800888c:	60f0      	str	r0, [r6, #12]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d1e4      	bne.n	800885e <_Balloc+0x2e>
 8008894:	2000      	movs	r0, #0
 8008896:	bd70      	pop	{r4, r5, r6, pc}
 8008898:	6802      	ldr	r2, [r0, #0]
 800889a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800889e:	2300      	movs	r3, #0
 80088a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088a4:	e7f7      	b.n	8008896 <_Balloc+0x66>
 80088a6:	bf00      	nop
 80088a8:	08009891 	.word	0x08009891
 80088ac:	08009922 	.word	0x08009922

080088b0 <_Bfree>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	69c6      	ldr	r6, [r0, #28]
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	b976      	cbnz	r6, 80088d8 <_Bfree+0x28>
 80088ba:	2010      	movs	r0, #16
 80088bc:	f7ff fe56 	bl	800856c <malloc>
 80088c0:	4602      	mov	r2, r0
 80088c2:	61e8      	str	r0, [r5, #28]
 80088c4:	b920      	cbnz	r0, 80088d0 <_Bfree+0x20>
 80088c6:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <_Bfree+0x3c>)
 80088c8:	4809      	ldr	r0, [pc, #36]	@ (80088f0 <_Bfree+0x40>)
 80088ca:	218f      	movs	r1, #143	@ 0x8f
 80088cc:	f000 fc22 	bl	8009114 <__assert_func>
 80088d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d4:	6006      	str	r6, [r0, #0]
 80088d6:	60c6      	str	r6, [r0, #12]
 80088d8:	b13c      	cbz	r4, 80088ea <_Bfree+0x3a>
 80088da:	69eb      	ldr	r3, [r5, #28]
 80088dc:	6862      	ldr	r2, [r4, #4]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088e4:	6021      	str	r1, [r4, #0]
 80088e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	08009891 	.word	0x08009891
 80088f0:	08009922 	.word	0x08009922

080088f4 <__multadd>:
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f8:	690d      	ldr	r5, [r1, #16]
 80088fa:	4607      	mov	r7, r0
 80088fc:	460c      	mov	r4, r1
 80088fe:	461e      	mov	r6, r3
 8008900:	f101 0c14 	add.w	ip, r1, #20
 8008904:	2000      	movs	r0, #0
 8008906:	f8dc 3000 	ldr.w	r3, [ip]
 800890a:	b299      	uxth	r1, r3
 800890c:	fb02 6101 	mla	r1, r2, r1, r6
 8008910:	0c1e      	lsrs	r6, r3, #16
 8008912:	0c0b      	lsrs	r3, r1, #16
 8008914:	fb02 3306 	mla	r3, r2, r6, r3
 8008918:	b289      	uxth	r1, r1
 800891a:	3001      	adds	r0, #1
 800891c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008920:	4285      	cmp	r5, r0
 8008922:	f84c 1b04 	str.w	r1, [ip], #4
 8008926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800892a:	dcec      	bgt.n	8008906 <__multadd+0x12>
 800892c:	b30e      	cbz	r6, 8008972 <__multadd+0x7e>
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	42ab      	cmp	r3, r5
 8008932:	dc19      	bgt.n	8008968 <__multadd+0x74>
 8008934:	6861      	ldr	r1, [r4, #4]
 8008936:	4638      	mov	r0, r7
 8008938:	3101      	adds	r1, #1
 800893a:	f7ff ff79 	bl	8008830 <_Balloc>
 800893e:	4680      	mov	r8, r0
 8008940:	b928      	cbnz	r0, 800894e <__multadd+0x5a>
 8008942:	4602      	mov	r2, r0
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <__multadd+0x84>)
 8008946:	480d      	ldr	r0, [pc, #52]	@ (800897c <__multadd+0x88>)
 8008948:	21ba      	movs	r1, #186	@ 0xba
 800894a:	f000 fbe3 	bl	8009114 <__assert_func>
 800894e:	6922      	ldr	r2, [r4, #16]
 8008950:	3202      	adds	r2, #2
 8008952:	f104 010c 	add.w	r1, r4, #12
 8008956:	0092      	lsls	r2, r2, #2
 8008958:	300c      	adds	r0, #12
 800895a:	f000 fbcd 	bl	80090f8 <memcpy>
 800895e:	4621      	mov	r1, r4
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ffa5 	bl	80088b0 <_Bfree>
 8008966:	4644      	mov	r4, r8
 8008968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800896c:	3501      	adds	r5, #1
 800896e:	615e      	str	r6, [r3, #20]
 8008970:	6125      	str	r5, [r4, #16]
 8008972:	4620      	mov	r0, r4
 8008974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008978:	08009900 	.word	0x08009900
 800897c:	08009922 	.word	0x08009922

08008980 <__hi0bits>:
 8008980:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008984:	4603      	mov	r3, r0
 8008986:	bf36      	itet	cc
 8008988:	0403      	lslcc	r3, r0, #16
 800898a:	2000      	movcs	r0, #0
 800898c:	2010      	movcc	r0, #16
 800898e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008992:	bf3c      	itt	cc
 8008994:	021b      	lslcc	r3, r3, #8
 8008996:	3008      	addcc	r0, #8
 8008998:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800899c:	bf3c      	itt	cc
 800899e:	011b      	lslcc	r3, r3, #4
 80089a0:	3004      	addcc	r0, #4
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089a6:	bf3c      	itt	cc
 80089a8:	009b      	lslcc	r3, r3, #2
 80089aa:	3002      	addcc	r0, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	db05      	blt.n	80089bc <__hi0bits+0x3c>
 80089b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089b4:	f100 0001 	add.w	r0, r0, #1
 80089b8:	bf08      	it	eq
 80089ba:	2020      	moveq	r0, #32
 80089bc:	4770      	bx	lr

080089be <__lo0bits>:
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	4602      	mov	r2, r0
 80089c2:	f013 0007 	ands.w	r0, r3, #7
 80089c6:	d00b      	beq.n	80089e0 <__lo0bits+0x22>
 80089c8:	07d9      	lsls	r1, r3, #31
 80089ca:	d421      	bmi.n	8008a10 <__lo0bits+0x52>
 80089cc:	0798      	lsls	r0, r3, #30
 80089ce:	bf49      	itett	mi
 80089d0:	085b      	lsrmi	r3, r3, #1
 80089d2:	089b      	lsrpl	r3, r3, #2
 80089d4:	2001      	movmi	r0, #1
 80089d6:	6013      	strmi	r3, [r2, #0]
 80089d8:	bf5c      	itt	pl
 80089da:	6013      	strpl	r3, [r2, #0]
 80089dc:	2002      	movpl	r0, #2
 80089de:	4770      	bx	lr
 80089e0:	b299      	uxth	r1, r3
 80089e2:	b909      	cbnz	r1, 80089e8 <__lo0bits+0x2a>
 80089e4:	0c1b      	lsrs	r3, r3, #16
 80089e6:	2010      	movs	r0, #16
 80089e8:	b2d9      	uxtb	r1, r3
 80089ea:	b909      	cbnz	r1, 80089f0 <__lo0bits+0x32>
 80089ec:	3008      	adds	r0, #8
 80089ee:	0a1b      	lsrs	r3, r3, #8
 80089f0:	0719      	lsls	r1, r3, #28
 80089f2:	bf04      	itt	eq
 80089f4:	091b      	lsreq	r3, r3, #4
 80089f6:	3004      	addeq	r0, #4
 80089f8:	0799      	lsls	r1, r3, #30
 80089fa:	bf04      	itt	eq
 80089fc:	089b      	lsreq	r3, r3, #2
 80089fe:	3002      	addeq	r0, #2
 8008a00:	07d9      	lsls	r1, r3, #31
 8008a02:	d403      	bmi.n	8008a0c <__lo0bits+0x4e>
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	f100 0001 	add.w	r0, r0, #1
 8008a0a:	d003      	beq.n	8008a14 <__lo0bits+0x56>
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	4770      	bx	lr
 8008a10:	2000      	movs	r0, #0
 8008a12:	4770      	bx	lr
 8008a14:	2020      	movs	r0, #32
 8008a16:	4770      	bx	lr

08008a18 <__i2b>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	f7ff ff07 	bl	8008830 <_Balloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	b928      	cbnz	r0, 8008a32 <__i2b+0x1a>
 8008a26:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <__i2b+0x24>)
 8008a28:	4805      	ldr	r0, [pc, #20]	@ (8008a40 <__i2b+0x28>)
 8008a2a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a2e:	f000 fb71 	bl	8009114 <__assert_func>
 8008a32:	2301      	movs	r3, #1
 8008a34:	6144      	str	r4, [r0, #20]
 8008a36:	6103      	str	r3, [r0, #16]
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08009900 	.word	0x08009900
 8008a40:	08009922 	.word	0x08009922

08008a44 <__multiply>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	4614      	mov	r4, r2
 8008a4a:	690a      	ldr	r2, [r1, #16]
 8008a4c:	6923      	ldr	r3, [r4, #16]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	bfa8      	it	ge
 8008a52:	4623      	movge	r3, r4
 8008a54:	460f      	mov	r7, r1
 8008a56:	bfa4      	itt	ge
 8008a58:	460c      	movge	r4, r1
 8008a5a:	461f      	movge	r7, r3
 8008a5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	6861      	ldr	r1, [r4, #4]
 8008a68:	eb0a 0609 	add.w	r6, sl, r9
 8008a6c:	42b3      	cmp	r3, r6
 8008a6e:	b085      	sub	sp, #20
 8008a70:	bfb8      	it	lt
 8008a72:	3101      	addlt	r1, #1
 8008a74:	f7ff fedc 	bl	8008830 <_Balloc>
 8008a78:	b930      	cbnz	r0, 8008a88 <__multiply+0x44>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	4b44      	ldr	r3, [pc, #272]	@ (8008b90 <__multiply+0x14c>)
 8008a7e:	4845      	ldr	r0, [pc, #276]	@ (8008b94 <__multiply+0x150>)
 8008a80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a84:	f000 fb46 	bl	8009114 <__assert_func>
 8008a88:	f100 0514 	add.w	r5, r0, #20
 8008a8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a90:	462b      	mov	r3, r5
 8008a92:	2200      	movs	r2, #0
 8008a94:	4543      	cmp	r3, r8
 8008a96:	d321      	bcc.n	8008adc <__multiply+0x98>
 8008a98:	f107 0114 	add.w	r1, r7, #20
 8008a9c:	f104 0214 	add.w	r2, r4, #20
 8008aa0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008aa4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008aa8:	9302      	str	r3, [sp, #8]
 8008aaa:	1b13      	subs	r3, r2, r4
 8008aac:	3b15      	subs	r3, #21
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	f104 0715 	add.w	r7, r4, #21
 8008ab8:	42ba      	cmp	r2, r7
 8008aba:	bf38      	it	cc
 8008abc:	2304      	movcc	r3, #4
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	9103      	str	r1, [sp, #12]
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	d80c      	bhi.n	8008ae2 <__multiply+0x9e>
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	dd03      	ble.n	8008ad4 <__multiply+0x90>
 8008acc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05b      	beq.n	8008b8c <__multiply+0x148>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	b005      	add	sp, #20
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	f843 2b04 	str.w	r2, [r3], #4
 8008ae0:	e7d8      	b.n	8008a94 <__multiply+0x50>
 8008ae2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ae6:	f1ba 0f00 	cmp.w	sl, #0
 8008aea:	d024      	beq.n	8008b36 <__multiply+0xf2>
 8008aec:	f104 0e14 	add.w	lr, r4, #20
 8008af0:	46a9      	mov	r9, r5
 8008af2:	f04f 0c00 	mov.w	ip, #0
 8008af6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008afa:	f8d9 3000 	ldr.w	r3, [r9]
 8008afe:	fa1f fb87 	uxth.w	fp, r7
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008b0c:	f8d9 7000 	ldr.w	r7, [r9]
 8008b10:	4463      	add	r3, ip
 8008b12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b16:	fb0a c70b 	mla	r7, sl, fp, ip
 8008b1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b24:	4572      	cmp	r2, lr
 8008b26:	f849 3b04 	str.w	r3, [r9], #4
 8008b2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b2e:	d8e2      	bhi.n	8008af6 <__multiply+0xb2>
 8008b30:	9b01      	ldr	r3, [sp, #4]
 8008b32:	f845 c003 	str.w	ip, [r5, r3]
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b3c:	3104      	adds	r1, #4
 8008b3e:	f1b9 0f00 	cmp.w	r9, #0
 8008b42:	d021      	beq.n	8008b88 <__multiply+0x144>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	f104 0c14 	add.w	ip, r4, #20
 8008b4a:	46ae      	mov	lr, r5
 8008b4c:	f04f 0a00 	mov.w	sl, #0
 8008b50:	f8bc b000 	ldrh.w	fp, [ip]
 8008b54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b58:	fb09 770b 	mla	r7, r9, fp, r7
 8008b5c:	4457      	add	r7, sl
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b64:	f84e 3b04 	str.w	r3, [lr], #4
 8008b68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b70:	f8be 3000 	ldrh.w	r3, [lr]
 8008b74:	fb09 330a 	mla	r3, r9, sl, r3
 8008b78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b7c:	4562      	cmp	r2, ip
 8008b7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b82:	d8e5      	bhi.n	8008b50 <__multiply+0x10c>
 8008b84:	9f01      	ldr	r7, [sp, #4]
 8008b86:	51eb      	str	r3, [r5, r7]
 8008b88:	3504      	adds	r5, #4
 8008b8a:	e799      	b.n	8008ac0 <__multiply+0x7c>
 8008b8c:	3e01      	subs	r6, #1
 8008b8e:	e79b      	b.n	8008ac8 <__multiply+0x84>
 8008b90:	08009900 	.word	0x08009900
 8008b94:	08009922 	.word	0x08009922

08008b98 <__pow5mult>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	f012 0203 	ands.w	r2, r2, #3
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	d007      	beq.n	8008bb8 <__pow5mult+0x20>
 8008ba8:	4c25      	ldr	r4, [pc, #148]	@ (8008c40 <__pow5mult+0xa8>)
 8008baa:	3a01      	subs	r2, #1
 8008bac:	2300      	movs	r3, #0
 8008bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bb2:	f7ff fe9f 	bl	80088f4 <__multadd>
 8008bb6:	4606      	mov	r6, r0
 8008bb8:	10ad      	asrs	r5, r5, #2
 8008bba:	d03d      	beq.n	8008c38 <__pow5mult+0xa0>
 8008bbc:	69fc      	ldr	r4, [r7, #28]
 8008bbe:	b97c      	cbnz	r4, 8008be0 <__pow5mult+0x48>
 8008bc0:	2010      	movs	r0, #16
 8008bc2:	f7ff fcd3 	bl	800856c <malloc>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	61f8      	str	r0, [r7, #28]
 8008bca:	b928      	cbnz	r0, 8008bd8 <__pow5mult+0x40>
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c44 <__pow5mult+0xac>)
 8008bce:	481e      	ldr	r0, [pc, #120]	@ (8008c48 <__pow5mult+0xb0>)
 8008bd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bd4:	f000 fa9e 	bl	8009114 <__assert_func>
 8008bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bdc:	6004      	str	r4, [r0, #0]
 8008bde:	60c4      	str	r4, [r0, #12]
 8008be0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be8:	b94c      	cbnz	r4, 8008bfe <__pow5mult+0x66>
 8008bea:	f240 2171 	movw	r1, #625	@ 0x271
 8008bee:	4638      	mov	r0, r7
 8008bf0:	f7ff ff12 	bl	8008a18 <__i2b>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	6003      	str	r3, [r0, #0]
 8008bfe:	f04f 0900 	mov.w	r9, #0
 8008c02:	07eb      	lsls	r3, r5, #31
 8008c04:	d50a      	bpl.n	8008c1c <__pow5mult+0x84>
 8008c06:	4631      	mov	r1, r6
 8008c08:	4622      	mov	r2, r4
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	f7ff ff1a 	bl	8008a44 <__multiply>
 8008c10:	4631      	mov	r1, r6
 8008c12:	4680      	mov	r8, r0
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff fe4b 	bl	80088b0 <_Bfree>
 8008c1a:	4646      	mov	r6, r8
 8008c1c:	106d      	asrs	r5, r5, #1
 8008c1e:	d00b      	beq.n	8008c38 <__pow5mult+0xa0>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	b938      	cbnz	r0, 8008c34 <__pow5mult+0x9c>
 8008c24:	4622      	mov	r2, r4
 8008c26:	4621      	mov	r1, r4
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff ff0b 	bl	8008a44 <__multiply>
 8008c2e:	6020      	str	r0, [r4, #0]
 8008c30:	f8c0 9000 	str.w	r9, [r0]
 8008c34:	4604      	mov	r4, r0
 8008c36:	e7e4      	b.n	8008c02 <__pow5mult+0x6a>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	bf00      	nop
 8008c40:	0800997c 	.word	0x0800997c
 8008c44:	08009891 	.word	0x08009891
 8008c48:	08009922 	.word	0x08009922

08008c4c <__lshift>:
 8008c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	460c      	mov	r4, r1
 8008c52:	6849      	ldr	r1, [r1, #4]
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	4691      	mov	r9, r2
 8008c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c64:	f108 0601 	add.w	r6, r8, #1
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	db0b      	blt.n	8008c84 <__lshift+0x38>
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff fddf 	bl	8008830 <_Balloc>
 8008c72:	4605      	mov	r5, r0
 8008c74:	b948      	cbnz	r0, 8008c8a <__lshift+0x3e>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b28      	ldr	r3, [pc, #160]	@ (8008d1c <__lshift+0xd0>)
 8008c7a:	4829      	ldr	r0, [pc, #164]	@ (8008d20 <__lshift+0xd4>)
 8008c7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c80:	f000 fa48 	bl	8009114 <__assert_func>
 8008c84:	3101      	adds	r1, #1
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	e7ee      	b.n	8008c68 <__lshift+0x1c>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f100 0114 	add.w	r1, r0, #20
 8008c90:	f100 0210 	add.w	r2, r0, #16
 8008c94:	4618      	mov	r0, r3
 8008c96:	4553      	cmp	r3, sl
 8008c98:	db33      	blt.n	8008d02 <__lshift+0xb6>
 8008c9a:	6920      	ldr	r0, [r4, #16]
 8008c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ca0:	f104 0314 	add.w	r3, r4, #20
 8008ca4:	f019 091f 	ands.w	r9, r9, #31
 8008ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cb0:	d02b      	beq.n	8008d0a <__lshift+0xbe>
 8008cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb6:	468a      	mov	sl, r1
 8008cb8:	2200      	movs	r2, #0
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	fa00 f009 	lsl.w	r0, r0, r9
 8008cc0:	4310      	orrs	r0, r2
 8008cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8008cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cca:	459c      	cmp	ip, r3
 8008ccc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cd0:	d8f3      	bhi.n	8008cba <__lshift+0x6e>
 8008cd2:	ebac 0304 	sub.w	r3, ip, r4
 8008cd6:	3b15      	subs	r3, #21
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	3304      	adds	r3, #4
 8008cde:	f104 0015 	add.w	r0, r4, #21
 8008ce2:	4584      	cmp	ip, r0
 8008ce4:	bf38      	it	cc
 8008ce6:	2304      	movcc	r3, #4
 8008ce8:	50ca      	str	r2, [r1, r3]
 8008cea:	b10a      	cbz	r2, 8008cf0 <__lshift+0xa4>
 8008cec:	f108 0602 	add.w	r6, r8, #2
 8008cf0:	3e01      	subs	r6, #1
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	612e      	str	r6, [r5, #16]
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f7ff fdda 	bl	80088b0 <_Bfree>
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d06:	3301      	adds	r3, #1
 8008d08:	e7c5      	b.n	8008c96 <__lshift+0x4a>
 8008d0a:	3904      	subs	r1, #4
 8008d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d14:	459c      	cmp	ip, r3
 8008d16:	d8f9      	bhi.n	8008d0c <__lshift+0xc0>
 8008d18:	e7ea      	b.n	8008cf0 <__lshift+0xa4>
 8008d1a:	bf00      	nop
 8008d1c:	08009900 	.word	0x08009900
 8008d20:	08009922 	.word	0x08009922

08008d24 <__mcmp>:
 8008d24:	690a      	ldr	r2, [r1, #16]
 8008d26:	4603      	mov	r3, r0
 8008d28:	6900      	ldr	r0, [r0, #16]
 8008d2a:	1a80      	subs	r0, r0, r2
 8008d2c:	b530      	push	{r4, r5, lr}
 8008d2e:	d10e      	bne.n	8008d4e <__mcmp+0x2a>
 8008d30:	3314      	adds	r3, #20
 8008d32:	3114      	adds	r1, #20
 8008d34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d44:	4295      	cmp	r5, r2
 8008d46:	d003      	beq.n	8008d50 <__mcmp+0x2c>
 8008d48:	d205      	bcs.n	8008d56 <__mcmp+0x32>
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d4e:	bd30      	pop	{r4, r5, pc}
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d3f3      	bcc.n	8008d3c <__mcmp+0x18>
 8008d54:	e7fb      	b.n	8008d4e <__mcmp+0x2a>
 8008d56:	2001      	movs	r0, #1
 8008d58:	e7f9      	b.n	8008d4e <__mcmp+0x2a>
	...

08008d5c <__mdiff>:
 8008d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	4689      	mov	r9, r1
 8008d62:	4606      	mov	r6, r0
 8008d64:	4611      	mov	r1, r2
 8008d66:	4648      	mov	r0, r9
 8008d68:	4614      	mov	r4, r2
 8008d6a:	f7ff ffdb 	bl	8008d24 <__mcmp>
 8008d6e:	1e05      	subs	r5, r0, #0
 8008d70:	d112      	bne.n	8008d98 <__mdiff+0x3c>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff fd5b 	bl	8008830 <_Balloc>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	b928      	cbnz	r0, 8008d8a <__mdiff+0x2e>
 8008d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e7c <__mdiff+0x120>)
 8008d80:	f240 2137 	movw	r1, #567	@ 0x237
 8008d84:	483e      	ldr	r0, [pc, #248]	@ (8008e80 <__mdiff+0x124>)
 8008d86:	f000 f9c5 	bl	8009114 <__assert_func>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d90:	4610      	mov	r0, r2
 8008d92:	b003      	add	sp, #12
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	bfbc      	itt	lt
 8008d9a:	464b      	movlt	r3, r9
 8008d9c:	46a1      	movlt	r9, r4
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008da4:	bfba      	itte	lt
 8008da6:	461c      	movlt	r4, r3
 8008da8:	2501      	movlt	r5, #1
 8008daa:	2500      	movge	r5, #0
 8008dac:	f7ff fd40 	bl	8008830 <_Balloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	b918      	cbnz	r0, 8008dbc <__mdiff+0x60>
 8008db4:	4b31      	ldr	r3, [pc, #196]	@ (8008e7c <__mdiff+0x120>)
 8008db6:	f240 2145 	movw	r1, #581	@ 0x245
 8008dba:	e7e3      	b.n	8008d84 <__mdiff+0x28>
 8008dbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dc0:	6926      	ldr	r6, [r4, #16]
 8008dc2:	60c5      	str	r5, [r0, #12]
 8008dc4:	f109 0310 	add.w	r3, r9, #16
 8008dc8:	f109 0514 	add.w	r5, r9, #20
 8008dcc:	f104 0e14 	add.w	lr, r4, #20
 8008dd0:	f100 0b14 	add.w	fp, r0, #20
 8008dd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	46d9      	mov	r9, fp
 8008de0:	f04f 0c00 	mov.w	ip, #0
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	fa1f f38a 	uxth.w	r3, sl
 8008df4:	4619      	mov	r1, r3
 8008df6:	b283      	uxth	r3, r0
 8008df8:	1acb      	subs	r3, r1, r3
 8008dfa:	0c00      	lsrs	r0, r0, #16
 8008dfc:	4463      	add	r3, ip
 8008dfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e0c:	4576      	cmp	r6, lr
 8008e0e:	f849 3b04 	str.w	r3, [r9], #4
 8008e12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e16:	d8e5      	bhi.n	8008de4 <__mdiff+0x88>
 8008e18:	1b33      	subs	r3, r6, r4
 8008e1a:	3b15      	subs	r3, #21
 8008e1c:	f023 0303 	bic.w	r3, r3, #3
 8008e20:	3415      	adds	r4, #21
 8008e22:	3304      	adds	r3, #4
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	bf38      	it	cc
 8008e28:	2304      	movcc	r3, #4
 8008e2a:	441d      	add	r5, r3
 8008e2c:	445b      	add	r3, fp
 8008e2e:	461e      	mov	r6, r3
 8008e30:	462c      	mov	r4, r5
 8008e32:	4544      	cmp	r4, r8
 8008e34:	d30e      	bcc.n	8008e54 <__mdiff+0xf8>
 8008e36:	f108 0103 	add.w	r1, r8, #3
 8008e3a:	1b49      	subs	r1, r1, r5
 8008e3c:	f021 0103 	bic.w	r1, r1, #3
 8008e40:	3d03      	subs	r5, #3
 8008e42:	45a8      	cmp	r8, r5
 8008e44:	bf38      	it	cc
 8008e46:	2100      	movcc	r1, #0
 8008e48:	440b      	add	r3, r1
 8008e4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e4e:	b191      	cbz	r1, 8008e76 <__mdiff+0x11a>
 8008e50:	6117      	str	r7, [r2, #16]
 8008e52:	e79d      	b.n	8008d90 <__mdiff+0x34>
 8008e54:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e58:	46e6      	mov	lr, ip
 8008e5a:	0c08      	lsrs	r0, r1, #16
 8008e5c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e60:	4471      	add	r1, lr
 8008e62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e66:	b289      	uxth	r1, r1
 8008e68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e6c:	f846 1b04 	str.w	r1, [r6], #4
 8008e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e74:	e7dd      	b.n	8008e32 <__mdiff+0xd6>
 8008e76:	3f01      	subs	r7, #1
 8008e78:	e7e7      	b.n	8008e4a <__mdiff+0xee>
 8008e7a:	bf00      	nop
 8008e7c:	08009900 	.word	0x08009900
 8008e80:	08009922 	.word	0x08009922

08008e84 <__d2b>:
 8008e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	460f      	mov	r7, r1
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	ec59 8b10 	vmov	r8, r9, d0
 8008e90:	4616      	mov	r6, r2
 8008e92:	f7ff fccd 	bl	8008830 <_Balloc>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b930      	cbnz	r0, 8008ea8 <__d2b+0x24>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b23      	ldr	r3, [pc, #140]	@ (8008f2c <__d2b+0xa8>)
 8008e9e:	4824      	ldr	r0, [pc, #144]	@ (8008f30 <__d2b+0xac>)
 8008ea0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ea4:	f000 f936 	bl	8009114 <__assert_func>
 8008ea8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008eb0:	b10d      	cbz	r5, 8008eb6 <__d2b+0x32>
 8008eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	f1b8 0300 	subs.w	r3, r8, #0
 8008ebc:	d023      	beq.n	8008f06 <__d2b+0x82>
 8008ebe:	4668      	mov	r0, sp
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	f7ff fd7c 	bl	80089be <__lo0bits>
 8008ec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eca:	b1d0      	cbz	r0, 8008f02 <__d2b+0x7e>
 8008ecc:	f1c0 0320 	rsb	r3, r0, #32
 8008ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	40c2      	lsrs	r2, r0
 8008ed8:	6163      	str	r3, [r4, #20]
 8008eda:	9201      	str	r2, [sp, #4]
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	61a3      	str	r3, [r4, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2201      	moveq	r2, #1
 8008ee6:	2202      	movne	r2, #2
 8008ee8:	6122      	str	r2, [r4, #16]
 8008eea:	b1a5      	cbz	r5, 8008f16 <__d2b+0x92>
 8008eec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ef0:	4405      	add	r5, r0
 8008ef2:	603d      	str	r5, [r7, #0]
 8008ef4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ef8:	6030      	str	r0, [r6, #0]
 8008efa:	4620      	mov	r0, r4
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f02:	6161      	str	r1, [r4, #20]
 8008f04:	e7ea      	b.n	8008edc <__d2b+0x58>
 8008f06:	a801      	add	r0, sp, #4
 8008f08:	f7ff fd59 	bl	80089be <__lo0bits>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	3020      	adds	r0, #32
 8008f12:	2201      	movs	r2, #1
 8008f14:	e7e8      	b.n	8008ee8 <__d2b+0x64>
 8008f16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f1e:	6038      	str	r0, [r7, #0]
 8008f20:	6918      	ldr	r0, [r3, #16]
 8008f22:	f7ff fd2d 	bl	8008980 <__hi0bits>
 8008f26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f2a:	e7e5      	b.n	8008ef8 <__d2b+0x74>
 8008f2c:	08009900 	.word	0x08009900
 8008f30:	08009922 	.word	0x08009922

08008f34 <__sread>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	460c      	mov	r4, r1
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	f000 f8a8 	bl	8009090 <_read_r>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	bfab      	itete	ge
 8008f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f46:	89a3      	ldrhlt	r3, [r4, #12]
 8008f48:	181b      	addge	r3, r3, r0
 8008f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f4e:	bfac      	ite	ge
 8008f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f52:	81a3      	strhlt	r3, [r4, #12]
 8008f54:	bd10      	pop	{r4, pc}

08008f56 <__swrite>:
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	461f      	mov	r7, r3
 8008f5c:	898b      	ldrh	r3, [r1, #12]
 8008f5e:	05db      	lsls	r3, r3, #23
 8008f60:	4605      	mov	r5, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4616      	mov	r6, r2
 8008f66:	d505      	bpl.n	8008f74 <__swrite+0x1e>
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f000 f87c 	bl	800906c <_lseek_r>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	4632      	mov	r2, r6
 8008f82:	463b      	mov	r3, r7
 8008f84:	4628      	mov	r0, r5
 8008f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8a:	f000 b8a3 	b.w	80090d4 <_write_r>

08008f8e <__sseek>:
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	460c      	mov	r4, r1
 8008f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f96:	f000 f869 	bl	800906c <_lseek_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	bf15      	itete	ne
 8008fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008faa:	81a3      	strheq	r3, [r4, #12]
 8008fac:	bf18      	it	ne
 8008fae:	81a3      	strhne	r3, [r4, #12]
 8008fb0:	bd10      	pop	{r4, pc}

08008fb2 <__sclose>:
 8008fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb6:	f000 b849 	b.w	800904c <_close_r>

08008fba <_realloc_r>:
 8008fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	b921      	cbnz	r1, 8008fd0 <_realloc_r+0x16>
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	4611      	mov	r1, r2
 8008fcc:	f7ff baf8 	b.w	80085c0 <_malloc_r>
 8008fd0:	b92a      	cbnz	r2, 8008fde <_realloc_r+0x24>
 8008fd2:	f000 f8d1 	bl	8009178 <_free_r>
 8008fd6:	2400      	movs	r4, #0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fde:	f000 f927 	bl	8009230 <_malloc_usable_size_r>
 8008fe2:	4285      	cmp	r5, r0
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	d802      	bhi.n	8008fee <_realloc_r+0x34>
 8008fe8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fec:	d8f4      	bhi.n	8008fd8 <_realloc_r+0x1e>
 8008fee:	4629      	mov	r1, r5
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	f7ff fae5 	bl	80085c0 <_malloc_r>
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d0ec      	beq.n	8008fd6 <_realloc_r+0x1c>
 8008ffc:	42b5      	cmp	r5, r6
 8008ffe:	462a      	mov	r2, r5
 8009000:	4621      	mov	r1, r4
 8009002:	bf28      	it	cs
 8009004:	4632      	movcs	r2, r6
 8009006:	f000 f877 	bl	80090f8 <memcpy>
 800900a:	4621      	mov	r1, r4
 800900c:	4640      	mov	r0, r8
 800900e:	f000 f8b3 	bl	8009178 <_free_r>
 8009012:	463c      	mov	r4, r7
 8009014:	e7e0      	b.n	8008fd8 <_realloc_r+0x1e>

08009016 <memmove>:
 8009016:	4288      	cmp	r0, r1
 8009018:	b510      	push	{r4, lr}
 800901a:	eb01 0402 	add.w	r4, r1, r2
 800901e:	d902      	bls.n	8009026 <memmove+0x10>
 8009020:	4284      	cmp	r4, r0
 8009022:	4623      	mov	r3, r4
 8009024:	d807      	bhi.n	8009036 <memmove+0x20>
 8009026:	1e43      	subs	r3, r0, #1
 8009028:	42a1      	cmp	r1, r4
 800902a:	d008      	beq.n	800903e <memmove+0x28>
 800902c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009030:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009034:	e7f8      	b.n	8009028 <memmove+0x12>
 8009036:	4402      	add	r2, r0
 8009038:	4601      	mov	r1, r0
 800903a:	428a      	cmp	r2, r1
 800903c:	d100      	bne.n	8009040 <memmove+0x2a>
 800903e:	bd10      	pop	{r4, pc}
 8009040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009044:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009048:	e7f7      	b.n	800903a <memmove+0x24>
	...

0800904c <_close_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d06      	ldr	r5, [pc, #24]	@ (8009068 <_close_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f8 faae 	bl	80015b8 <_close>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_close_r+0x1a>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_close_r+0x1a>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20000c88 	.word	0x20000c88

0800906c <_lseek_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	@ (800908c <_lseek_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f8 fac3 	bl	8001606 <_lseek>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_lseek_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_lseek_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000c88 	.word	0x20000c88

08009090 <_read_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d07      	ldr	r5, [pc, #28]	@ (80090b0 <_read_r+0x20>)
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f7f8 fa51 	bl	8001546 <_read>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_read_r+0x1e>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_read_r+0x1e>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	20000c88 	.word	0x20000c88

080090b4 <_sbrk_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d06      	ldr	r5, [pc, #24]	@ (80090d0 <_sbrk_r+0x1c>)
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	f7f8 faae 	bl	8001620 <_sbrk>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_sbrk_r+0x1a>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_sbrk_r+0x1a>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	20000c88 	.word	0x20000c88

080090d4 <_write_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d07      	ldr	r5, [pc, #28]	@ (80090f4 <_write_r+0x20>)
 80090d8:	4604      	mov	r4, r0
 80090da:	4608      	mov	r0, r1
 80090dc:	4611      	mov	r1, r2
 80090de:	2200      	movs	r2, #0
 80090e0:	602a      	str	r2, [r5, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f7f8 fa4c 	bl	8001580 <_write>
 80090e8:	1c43      	adds	r3, r0, #1
 80090ea:	d102      	bne.n	80090f2 <_write_r+0x1e>
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	b103      	cbz	r3, 80090f2 <_write_r+0x1e>
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	bd38      	pop	{r3, r4, r5, pc}
 80090f4:	20000c88 	.word	0x20000c88

080090f8 <memcpy>:
 80090f8:	440a      	add	r2, r1
 80090fa:	4291      	cmp	r1, r2
 80090fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009100:	d100      	bne.n	8009104 <memcpy+0xc>
 8009102:	4770      	bx	lr
 8009104:	b510      	push	{r4, lr}
 8009106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800910a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800910e:	4291      	cmp	r1, r2
 8009110:	d1f9      	bne.n	8009106 <memcpy+0xe>
 8009112:	bd10      	pop	{r4, pc}

08009114 <__assert_func>:
 8009114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009116:	4614      	mov	r4, r2
 8009118:	461a      	mov	r2, r3
 800911a:	4b09      	ldr	r3, [pc, #36]	@ (8009140 <__assert_func+0x2c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4605      	mov	r5, r0
 8009120:	68d8      	ldr	r0, [r3, #12]
 8009122:	b954      	cbnz	r4, 800913a <__assert_func+0x26>
 8009124:	4b07      	ldr	r3, [pc, #28]	@ (8009144 <__assert_func+0x30>)
 8009126:	461c      	mov	r4, r3
 8009128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800912c:	9100      	str	r1, [sp, #0]
 800912e:	462b      	mov	r3, r5
 8009130:	4905      	ldr	r1, [pc, #20]	@ (8009148 <__assert_func+0x34>)
 8009132:	f000 f885 	bl	8009240 <fiprintf>
 8009136:	f000 f8a2 	bl	800927e <abort>
 800913a:	4b04      	ldr	r3, [pc, #16]	@ (800914c <__assert_func+0x38>)
 800913c:	e7f4      	b.n	8009128 <__assert_func+0x14>
 800913e:	bf00      	nop
 8009140:	20000020 	.word	0x20000020
 8009144:	08009bbe 	.word	0x08009bbe
 8009148:	08009b90 	.word	0x08009b90
 800914c:	08009b83 	.word	0x08009b83

08009150 <_calloc_r>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	fba1 5402 	umull	r5, r4, r1, r2
 8009156:	b93c      	cbnz	r4, 8009168 <_calloc_r+0x18>
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff fa31 	bl	80085c0 <_malloc_r>
 800915e:	4606      	mov	r6, r0
 8009160:	b928      	cbnz	r0, 800916e <_calloc_r+0x1e>
 8009162:	2600      	movs	r6, #0
 8009164:	4630      	mov	r0, r6
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	220c      	movs	r2, #12
 800916a:	6002      	str	r2, [r0, #0]
 800916c:	e7f9      	b.n	8009162 <_calloc_r+0x12>
 800916e:	462a      	mov	r2, r5
 8009170:	4621      	mov	r1, r4
 8009172:	f7fe fa8b 	bl	800768c <memset>
 8009176:	e7f5      	b.n	8009164 <_calloc_r+0x14>

08009178 <_free_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4605      	mov	r5, r0
 800917c:	2900      	cmp	r1, #0
 800917e:	d041      	beq.n	8009204 <_free_r+0x8c>
 8009180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009184:	1f0c      	subs	r4, r1, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	18e4      	addlt	r4, r4, r3
 800918c:	f7ff fb44 	bl	8008818 <__malloc_lock>
 8009190:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <_free_r+0x90>)
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	b933      	cbnz	r3, 80091a4 <_free_r+0x2c>
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6014      	str	r4, [r2, #0]
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091a0:	f7ff bb40 	b.w	8008824 <__malloc_unlock>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x42>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf01      	itttt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	1809      	addeq	r1, r1, r0
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	e7ed      	b.n	8009196 <_free_r+0x1e>
 80091ba:	461a      	mov	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	b10b      	cbz	r3, 80091c4 <_free_r+0x4c>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x42>
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	1850      	adds	r0, r2, r1
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x6c>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	4401      	add	r1, r0
 80091d0:	1850      	adds	r0, r2, r1
 80091d2:	4283      	cmp	r3, r0
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	d1e0      	bne.n	800919a <_free_r+0x22>
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6053      	str	r3, [r2, #4]
 80091de:	4408      	add	r0, r1
 80091e0:	6010      	str	r0, [r2, #0]
 80091e2:	e7da      	b.n	800919a <_free_r+0x22>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x74>
 80091e6:	230c      	movs	r3, #12
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	e7d6      	b.n	800919a <_free_r+0x22>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7ca      	b.n	800919a <_free_r+0x22>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000c84 	.word	0x20000c84

0800920c <__ascii_mbtowc>:
 800920c:	b082      	sub	sp, #8
 800920e:	b901      	cbnz	r1, 8009212 <__ascii_mbtowc+0x6>
 8009210:	a901      	add	r1, sp, #4
 8009212:	b142      	cbz	r2, 8009226 <__ascii_mbtowc+0x1a>
 8009214:	b14b      	cbz	r3, 800922a <__ascii_mbtowc+0x1e>
 8009216:	7813      	ldrb	r3, [r2, #0]
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	1e10      	subs	r0, r2, #0
 800921e:	bf18      	it	ne
 8009220:	2001      	movne	r0, #1
 8009222:	b002      	add	sp, #8
 8009224:	4770      	bx	lr
 8009226:	4610      	mov	r0, r2
 8009228:	e7fb      	b.n	8009222 <__ascii_mbtowc+0x16>
 800922a:	f06f 0001 	mvn.w	r0, #1
 800922e:	e7f8      	b.n	8009222 <__ascii_mbtowc+0x16>

08009230 <_malloc_usable_size_r>:
 8009230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009234:	1f18      	subs	r0, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfbc      	itt	lt
 800923a:	580b      	ldrlt	r3, [r1, r0]
 800923c:	18c0      	addlt	r0, r0, r3
 800923e:	4770      	bx	lr

08009240 <fiprintf>:
 8009240:	b40e      	push	{r1, r2, r3}
 8009242:	b503      	push	{r0, r1, lr}
 8009244:	4601      	mov	r1, r0
 8009246:	ab03      	add	r3, sp, #12
 8009248:	4805      	ldr	r0, [pc, #20]	@ (8009260 <fiprintf+0x20>)
 800924a:	f853 2b04 	ldr.w	r2, [r3], #4
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	f000 f845 	bl	80092e0 <_vfiprintf_r>
 8009256:	b002      	add	sp, #8
 8009258:	f85d eb04 	ldr.w	lr, [sp], #4
 800925c:	b003      	add	sp, #12
 800925e:	4770      	bx	lr
 8009260:	20000020 	.word	0x20000020

08009264 <__ascii_wctomb>:
 8009264:	4603      	mov	r3, r0
 8009266:	4608      	mov	r0, r1
 8009268:	b141      	cbz	r1, 800927c <__ascii_wctomb+0x18>
 800926a:	2aff      	cmp	r2, #255	@ 0xff
 800926c:	d904      	bls.n	8009278 <__ascii_wctomb+0x14>
 800926e:	228a      	movs	r2, #138	@ 0x8a
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009276:	4770      	bx	lr
 8009278:	700a      	strb	r2, [r1, #0]
 800927a:	2001      	movs	r0, #1
 800927c:	4770      	bx	lr

0800927e <abort>:
 800927e:	b508      	push	{r3, lr}
 8009280:	2006      	movs	r0, #6
 8009282:	f000 fa85 	bl	8009790 <raise>
 8009286:	2001      	movs	r0, #1
 8009288:	f7f8 f952 	bl	8001530 <_exit>

0800928c <__sfputc_r>:
 800928c:	6893      	ldr	r3, [r2, #8]
 800928e:	3b01      	subs	r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	b410      	push	{r4}
 8009294:	6093      	str	r3, [r2, #8]
 8009296:	da08      	bge.n	80092aa <__sfputc_r+0x1e>
 8009298:	6994      	ldr	r4, [r2, #24]
 800929a:	42a3      	cmp	r3, r4
 800929c:	db01      	blt.n	80092a2 <__sfputc_r+0x16>
 800929e:	290a      	cmp	r1, #10
 80092a0:	d103      	bne.n	80092aa <__sfputc_r+0x1e>
 80092a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a6:	f000 b933 	b.w	8009510 <__swbuf_r>
 80092aa:	6813      	ldr	r3, [r2, #0]
 80092ac:	1c58      	adds	r0, r3, #1
 80092ae:	6010      	str	r0, [r2, #0]
 80092b0:	7019      	strb	r1, [r3, #0]
 80092b2:	4608      	mov	r0, r1
 80092b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <__sfputs_r>:
 80092ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092bc:	4606      	mov	r6, r0
 80092be:	460f      	mov	r7, r1
 80092c0:	4614      	mov	r4, r2
 80092c2:	18d5      	adds	r5, r2, r3
 80092c4:	42ac      	cmp	r4, r5
 80092c6:	d101      	bne.n	80092cc <__sfputs_r+0x12>
 80092c8:	2000      	movs	r0, #0
 80092ca:	e007      	b.n	80092dc <__sfputs_r+0x22>
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	463a      	mov	r2, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	f7ff ffda 	bl	800928c <__sfputc_r>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d1f3      	bne.n	80092c4 <__sfputs_r+0xa>
 80092dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092e0 <_vfiprintf_r>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	460d      	mov	r5, r1
 80092e6:	b09d      	sub	sp, #116	@ 0x74
 80092e8:	4614      	mov	r4, r2
 80092ea:	4698      	mov	r8, r3
 80092ec:	4606      	mov	r6, r0
 80092ee:	b118      	cbz	r0, 80092f8 <_vfiprintf_r+0x18>
 80092f0:	6a03      	ldr	r3, [r0, #32]
 80092f2:	b90b      	cbnz	r3, 80092f8 <_vfiprintf_r+0x18>
 80092f4:	f7fe f994 	bl	8007620 <__sinit>
 80092f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092fa:	07d9      	lsls	r1, r3, #31
 80092fc:	d405      	bmi.n	800930a <_vfiprintf_r+0x2a>
 80092fe:	89ab      	ldrh	r3, [r5, #12]
 8009300:	059a      	lsls	r2, r3, #22
 8009302:	d402      	bmi.n	800930a <_vfiprintf_r+0x2a>
 8009304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009306:	f7fe f9f8 	bl	80076fa <__retarget_lock_acquire_recursive>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	071b      	lsls	r3, r3, #28
 800930e:	d501      	bpl.n	8009314 <_vfiprintf_r+0x34>
 8009310:	692b      	ldr	r3, [r5, #16]
 8009312:	b99b      	cbnz	r3, 800933c <_vfiprintf_r+0x5c>
 8009314:	4629      	mov	r1, r5
 8009316:	4630      	mov	r0, r6
 8009318:	f000 f938 	bl	800958c <__swsetup_r>
 800931c:	b170      	cbz	r0, 800933c <_vfiprintf_r+0x5c>
 800931e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009320:	07dc      	lsls	r4, r3, #31
 8009322:	d504      	bpl.n	800932e <_vfiprintf_r+0x4e>
 8009324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009328:	b01d      	add	sp, #116	@ 0x74
 800932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	0598      	lsls	r0, r3, #22
 8009332:	d4f7      	bmi.n	8009324 <_vfiprintf_r+0x44>
 8009334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009336:	f7fe f9e1 	bl	80076fc <__retarget_lock_release_recursive>
 800933a:	e7f3      	b.n	8009324 <_vfiprintf_r+0x44>
 800933c:	2300      	movs	r3, #0
 800933e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009340:	2320      	movs	r3, #32
 8009342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009346:	f8cd 800c 	str.w	r8, [sp, #12]
 800934a:	2330      	movs	r3, #48	@ 0x30
 800934c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094fc <_vfiprintf_r+0x21c>
 8009350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009354:	f04f 0901 	mov.w	r9, #1
 8009358:	4623      	mov	r3, r4
 800935a:	469a      	mov	sl, r3
 800935c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009360:	b10a      	cbz	r2, 8009366 <_vfiprintf_r+0x86>
 8009362:	2a25      	cmp	r2, #37	@ 0x25
 8009364:	d1f9      	bne.n	800935a <_vfiprintf_r+0x7a>
 8009366:	ebba 0b04 	subs.w	fp, sl, r4
 800936a:	d00b      	beq.n	8009384 <_vfiprintf_r+0xa4>
 800936c:	465b      	mov	r3, fp
 800936e:	4622      	mov	r2, r4
 8009370:	4629      	mov	r1, r5
 8009372:	4630      	mov	r0, r6
 8009374:	f7ff ffa1 	bl	80092ba <__sfputs_r>
 8009378:	3001      	adds	r0, #1
 800937a:	f000 80a7 	beq.w	80094cc <_vfiprintf_r+0x1ec>
 800937e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009380:	445a      	add	r2, fp
 8009382:	9209      	str	r2, [sp, #36]	@ 0x24
 8009384:	f89a 3000 	ldrb.w	r3, [sl]
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 809f 	beq.w	80094cc <_vfiprintf_r+0x1ec>
 800938e:	2300      	movs	r3, #0
 8009390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009398:	f10a 0a01 	add.w	sl, sl, #1
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	9307      	str	r3, [sp, #28]
 80093a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80093a6:	4654      	mov	r4, sl
 80093a8:	2205      	movs	r2, #5
 80093aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ae:	4853      	ldr	r0, [pc, #332]	@ (80094fc <_vfiprintf_r+0x21c>)
 80093b0:	f7f6 ff46 	bl	8000240 <memchr>
 80093b4:	9a04      	ldr	r2, [sp, #16]
 80093b6:	b9d8      	cbnz	r0, 80093f0 <_vfiprintf_r+0x110>
 80093b8:	06d1      	lsls	r1, r2, #27
 80093ba:	bf44      	itt	mi
 80093bc:	2320      	movmi	r3, #32
 80093be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093c2:	0713      	lsls	r3, r2, #28
 80093c4:	bf44      	itt	mi
 80093c6:	232b      	movmi	r3, #43	@ 0x2b
 80093c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093cc:	f89a 3000 	ldrb.w	r3, [sl]
 80093d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d2:	d015      	beq.n	8009400 <_vfiprintf_r+0x120>
 80093d4:	9a07      	ldr	r2, [sp, #28]
 80093d6:	4654      	mov	r4, sl
 80093d8:	2000      	movs	r0, #0
 80093da:	f04f 0c0a 	mov.w	ip, #10
 80093de:	4621      	mov	r1, r4
 80093e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093e4:	3b30      	subs	r3, #48	@ 0x30
 80093e6:	2b09      	cmp	r3, #9
 80093e8:	d94b      	bls.n	8009482 <_vfiprintf_r+0x1a2>
 80093ea:	b1b0      	cbz	r0, 800941a <_vfiprintf_r+0x13a>
 80093ec:	9207      	str	r2, [sp, #28]
 80093ee:	e014      	b.n	800941a <_vfiprintf_r+0x13a>
 80093f0:	eba0 0308 	sub.w	r3, r0, r8
 80093f4:	fa09 f303 	lsl.w	r3, r9, r3
 80093f8:	4313      	orrs	r3, r2
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	46a2      	mov	sl, r4
 80093fe:	e7d2      	b.n	80093a6 <_vfiprintf_r+0xc6>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	1d19      	adds	r1, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	9103      	str	r1, [sp, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfbb      	ittet	lt
 800940c:	425b      	neglt	r3, r3
 800940e:	f042 0202 	orrlt.w	r2, r2, #2
 8009412:	9307      	strge	r3, [sp, #28]
 8009414:	9307      	strlt	r3, [sp, #28]
 8009416:	bfb8      	it	lt
 8009418:	9204      	strlt	r2, [sp, #16]
 800941a:	7823      	ldrb	r3, [r4, #0]
 800941c:	2b2e      	cmp	r3, #46	@ 0x2e
 800941e:	d10a      	bne.n	8009436 <_vfiprintf_r+0x156>
 8009420:	7863      	ldrb	r3, [r4, #1]
 8009422:	2b2a      	cmp	r3, #42	@ 0x2a
 8009424:	d132      	bne.n	800948c <_vfiprintf_r+0x1ac>
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	1d1a      	adds	r2, r3, #4
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	9203      	str	r2, [sp, #12]
 800942e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009432:	3402      	adds	r4, #2
 8009434:	9305      	str	r3, [sp, #20]
 8009436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800950c <_vfiprintf_r+0x22c>
 800943a:	7821      	ldrb	r1, [r4, #0]
 800943c:	2203      	movs	r2, #3
 800943e:	4650      	mov	r0, sl
 8009440:	f7f6 fefe 	bl	8000240 <memchr>
 8009444:	b138      	cbz	r0, 8009456 <_vfiprintf_r+0x176>
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	eba0 000a 	sub.w	r0, r0, sl
 800944c:	2240      	movs	r2, #64	@ 0x40
 800944e:	4082      	lsls	r2, r0
 8009450:	4313      	orrs	r3, r2
 8009452:	3401      	adds	r4, #1
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945a:	4829      	ldr	r0, [pc, #164]	@ (8009500 <_vfiprintf_r+0x220>)
 800945c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009460:	2206      	movs	r2, #6
 8009462:	f7f6 feed 	bl	8000240 <memchr>
 8009466:	2800      	cmp	r0, #0
 8009468:	d03f      	beq.n	80094ea <_vfiprintf_r+0x20a>
 800946a:	4b26      	ldr	r3, [pc, #152]	@ (8009504 <_vfiprintf_r+0x224>)
 800946c:	bb1b      	cbnz	r3, 80094b6 <_vfiprintf_r+0x1d6>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	3307      	adds	r3, #7
 8009472:	f023 0307 	bic.w	r3, r3, #7
 8009476:	3308      	adds	r3, #8
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800947c:	443b      	add	r3, r7
 800947e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009480:	e76a      	b.n	8009358 <_vfiprintf_r+0x78>
 8009482:	fb0c 3202 	mla	r2, ip, r2, r3
 8009486:	460c      	mov	r4, r1
 8009488:	2001      	movs	r0, #1
 800948a:	e7a8      	b.n	80093de <_vfiprintf_r+0xfe>
 800948c:	2300      	movs	r3, #0
 800948e:	3401      	adds	r4, #1
 8009490:	9305      	str	r3, [sp, #20]
 8009492:	4619      	mov	r1, r3
 8009494:	f04f 0c0a 	mov.w	ip, #10
 8009498:	4620      	mov	r0, r4
 800949a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949e:	3a30      	subs	r2, #48	@ 0x30
 80094a0:	2a09      	cmp	r2, #9
 80094a2:	d903      	bls.n	80094ac <_vfiprintf_r+0x1cc>
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0c6      	beq.n	8009436 <_vfiprintf_r+0x156>
 80094a8:	9105      	str	r1, [sp, #20]
 80094aa:	e7c4      	b.n	8009436 <_vfiprintf_r+0x156>
 80094ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80094b0:	4604      	mov	r4, r0
 80094b2:	2301      	movs	r3, #1
 80094b4:	e7f0      	b.n	8009498 <_vfiprintf_r+0x1b8>
 80094b6:	ab03      	add	r3, sp, #12
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	462a      	mov	r2, r5
 80094bc:	4b12      	ldr	r3, [pc, #72]	@ (8009508 <_vfiprintf_r+0x228>)
 80094be:	a904      	add	r1, sp, #16
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7fd fc59 	bl	8006d78 <_printf_float>
 80094c6:	4607      	mov	r7, r0
 80094c8:	1c78      	adds	r0, r7, #1
 80094ca:	d1d6      	bne.n	800947a <_vfiprintf_r+0x19a>
 80094cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094ce:	07d9      	lsls	r1, r3, #31
 80094d0:	d405      	bmi.n	80094de <_vfiprintf_r+0x1fe>
 80094d2:	89ab      	ldrh	r3, [r5, #12]
 80094d4:	059a      	lsls	r2, r3, #22
 80094d6:	d402      	bmi.n	80094de <_vfiprintf_r+0x1fe>
 80094d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094da:	f7fe f90f 	bl	80076fc <__retarget_lock_release_recursive>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	065b      	lsls	r3, r3, #25
 80094e2:	f53f af1f 	bmi.w	8009324 <_vfiprintf_r+0x44>
 80094e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094e8:	e71e      	b.n	8009328 <_vfiprintf_r+0x48>
 80094ea:	ab03      	add	r3, sp, #12
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	462a      	mov	r2, r5
 80094f0:	4b05      	ldr	r3, [pc, #20]	@ (8009508 <_vfiprintf_r+0x228>)
 80094f2:	a904      	add	r1, sp, #16
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7fd fec7 	bl	8007288 <_printf_i>
 80094fa:	e7e4      	b.n	80094c6 <_vfiprintf_r+0x1e6>
 80094fc:	08009911 	.word	0x08009911
 8009500:	0800991b 	.word	0x0800991b
 8009504:	08006d79 	.word	0x08006d79
 8009508:	080092bb 	.word	0x080092bb
 800950c:	08009917 	.word	0x08009917

08009510 <__swbuf_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	460e      	mov	r6, r1
 8009514:	4614      	mov	r4, r2
 8009516:	4605      	mov	r5, r0
 8009518:	b118      	cbz	r0, 8009522 <__swbuf_r+0x12>
 800951a:	6a03      	ldr	r3, [r0, #32]
 800951c:	b90b      	cbnz	r3, 8009522 <__swbuf_r+0x12>
 800951e:	f7fe f87f 	bl	8007620 <__sinit>
 8009522:	69a3      	ldr	r3, [r4, #24]
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	071a      	lsls	r2, r3, #28
 800952a:	d501      	bpl.n	8009530 <__swbuf_r+0x20>
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	b943      	cbnz	r3, 8009542 <__swbuf_r+0x32>
 8009530:	4621      	mov	r1, r4
 8009532:	4628      	mov	r0, r5
 8009534:	f000 f82a 	bl	800958c <__swsetup_r>
 8009538:	b118      	cbz	r0, 8009542 <__swbuf_r+0x32>
 800953a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800953e:	4638      	mov	r0, r7
 8009540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	6922      	ldr	r2, [r4, #16]
 8009546:	1a98      	subs	r0, r3, r2
 8009548:	6963      	ldr	r3, [r4, #20]
 800954a:	b2f6      	uxtb	r6, r6
 800954c:	4283      	cmp	r3, r0
 800954e:	4637      	mov	r7, r6
 8009550:	dc05      	bgt.n	800955e <__swbuf_r+0x4e>
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	f7ff f937 	bl	80087c8 <_fflush_r>
 800955a:	2800      	cmp	r0, #0
 800955c:	d1ed      	bne.n	800953a <__swbuf_r+0x2a>
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	3b01      	subs	r3, #1
 8009562:	60a3      	str	r3, [r4, #8]
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	6022      	str	r2, [r4, #0]
 800956a:	701e      	strb	r6, [r3, #0]
 800956c:	6962      	ldr	r2, [r4, #20]
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	429a      	cmp	r2, r3
 8009572:	d004      	beq.n	800957e <__swbuf_r+0x6e>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	07db      	lsls	r3, r3, #31
 8009578:	d5e1      	bpl.n	800953e <__swbuf_r+0x2e>
 800957a:	2e0a      	cmp	r6, #10
 800957c:	d1df      	bne.n	800953e <__swbuf_r+0x2e>
 800957e:	4621      	mov	r1, r4
 8009580:	4628      	mov	r0, r5
 8009582:	f7ff f921 	bl	80087c8 <_fflush_r>
 8009586:	2800      	cmp	r0, #0
 8009588:	d0d9      	beq.n	800953e <__swbuf_r+0x2e>
 800958a:	e7d6      	b.n	800953a <__swbuf_r+0x2a>

0800958c <__swsetup_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4b29      	ldr	r3, [pc, #164]	@ (8009634 <__swsetup_r+0xa8>)
 8009590:	4605      	mov	r5, r0
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	460c      	mov	r4, r1
 8009596:	b118      	cbz	r0, 80095a0 <__swsetup_r+0x14>
 8009598:	6a03      	ldr	r3, [r0, #32]
 800959a:	b90b      	cbnz	r3, 80095a0 <__swsetup_r+0x14>
 800959c:	f7fe f840 	bl	8007620 <__sinit>
 80095a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a4:	0719      	lsls	r1, r3, #28
 80095a6:	d422      	bmi.n	80095ee <__swsetup_r+0x62>
 80095a8:	06da      	lsls	r2, r3, #27
 80095aa:	d407      	bmi.n	80095bc <__swsetup_r+0x30>
 80095ac:	2209      	movs	r2, #9
 80095ae:	602a      	str	r2, [r5, #0]
 80095b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095ba:	e033      	b.n	8009624 <__swsetup_r+0x98>
 80095bc:	0758      	lsls	r0, r3, #29
 80095be:	d512      	bpl.n	80095e6 <__swsetup_r+0x5a>
 80095c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095c2:	b141      	cbz	r1, 80095d6 <__swsetup_r+0x4a>
 80095c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095c8:	4299      	cmp	r1, r3
 80095ca:	d002      	beq.n	80095d2 <__swsetup_r+0x46>
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7ff fdd3 	bl	8009178 <_free_r>
 80095d2:	2300      	movs	r3, #0
 80095d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	2300      	movs	r3, #0
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f043 0308 	orr.w	r3, r3, #8
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	b94b      	cbnz	r3, 8009606 <__swsetup_r+0x7a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095fc:	d003      	beq.n	8009606 <__swsetup_r+0x7a>
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	f000 f83f 	bl	8009684 <__smakebuf_r>
 8009606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960a:	f013 0201 	ands.w	r2, r3, #1
 800960e:	d00a      	beq.n	8009626 <__swsetup_r+0x9a>
 8009610:	2200      	movs	r2, #0
 8009612:	60a2      	str	r2, [r4, #8]
 8009614:	6962      	ldr	r2, [r4, #20]
 8009616:	4252      	negs	r2, r2
 8009618:	61a2      	str	r2, [r4, #24]
 800961a:	6922      	ldr	r2, [r4, #16]
 800961c:	b942      	cbnz	r2, 8009630 <__swsetup_r+0xa4>
 800961e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009622:	d1c5      	bne.n	80095b0 <__swsetup_r+0x24>
 8009624:	bd38      	pop	{r3, r4, r5, pc}
 8009626:	0799      	lsls	r1, r3, #30
 8009628:	bf58      	it	pl
 800962a:	6962      	ldrpl	r2, [r4, #20]
 800962c:	60a2      	str	r2, [r4, #8]
 800962e:	e7f4      	b.n	800961a <__swsetup_r+0x8e>
 8009630:	2000      	movs	r0, #0
 8009632:	e7f7      	b.n	8009624 <__swsetup_r+0x98>
 8009634:	20000020 	.word	0x20000020

08009638 <__swhatbuf_r>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	460c      	mov	r4, r1
 800963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009640:	2900      	cmp	r1, #0
 8009642:	b096      	sub	sp, #88	@ 0x58
 8009644:	4615      	mov	r5, r2
 8009646:	461e      	mov	r6, r3
 8009648:	da0d      	bge.n	8009666 <__swhatbuf_r+0x2e>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009650:	f04f 0100 	mov.w	r1, #0
 8009654:	bf14      	ite	ne
 8009656:	2340      	movne	r3, #64	@ 0x40
 8009658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800965c:	2000      	movs	r0, #0
 800965e:	6031      	str	r1, [r6, #0]
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	b016      	add	sp, #88	@ 0x58
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	466a      	mov	r2, sp
 8009668:	f000 f848 	bl	80096fc <_fstat_r>
 800966c:	2800      	cmp	r0, #0
 800966e:	dbec      	blt.n	800964a <__swhatbuf_r+0x12>
 8009670:	9901      	ldr	r1, [sp, #4]
 8009672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800967a:	4259      	negs	r1, r3
 800967c:	4159      	adcs	r1, r3
 800967e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009682:	e7eb      	b.n	800965c <__swhatbuf_r+0x24>

08009684 <__smakebuf_r>:
 8009684:	898b      	ldrh	r3, [r1, #12]
 8009686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009688:	079d      	lsls	r5, r3, #30
 800968a:	4606      	mov	r6, r0
 800968c:	460c      	mov	r4, r1
 800968e:	d507      	bpl.n	80096a0 <__smakebuf_r+0x1c>
 8009690:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	2301      	movs	r3, #1
 800969a:	6163      	str	r3, [r4, #20]
 800969c:	b003      	add	sp, #12
 800969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a0:	ab01      	add	r3, sp, #4
 80096a2:	466a      	mov	r2, sp
 80096a4:	f7ff ffc8 	bl	8009638 <__swhatbuf_r>
 80096a8:	9f00      	ldr	r7, [sp, #0]
 80096aa:	4605      	mov	r5, r0
 80096ac:	4639      	mov	r1, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	f7fe ff86 	bl	80085c0 <_malloc_r>
 80096b4:	b948      	cbnz	r0, 80096ca <__smakebuf_r+0x46>
 80096b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ba:	059a      	lsls	r2, r3, #22
 80096bc:	d4ee      	bmi.n	800969c <__smakebuf_r+0x18>
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	f043 0302 	orr.w	r3, r3, #2
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	e7e2      	b.n	8009690 <__smakebuf_r+0xc>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	6020      	str	r0, [r4, #0]
 80096ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096da:	b15b      	cbz	r3, 80096f4 <__smakebuf_r+0x70>
 80096dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096e0:	4630      	mov	r0, r6
 80096e2:	f000 f81d 	bl	8009720 <_isatty_r>
 80096e6:	b128      	cbz	r0, 80096f4 <__smakebuf_r+0x70>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f023 0303 	bic.w	r3, r3, #3
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	431d      	orrs	r5, r3
 80096f8:	81a5      	strh	r5, [r4, #12]
 80096fa:	e7cf      	b.n	800969c <__smakebuf_r+0x18>

080096fc <_fstat_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4d07      	ldr	r5, [pc, #28]	@ (800971c <_fstat_r+0x20>)
 8009700:	2300      	movs	r3, #0
 8009702:	4604      	mov	r4, r0
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	f7f7 ff61 	bl	80015d0 <_fstat>
 800970e:	1c43      	adds	r3, r0, #1
 8009710:	d102      	bne.n	8009718 <_fstat_r+0x1c>
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	b103      	cbz	r3, 8009718 <_fstat_r+0x1c>
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	bf00      	nop
 800971c:	20000c88 	.word	0x20000c88

08009720 <_isatty_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d06      	ldr	r5, [pc, #24]	@ (800973c <_isatty_r+0x1c>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	f7f7 ff60 	bl	80015f0 <_isatty>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d102      	bne.n	800973a <_isatty_r+0x1a>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	b103      	cbz	r3, 800973a <_isatty_r+0x1a>
 8009738:	6023      	str	r3, [r4, #0]
 800973a:	bd38      	pop	{r3, r4, r5, pc}
 800973c:	20000c88 	.word	0x20000c88

08009740 <_raise_r>:
 8009740:	291f      	cmp	r1, #31
 8009742:	b538      	push	{r3, r4, r5, lr}
 8009744:	4605      	mov	r5, r0
 8009746:	460c      	mov	r4, r1
 8009748:	d904      	bls.n	8009754 <_raise_r+0x14>
 800974a:	2316      	movs	r3, #22
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009756:	b112      	cbz	r2, 800975e <_raise_r+0x1e>
 8009758:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800975c:	b94b      	cbnz	r3, 8009772 <_raise_r+0x32>
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f830 	bl	80097c4 <_getpid_r>
 8009764:	4622      	mov	r2, r4
 8009766:	4601      	mov	r1, r0
 8009768:	4628      	mov	r0, r5
 800976a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976e:	f000 b817 	b.w	80097a0 <_kill_r>
 8009772:	2b01      	cmp	r3, #1
 8009774:	d00a      	beq.n	800978c <_raise_r+0x4c>
 8009776:	1c59      	adds	r1, r3, #1
 8009778:	d103      	bne.n	8009782 <_raise_r+0x42>
 800977a:	2316      	movs	r3, #22
 800977c:	6003      	str	r3, [r0, #0]
 800977e:	2001      	movs	r0, #1
 8009780:	e7e7      	b.n	8009752 <_raise_r+0x12>
 8009782:	2100      	movs	r1, #0
 8009784:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009788:	4620      	mov	r0, r4
 800978a:	4798      	blx	r3
 800978c:	2000      	movs	r0, #0
 800978e:	e7e0      	b.n	8009752 <_raise_r+0x12>

08009790 <raise>:
 8009790:	4b02      	ldr	r3, [pc, #8]	@ (800979c <raise+0xc>)
 8009792:	4601      	mov	r1, r0
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	f7ff bfd3 	b.w	8009740 <_raise_r>
 800979a:	bf00      	nop
 800979c:	20000020 	.word	0x20000020

080097a0 <_kill_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	@ (80097c0 <_kill_r+0x20>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	4611      	mov	r1, r2
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	f7f7 feaf 	bl	8001510 <_kill>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d102      	bne.n	80097bc <_kill_r+0x1c>
 80097b6:	682b      	ldr	r3, [r5, #0]
 80097b8:	b103      	cbz	r3, 80097bc <_kill_r+0x1c>
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	bd38      	pop	{r3, r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20000c88 	.word	0x20000c88

080097c4 <_getpid_r>:
 80097c4:	f7f7 be9c 	b.w	8001500 <_getpid>

080097c8 <_init>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

080097d4 <_fini>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	bf00      	nop
 80097d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097da:	bc08      	pop	{r3}
 80097dc:	469e      	mov	lr, r3
 80097de:	4770      	bx	lr
