
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a20  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009c20  08009c20  0000ac20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb0  08009fb0  0000b32c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fb0  08009fb0  0000afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb8  08009fb8  0000b32c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009fc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001ec  0800a1ac  0000b1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000028c  0800a24c  0000b28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009d4  2000032c  0800a2ec  0000b32c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d00  0800a2ec  0000bd00  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b32c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019c5e  00000000  00000000  0000b35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000326b  00000000  00000000  00024fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015b0  00000000  00000000  00028228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010e5  00000000  00000000  000297d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b422  00000000  00000000  0002a8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000194d4  00000000  00000000  00055cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b681  00000000  00000000  0006f1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017a834  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006a34  00000000  00000000  0017a878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  001812ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000032c 	.word	0x2000032c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c08 	.word	0x08009c08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000330 	.word	0x20000330
 800023c:	08009c08 	.word	0x08009c08

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <func_calibrate_sensor>:
		sensor_status = 1;
	}
}

// Calibrate sensor
void func_calibrate_sensor(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	// Take initial measurements
	func_average_adc_measurement();
 80005e4:	f000 f80a 	bl	80005fc <func_average_adc_measurement>

	// Set auto-zero value
	func_auto_zero();
 80005e8:	f000 f840 	bl	800066c <func_auto_zero>
	calibration_status = 0;
 80005ec:	4b02      	ldr	r3, [pc, #8]	@ (80005f8 <func_calibrate_sensor+0x18>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000004 	.word	0x20000004

080005fc <func_average_adc_measurement>:
	func_kpa_to_inh2o();

}

// Average measurement
void func_average_adc_measurement(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	avg_adc_value = (float)adc_total / dog;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <func_average_adc_measurement+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <func_average_adc_measurement+0x34>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <func_average_adc_measurement+0x38>)
 800061e:	edc3 7a00 	vstr	s15, [r3]
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	20000b78 	.word	0x20000b78
 8000630:	20000b70 	.word	0x20000b70
 8000634:	20000b7c 	.word	0x20000b7c

08000638 <func_get_adc_value>:
	func_adc_conversion();

}

// Get ADC value
void func_get_adc_value(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc1);
 800063c:	4809      	ldr	r0, [pc, #36]	@ (8000664 <func_get_adc_value+0x2c>)
 800063e:	f001 fb3d 	bl	8001cbc <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000642:	4808      	ldr	r0, [pc, #32]	@ (8000664 <func_get_adc_value+0x2c>)
 8000644:	f001 fa6c 	bl	8001b20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <func_get_adc_value+0x2c>)
 800064e:	f001 fb69 	bl	8001d24 <HAL_ADC_PollForConversion>
	raw_adc_value = HAL_ADC_GetValue(&hadc1);
 8000652:	4804      	ldr	r0, [pc, #16]	@ (8000664 <func_get_adc_value+0x2c>)
 8000654:	f001 fbf1 	bl	8001e3a <HAL_ADC_GetValue>
 8000658:	4603      	mov	r3, r0
 800065a:	4a03      	ldr	r2, [pc, #12]	@ (8000668 <func_get_adc_value+0x30>)
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000380 	.word	0x20000380
 8000668:	20000b74 	.word	0x20000b74

0800066c <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	func_adc_to_voltage();
 8000670:	f000 f80e 	bl	8000690 <func_adc_to_voltage>
	func_voltage_to_kpa();
 8000674:	f000 f870 	bl	8000758 <func_voltage_to_kpa>
	auto_zero_pressure_value =  measured_kpa_pressure - KNOWN_REF_PRESSURE;
 8000678:	4b02      	ldr	r3, [pc, #8]	@ (8000684 <func_auto_zero+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a02      	ldr	r2, [pc, #8]	@ (8000688 <func_auto_zero+0x1c>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000b80 	.word	0x20000b80
 8000688:	20000b88 	.word	0x20000b88
 800068c:	00000000 	.word	0x00000000

08000690 <func_adc_to_voltage>:

// ADC to voltage
void func_adc_to_voltage(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

	if(sensor_status){
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <func_adc_to_voltage+0xb0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d015      	beq.n	80006c8 <func_adc_to_voltage+0x38>
		measured_voltage_value = ((float)raw_adc_value * 3.3) / 4095;
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <func_adc_to_voltage+0xb4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ac:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000730 <func_adc_to_voltage+0xa0>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006b4:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000738 <func_adc_to_voltage+0xa8>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <func_adc_to_voltage+0xb8>)
 80006c2:	edc3 7a00 	vstr	s15, [r3]
	} else if(calibration_status){
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
	} else {
		measured_voltage_value = ((float)raw_adc_value * 3.3) / 4095;
	}
}
 80006c6:	e02b      	b.n	8000720 <func_adc_to_voltage+0x90>
	} else if(calibration_status){
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <func_adc_to_voltage+0xbc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d012      	beq.n	80006f6 <func_adc_to_voltage+0x66>
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <func_adc_to_voltage+0xc0>)
 80006d2:	edd3 7a00 	vldr	s15, [r3]
 80006d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006da:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8000730 <func_adc_to_voltage+0xa0>
 80006de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006e2:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8000738 <func_adc_to_voltage+0xa8>
 80006e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ee:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <func_adc_to_voltage+0xb8>)
 80006f0:	edc3 7a00 	vstr	s15, [r3]
}
 80006f4:	e014      	b.n	8000720 <func_adc_to_voltage+0x90>
		measured_voltage_value = ((float)raw_adc_value * 3.3) / 4095;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <func_adc_to_voltage+0xb4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	ee07 3a90 	vmov	s15, r3
 80006fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000706:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8000730 <func_adc_to_voltage+0xa0>
 800070a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800070e:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8000738 <func_adc_to_voltage+0xa8>
 8000712:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000716:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <func_adc_to_voltage+0xb8>)
 800071c:	edc3 7a00 	vstr	s15, [r3]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	f3af 8000 	nop.w
 8000730:	66666666 	.word	0x66666666
 8000734:	400a6666 	.word	0x400a6666
 8000738:	00000000 	.word	0x00000000
 800073c:	40affe00 	.word	0x40affe00
 8000740:	20000000 	.word	0x20000000
 8000744:	20000b74 	.word	0x20000b74
 8000748:	20000b84 	.word	0x20000b84
 800074c:	20000004 	.word	0x20000004
 8000750:	20000b7c 	.word	0x20000b7c
 8000754:	00000000 	.word	0x00000000

08000758 <func_voltage_to_kpa>:

// Voltage to Pa
void func_voltage_to_kpa(void){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	measured_kpa_pressure = ((measured_voltage_value / OUTPUT_VOLTAGE_MAX) - 0.5) / 0.057;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <func_voltage_to_kpa+0x60>)
 800075e:	ed93 7a00 	vldr	s14, [r3]
 8000762:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8000766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800076e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000772:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000776:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80007b0 <func_voltage_to_kpa+0x58>
 800077a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800077e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <func_voltage_to_kpa+0x64>)
 8000784:	edc3 7a00 	vstr	s15, [r3]
	if(!calibration_status){
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <func_voltage_to_kpa+0x68>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d10a      	bne.n	80007a6 <func_voltage_to_kpa+0x4e>
		measured_kpa_pressure = measured_kpa_pressure - auto_zero_pressure_value;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <func_voltage_to_kpa+0x64>)
 8000792:	ed93 7a00 	vldr	s14, [r3]
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <func_voltage_to_kpa+0x6c>)
 8000798:	edd3 7a00 	vldr	s15, [r3]
 800079c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <func_voltage_to_kpa+0x64>)
 80007a2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	9fbe76c9 	.word	0x9fbe76c9
 80007b4:	3fad2f1a 	.word	0x3fad2f1a
 80007b8:	20000b84 	.word	0x20000b84
 80007bc:	20000b80 	.word	0x20000b80
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000b88 	.word	0x20000b88

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f001 f8e3 	bl	8001996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f862 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 fb2c 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f000 fb0c 	bl	8000df4 <MX_DMA_Init>
  MX_ADC1_Init();
 80007dc:	f000 f8ce 	bl	800097c <MX_ADC1_Init>
  MX_ETH_Init();
 80007e0:	f000 f91e 	bl	8000a20 <MX_ETH_Init>
  MX_TIM2_Init();
 80007e4:	f000 f96a 	bl	8000abc <MX_TIM2_Init>
  MX_TIM4_Init();
 80007e8:	f000 f9b6 	bl	8000b58 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80007ec:	f000 faa4 	bl	8000d38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f0:	f000 fad2 	bl	8000d98 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80007f4:	f000 fa28 	bl	8000c48 <MX_TIM6_Init>
  MX_TIM7_Init();
 80007f8:	f000 fa62 	bl	8000cc0 <MX_TIM7_Init>
//  while(calibration_status){
//	  func_calibrate_sensor();
//  }

  // Initialize breath cycle variables
  breath_cycle_time = 60.0 / breath_rate;
 80007fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000878 <main+0xb0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000808:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 8000870 <main+0xa8>
 800080c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000814:	4b19      	ldr	r3, [pc, #100]	@ (800087c <main+0xb4>)
 8000816:	edc3 7a00 	vstr	s15, [r3]
  inspiration_time = (breath_cycle_time / (inspiratory_ratio_portion + expiratory_ratio_portion)) * inspiratory_ratio_portion;
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <main+0xb4>)
 800081c:	edd3 6a00 	vldr	s13, [r3]
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <main+0xb8>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <main+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4413      	add	r3, r2
 800082a:	ee07 3a90 	vmov	s15, r3
 800082e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000836:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <main+0xb8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <main+0xc0>)
 8000848:	edc3 7a00 	vstr	s15, [r3]
  expiration_time = breath_cycle_time - inspiration_time;
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <main+0xb4>)
 800084e:	ed93 7a00 	vldr	s14, [r3]
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <main+0xc0>)
 8000854:	edd3 7a00 	vldr	s15, [r3]
 8000858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <main+0xc4>)
 800085e:	edc3 7a00 	vstr	s15, [r3]

  // Initialize setpoint
  setpoint = inspiratory_pressure_value;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <main+0xc8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <main+0xcc>)
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800086a:	bf00      	nop
 800086c:	e7fd      	b.n	800086a <main+0xa2>
 800086e:	bf00      	nop
 8000870:	00000000 	.word	0x00000000
 8000874:	404e0000 	.word	0x404e0000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000b8c 	.word	0x20000b8c
 8000880:	2000000c 	.word	0x2000000c
 8000884:	20000010 	.word	0x20000010
 8000888:	20000b90 	.word	0x20000b90
 800088c:	20000b94 	.word	0x20000b94
 8000890:	20000014 	.word	0x20000014
 8000894:	20000b98 	.word	0x20000b98

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	@ 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2234      	movs	r2, #52	@ 0x34
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f007 fab8 	bl	8007e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	f107 0308 	add.w	r3, r7, #8
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008bc:	f003 f81a 	bl	80038f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <SystemClock_Config+0xdc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000974 <SystemClock_Config+0xdc>)
 80008c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <SystemClock_Config+0xdc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <SystemClock_Config+0xe0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008e0:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <SystemClock_Config+0xe0>)
 80008e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <SystemClock_Config+0xe0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000906:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800090c:	2360      	movs	r3, #96	@ 0x60
 800090e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f847 	bl	80039b4 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800092c:	f000 fbe0 	bl	80010f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000930:	f002 fff0 	bl	8003914 <HAL_PWREx_EnableOverDrive>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800093a:	f000 fbd9 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2103      	movs	r1, #3
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fad8 	bl	8003f10 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000966:	f000 fbc3 	bl	80010f0 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	@ 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_ADC1_Init+0x98>)
 8000990:	4a21      	ldr	r2, [pc, #132]	@ (8000a18 <MX_ADC1_Init+0x9c>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000994:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_ADC1_Init+0x98>)
 8000996:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800099a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <MX_ADC1_Init+0xa0>)
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009d8:	2201      	movs	r2, #1
 80009da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009de:	f001 f85b 	bl	8001a98 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009e8:	f000 fb82 	bl	80010f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009ec:	230d      	movs	r3, #13
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009f4:	2307      	movs	r3, #7
 80009f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_ADC1_Init+0x98>)
 80009fe:	f001 fa29 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a08:	f000 fb72 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000380 	.word	0x20000380
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	0f000001 	.word	0x0f000001

08000a20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a26:	4a20      	ldr	r2, [pc, #128]	@ (8000aa8 <MX_ETH_Init+0x88>)
 8000a28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a38:	22e1      	movs	r2, #225	@ 0xe1
 8000a3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a50:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <MX_ETH_Init+0x8c>)
 8000a52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a56:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a5a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <MX_ETH_Init+0x90>)
 8000a60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a64:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_ETH_Init+0x94>)
 8000a66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a6a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_ETH_Init+0x84>)
 8000a72:	f002 f8cd 	bl	8002c10 <HAL_ETH_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a7c:	f000 fb38 	bl	80010f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a80:	2238      	movs	r2, #56	@ 0x38
 8000a82:	2100      	movs	r1, #0
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a86:	f007 f9c9 	bl	8007e1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a8c:	2221      	movs	r2, #33	@ 0x21
 8000a8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a92:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_ETH_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000428 	.word	0x20000428
 8000aa8:	40028000 	.word	0x40028000
 8000aac:	20000b9c 	.word	0x20000b9c
 8000ab0:	2000028c 	.word	0x2000028c
 8000ab4:	200001ec 	.word	0x200001ec
 8000ab8:	20000348 	.word	0x20000348

08000abc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000-1;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000af0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b02:	4814      	ldr	r0, [pc, #80]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000b04:	f004 f852 	bl	8004bac <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b0e:	f000 faef 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000b20:	f004 fc30 	bl	8005384 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b2a:	f000 fae1 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_TIM2_Init+0x98>)
 8000b3c:	f005 f8b8 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b46:	f000 fad3 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200004d8 	.word	0x200004d8

08000b58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000c44 <MX_TIM4_Init+0xec>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2-1;
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b2a      	ldr	r3, [pc, #168]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9600-1;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000b9e:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000ba2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bb0:	4823      	ldr	r0, [pc, #140]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000bb2:	f003 fffb 	bl	8004bac <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bbc:	f000 fa98 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481c      	ldr	r0, [pc, #112]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000bce:	f004 fbd9 	bl	8005384 <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000bd8:	f000 fa8a 	bl	80010f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bdc:	4818      	ldr	r0, [pc, #96]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000bde:	f004 f954 	bl	8004e8a <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000be8:	f000 fa82 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000bfc:	f005 f858 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 fa73 	bl	80010f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	@ 0x60
 8000c0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000c22:	f004 fa9b 	bl	800515c <HAL_TIM_PWM_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000c2c:	f000 fa60 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <MX_TIM4_Init+0xe8>)
 8000c32:	f000 fc2b 	bl	800148c <HAL_TIM_MspPostInit>

}
 8000c36:	bf00      	nop
 8000c38:	3738      	adds	r7, #56	@ 0x38
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000524 	.word	0x20000524
 8000c44:	40000800 	.word	0x40000800

08000c48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c5a:	4a18      	ldr	r2, [pc, #96]	@ (8000cbc <MX_TIM6_Init+0x74>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2-1;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 48000-1;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c6c:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000c70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c78:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c7a:	f003 ff97 	bl	8004bac <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c84:	f000 fa34 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000c96:	f005 f80b 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ca0:	f000 fa26 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000ca6:	f004 f849 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8000caa:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <MX_TIM6_Init+0x70>)
 8000cac:	f003 ffd6 	bl	8004c5c <HAL_TIM_Base_Start>
  /* USER CODE END TIM6_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000570 	.word	0x20000570
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000cd2:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <MX_TIM7_Init+0x74>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2-1;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 48000-1;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000ce4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ce8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000cf0:	480f      	ldr	r0, [pc, #60]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000cf2:	f003 ff5b 	bl	8004bac <HAL_TIM_Base_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000cfc:	f000 f9f8 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4808      	ldr	r0, [pc, #32]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000d0e:	f004 ffcf 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 f9ea 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000d1e:	f004 f80d 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim7);
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <MX_TIM7_Init+0x70>)
 8000d24:	f003 ff9a 	bl	8004c5c <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200005bc 	.word	0x200005bc
 8000d34:	40001400 	.word	0x40001400

08000d38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	@ (8000d94 <MX_USART3_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USART3_UART_Init+0x58>)
 8000d7c:	f005 f844 	bl	8005e08 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 f9b3 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000608 	.word	0x20000608
 8000d94:	40004800 	.word	0x40004800

08000d98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000da2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000da4:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2206      	movs	r2, #6
 8000da8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	f002 fc4f 	bl	800367e <HAL_PCD_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 f983 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000690 	.word	0x20000690

08000df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <MX_DMA_Init+0x38>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <MX_DMA_Init+0x38>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <MX_DMA_Init+0x38>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2038      	movs	r0, #56	@ 0x38
 8000e18:	f001 fb47 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e1c:	2038      	movs	r0, #56	@ 0x38
 8000e1e:	f001 fb60 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	@ 0x30
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b69      	ldr	r3, [pc, #420]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5e:	4b66      	ldr	r3, [pc, #408]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a65      	ldr	r2, [pc, #404]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b63      	ldr	r3, [pc, #396]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b60      	ldr	r3, [pc, #384]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a59      	ldr	r2, [pc, #356]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a53      	ldr	r2, [pc, #332]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a4d      	ldr	r2, [pc, #308]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed6:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a47      	ldr	r2, [pc, #284]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <MX_GPIO_Init+0x1c8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4842      	ldr	r0, [pc, #264]	@ (8000ffc <MX_GPIO_Init+0x1cc>)
 8000ef4:	f002 fb86 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000efe:	4840      	ldr	r0, [pc, #256]	@ (8001000 <MX_GPIO_Init+0x1d0>)
 8000f00:	f002 fb80 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2140      	movs	r1, #64	@ 0x40
 8000f08:	483e      	ldr	r0, [pc, #248]	@ (8001004 <MX_GPIO_Init+0x1d4>)
 8000f0a:	f002 fb7b 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	483d      	ldr	r0, [pc, #244]	@ (8001008 <MX_GPIO_Init+0x1d8>)
 8000f14:	f002 fb76 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4833      	ldr	r0, [pc, #204]	@ (8000ffc <MX_GPIO_Init+0x1cc>)
 8000f30:	f002 f9bc 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482c      	ldr	r0, [pc, #176]	@ (8000ffc <MX_GPIO_Init+0x1cc>)
 8000f4c:	f002 f9ae 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f50:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4825      	ldr	r0, [pc, #148]	@ (8001000 <MX_GPIO_Init+0x1d0>)
 8000f6a:	f002 f99f 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4820      	ldr	r0, [pc, #128]	@ (800100c <MX_GPIO_Init+0x1dc>)
 8000f8c:	f002 f98e 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f90:	2340      	movs	r3, #64	@ 0x40
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4817      	ldr	r0, [pc, #92]	@ (8001004 <MX_GPIO_Init+0x1d4>)
 8000fa8:	f002 f980 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_GPIO_Init+0x1d4>)
 8000fc0:	f002 f974 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480b      	ldr	r0, [pc, #44]	@ (8001008 <MX_GPIO_Init+0x1d8>)
 8000fdc:	f002 f966 	bl	80032ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2028      	movs	r0, #40	@ 0x28
 8000fe6:	f001 fa60 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fea:	2028      	movs	r0, #40	@ 0x28
 8000fec:	f001 fa79 	bl	80024e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	@ 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	40021800 	.word	0x40021800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM6) { // Sensor calibration
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d112      	bne.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x38>
    	static uint32_t counter = 0;
    	counter++;
 8001022:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800102a:	6013      	str	r3, [r2, #0]
    	if (counter == 20){ // counts to 20ms
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b14      	cmp	r3, #20
 8001032:	d142      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    		HAL_TIM_Base_Stop_IT(&htim6);
 8001034:	4825      	ldr	r0, [pc, #148]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001036:	f003 fef9 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
    		HAL_TIM_Base_Start_IT(&htim2);
 800103a:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800103c:	f003 fe7e 	bl	8004d3c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_Base_Start(&htim2);
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001042:	f003 fe0b 	bl	8004c5c <HAL_TIM_Base_Start>
    		func_calibrate_sensor();
    	}
    	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, BUFFER_SIZE);
    }

}
 8001046:	e038      	b.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    } else if (htim->Instance == TIM7) { // Alarm monitoring
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d117      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x72>
    	HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001058:	f002 fad4 	bl	8003604 <HAL_GPIO_WritePin>
    	counter_two++;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001064:	6013      	str	r3, [r2, #0]
    	if (counter_two == 2000) {
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800106e:	d124      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    		HAL_TIM_Base_Stop_IT(&htim7);
 8001070:	481b      	ldr	r0, [pc, #108]	@ (80010e0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001072:	f003 fedb 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
    		HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	4817      	ldr	r0, [pc, #92]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800107c:	f002 fac2 	bl	8003604 <HAL_GPIO_WritePin>
}
 8001080:	e01b      	b.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    } else if (htim->Instance == TIM2) { // ADC
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108a:	d116      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    	dog++;
 800108c:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001094:	6013      	str	r3, [r2, #0]
    	func_get_adc_value();
 8001096:	f7ff facf 	bl	8000638 <func_get_adc_value>
    	adc_total = adc_total + raw_adc_value;
 800109a:	4b13      	ldr	r3, [pc, #76]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010a6:	6013      	str	r3, [r2, #0]
    	if (dog == 50) { // Sample size
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b32      	cmp	r3, #50	@ 0x32
 80010ae:	d104      	bne.n	80010ba <HAL_TIM_PeriodElapsedCallback+0xaa>
    		HAL_TIM_Base_Stop_IT(&htim2);
 80010b0:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010b2:	f003 febb 	bl	8004e2c <HAL_TIM_Base_Stop_IT>
    		func_calibrate_sensor();
 80010b6:	f7ff fa93 	bl	80005e0 <func_calibrate_sensor>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40001000 	.word	0x40001000
 80010c8:	20000ba4 	.word	0x20000ba4
 80010cc:	20000570 	.word	0x20000570
 80010d0:	200004d8 	.word	0x200004d8
 80010d4:	40001400 	.word	0x40001400
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	20000ba8 	.word	0x20000ba8
 80010e0:	200005bc 	.word	0x200005bc
 80010e4:	20000b70 	.word	0x20000b70
 80010e8:	20000b78 	.word	0x20000b78
 80010ec:	20000b74 	.word	0x20000b74

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <Error_Handler+0x8>

080010fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_MspInit+0x44>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_MspInit+0x44>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_MspInit+0x44>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <HAL_MspInit+0x44>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_MspInit+0x44>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a31      	ldr	r2, [pc, #196]	@ (8001228 <HAL_ADC_MspInit+0xe4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d15c      	bne.n	8001220 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	4a30      	ldr	r2, [pc, #192]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001170:	6453      	str	r3, [r2, #68]	@ 0x44
 8001172:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a2a      	ldr	r2, [pc, #168]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <HAL_ADC_MspInit+0xe8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 8001196:	2308      	movs	r3, #8
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4821      	ldr	r0, [pc, #132]	@ (8001230 <HAL_ADC_MspInit+0xec>)
 80011aa:	f002 f87f 	bl	80032ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <HAL_ADC_MspInit+0xf4>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011d8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011f4:	2203      	movs	r2, #3
 80011f6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001204:	480b      	ldr	r0, [pc, #44]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 8001206:	f001 f987 	bl	8002518 <HAL_DMA_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 8001210:	f7ff ff6e 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
 800121a:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_ADC_MspInit+0xf0>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	200003c8 	.word	0x200003c8
 8001238:	40026410 	.word	0x40026410

0800123c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	@ 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a4e      	ldr	r2, [pc, #312]	@ (8001394 <HAL_ETH_MspInit+0x158>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 8096 	bne.w	800138c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001260:	4b4d      	ldr	r3, [pc, #308]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	4a4c      	ldr	r2, [pc, #304]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800126a:	6313      	str	r3, [r2, #48]	@ 0x30
 800126c:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	4a46      	ldr	r2, [pc, #280]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 800127e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001282:	6313      	str	r3, [r2, #48]	@ 0x30
 8001284:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	4a40      	ldr	r2, [pc, #256]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 8001296:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800129a:	6313      	str	r3, [r2, #48]	@ 0x30
 800129c:	4b3e      	ldr	r3, [pc, #248]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80012a4:	61bb      	str	r3, [r7, #24]
 80012a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a3a      	ldr	r2, [pc, #232]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	4a34      	ldr	r2, [pc, #208]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80012cc:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f0:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a28      	ldr	r2, [pc, #160]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_ETH_MspInit+0x15c>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001308:	2332      	movs	r3, #50	@ 0x32
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001318:	230b      	movs	r3, #11
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	481e      	ldr	r0, [pc, #120]	@ (800139c <HAL_ETH_MspInit+0x160>)
 8001324:	f001 ffc2 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001328:	2386      	movs	r3, #134	@ 0x86
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001338:	230b      	movs	r3, #11
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <HAL_ETH_MspInit+0x164>)
 8001344:	f001 ffb2 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135a:	230b      	movs	r3, #11
 800135c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <HAL_ETH_MspInit+0x168>)
 8001366:	f001 ffa1 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800136a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137c:	230b      	movs	r3, #11
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <HAL_ETH_MspInit+0x16c>)
 8001388:	f001 ff90 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3738      	adds	r7, #56	@ 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40028000 	.word	0x40028000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40021800 	.word	0x40021800

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013bc:	d114      	bne.n	80013e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a2e      	ldr	r2, [pc, #184]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201c      	movs	r0, #28
 80013dc:	f001 f865 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e0:	201c      	movs	r0, #28
 80013e2:	f001 f87e 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013e6:	e044      	b.n	8001472 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_TIM_Base_MspInit+0xd4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10c      	bne.n	800140c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f2:	4b22      	ldr	r3, [pc, #136]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a21      	ldr	r2, [pc, #132]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
}
 800140a:	e032      	b.n	8001472 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <HAL_TIM_Base_MspInit+0xd8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d114      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	4a18      	ldr	r2, [pc, #96]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6413      	str	r3, [r2, #64]	@ 0x40
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2036      	movs	r0, #54	@ 0x36
 8001434:	f001 f839 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001438:	2036      	movs	r0, #54	@ 0x36
 800143a:	f001 f852 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 800143e:	e018      	b.n	8001472 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a10      	ldr	r2, [pc, #64]	@ (8001488 <HAL_TIM_Base_MspInit+0xdc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 8001450:	f043 0320 	orr.w	r3, r3, #32
 8001454:	6413      	str	r3, [r2, #64]	@ 0x40
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_TIM_Base_MspInit+0xd0>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2037      	movs	r0, #55	@ 0x37
 8001468:	f001 f81f 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800146c:	2037      	movs	r0, #55	@ 0x37
 800146e:	f001 f838 	bl	80024e2 <HAL_NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40000800 	.word	0x40000800
 8001484:	40001000 	.word	0x40001000
 8001488:	40001400 	.word	0x40001400

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_TIM_MspPostInit+0x64>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d11c      	bne.n	80014e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_TIM_MspPostInit+0x68>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_TIM_MspPostInit+0x68>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_TIM_MspPostInit+0x68>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <HAL_TIM_MspPostInit+0x6c>)
 80014e4:	f001 fee2 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40000800 	.word	0x40000800
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020c00 	.word	0x40020c00

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2290      	movs	r2, #144	@ 0x90
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f006 fc7d 	bl	8007e1c <memset>
  if(huart->Instance==USART3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a26      	ldr	r2, [pc, #152]	@ (80015c0 <HAL_UART_MspInit+0xc4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d144      	bne.n	80015b6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800152c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001530:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001532:	2300      	movs	r3, #0
 8001534:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4618      	mov	r0, r3
 800153c:	f002 ff0e 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001546:	f7ff fdd3 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154a:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <HAL_UART_MspInit+0xc8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800157a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800157e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800159e:	4619      	mov	r1, r3
 80015a0:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <HAL_UART_MspInit+0xcc>)
 80015a2:	f001 fe83 	bl	80032ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2027      	movs	r0, #39	@ 0x27
 80015ac:	f000 ff7d 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015b0:	2027      	movs	r0, #39	@ 0x27
 80015b2:	f000 ff96 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	37b8      	adds	r7, #184	@ 0xb8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004800 	.word	0x40004800
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020c00 	.word	0x40020c00

080015cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0ae      	sub	sp, #184	@ 0xb8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2290      	movs	r2, #144	@ 0x90
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 fc15 	bl	8007e1c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015fa:	d159      	bne.n	80016b0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001600:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fea5 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001618:	f7ff fd6a 	bl	80010f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001620:	4a25      	ldr	r2, [pc, #148]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6313      	str	r3, [r2, #48]	@ 0x30
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001634:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800164e:	230a      	movs	r3, #10
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001658:	4619      	mov	r1, r3
 800165a:	4818      	ldr	r0, [pc, #96]	@ (80016bc <HAL_PCD_MspInit+0xf0>)
 800165c:	f001 fe26 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001664:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001678:	4619      	mov	r1, r3
 800167a:	4810      	ldr	r0, [pc, #64]	@ (80016bc <HAL_PCD_MspInit+0xf0>)
 800167c:	f001 fe16 	bl	80032ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001684:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168a:	6353      	str	r3, [r2, #52]	@ 0x34
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 800168e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <HAL_PCD_MspInit+0xec>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	37b8      	adds	r7, #184	@ 0xb8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <NMI_Handler+0x4>

080016c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <MemManage_Handler+0x4>

080016d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001716:	f000 f97b 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <TIM2_IRQHandler+0x10>)
 8001726:	f003 fc11 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200004d8 	.word	0x200004d8

08001734 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <USART3_IRQHandler+0x10>)
 800173a:	f004 fbb3 	bl	8005ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000608 	.word	0x20000608

08001748 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 800174c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001750:	f001 ff72 	bl	8003638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <TIM6_DAC_IRQHandler+0x10>)
 800175e:	f003 fbf5 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000570 	.word	0x20000570

0800176c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001770:	4802      	ldr	r0, [pc, #8]	@ (800177c <TIM7_IRQHandler+0x10>)
 8001772:	f003 fbeb 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200005bc 	.word	0x200005bc

08001780 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <DMA2_Stream0_IRQHandler+0x10>)
 8001786:	f001 f807 	bl	8002798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200003c8 	.word	0x200003c8

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f006 fb41 	bl	8007e34 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	bf00      	nop
 80017d8:	e7fd      	b.n	80017d6 <_exit+0x12>

080017da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e00a      	b.n	8001802 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ec:	f3af 8000 	nop.w
 80017f0:	4601      	mov	r1, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	60ba      	str	r2, [r7, #8]
 80017f8:	b2ca      	uxtb	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf0      	blt.n	80017ec <_read+0x12>
  }

  return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e009      	b.n	800183a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	60ba      	str	r2, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf1      	blt.n	8001826 <_write+0x12>
  }
  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_close>:

int _close(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001874:	605a      	str	r2, [r3, #4]
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_isatty>:

int _isatty(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f006 faa6 	bl	8007e34 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20080000 	.word	0x20080000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000bac 	.word	0x20000bac
 800191c:	20000d00 	.word	0x20000d00

08001920 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800194a:	490e      	ldr	r1, [pc, #56]	@ (8001984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800194c:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001960:	4c0b      	ldr	r4, [pc, #44]	@ (8001990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196e:	f7ff ffd7 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001972:	f006 fa65 	bl	8007e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7fe ff27 	bl	80007c8 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001988:	08009fc0 	.word	0x08009fc0
  ldr r2, =_sbss
 800198c:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8001990:	20000d00 	.word	0x20000d00

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>

08001996 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199a:	2003      	movs	r0, #3
 800199c:	f000 fd7a 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 f805 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a6:	f7ff fba9 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fd95 	bl	80024fe <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ec:	f000 fd5d 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000018 	.word	0x20000018
 8001a08:	20000020 	.word	0x20000020
 8001a0c:	2000001c 	.word	0x2000001c

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000020 	.word	0x20000020
 8001a34:	20000bb0 	.word	0x20000bb0

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000bb0 	.word	0x20000bb0

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_Delay+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000020 	.word	0x20000020

08001a98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e031      	b.n	8001b12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fb44 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_ADC_Init+0x84>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	f043 0202 	orr.w	r2, r3, #2
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fb0a 	bl	8002100 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f023 0303 	bic.w	r3, r3, #3
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b02:	e001      	b.n	8001b08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	ffffeefd 	.word	0xffffeefd

08001b20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ADC_Start+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0ad      	b.n	8001c96 <HAL_ADC_Start+0x176>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d018      	beq.n	8001b82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b60:	4b50      	ldr	r3, [pc, #320]	@ (8001ca4 <HAL_ADC_Start+0x184>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a50      	ldr	r2, [pc, #320]	@ (8001ca8 <HAL_ADC_Start+0x188>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0c9a      	lsrs	r2, r3, #18
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b74:	e002      	b.n	8001b7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d175      	bne.n	8001c7c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <HAL_ADC_Start+0x18c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bca:	d106      	bne.n	8001bda <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f023 0206 	bic.w	r2, r3, #6
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bd8:	e002      	b.n	8001be0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <HAL_ADC_Start+0x190>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10f      	bne.n	8001c1e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d143      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e03a      	b.n	8001c94 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_ADC_Start+0x194>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d10e      	bne.n	8001c46 <HAL_ADC_Start+0x126>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c44:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_ADC_Start+0x190>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d120      	bne.n	8001c94 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	@ (8001cb8 <HAL_ADC_Start+0x198>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_ADC_Start+0x174>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d114      	bne.n	8001c94 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00b      	b.n	8001c94 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0210 	orr.w	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000018 	.word	0x20000018
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	fffff8fe 	.word	0xfffff8fe
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Stop+0x16>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e01f      	b.n	8001d12 <HAL_ADC_Stop+0x56>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d107      	bne.n	8001d08 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_ADC_Stop+0x64>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	ffffeefe 	.word	0xffffeefe

08001d24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d40:	d113      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d50:	d10b      	bne.n	8001d6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e063      	b.n	8001e32 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fe65 	bl	8001a38 <HAL_GetTick>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d70:	e021      	b.n	8001db6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d78:	d01d      	beq.n	8001db6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_ADC_PollForConversion+0x6c>
 8001d80:	f7ff fe5a 	bl	8001a38 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d212      	bcs.n	8001db6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d00b      	beq.n	8001db6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e03d      	b.n	8001e32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d1d6      	bne.n	8001d72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0212 	mvn.w	r2, #18
 8001dcc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d123      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11f      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d111      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x1c>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e136      	b.n	80020de <HAL_ADC_ConfigChannel+0x28a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d93a      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0xa2>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e88:	d035      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8d      	ldr	r2, [pc, #564]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68d9      	ldr	r1, [r3, #12]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	061a      	lsls	r2, r3, #24
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ece:	e035      	b.n	8001f3c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4403      	add	r3, r0
 8001ee8:	3b1e      	subs	r3, #30
 8001eea:	409a      	lsls	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ef4:	e022      	b.n	8001f3c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43da      	mvns	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	400a      	ands	r2, r1
 8001f18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4403      	add	r3, r0
 8001f32:	409a      	lsls	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b06      	cmp	r3, #6
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b05      	subs	r3, #5
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b05      	subs	r3, #5
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f8c:	e04c      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d824      	bhi.n	8001fe0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b23      	subs	r3, #35	@ 0x23
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	3b23      	subs	r3, #35	@ 0x23
 8001fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fde:	e023      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b41      	subs	r3, #65	@ 0x41
 8001ff2:	221f      	movs	r2, #31
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b41      	subs	r3, #65	@ 0x41
 800201c:	fa00 f203 	lsl.w	r2, r0, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a30      	ldr	r2, [pc, #192]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1f4>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800203c:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002042:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002046:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10f      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d10b      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002060:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002064:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002070:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d12b      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1a      	ldr	r2, [pc, #104]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <HAL_ADC_ConfigChannel+0x23a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b11      	cmp	r3, #17
 800208c:	d122      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002094:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002098:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a15      	ldr	r2, [pc, #84]	@ (80020f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a10      	ldr	r2, [pc, #64]	@ (80020ec <HAL_ADC_ConfigChannel+0x298>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <HAL_ADC_ConfigChannel+0x2a8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9a      	lsrs	r2, r3, #18
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	10000012 	.word	0x10000012
 80020f0:	40012000 	.word	0x40012000
 80020f4:	40012300 	.word	0x40012300
 80020f8:	20000018 	.word	0x20000018
 80020fc:	431bde83 	.word	0x431bde83

08002100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002108:	4b78      	ldr	r3, [pc, #480]	@ (80022ec <ADC_Init+0x1ec>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a77      	ldr	r2, [pc, #476]	@ (80022ec <ADC_Init+0x1ec>)
 800210e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002112:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002114:	4b75      	ldr	r3, [pc, #468]	@ (80022ec <ADC_Init+0x1ec>)
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4973      	ldr	r1, [pc, #460]	@ (80022ec <ADC_Init+0x1ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <ADC_Init+0x1f0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e00f      	b.n	80021fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0202 	bic.w	r2, r2, #2
 8002208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002236:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002246:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	035a      	lsls	r2, r3, #13
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e007      	b.n	8002270 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800226e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	051a      	lsls	r2, r3, #20
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022b2:	025a      	lsls	r2, r3, #9
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	029a      	lsls	r2, r3, #10
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	@ (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	@ (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff fa88 	bl	8001a38 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e099      	b.n	8002668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7ff fa6f 	bl	8001a38 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d908      	bls.n	8002576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e078      	b.n	8002668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e8      	bne.n	8002556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_DMA_Init+0x158>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	4313      	orrs	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	2b04      	cmp	r3, #4
 8002608:	d117      	bne.n	800263a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa7b 	bl	8002b18 <DMA_CheckFifoParam>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	@ 0x40
 800262c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa32 	bl	8002aac <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002650:	223f      	movs	r2, #63	@ 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	e010803f 	.word	0xe010803f

08002674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002682:	f7ff f9d9 	bl	8001a38 <HAL_GetTick>
 8002686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e052      	b.n	800274c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0216 	bic.w	r2, r2, #22
 80026b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <HAL_DMA_Abort+0x62>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0208 	bic.w	r2, r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f6:	e013      	b.n	8002720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f8:	f7ff f99e 	bl	8001a38 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d90c      	bls.n	8002720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e015      	b.n	800274c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e4      	bne.n	80026f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002732:	223f      	movs	r2, #63	@ 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d004      	beq.n	8002772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	@ 0x80
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e00c      	b.n	800278c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2205      	movs	r2, #5
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027a4:	4b8e      	ldr	r3, [pc, #568]	@ (80029e0 <HAL_DMA_IRQHandler+0x248>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a8e      	ldr	r2, [pc, #568]	@ (80029e4 <HAL_DMA_IRQHandler+0x24c>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	2208      	movs	r2, #8
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d01a      	beq.n	8002804 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	2208      	movs	r2, #8
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002808:	2201      	movs	r2, #1
 800280a:	409a      	lsls	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	2201      	movs	r2, #1
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	f043 0202 	orr.w	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283e:	2204      	movs	r2, #4
 8002840:	409a      	lsls	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2204      	movs	r2, #4
 800285e:	409a      	lsls	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	f043 0204 	orr.w	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002874:	2210      	movs	r2, #16
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d043      	beq.n	8002908 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d03c      	beq.n	8002908 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	2210      	movs	r2, #16
 8002894:	409a      	lsls	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d108      	bne.n	80028c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d024      	beq.n	8002908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	4798      	blx	r3
 80028c6:	e01f      	b.n	8002908 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
 80028d8:	e016      	b.n	8002908 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d107      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0208 	bic.w	r2, r2, #8
 80028f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	2220      	movs	r2, #32
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 808f 	beq.w	8002a38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8087 	beq.w	8002a38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	2220      	movs	r2, #32
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b05      	cmp	r3, #5
 8002940:	d136      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0216 	bic.w	r2, r2, #22
 8002950:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002960:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <HAL_DMA_IRQHandler+0x1da>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0208 	bic.w	r2, r2, #8
 8002980:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	223f      	movs	r2, #63	@ 0x3f
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d07e      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
        }
        return;
 80029ae:	e079      	b.n	8002aa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d01d      	beq.n	80029fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10d      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d031      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	e02c      	b.n	8002a38 <HAL_DMA_IRQHandler+0x2a0>
 80029de:	bf00      	nop
 80029e0:	20000018 	.word	0x20000018
 80029e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
 80029f8:	e01e      	b.n	8002a38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0210 	bic.w	r2, r2, #16
 8002a16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d032      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d022      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2205      	movs	r2, #5
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d307      	bcc.n	8002a80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f2      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x2cc>
 8002a7e:	e000      	b.n	8002a82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
 8002aa2:	e000      	b.n	8002aa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aa4:	bf00      	nop
    }
  }
}
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3b10      	subs	r3, #16
 8002abc:	4a13      	ldr	r2, [pc, #76]	@ (8002b0c <DMA_CalcBaseAndBitshift+0x60>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <DMA_CalcBaseAndBitshift+0x64>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d908      	bls.n	8002aec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	1d1a      	adds	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aea:	e006      	b.n	8002afa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <DMA_CalcBaseAndBitshift+0x68>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	aaaaaaab 	.word	0xaaaaaaab
 8002b10:	08009c38 	.word	0x08009c38
 8002b14:	fffffc00 	.word	0xfffffc00

08002b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11f      	bne.n	8002b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d856      	bhi.n	8002be6 <DMA_CheckFifoParam+0xce>
 8002b38:	a201      	add	r2, pc, #4	@ (adr r2, 8002b40 <DMA_CheckFifoParam+0x28>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002b63 	.word	0x08002b63
 8002b48:	08002b51 	.word	0x08002b51
 8002b4c:	08002be7 	.word	0x08002be7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d046      	beq.n	8002bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e043      	b.n	8002bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b6a:	d140      	bne.n	8002bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b70:	e03d      	b.n	8002bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7a:	d121      	bne.n	8002bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d837      	bhi.n	8002bf2 <DMA_CheckFifoParam+0xda>
 8002b82:	a201      	add	r2, pc, #4	@ (adr r2, 8002b88 <DMA_CheckFifoParam+0x70>)
 8002b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b88:	08002b99 	.word	0x08002b99
 8002b8c:	08002b9f 	.word	0x08002b9f
 8002b90:	08002b99 	.word	0x08002b99
 8002b94:	08002bb1 	.word	0x08002bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9c:	e030      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d025      	beq.n	8002bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e022      	b.n	8002bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bb8:	d11f      	bne.n	8002bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bbe:	e01c      	b.n	8002bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d903      	bls.n	8002bce <DMA_CheckFifoParam+0xb6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d003      	beq.n	8002bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bcc:	e018      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd2:	e015      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e00b      	b.n	8002bfe <DMA_CheckFifoParam+0xe6>
      break;
 8002be6:	bf00      	nop
 8002be8:	e00a      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e008      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e006      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e004      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop

08002c10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e086      	b.n	8002d30 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2223      	movs	r2, #35	@ 0x23
 8002c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fe fb01 	bl	800123c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <HAL_ETH_Init+0x128>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d38 <HAL_ETH_Init+0x128>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c46:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <HAL_ETH_Init+0x128>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c52:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <HAL_ETH_Init+0x12c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a39      	ldr	r2, [pc, #228]	@ (8002d3c <HAL_ETH_Init+0x12c>)
 8002c58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c5c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c5e:	4b37      	ldr	r3, [pc, #220]	@ (8002d3c <HAL_ETH_Init+0x12c>)
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	4935      	ldr	r1, [pc, #212]	@ (8002d3c <HAL_ETH_Init+0x12c>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c6c:	4b33      	ldr	r3, [pc, #204]	@ (8002d3c <HAL_ETH_Init+0x12c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c88:	f7fe fed6 	bl	8001a38 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c8e:	e011      	b.n	8002cb4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c90:	f7fe fed2 	bl	8001a38 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c9e:	d909      	bls.n	8002cb4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	22e0      	movs	r2, #224	@ 0xe0
 8002cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e03d      	b.n	8002d30 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e4      	bne.n	8002c90 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f97a 	bl	8002fc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fa25 	bl	800311c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa7b 	bl	80031ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9e3 	bl	80030ac <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <HAL_ETH_Init+0x130>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002d1a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	00020060 	.word	0x00020060

08002d44 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <ETH_SetMACConfig+0x164>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7b9b      	ldrb	r3, [r3, #14]
 8002d62:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	7c12      	ldrb	r2, [r2, #16]
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d102      	bne.n	8002d72 <ETH_SetMACConfig+0x2e>
 8002d6c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d70:	e000      	b.n	8002d74 <ETH_SetMACConfig+0x30>
 8002d72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d74:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	7c52      	ldrb	r2, [r2, #17]
 8002d7a:	2a00      	cmp	r2, #0
 8002d7c:	d102      	bne.n	8002d84 <ETH_SetMACConfig+0x40>
 8002d7e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d82:	e000      	b.n	8002d86 <ETH_SetMACConfig+0x42>
 8002d84:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	7fdb      	ldrb	r3, [r3, #31]
 8002d92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	7f92      	ldrb	r2, [r2, #30]
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d102      	bne.n	8002daa <ETH_SetMACConfig+0x66>
 8002da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da8:	e000      	b.n	8002dac <ETH_SetMACConfig+0x68>
 8002daa:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	7f1b      	ldrb	r3, [r3, #28]
 8002db2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002db4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d102      	bne.n	8002dd4 <ETH_SetMACConfig+0x90>
 8002dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd2:	e000      	b.n	8002dd6 <ETH_SetMACConfig+0x92>
 8002dd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002dd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7bdb      	ldrb	r3, [r3, #15]
 8002ddc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002dde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002de4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002dee:	4313      	orrs	r3, r2
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fe fe22 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e32:	2a00      	cmp	r2, #0
 8002e34:	d101      	bne.n	8002e3a <ETH_SetMACConfig+0xf6>
 8002e36:	2280      	movs	r2, #128	@ 0x80
 8002e38:	e000      	b.n	8002e3c <ETH_SetMACConfig+0xf8>
 8002e3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002e4a:	2a01      	cmp	r2, #1
 8002e4c:	d101      	bne.n	8002e52 <ETH_SetMACConfig+0x10e>
 8002e4e:	2208      	movs	r2, #8
 8002e50:	e000      	b.n	8002e54 <ETH_SetMACConfig+0x110>
 8002e52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002e54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002e5c:	2a01      	cmp	r2, #1
 8002e5e:	d101      	bne.n	8002e64 <ETH_SetMACConfig+0x120>
 8002e60:	2204      	movs	r2, #4
 8002e62:	e000      	b.n	8002e66 <ETH_SetMACConfig+0x122>
 8002e64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002e6e:	2a01      	cmp	r2, #1
 8002e70:	d101      	bne.n	8002e76 <ETH_SetMACConfig+0x132>
 8002e72:	2202      	movs	r2, #2
 8002e74:	e000      	b.n	8002e78 <ETH_SetMACConfig+0x134>
 8002e76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e90:	2001      	movs	r0, #1
 8002e92:	f7fe fddd 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	fd20810f 	.word	0xfd20810f

08002eac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fbc <ETH_SetDMAConfig+0x110>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	7b1b      	ldrb	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <ETH_SetDMAConfig+0x2c>
 8002ed2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ed6:	e000      	b.n	8002eda <ETH_SetDMAConfig+0x2e>
 8002ed8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	7b5b      	ldrb	r3, [r3, #13]
 8002ede:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ee0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	7f52      	ldrb	r2, [r2, #29]
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d102      	bne.n	8002ef0 <ETH_SetDMAConfig+0x44>
 8002eea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eee:	e000      	b.n	8002ef2 <ETH_SetDMAConfig+0x46>
 8002ef0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ef2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	7b9b      	ldrb	r3, [r3, #14]
 8002ef8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002efa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	7f9b      	ldrb	r3, [r3, #30]
 8002f0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f20:	4313      	orrs	r3, r2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f30:	461a      	mov	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7fe fd84 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002f66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f7fe fd55 	bl	8001a50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	f8de3f23 	.word	0xf8de3f23

08002fc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0a6      	sub	sp, #152	@ 0x98
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003002:	2300      	movs	r3, #0
 8003004:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800300c:	2300      	movs	r3, #0
 800300e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003028:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800302c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800302e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800303a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fe7f 	bl	8002d44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003046:	2301      	movs	r3, #1
 8003048:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800304a:	2301      	movs	r3, #1
 800304c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003054:	2301      	movs	r3, #1
 8003056:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003072:	2301      	movs	r3, #1
 8003074:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800307a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800307c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003080:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003086:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800308e:	2300      	movs	r3, #0
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff05 	bl	8002eac <ETH_SetDMAConfig>
}
 80030a2:	bf00      	nop
 80030a4:	3798      	adds	r7, #152	@ 0x98
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3305      	adds	r3, #5
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	3204      	adds	r2, #4
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <ETH_MACAddressConfig+0x68>)
 80030ce:	4413      	add	r3, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3303      	adds	r3, #3
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	061a      	lsls	r2, r3, #24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3302      	adds	r3, #2
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3301      	adds	r3, #1
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	4313      	orrs	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <ETH_MACAddressConfig+0x6c>)
 80030fe:	4413      	add	r3, r2
 8003100:	461a      	mov	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6013      	str	r3, [r2, #0]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40028040 	.word	0x40028040
 8003118:	40028044 	.word	0x40028044

0800311c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e03e      	b.n	80031a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68d9      	ldr	r1, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2200      	movs	r2, #0
 8003152:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	3206      	adds	r2, #6
 800315c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d80c      	bhi.n	800318c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e004      	b.n	8003196 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d9bd      	bls.n	800312a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e048      	b.n	800326e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6919      	ldr	r1, [r3, #16]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003218:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	3212      	adds	r2, #18
 800323a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d80c      	bhi.n	800325e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6919      	ldr	r1, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	461a      	mov	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e004      	b.n	8003268 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d9b3      	bls.n	80031dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	60da      	str	r2, [r3, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e175      	b.n	80035b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8164 	bne.w	80035b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d005      	beq.n	8003302 <HAL_GPIO_Init+0x56>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d130      	bne.n	8003364 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0201 	and.w	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d017      	beq.n	80033a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80be 	beq.w	80035b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	4b66      	ldr	r3, [pc, #408]	@ (80035d0 <HAL_GPIO_Init+0x324>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	4a65      	ldr	r2, [pc, #404]	@ (80035d0 <HAL_GPIO_Init+0x324>)
 800343c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003440:	6453      	str	r3, [r2, #68]	@ 0x44
 8003442:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_GPIO_Init+0x324>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800344e:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_GPIO_Init+0x328>)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	@ (80035d8 <HAL_GPIO_Init+0x32c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d037      	beq.n	80034ea <HAL_GPIO_Init+0x23e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a57      	ldr	r2, [pc, #348]	@ (80035dc <HAL_GPIO_Init+0x330>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_GPIO_Init+0x23a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a56      	ldr	r2, [pc, #344]	@ (80035e0 <HAL_GPIO_Init+0x334>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <HAL_GPIO_Init+0x236>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a55      	ldr	r2, [pc, #340]	@ (80035e4 <HAL_GPIO_Init+0x338>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d025      	beq.n	80034de <HAL_GPIO_Init+0x232>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a54      	ldr	r2, [pc, #336]	@ (80035e8 <HAL_GPIO_Init+0x33c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a53      	ldr	r2, [pc, #332]	@ (80035ec <HAL_GPIO_Init+0x340>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d019      	beq.n	80034d6 <HAL_GPIO_Init+0x22a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a52      	ldr	r2, [pc, #328]	@ (80035f0 <HAL_GPIO_Init+0x344>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0x226>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a51      	ldr	r2, [pc, #324]	@ (80035f4 <HAL_GPIO_Init+0x348>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_GPIO_Init+0x222>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a50      	ldr	r2, [pc, #320]	@ (80035f8 <HAL_GPIO_Init+0x34c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <HAL_GPIO_Init+0x21e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4f      	ldr	r2, [pc, #316]	@ (80035fc <HAL_GPIO_Init+0x350>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_GPIO_Init+0x21a>
 80034c2:	2309      	movs	r3, #9
 80034c4:	e012      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034c6:	230a      	movs	r3, #10
 80034c8:	e010      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ca:	2308      	movs	r3, #8
 80034cc:	e00e      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ce:	2307      	movs	r3, #7
 80034d0:	e00c      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034d6:	2305      	movs	r3, #5
 80034d8:	e008      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034da:	2304      	movs	r3, #4
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034de:	2303      	movs	r3, #3
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ea:	2300      	movs	r3, #0
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f002 0203 	and.w	r2, r2, #3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	@ (80035d4 <HAL_GPIO_Init+0x328>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350a:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <HAL_GPIO_Init+0x354>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352e:	4a34      	ldr	r2, [pc, #208]	@ (8003600 <HAL_GPIO_Init+0x354>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003534:	4b32      	ldr	r3, [pc, #200]	@ (8003600 <HAL_GPIO_Init+0x354>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003558:	4a29      	ldr	r2, [pc, #164]	@ (8003600 <HAL_GPIO_Init+0x354>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355e:	4b28      	ldr	r3, [pc, #160]	@ (8003600 <HAL_GPIO_Init+0x354>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003582:	4a1f      	ldr	r2, [pc, #124]	@ (8003600 <HAL_GPIO_Init+0x354>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003588:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <HAL_GPIO_Init+0x354>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <HAL_GPIO_Init+0x354>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	f67f ae86 	bls.w	80032cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40022400 	.word	0x40022400
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003642:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800364e:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f806 	bl	8003668 <HAL_GPIO_EXTI_Callback>
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af02      	add	r7, sp, #8
 8003684:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e108      	b.n	80038a2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd ff8e 	bl	80015cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2203      	movs	r2, #3
 80036b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036be:	d102      	bne.n	80036c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fc16 	bl	8006efc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7c1a      	ldrb	r2, [r3, #16]
 80036d8:	f88d 2000 	strb.w	r2, [sp]
 80036dc:	3304      	adds	r3, #4
 80036de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e0:	f003 fbb2 	bl	8006e48 <USB_CoreInit>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0d5      	b.n	80038a2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 fc0e 	bl	8006f1e <USB_SetCurrentMode>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0c6      	b.n	80038a2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e04a      	b.n	80037b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3315      	adds	r3, #21
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3314      	adds	r3, #20
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	b298      	uxth	r0, r3
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	332e      	adds	r3, #46	@ 0x2e
 8003756:	4602      	mov	r2, r0
 8003758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800375a:	7bfa      	ldrb	r2, [r7, #15]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3318      	adds	r3, #24
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	331c      	adds	r3, #28
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3320      	adds	r3, #32
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3324      	adds	r3, #36	@ 0x24
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	3301      	adds	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	7bfa      	ldrb	r2, [r7, #15]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d3af      	bcc.n	800371a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e044      	b.n	800384a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037d6:	7bfa      	ldrb	r2, [r7, #15]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	3301      	adds	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	791b      	ldrb	r3, [r3, #4]
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	429a      	cmp	r2, r3
 8003852:	d3b5      	bcc.n	80037c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7c1a      	ldrb	r2, [r3, #16]
 800385c:	f88d 2000 	strb.w	r2, [sp]
 8003860:	3304      	adds	r3, #4
 8003862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003864:	f003 fba8 	bl	8006fb8 <USB_DevInit>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e013      	b.n	80038a2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	7b1b      	ldrb	r3, [r3, #12]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f80b 	bl	80038ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fd63 	bl	8007366 <USB_DevDisconnect>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	10000003 	.word	0x10000003

080038f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003902:	6013      	str	r3, [r2, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40007000 	.word	0x40007000

08003914 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	4a22      	ldr	r2, [pc, #136]	@ (80039ac <HAL_PWREx_EnableOverDrive+0x98>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	@ 0x40
 800392a:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_PWREx_EnableOverDrive+0x98>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003936:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003940:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003942:	f7fe f879 	bl	8001a38 <HAL_GetTick>
 8003946:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003948:	e009      	b.n	800395e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800394a:	f7fe f875 	bl	8001a38 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003958:	d901      	bls.n	800395e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e022      	b.n	80039a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396a:	d1ee      	bne.n	800394a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800396c:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0f      	ldr	r2, [pc, #60]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003976:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003978:	f7fe f85e 	bl	8001a38 <HAL_GetTick>
 800397c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800397e:	e009      	b.n	8003994 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003980:	f7fe f85a 	bl	8001a38 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800398e:	d901      	bls.n	8003994 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e007      	b.n	80039a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039a0:	d1ee      	bne.n	8003980 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40007000 	.word	0x40007000

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e29b      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8087 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d8:	4b96      	ldr	r3, [pc, #600]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d00c      	beq.n	80039fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e4:	4b93      	ldr	r3, [pc, #588]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 030c 	and.w	r3, r3, #12
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d112      	bne.n	8003a16 <HAL_RCC_OscConfig+0x62>
 80039f0:	4b90      	ldr	r3, [pc, #576]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fc:	d10b      	bne.n	8003a16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d06c      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x130>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d168      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e275      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x7a>
 8003a20:	4b84      	ldr	r3, [pc, #528]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a83      	ldr	r2, [pc, #524]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e02e      	b.n	8003a8c <HAL_RCC_OscConfig+0xd8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x9c>
 8003a36:	4b7f      	ldr	r3, [pc, #508]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b7c      	ldr	r3, [pc, #496]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7b      	ldr	r2, [pc, #492]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01d      	b.n	8003a8c <HAL_RCC_OscConfig+0xd8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a5a:	4b76      	ldr	r3, [pc, #472]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a75      	ldr	r2, [pc, #468]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a72      	ldr	r2, [pc, #456]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e00b      	b.n	8003a8c <HAL_RCC_OscConfig+0xd8>
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b6c      	ldr	r3, [pc, #432]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6b      	ldr	r2, [pc, #428]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fd ffd0 	bl	8001a38 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fd ffcc 	bl	8001a38 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	@ 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e229      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd ffbc 	bl	8001a38 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fd ffb8 	bl	8001a38 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e215      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	4b57      	ldr	r3, [pc, #348]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x110>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d069      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af2:	4b50      	ldr	r3, [pc, #320]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afe:	4b4d      	ldr	r3, [pc, #308]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d11c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x190>
 8003b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d116      	bne.n	8003b44 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	4b47      	ldr	r3, [pc, #284]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x17a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e1e9      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b41      	ldr	r3, [pc, #260]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	493d      	ldr	r1, [pc, #244]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	e040      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4c:	4b39      	ldr	r3, [pc, #228]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a38      	ldr	r2, [pc, #224]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd ff6e 	bl	8001a38 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd ff6a 	bl	8001a38 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1c7      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b72:	4b30      	ldr	r3, [pc, #192]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4929      	ldr	r1, [pc, #164]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
 8003b92:	e018      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b94:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd ff4a 	bl	8001a38 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba8:	f7fd ff46 	bl	8001a38 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1a3      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bba:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d038      	beq.n	8003c44 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d019      	beq.n	8003c0e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bda:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bde:	4a15      	ldr	r2, [pc, #84]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7fd ff27 	bl	8001a38 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bee:	f7fd ff23 	bl	8001a38 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e180      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x23a>
 8003c0c:	e01a      	b.n	8003c44 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c12:	4a08      	ldr	r2, [pc, #32]	@ (8003c34 <HAL_RCC_OscConfig+0x280>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fd ff0d 	bl	8001a38 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fd ff09 	bl	8001a38 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d903      	bls.n	8003c38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e166      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
 8003c34:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c38:	4b92      	ldr	r3, [pc, #584]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ee      	bne.n	8003c22 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80a4 	beq.w	8003d9a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b8c      	ldr	r3, [pc, #560]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10d      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b89      	ldr	r3, [pc, #548]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	4a88      	ldr	r2, [pc, #544]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6a:	4b86      	ldr	r3, [pc, #536]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7a:	4b83      	ldr	r3, [pc, #524]	@ (8003e88 <HAL_RCC_OscConfig+0x4d4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c86:	4b80      	ldr	r3, [pc, #512]	@ (8003e88 <HAL_RCC_OscConfig+0x4d4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e88 <HAL_RCC_OscConfig+0x4d4>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fd fed1 	bl	8001a38 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fd fecd 	bl	8001a38 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	@ 0x64
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e12a      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cac:	4b76      	ldr	r3, [pc, #472]	@ (8003e88 <HAL_RCC_OscConfig+0x4d4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x31a>
 8003cc0:	4b70      	ldr	r3, [pc, #448]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	4a6f      	ldr	r2, [pc, #444]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ccc:	e02d      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x33c>
 8003cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cda:	4a6a      	ldr	r2, [pc, #424]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce2:	4b68      	ldr	r3, [pc, #416]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	4a67      	ldr	r2, [pc, #412]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cee:	e01c      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x35e>
 8003cf8:	4b62      	ldr	r3, [pc, #392]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	4a61      	ldr	r2, [pc, #388]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d04:	4b5f      	ldr	r3, [pc, #380]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d08:	4a5e      	ldr	r2, [pc, #376]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d10:	e00b      	b.n	8003d2a <HAL_RCC_OscConfig+0x376>
 8003d12:	4b5c      	ldr	r3, [pc, #368]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	4a5b      	ldr	r2, [pc, #364]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d1e:	4b59      	ldr	r3, [pc, #356]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	4a58      	ldr	r2, [pc, #352]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	f023 0304 	bic.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fd fe81 	bl	8001a38 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fd fe7d 	bl	8001a38 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0d8      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d50:	4b4c      	ldr	r3, [pc, #304]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ee      	beq.n	8003d3a <HAL_RCC_OscConfig+0x386>
 8003d5c:	e014      	b.n	8003d88 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fe6b 	bl	8001a38 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fe67 	bl	8001a38 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0c2      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1ee      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	4a3c      	ldr	r2, [pc, #240]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d98:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80ae 	beq.w	8003f00 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da4:	4b37      	ldr	r3, [pc, #220]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d06d      	beq.n	8003e8c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d14b      	bne.n	8003e50 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db8:	4b32      	ldr	r3, [pc, #200]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a31      	ldr	r2, [pc, #196]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fe38 	bl	8001a38 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd fe34 	bl	8001a38 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e091      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e14:	071b      	lsls	r3, r3, #28
 8003e16:	491b      	ldr	r1, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fd fe06 	bl	8001a38 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd fe02 	bl	8001a38 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e05f      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x47c>
 8003e4e:	e057      	b.n	8003f00 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0b      	ldr	r2, [pc, #44]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fdec 	bl	8001a38 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd fde8 	bl	8001a38 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e045      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4b0>
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x54c>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_RCC_OscConfig+0x558>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d030      	beq.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d129      	bne.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d122      	bne.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ec2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d119      	bne.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10f      	bne.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0d0      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f28:	4b6a      	ldr	r3, [pc, #424]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d910      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b67      	ldr	r3, [pc, #412]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 020f 	bic.w	r2, r3, #15
 8003f3e:	4965      	ldr	r1, [pc, #404]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d040      	beq.n	8004034 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d115      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e073      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e06b      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff2:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f023 0203 	bic.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4936      	ldr	r1, [pc, #216]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004004:	f7fd fd18 	bl	8001a38 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	e00a      	b.n	8004022 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400c:	f7fd fd14 	bl	8001a38 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e053      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004022:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 020c 	and.w	r2, r3, #12
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	429a      	cmp	r2, r3
 8004032:	d1eb      	bne.n	800400c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004034:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d210      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	4922      	ldr	r1, [pc, #136]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800408e:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCC_ClockConfig+0x1c8>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	@ (80040dc <HAL_RCC_ClockConfig+0x1cc>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	@ (80040e0 <HAL_RCC_ClockConfig+0x1d0>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_RCC_ClockConfig+0x1d4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd fc74 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08009c20 	.word	0x08009c20
 80040e0:	20000018 	.word	0x20000018
 80040e4:	2000001c 	.word	0x2000001c

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b094      	sub	sp, #80	@ 0x50
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f4:	2300      	movs	r3, #0
 80040f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040f8:	2300      	movs	r3, #0
 80040fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b79      	ldr	r3, [pc, #484]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80e1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e0db      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b73      	ldr	r3, [pc, #460]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004120:	e0db      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b73      	ldr	r3, [pc, #460]	@ (80042f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004124:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004126:	e0d8      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b6f      	ldr	r3, [pc, #444]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004132:	4b6d      	ldr	r3, [pc, #436]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b6a      	ldr	r3, [pc, #424]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004148:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
 8004156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6139      	str	r1, [r7, #16]
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	ebb2 0801 	subs.w	r8, r2, r1
 80041a0:	4659      	mov	r1, fp
 80041a2:	eb63 0901 	sbc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	462b      	mov	r3, r5
 80041c8:	eb49 0303 	adc.w	r3, r9, r3
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041da:	4629      	mov	r1, r5
 80041dc:	024b      	lsls	r3, r1, #9
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e4:	4621      	mov	r1, r4
 80041e6:	024a      	lsls	r2, r1, #9
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ee:	2200      	movs	r2, #0
 80041f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041f8:	f7fc f87a 	bl	80002f0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004204:	e058      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b38      	ldr	r3, [pc, #224]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	4618      	mov	r0, r3
 8004210:	4611      	mov	r1, r2
 8004212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
 800421c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	0159      	lsls	r1, r3, #5
 800422e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004232:	0150      	lsls	r0, r2, #5
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4641      	mov	r1, r8
 800423a:	ebb2 0a01 	subs.w	sl, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb63 0b01 	sbc.w	fp, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004258:	ebb2 040a 	subs.w	r4, r2, sl
 800425c:	eb63 050b 	sbc.w	r5, r3, fp
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	464b      	mov	r3, r9
 800427c:	eb45 0303 	adc.w	r3, r5, r3
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	61fa      	str	r2, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	f7fc f820 	bl	80002f0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3750      	adds	r7, #80	@ 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	@ (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000018 	.word	0x20000018

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	@ (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	08009c30 	.word	0x08009c30

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	08009c30 	.word	0x08009c30

0800435c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004384:	4b69      	ldr	r3, [pc, #420]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a68      	ldr	r2, [pc, #416]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	4b66      	ldr	r3, [pc, #408]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	4964      	ldr	r1, [pc, #400]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d017      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b6:	4b5d      	ldr	r3, [pc, #372]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c4:	4959      	ldr	r1, [pc, #356]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043d6:	2301      	movs	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043f2:	4b4e      	ldr	r3, [pc, #312]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	494a      	ldr	r1, [pc, #296]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 808b 	beq.w	8004556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4b3a      	ldr	r3, [pc, #232]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	4a39      	ldr	r2, [pc, #228]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444a:	6413      	str	r3, [r2, #64]	@ 0x40
 800444c:	4b37      	ldr	r3, [pc, #220]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004458:	4b35      	ldr	r3, [pc, #212]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800445e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004464:	f7fd fae8 	bl	8001a38 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800446a:	e008      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446c:	f7fd fae4 	bl	8001a38 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	@ 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e38f      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800447e:	4b2c      	ldr	r3, [pc, #176]	@ (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800448a:	4b28      	ldr	r3, [pc, #160]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004492:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d035      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d02e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a8:	4b20      	ldr	r3, [pc, #128]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b2:	4b1e      	ldr	r3, [pc, #120]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044bc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044be:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ca:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044d0:	4b16      	ldr	r3, [pc, #88]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d114      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd faac 	bl	8001a38 <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fd faa8 	bl	8001a38 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e351      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fa:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0ee      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004512:	d111      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004514:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004522:	400b      	ands	r3, r1
 8004524:	4901      	ldr	r1, [pc, #4]	@ (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
 800452a:	e00b      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800452c:	40023800 	.word	0x40023800
 8004530:	40007000 	.word	0x40007000
 8004534:	0ffffcff 	.word	0x0ffffcff
 8004538:	4bac      	ldr	r3, [pc, #688]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4aab      	ldr	r2, [pc, #684]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004542:	6093      	str	r3, [r2, #8]
 8004544:	4ba9      	ldr	r3, [pc, #676]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004546:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004550:	49a6      	ldr	r1, [pc, #664]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004552:	4313      	orrs	r3, r2
 8004554:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004562:	4ba2      	ldr	r3, [pc, #648]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004568:	4aa0      	ldr	r2, [pc, #640]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800456e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004572:	4b9e      	ldr	r3, [pc, #632]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004574:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	499b      	ldr	r1, [pc, #620]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004590:	4b96      	ldr	r3, [pc, #600]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459e:	4993      	ldr	r1, [pc, #588]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b2:	4b8e      	ldr	r3, [pc, #568]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045c0:	498a      	ldr	r1, [pc, #552]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d4:	4b85      	ldr	r3, [pc, #532]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e2:	4982      	ldr	r1, [pc, #520]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f6:	4b7d      	ldr	r3, [pc, #500]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4979      	ldr	r1, [pc, #484]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004618:	4b74      	ldr	r3, [pc, #464]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	4971      	ldr	r1, [pc, #452]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463a:	4b6c      	ldr	r3, [pc, #432]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004640:	f023 020c 	bic.w	r2, r3, #12
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004648:	4968      	ldr	r1, [pc, #416]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800465c:	4b63      	ldr	r3, [pc, #396]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004662:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	4960      	ldr	r1, [pc, #384]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800467e:	4b5b      	ldr	r3, [pc, #364]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004684:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468c:	4957      	ldr	r1, [pc, #348]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046a0:	4b52      	ldr	r3, [pc, #328]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ae:	494f      	ldr	r1, [pc, #316]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046c2:	4b4a      	ldr	r3, [pc, #296]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	4946      	ldr	r1, [pc, #280]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046e4:	4b41      	ldr	r3, [pc, #260]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	493e      	ldr	r1, [pc, #248]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004706:	4b39      	ldr	r3, [pc, #228]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004714:	4935      	ldr	r1, [pc, #212]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004728:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004736:	492d      	ldr	r1, [pc, #180]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d011      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800474a:	4b28      	ldr	r3, [pc, #160]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004750:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004758:	4924      	ldr	r1, [pc, #144]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004768:	d101      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800476a:	2301      	movs	r3, #1
 800476c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478a:	4b18      	ldr	r3, [pc, #96]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004798:	4914      	ldr	r1, [pc, #80]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047ac:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047bc:	490b      	ldr	r1, [pc, #44]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e0:	4902      	ldr	r1, [pc, #8]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047e8:	e002      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00b      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004802:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	4986      	ldr	r1, [pc, #536]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004820:	4b81      	ldr	r3, [pc, #516]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004826:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004830:	497d      	ldr	r1, [pc, #500]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d006      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80d6 	beq.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800484c:	4b76      	ldr	r3, [pc, #472]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a75      	ldr	r2, [pc, #468]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004858:	f7fd f8ee 	bl	8001a38 <HAL_GetTick>
 800485c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004860:	f7fd f8ea 	bl	8001a38 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e195      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004872:	4b6d      	ldr	r3, [pc, #436]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d021      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	2b00      	cmp	r3, #0
 8004890:	d11d      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004892:	4b65      	ldr	r3, [pc, #404]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048a0:	4b61      	ldr	r3, [pc, #388]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a6:	0e1b      	lsrs	r3, r3, #24
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	019a      	lsls	r2, r3, #6
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	061b      	lsls	r3, r3, #24
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	4958      	ldr	r1, [pc, #352]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d02e      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048f8:	d129      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004908:	4b47      	ldr	r3, [pc, #284]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	493e      	ldr	r1, [pc, #248]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004936:	4b3c      	ldr	r3, [pc, #240]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800493c:	f023 021f 	bic.w	r2, r3, #31
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	3b01      	subs	r3, #1
 8004946:	4938      	ldr	r1, [pc, #224]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01d      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800495a:	4b33      	ldr	r3, [pc, #204]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004960:	0e1b      	lsrs	r3, r3, #24
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004968:	4b2f      	ldr	r3, [pc, #188]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	0f1b      	lsrs	r3, r3, #28
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	019a      	lsls	r2, r3, #6
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	061b      	lsls	r3, r3, #24
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	071b      	lsls	r3, r3, #28
 800498e:	4926      	ldr	r1, [pc, #152]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	019a      	lsls	r2, r3, #6
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	061b      	lsls	r3, r3, #24
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	071b      	lsls	r3, r3, #28
 80049be:	491a      	ldr	r1, [pc, #104]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049c6:	4b18      	ldr	r3, [pc, #96]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a17      	ldr	r2, [pc, #92]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fd f831 	bl	8001a38 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049da:	f7fd f82d 	bl	8001a38 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	@ 0x64
 80049e6:	d901      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0d8      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f040 80ce 	bne.w	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a08      	ldr	r2, [pc, #32]	@ (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fd f814 	bl	8001a38 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a12:	e00b      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a14:	f7fd f810 	bl	8001a38 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	@ 0x64
 8004a20:	d904      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0bb      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a38:	d0ec      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d02e      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d12a      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a62:	4b51      	ldr	r3, [pc, #324]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a76:	0f1b      	lsrs	r3, r3, #28
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	019a      	lsls	r2, r3, #6
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	071b      	lsls	r3, r3, #28
 8004a96:	4944      	ldr	r1, [pc, #272]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a9e:	4b42      	ldr	r3, [pc, #264]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aa4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	493d      	ldr	r1, [pc, #244]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d022      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004acc:	d11d      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ace:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad4:	0e1b      	lsrs	r3, r3, #24
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004adc:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	0f1b      	lsrs	r3, r3, #28
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	019a      	lsls	r2, r3, #6
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	431a      	orrs	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	071b      	lsls	r3, r3, #28
 8004b02:	4929      	ldr	r1, [pc, #164]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d028      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b16:	4b24      	ldr	r3, [pc, #144]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b24:	4b20      	ldr	r3, [pc, #128]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	019a      	lsls	r2, r3, #6
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	071b      	lsls	r3, r3, #28
 8004b4a:	4917      	ldr	r1, [pc, #92]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b52:	4b15      	ldr	r3, [pc, #84]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	4911      	ldr	r1, [pc, #68]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b74:	f7fc ff60 	bl	8001a38 <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b7c:	f7fc ff5c 	bl	8001a38 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e007      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b9a:	d1ef      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800

08004bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e049      	b.n	8004c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fbea 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 fcbc 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e04c      	b.n	8004d0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <HAL_TIM_Base_Start+0xc0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d022      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8e:	d01d      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a22      	ldr	r2, [pc, #136]	@ (8004d20 <HAL_TIM_Base_Start+0xc4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d018      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	@ (8004d24 <HAL_TIM_Base_Start+0xc8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <HAL_TIM_Base_Start+0xcc>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00e      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d2c <HAL_TIM_Base_Start+0xd0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d009      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d30 <HAL_TIM_Base_Start+0xd4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <HAL_TIM_Base_Start+0x70>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d34 <HAL_TIM_Base_Start+0xd8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d115      	bne.n	8004cf8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	4b19      	ldr	r3, [pc, #100]	@ (8004d38 <HAL_TIM_Base_Start+0xdc>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d015      	beq.n	8004d0a <HAL_TIM_Base_Start+0xae>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce4:	d011      	beq.n	8004d0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e000      	b.n	8004d0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40001800 	.word	0x40001800
 8004d38:	00010007 	.word	0x00010007

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e054      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a26      	ldr	r2, [pc, #152]	@ (8004e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d022      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d01d      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a22      	ldr	r2, [pc, #136]	@ (8004e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d018      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a21      	ldr	r2, [pc, #132]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d013      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00e      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xe0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d009      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1c      	ldr	r2, [pc, #112]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xe4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xe8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d115      	bne.n	8004de8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_TIM_Base_Start_IT+0xec>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d015      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xbe>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd4:	d011      	beq.n	8004dfa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de6:	e008      	b.n	8004dfa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800
 8004e18:	40000c00 	.word	0x40000c00
 8004e1c:	40010400 	.word	0x40010400
 8004e20:	40014000 	.word	0x40014000
 8004e24:	40001800 	.word	0x40001800
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1a      	ldr	r2, [r3, #32]
 8004e4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10f      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_Base_Stop_IT+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e049      	b.n	8004f30 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f841 	bl	8004f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 fb4d 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0202 	mvn.w	r2, #2
 8004f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fac8 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 faba 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 facb 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 faa2 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa94 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 faa5 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0208 	mvn.w	r2, #8
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa7c 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa6e 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa7f 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0210 	mvn.w	r2, #16
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2208      	movs	r2, #8
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa56 	bl	800552c <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa48 	bl	8005518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fa59 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0201 	mvn.w	r2, #1
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fb ffac 	bl	8001010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fe7d 	bl	8005de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00c      	beq.n	800510a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fe75 	bl	8005df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00c      	beq.n	800512e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fa13 	bl	8005554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f06f 0220 	mvn.w	r2, #32
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fe3d 	bl	8005dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005176:	2302      	movs	r3, #2
 8005178:	e0ff      	b.n	800537a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b14      	cmp	r3, #20
 8005186:	f200 80f0 	bhi.w	800536a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051e5 	.word	0x080051e5
 8005194:	0800536b 	.word	0x0800536b
 8005198:	0800536b 	.word	0x0800536b
 800519c:	0800536b 	.word	0x0800536b
 80051a0:	08005225 	.word	0x08005225
 80051a4:	0800536b 	.word	0x0800536b
 80051a8:	0800536b 	.word	0x0800536b
 80051ac:	0800536b 	.word	0x0800536b
 80051b0:	08005267 	.word	0x08005267
 80051b4:	0800536b 	.word	0x0800536b
 80051b8:	0800536b 	.word	0x0800536b
 80051bc:	0800536b 	.word	0x0800536b
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	0800536b 	.word	0x0800536b
 80051c8:	0800536b 	.word	0x0800536b
 80051cc:	0800536b 	.word	0x0800536b
 80051d0:	080052e9 	.word	0x080052e9
 80051d4:	0800536b 	.word	0x0800536b
 80051d8:	0800536b 	.word	0x0800536b
 80051dc:	0800536b 	.word	0x0800536b
 80051e0:	08005329 	.word	0x08005329
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fa68 	bl	80056c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699a      	ldr	r2, [r3, #24]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0208 	orr.w	r2, r2, #8
 80051fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0204 	bic.w	r2, r2, #4
 800520e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6999      	ldr	r1, [r3, #24]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	619a      	str	r2, [r3, #24]
      break;
 8005222:	e0a5      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 faba 	bl	80057a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800523e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6999      	ldr	r1, [r3, #24]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	619a      	str	r2, [r3, #24]
      break;
 8005264:	e084      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fb11 	bl	8005894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0208 	orr.w	r2, r2, #8
 8005280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0204 	bic.w	r2, r2, #4
 8005290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69d9      	ldr	r1, [r3, #28]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      break;
 80052a4:	e064      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fb67 	bl	8005980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69d9      	ldr	r1, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	021a      	lsls	r2, r3, #8
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	61da      	str	r2, [r3, #28]
      break;
 80052e6:	e043      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fb9e 	bl	8005a30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0208 	orr.w	r2, r2, #8
 8005302:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0204 	bic.w	r2, r2, #4
 8005312:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005326:	e023      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fbd0 	bl	8005ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005368:	e002      	b.n	8005370 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
      break;
 800536e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_ConfigClockSource+0x1c>
 800539c:	2302      	movs	r3, #2
 800539e:	e0b4      	b.n	800550a <HAL_TIM_ConfigClockSource+0x186>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4b56      	ldr	r3, [pc, #344]	@ (8005514 <HAL_TIM_ConfigClockSource+0x190>)
 80053bc:	4013      	ands	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d8:	d03e      	beq.n	8005458 <HAL_TIM_ConfigClockSource+0xd4>
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053de:	f200 8087 	bhi.w	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e6:	f000 8086 	beq.w	80054f6 <HAL_TIM_ConfigClockSource+0x172>
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ee:	d87f      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b70      	cmp	r3, #112	@ 0x70
 80053f2:	d01a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0xa6>
 80053f4:	2b70      	cmp	r3, #112	@ 0x70
 80053f6:	d87b      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b60      	cmp	r3, #96	@ 0x60
 80053fa:	d050      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x11a>
 80053fc:	2b60      	cmp	r3, #96	@ 0x60
 80053fe:	d877      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b50      	cmp	r3, #80	@ 0x50
 8005402:	d03c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0xfa>
 8005404:	2b50      	cmp	r3, #80	@ 0x50
 8005406:	d873      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b40      	cmp	r3, #64	@ 0x40
 800540a:	d058      	beq.n	80054be <HAL_TIM_ConfigClockSource+0x13a>
 800540c:	2b40      	cmp	r3, #64	@ 0x40
 800540e:	d86f      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b30      	cmp	r3, #48	@ 0x30
 8005412:	d064      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15a>
 8005414:	2b30      	cmp	r3, #48	@ 0x30
 8005416:	d86b      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b20      	cmp	r3, #32
 800541a:	d060      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15a>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d867      	bhi.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d05c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b10      	cmp	r3, #16
 8005426:	d05a      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x15a>
 8005428:	e062      	b.n	80054f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800543a:	f000 fc19 	bl	8005c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800544c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	609a      	str	r2, [r3, #8]
      break;
 8005456:	e04f      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005468:	f000 fc02 	bl	8005c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800547a:	609a      	str	r2, [r3, #8]
      break;
 800547c:	e03c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	461a      	mov	r2, r3
 800548c:	f000 fb76 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2150      	movs	r1, #80	@ 0x50
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fbcf 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 800549c:	e02c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 fb95 	bl	8005bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2160      	movs	r1, #96	@ 0x60
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fbbf 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80054bc:	e01c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	461a      	mov	r2, r3
 80054cc:	f000 fb56 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2140      	movs	r1, #64	@ 0x40
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fbaf 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f000 fba6 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	73fb      	strb	r3, [r7, #15]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	fffeff88 	.word	0xfffeff88

08005518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a46      	ldr	r2, [pc, #280]	@ (8005694 <TIM_Base_SetConfig+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005586:	d00f      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a43      	ldr	r2, [pc, #268]	@ (8005698 <TIM_Base_SetConfig+0x130>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00b      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a42      	ldr	r2, [pc, #264]	@ (800569c <TIM_Base_SetConfig+0x134>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d007      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a41      	ldr	r2, [pc, #260]	@ (80056a0 <TIM_Base_SetConfig+0x138>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a40      	ldr	r2, [pc, #256]	@ (80056a4 <TIM_Base_SetConfig+0x13c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d108      	bne.n	80055ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a35      	ldr	r2, [pc, #212]	@ (8005694 <TIM_Base_SetConfig+0x12c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d02b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c8:	d027      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a32      	ldr	r2, [pc, #200]	@ (8005698 <TIM_Base_SetConfig+0x130>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d023      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a31      	ldr	r2, [pc, #196]	@ (800569c <TIM_Base_SetConfig+0x134>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01f      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a30      	ldr	r2, [pc, #192]	@ (80056a0 <TIM_Base_SetConfig+0x138>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2f      	ldr	r2, [pc, #188]	@ (80056a4 <TIM_Base_SetConfig+0x13c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2e      	ldr	r2, [pc, #184]	@ (80056a8 <TIM_Base_SetConfig+0x140>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <TIM_Base_SetConfig+0x144>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <TIM_Base_SetConfig+0x148>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2b      	ldr	r2, [pc, #172]	@ (80056b4 <TIM_Base_SetConfig+0x14c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2a      	ldr	r2, [pc, #168]	@ (80056b8 <TIM_Base_SetConfig+0x150>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a29      	ldr	r2, [pc, #164]	@ (80056bc <TIM_Base_SetConfig+0x154>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a10      	ldr	r2, [pc, #64]	@ (8005694 <TIM_Base_SetConfig+0x12c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0xf8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	@ (80056a4 <TIM_Base_SetConfig+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]
  }
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	40001800 	.word	0x40001800
 80056b8:	40001c00 	.word	0x40001c00
 80056bc:	40002000 	.word	0x40002000

080056c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f023 0201 	bic.w	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005798 <TIM_OC1_SetConfig+0xd8>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f023 0302 	bic.w	r3, r3, #2
 8005708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a21      	ldr	r2, [pc, #132]	@ (800579c <TIM_OC1_SetConfig+0xdc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC1_SetConfig+0x64>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a20      	ldr	r2, [pc, #128]	@ (80057a0 <TIM_OC1_SetConfig+0xe0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d10c      	bne.n	800573e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0308 	bic.w	r3, r3, #8
 800572a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a16      	ldr	r2, [pc, #88]	@ (800579c <TIM_OC1_SetConfig+0xdc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC1_SetConfig+0x8e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a15      	ldr	r2, [pc, #84]	@ (80057a0 <TIM_OC1_SetConfig+0xe0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800575c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	4313      	orrs	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	621a      	str	r2, [r3, #32]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	fffeff8f 	.word	0xfffeff8f
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f023 0210 	bic.w	r2, r3, #16
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005888 <TIM_OC2_SetConfig+0xe4>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a23      	ldr	r2, [pc, #140]	@ (800588c <TIM_OC2_SetConfig+0xe8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC2_SetConfig+0x68>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a22      	ldr	r2, [pc, #136]	@ (8005890 <TIM_OC2_SetConfig+0xec>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10d      	bne.n	8005828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a18      	ldr	r2, [pc, #96]	@ (800588c <TIM_OC2_SetConfig+0xe8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0x94>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a17      	ldr	r2, [pc, #92]	@ (8005890 <TIM_OC2_SetConfig+0xec>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d113      	bne.n	8005860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800583e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	feff8fff 	.word	0xfeff8fff
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400

08005894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <TIM_OC3_SetConfig+0xe0>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <TIM_OC3_SetConfig+0xe4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_OC3_SetConfig+0x66>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a21      	ldr	r2, [pc, #132]	@ (800597c <TIM_OC3_SetConfig+0xe8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10d      	bne.n	8005916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a17      	ldr	r2, [pc, #92]	@ (8005978 <TIM_OC3_SetConfig+0xe4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x92>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a16      	ldr	r2, [pc, #88]	@ (800597c <TIM_OC3_SetConfig+0xe8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d113      	bne.n	800594e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	fffeff8f 	.word	0xfffeff8f
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <TIM_OC4_SetConfig+0xa4>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a13      	ldr	r2, [pc, #76]	@ (8005a28 <TIM_OC4_SetConfig+0xa8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC4_SetConfig+0x68>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <TIM_OC4_SetConfig+0xac>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d109      	bne.n	80059fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	feff8fff 	.word	0xfeff8fff
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40010400 	.word	0x40010400

08005a30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <TIM_OC5_SetConfig+0x98>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a12      	ldr	r2, [pc, #72]	@ (8005acc <TIM_OC5_SetConfig+0x9c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC5_SetConfig+0x5e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <TIM_OC5_SetConfig+0xa0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d109      	bne.n	8005aa2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	621a      	str	r2, [r3, #32]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	fffeff8f 	.word	0xfffeff8f
 8005acc:	40010000 	.word	0x40010000
 8005ad0:	40010400 	.word	0x40010400

08005ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4b1c      	ldr	r3, [pc, #112]	@ (8005b70 <TIM_OC6_SetConfig+0x9c>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	051b      	lsls	r3, r3, #20
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a13      	ldr	r2, [pc, #76]	@ (8005b74 <TIM_OC6_SetConfig+0xa0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC6_SetConfig+0x60>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a12      	ldr	r2, [pc, #72]	@ (8005b78 <TIM_OC6_SetConfig+0xa4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d109      	bne.n	8005b48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	feff8fff 	.word	0xfeff8fff
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40010400 	.word	0x40010400

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f023 0210 	bic.w	r2, r3, #16
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e06d      	b.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a30      	ldr	r2, [pc, #192]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d108      	bne.n	8005d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a20      	ldr	r2, [pc, #128]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3a:	d01d      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1d      	ldr	r2, [pc, #116]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d10c      	bne.n	8005d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40010400 	.word	0x40010400
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40001800 	.word	0x40001800

08005dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e040      	b.n	8005e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7fb fb66 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2224      	movs	r2, #36	@ 0x24
 8005e34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0201 	bic.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fd9e 	bl	8006990 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fb37 	bl	80064c8 <UART_SetConfig>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e01b      	b.n	8005e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fe1d 	bl	8006ad4 <UART_CheckIdleState>
 8005e9a:	4603      	mov	r3, r0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ece:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ed8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d115      	bne.n	8005f0c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00f      	beq.n	8005f0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 82ac 	beq.w	800645a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
      }
      return;
 8005f0a:	e2a6      	b.n	800645a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8117 	beq.w	8006144 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005f26:	4b85      	ldr	r3, [pc, #532]	@ (800613c <HAL_UART_IRQHandler+0x298>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 810a 	beq.w	8006144 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d011      	beq.n	8005f60 <HAL_UART_IRQHandler+0xbc>
 8005f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f56:	f043 0201 	orr.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <HAL_UART_IRQHandler+0xec>
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f86:	f043 0204 	orr.w	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d011      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x11c>
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2204      	movs	r2, #4
 8005fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d017      	beq.n	8005ffc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2208      	movs	r2, #8
 8005fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff2:	f043 0208 	orr.w	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <HAL_UART_IRQHandler+0x18a>
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00c      	beq.n	800602e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800601c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8212 	beq.w	800645e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00d      	beq.n	8006062 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006068:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b40      	cmp	r3, #64	@ 0x40
 8006078:	d005      	beq.n	8006086 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800607a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800607e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006082:	2b00      	cmp	r3, #0
 8006084:	d04f      	beq.n	8006126 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fe39 	bl	8006cfe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006096:	2b40      	cmp	r3, #64	@ 0x40
 8006098:	d141      	bne.n	800611e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060a8:	e853 3f00 	ldrex	r3, [r3]
 80060ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80060ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80060d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1d9      	bne.n	800609a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d013      	beq.n	8006116 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060f2:	4a13      	ldr	r2, [pc, #76]	@ (8006140 <HAL_UART_IRQHandler+0x29c>)
 80060f4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fc fb2a 	bl	8002754 <HAL_DMA_Abort_IT>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	e00f      	b.n	8006136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9b6 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e00b      	b.n	8006136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f9b2 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006124:	e007      	b.n	8006136 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9ae 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006134:	e193      	b.n	800645e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	bf00      	nop
    return;
 8006138:	e191      	b.n	800645e <HAL_UART_IRQHandler+0x5ba>
 800613a:	bf00      	nop
 800613c:	04000120 	.word	0x04000120
 8006140:	08006dc7 	.word	0x08006dc7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006148:	2b01      	cmp	r3, #1
 800614a:	f040 814c 	bne.w	80063e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8145 	beq.w	80063e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 813e 	beq.w	80063e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2210      	movs	r2, #16
 8006170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	f040 80b6 	bne.w	80062ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800618e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8165 	beq.w	8006462 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800619e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061a2:	429a      	cmp	r2, r3
 80061a4:	f080 815d 	bcs.w	8006462 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061bc:	f000 8086 	beq.w	80062cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80061d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80061d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1da      	bne.n	80061c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800621a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800622e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e1      	bne.n	800620a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800626a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800626c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e3      	bne.n	8006246 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800629a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800629c:	f023 0310 	bic.w	r3, r3, #16
 80062a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1e4      	bne.n	800628c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc f9d4 	bl	8002674 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f8d8 	bl	800649c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062ec:	e0b9      	b.n	8006462 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80ab 	beq.w	8006466 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80a6 	beq.w	8006466 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	e853 3f00 	ldrex	r3, [r3]
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800632e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800634a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e4      	bne.n	800631a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	623b      	str	r3, [r7, #32]
   return(result);
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006374:	633a      	str	r2, [r7, #48]	@ 0x30
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800637a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	617b      	str	r3, [r7, #20]
   return(result);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e4      	bne.n	800639c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f85c 	bl	800649c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063e4:	e03f      	b.n	8006466 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00e      	beq.n	8006410 <HAL_UART_IRQHandler+0x56c>
 80063f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f853 	bl	80064b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800640e:	e02d      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01c      	beq.n	800646a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
    }
    return;
 8006438:	e017      	b.n	800646a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d012      	beq.n	800646c <HAL_UART_IRQHandler+0x5c8>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fccd 	bl	8006df2 <UART_EndTransmit_IT>
    return;
 8006458:	e008      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
      return;
 800645a:	bf00      	nop
 800645c:	e006      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
    return;
 800645e:	bf00      	nop
 8006460:	e004      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <HAL_UART_IRQHandler+0x5c8>
    return;
 800646a:	bf00      	nop
  }

}
 800646c:	37e8      	adds	r7, #232	@ 0xe8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop

08006474 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4ba6      	ldr	r3, [pc, #664]	@ (800678c <UART_SetConfig+0x2c4>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6812      	ldr	r2, [r2, #0]
 80064fa:	6979      	ldr	r1, [r7, #20]
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	430a      	orrs	r2, r1
 8006538:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a94      	ldr	r2, [pc, #592]	@ (8006790 <UART_SetConfig+0x2c8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d120      	bne.n	8006586 <UART_SetConfig+0xbe>
 8006544:	4b93      	ldr	r3, [pc, #588]	@ (8006794 <UART_SetConfig+0x2cc>)
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d816      	bhi.n	8006580 <UART_SetConfig+0xb8>
 8006552:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <UART_SetConfig+0x90>)
 8006554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006558:	08006569 	.word	0x08006569
 800655c:	08006575 	.word	0x08006575
 8006560:	0800656f 	.word	0x0800656f
 8006564:	0800657b 	.word	0x0800657b
 8006568:	2301      	movs	r3, #1
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e150      	b.n	8006810 <UART_SetConfig+0x348>
 800656e:	2302      	movs	r3, #2
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e14d      	b.n	8006810 <UART_SetConfig+0x348>
 8006574:	2304      	movs	r3, #4
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e14a      	b.n	8006810 <UART_SetConfig+0x348>
 800657a:	2308      	movs	r3, #8
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e147      	b.n	8006810 <UART_SetConfig+0x348>
 8006580:	2310      	movs	r3, #16
 8006582:	77fb      	strb	r3, [r7, #31]
 8006584:	e144      	b.n	8006810 <UART_SetConfig+0x348>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a83      	ldr	r2, [pc, #524]	@ (8006798 <UART_SetConfig+0x2d0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d132      	bne.n	80065f6 <UART_SetConfig+0x12e>
 8006590:	4b80      	ldr	r3, [pc, #512]	@ (8006794 <UART_SetConfig+0x2cc>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006596:	f003 030c 	and.w	r3, r3, #12
 800659a:	2b0c      	cmp	r3, #12
 800659c:	d828      	bhi.n	80065f0 <UART_SetConfig+0x128>
 800659e:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <UART_SetConfig+0xdc>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080065f1 	.word	0x080065f1
 80065ac:	080065f1 	.word	0x080065f1
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065e5 	.word	0x080065e5
 80065b8:	080065f1 	.word	0x080065f1
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	080065df 	.word	0x080065df
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f1 	.word	0x080065f1
 80065d4:	080065eb 	.word	0x080065eb
 80065d8:	2300      	movs	r3, #0
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e118      	b.n	8006810 <UART_SetConfig+0x348>
 80065de:	2302      	movs	r3, #2
 80065e0:	77fb      	strb	r3, [r7, #31]
 80065e2:	e115      	b.n	8006810 <UART_SetConfig+0x348>
 80065e4:	2304      	movs	r3, #4
 80065e6:	77fb      	strb	r3, [r7, #31]
 80065e8:	e112      	b.n	8006810 <UART_SetConfig+0x348>
 80065ea:	2308      	movs	r3, #8
 80065ec:	77fb      	strb	r3, [r7, #31]
 80065ee:	e10f      	b.n	8006810 <UART_SetConfig+0x348>
 80065f0:	2310      	movs	r3, #16
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e10c      	b.n	8006810 <UART_SetConfig+0x348>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a68      	ldr	r2, [pc, #416]	@ (800679c <UART_SetConfig+0x2d4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d120      	bne.n	8006642 <UART_SetConfig+0x17a>
 8006600:	4b64      	ldr	r3, [pc, #400]	@ (8006794 <UART_SetConfig+0x2cc>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800660a:	2b30      	cmp	r3, #48	@ 0x30
 800660c:	d013      	beq.n	8006636 <UART_SetConfig+0x16e>
 800660e:	2b30      	cmp	r3, #48	@ 0x30
 8006610:	d814      	bhi.n	800663c <UART_SetConfig+0x174>
 8006612:	2b20      	cmp	r3, #32
 8006614:	d009      	beq.n	800662a <UART_SetConfig+0x162>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d810      	bhi.n	800663c <UART_SetConfig+0x174>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <UART_SetConfig+0x15c>
 800661e:	2b10      	cmp	r3, #16
 8006620:	d006      	beq.n	8006630 <UART_SetConfig+0x168>
 8006622:	e00b      	b.n	800663c <UART_SetConfig+0x174>
 8006624:	2300      	movs	r3, #0
 8006626:	77fb      	strb	r3, [r7, #31]
 8006628:	e0f2      	b.n	8006810 <UART_SetConfig+0x348>
 800662a:	2302      	movs	r3, #2
 800662c:	77fb      	strb	r3, [r7, #31]
 800662e:	e0ef      	b.n	8006810 <UART_SetConfig+0x348>
 8006630:	2304      	movs	r3, #4
 8006632:	77fb      	strb	r3, [r7, #31]
 8006634:	e0ec      	b.n	8006810 <UART_SetConfig+0x348>
 8006636:	2308      	movs	r3, #8
 8006638:	77fb      	strb	r3, [r7, #31]
 800663a:	e0e9      	b.n	8006810 <UART_SetConfig+0x348>
 800663c:	2310      	movs	r3, #16
 800663e:	77fb      	strb	r3, [r7, #31]
 8006640:	e0e6      	b.n	8006810 <UART_SetConfig+0x348>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a56      	ldr	r2, [pc, #344]	@ (80067a0 <UART_SetConfig+0x2d8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d120      	bne.n	800668e <UART_SetConfig+0x1c6>
 800664c:	4b51      	ldr	r3, [pc, #324]	@ (8006794 <UART_SetConfig+0x2cc>)
 800664e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006652:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006656:	2bc0      	cmp	r3, #192	@ 0xc0
 8006658:	d013      	beq.n	8006682 <UART_SetConfig+0x1ba>
 800665a:	2bc0      	cmp	r3, #192	@ 0xc0
 800665c:	d814      	bhi.n	8006688 <UART_SetConfig+0x1c0>
 800665e:	2b80      	cmp	r3, #128	@ 0x80
 8006660:	d009      	beq.n	8006676 <UART_SetConfig+0x1ae>
 8006662:	2b80      	cmp	r3, #128	@ 0x80
 8006664:	d810      	bhi.n	8006688 <UART_SetConfig+0x1c0>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <UART_SetConfig+0x1a8>
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d006      	beq.n	800667c <UART_SetConfig+0x1b4>
 800666e:	e00b      	b.n	8006688 <UART_SetConfig+0x1c0>
 8006670:	2300      	movs	r3, #0
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e0cc      	b.n	8006810 <UART_SetConfig+0x348>
 8006676:	2302      	movs	r3, #2
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e0c9      	b.n	8006810 <UART_SetConfig+0x348>
 800667c:	2304      	movs	r3, #4
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e0c6      	b.n	8006810 <UART_SetConfig+0x348>
 8006682:	2308      	movs	r3, #8
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e0c3      	b.n	8006810 <UART_SetConfig+0x348>
 8006688:	2310      	movs	r3, #16
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e0c0      	b.n	8006810 <UART_SetConfig+0x348>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a44      	ldr	r2, [pc, #272]	@ (80067a4 <UART_SetConfig+0x2dc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d125      	bne.n	80066e4 <UART_SetConfig+0x21c>
 8006698:	4b3e      	ldr	r3, [pc, #248]	@ (8006794 <UART_SetConfig+0x2cc>)
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a6:	d017      	beq.n	80066d8 <UART_SetConfig+0x210>
 80066a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066ac:	d817      	bhi.n	80066de <UART_SetConfig+0x216>
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b2:	d00b      	beq.n	80066cc <UART_SetConfig+0x204>
 80066b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b8:	d811      	bhi.n	80066de <UART_SetConfig+0x216>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <UART_SetConfig+0x1fe>
 80066be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066c2:	d006      	beq.n	80066d2 <UART_SetConfig+0x20a>
 80066c4:	e00b      	b.n	80066de <UART_SetConfig+0x216>
 80066c6:	2300      	movs	r3, #0
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e0a1      	b.n	8006810 <UART_SetConfig+0x348>
 80066cc:	2302      	movs	r3, #2
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e09e      	b.n	8006810 <UART_SetConfig+0x348>
 80066d2:	2304      	movs	r3, #4
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e09b      	b.n	8006810 <UART_SetConfig+0x348>
 80066d8:	2308      	movs	r3, #8
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e098      	b.n	8006810 <UART_SetConfig+0x348>
 80066de:	2310      	movs	r3, #16
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e095      	b.n	8006810 <UART_SetConfig+0x348>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2f      	ldr	r2, [pc, #188]	@ (80067a8 <UART_SetConfig+0x2e0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d125      	bne.n	800673a <UART_SetConfig+0x272>
 80066ee:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <UART_SetConfig+0x2cc>)
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fc:	d017      	beq.n	800672e <UART_SetConfig+0x266>
 80066fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006702:	d817      	bhi.n	8006734 <UART_SetConfig+0x26c>
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d00b      	beq.n	8006722 <UART_SetConfig+0x25a>
 800670a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670e:	d811      	bhi.n	8006734 <UART_SetConfig+0x26c>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <UART_SetConfig+0x254>
 8006714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006718:	d006      	beq.n	8006728 <UART_SetConfig+0x260>
 800671a:	e00b      	b.n	8006734 <UART_SetConfig+0x26c>
 800671c:	2301      	movs	r3, #1
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e076      	b.n	8006810 <UART_SetConfig+0x348>
 8006722:	2302      	movs	r3, #2
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e073      	b.n	8006810 <UART_SetConfig+0x348>
 8006728:	2304      	movs	r3, #4
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e070      	b.n	8006810 <UART_SetConfig+0x348>
 800672e:	2308      	movs	r3, #8
 8006730:	77fb      	strb	r3, [r7, #31]
 8006732:	e06d      	b.n	8006810 <UART_SetConfig+0x348>
 8006734:	2310      	movs	r3, #16
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e06a      	b.n	8006810 <UART_SetConfig+0x348>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1b      	ldr	r2, [pc, #108]	@ (80067ac <UART_SetConfig+0x2e4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d138      	bne.n	80067b6 <UART_SetConfig+0x2ee>
 8006744:	4b13      	ldr	r3, [pc, #76]	@ (8006794 <UART_SetConfig+0x2cc>)
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800674a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800674e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006752:	d017      	beq.n	8006784 <UART_SetConfig+0x2bc>
 8006754:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006758:	d82a      	bhi.n	80067b0 <UART_SetConfig+0x2e8>
 800675a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800675e:	d00b      	beq.n	8006778 <UART_SetConfig+0x2b0>
 8006760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006764:	d824      	bhi.n	80067b0 <UART_SetConfig+0x2e8>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <UART_SetConfig+0x2aa>
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800676e:	d006      	beq.n	800677e <UART_SetConfig+0x2b6>
 8006770:	e01e      	b.n	80067b0 <UART_SetConfig+0x2e8>
 8006772:	2300      	movs	r3, #0
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e04b      	b.n	8006810 <UART_SetConfig+0x348>
 8006778:	2302      	movs	r3, #2
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e048      	b.n	8006810 <UART_SetConfig+0x348>
 800677e:	2304      	movs	r3, #4
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e045      	b.n	8006810 <UART_SetConfig+0x348>
 8006784:	2308      	movs	r3, #8
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e042      	b.n	8006810 <UART_SetConfig+0x348>
 800678a:	bf00      	nop
 800678c:	efff69f3 	.word	0xefff69f3
 8006790:	40011000 	.word	0x40011000
 8006794:	40023800 	.word	0x40023800
 8006798:	40004400 	.word	0x40004400
 800679c:	40004800 	.word	0x40004800
 80067a0:	40004c00 	.word	0x40004c00
 80067a4:	40005000 	.word	0x40005000
 80067a8:	40011400 	.word	0x40011400
 80067ac:	40007800 	.word	0x40007800
 80067b0:	2310      	movs	r3, #16
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e02c      	b.n	8006810 <UART_SetConfig+0x348>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a72      	ldr	r2, [pc, #456]	@ (8006984 <UART_SetConfig+0x4bc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d125      	bne.n	800680c <UART_SetConfig+0x344>
 80067c0:	4b71      	ldr	r3, [pc, #452]	@ (8006988 <UART_SetConfig+0x4c0>)
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067ce:	d017      	beq.n	8006800 <UART_SetConfig+0x338>
 80067d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067d4:	d817      	bhi.n	8006806 <UART_SetConfig+0x33e>
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067da:	d00b      	beq.n	80067f4 <UART_SetConfig+0x32c>
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067e0:	d811      	bhi.n	8006806 <UART_SetConfig+0x33e>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <UART_SetConfig+0x326>
 80067e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ea:	d006      	beq.n	80067fa <UART_SetConfig+0x332>
 80067ec:	e00b      	b.n	8006806 <UART_SetConfig+0x33e>
 80067ee:	2300      	movs	r3, #0
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e00d      	b.n	8006810 <UART_SetConfig+0x348>
 80067f4:	2302      	movs	r3, #2
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e00a      	b.n	8006810 <UART_SetConfig+0x348>
 80067fa:	2304      	movs	r3, #4
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e007      	b.n	8006810 <UART_SetConfig+0x348>
 8006800:	2308      	movs	r3, #8
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e004      	b.n	8006810 <UART_SetConfig+0x348>
 8006806:	2310      	movs	r3, #16
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e001      	b.n	8006810 <UART_SetConfig+0x348>
 800680c:	2310      	movs	r3, #16
 800680e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006818:	d15b      	bne.n	80068d2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800681a:	7ffb      	ldrb	r3, [r7, #31]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d828      	bhi.n	8006872 <UART_SetConfig+0x3aa>
 8006820:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0x360>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006855 	.word	0x08006855
 8006830:	0800685d 	.word	0x0800685d
 8006834:	08006873 	.word	0x08006873
 8006838:	08006863 	.word	0x08006863
 800683c:	08006873 	.word	0x08006873
 8006840:	08006873 	.word	0x08006873
 8006844:	08006873 	.word	0x08006873
 8006848:	0800686b 	.word	0x0800686b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fd fd5e 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8006850:	61b8      	str	r0, [r7, #24]
        break;
 8006852:	e013      	b.n	800687c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fd fd6e 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8006858:	61b8      	str	r0, [r7, #24]
        break;
 800685a:	e00f      	b.n	800687c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4b4b      	ldr	r3, [pc, #300]	@ (800698c <UART_SetConfig+0x4c4>)
 800685e:	61bb      	str	r3, [r7, #24]
        break;
 8006860:	e00c      	b.n	800687c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fd fc41 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 8006866:	61b8      	str	r0, [r7, #24]
        break;
 8006868:	e008      	b.n	800687c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686e:	61bb      	str	r3, [r7, #24]
        break;
 8006870:	e004      	b.n	800687c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	77bb      	strb	r3, [r7, #30]
        break;
 800687a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d074      	beq.n	800696c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	005a      	lsls	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d916      	bls.n	80068cc <UART_SetConfig+0x404>
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a4:	d212      	bcs.n	80068cc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f023 030f 	bic.w	r3, r3, #15
 80068ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	4313      	orrs	r3, r2
 80068c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	89fa      	ldrh	r2, [r7, #14]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	e04f      	b.n	800696c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	77bb      	strb	r3, [r7, #30]
 80068d0:	e04c      	b.n	800696c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d2:	7ffb      	ldrb	r3, [r7, #31]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d828      	bhi.n	800692a <UART_SetConfig+0x462>
 80068d8:	a201      	add	r2, pc, #4	@ (adr r2, 80068e0 <UART_SetConfig+0x418>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006905 	.word	0x08006905
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	08006915 	.word	0x08006915
 80068ec:	0800692b 	.word	0x0800692b
 80068f0:	0800691b 	.word	0x0800691b
 80068f4:	0800692b 	.word	0x0800692b
 80068f8:	0800692b 	.word	0x0800692b
 80068fc:	0800692b 	.word	0x0800692b
 8006900:	08006923 	.word	0x08006923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006904:	f7fd fd02 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8006908:	61b8      	str	r0, [r7, #24]
        break;
 800690a:	e013      	b.n	8006934 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800690c:	f7fd fd12 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8006910:	61b8      	str	r0, [r7, #24]
        break;
 8006912:	e00f      	b.n	8006934 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006914:	4b1d      	ldr	r3, [pc, #116]	@ (800698c <UART_SetConfig+0x4c4>)
 8006916:	61bb      	str	r3, [r7, #24]
        break;
 8006918:	e00c      	b.n	8006934 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691a:	f7fd fbe5 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 800691e:	61b8      	str	r0, [r7, #24]
        break;
 8006920:	e008      	b.n	8006934 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006926:	61bb      	str	r3, [r7, #24]
        break;
 8006928:	e004      	b.n	8006934 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	77bb      	strb	r3, [r7, #30]
        break;
 8006932:	bf00      	nop
    }

    if (pclk != 0U)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d018      	beq.n	800696c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	085a      	lsrs	r2, r3, #1
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	441a      	add	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b0f      	cmp	r3, #15
 8006952:	d909      	bls.n	8006968 <UART_SetConfig+0x4a0>
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800695a:	d205      	bcs.n	8006968 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	e001      	b.n	800696c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006978:	7fbb      	ldrb	r3, [r7, #30]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40007c00 	.word	0x40007c00
 8006988:	40023800 	.word	0x40023800
 800698c:	00f42400 	.word	0x00f42400

08006990 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01a      	beq.n	8006aa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a8e:	d10a      	bne.n	8006aa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	605a      	str	r2, [r3, #4]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b098      	sub	sp, #96	@ 0x60
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae4:	f7fa ffa8 	bl	8001a38 <HAL_GetTick>
 8006ae8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d12e      	bne.n	8006b56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f88c 	bl	8006c24 <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d021      	beq.n	8006b56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e062      	b.n	8006c1c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d149      	bne.n	8006bf8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f856 	bl	8006c24 <UART_WaitOnFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d03c      	beq.n	8006bf8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bd0:	61fa      	str	r2, [r7, #28]
 8006bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e5      	bne.n	8006bb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e011      	b.n	8006c1c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3758      	adds	r7, #88	@ 0x58
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c34:	e04f      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c3c:	d04b      	beq.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3e:	f7fa fefb 	bl	8001a38 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d302      	bcc.n	8006c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e04e      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d037      	beq.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b80      	cmp	r3, #128	@ 0x80
 8006c6a:	d034      	beq.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b40      	cmp	r3, #64	@ 0x40
 8006c70:	d031      	beq.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d110      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2208      	movs	r2, #8
 8006c86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 f838 	bl	8006cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2208      	movs	r2, #8
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e029      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb0:	d111      	bne.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f81e 	bl	8006cfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e00f      	b.n	8006cf6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d0a0      	beq.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b095      	sub	sp, #84	@ 0x54
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e6      	bne.n	8006d06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	f023 0301 	bic.w	r3, r3, #1
 8006d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3308      	adds	r3, #8
 8006d56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e5      	bne.n	8006d38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d118      	bne.n	8006da6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6979      	ldr	r1, [r7, #20]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e6      	bne.n	8006d74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dba:	bf00      	nop
 8006dbc:	3754      	adds	r7, #84	@ 0x54
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fb4f 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b088      	sub	sp, #32
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6979      	ldr	r1, [r7, #20]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	613b      	str	r3, [r7, #16]
   return(result);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e6      	bne.n	8006dfa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fb1b 	bl	8006474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e3e:	bf00      	nop
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e48:	b084      	sub	sp, #16
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	f107 001c 	add.w	r0, r7, #28
 8006e56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d121      	bne.n	8006ea6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	4b21      	ldr	r3, [pc, #132]	@ (8006ef8 <USB_CoreInit+0xb0>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d105      	bne.n	8006e9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa92 	bl	80073c4 <USB_CoreReset>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e010      	b.n	8006ec8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa86 	bl	80073c4 <USB_CoreReset>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006ec8:	7fbb      	ldrb	r3, [r7, #30]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d10b      	bne.n	8006ee6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f043 0206 	orr.w	r2, r3, #6
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ef2:	b004      	add	sp, #16
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	ffbdffbf 	.word	0xffbdffbf

08006efc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f023 0201 	bic.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d115      	bne.n	8006f6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fa fd7f 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	330a      	adds	r3, #10
 8006f56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fa25 	bl	80073a8 <USB_GetMode>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d01e      	beq.n	8006fa2 <USB_SetCurrentMode+0x84>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f68:	d9f0      	bls.n	8006f4c <USB_SetCurrentMode+0x2e>
 8006f6a:	e01a      	b.n	8006fa2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d115      	bne.n	8006f9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f7e:	200a      	movs	r0, #10
 8006f80:	f7fa fd66 	bl	8001a50 <HAL_Delay>
      ms += 10U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	330a      	adds	r3, #10
 8006f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa0c 	bl	80073a8 <USB_GetMode>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <USB_SetCurrentMode+0x84>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f9a:	d9f0      	bls.n	8006f7e <USB_SetCurrentMode+0x60>
 8006f9c:	e001      	b.n	8006fa2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e005      	b.n	8006fae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006fa6:	d101      	bne.n	8006fac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fb8:	b084      	sub	sp, #16
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b086      	sub	sp, #24
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e009      	b.n	8006fec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3340      	adds	r3, #64	@ 0x40
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b0e      	cmp	r3, #14
 8006ff0:	d9f2      	bls.n	8006fd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ff2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d11c      	bne.n	8007034 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007008:	f043 0302 	orr.w	r3, r3, #2
 800700c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e005      	b.n	8007040 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007038:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800704c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007050:	2b01      	cmp	r3, #1
 8007052:	d10d      	bne.n	8007070 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800705c:	2100      	movs	r1, #0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f968 	bl	8007334 <USB_SetDevSpeed>
 8007064:	e008      	b.n	8007078 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007066:	2101      	movs	r1, #1
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f963 	bl	8007334 <USB_SetDevSpeed>
 800706e:	e003      	b.n	8007078 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007070:	2103      	movs	r1, #3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f95e 	bl	8007334 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007078:	2110      	movs	r1, #16
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f8fa 	bl	8007274 <USB_FlushTxFifo>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f924 	bl	80072d8 <USB_FlushRxFifo>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a0:	461a      	mov	r2, r3
 80070a2:	2300      	movs	r3, #0
 80070a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ac:	461a      	mov	r2, r3
 80070ae:	2300      	movs	r3, #0
 80070b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	461a      	mov	r2, r3
 80070ba:	2300      	movs	r3, #0
 80070bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	e043      	b.n	800714c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070da:	d118      	bne.n	800710e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ee:	461a      	mov	r2, r3
 80070f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	e013      	b.n	8007120 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007104:	461a      	mov	r2, r3
 8007106:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	e008      	b.n	8007120 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800711a:	461a      	mov	r2, r3
 800711c:	2300      	movs	r3, #0
 800711e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800713e:	461a      	mov	r2, r3
 8007140:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007144:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3301      	adds	r3, #1
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007150:	461a      	mov	r2, r3
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4293      	cmp	r3, r2
 8007156:	d3b5      	bcc.n	80070c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	e043      	b.n	80071e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007174:	d118      	bne.n	80071a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007188:	461a      	mov	r2, r3
 800718a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	e013      	b.n	80071ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e008      	b.n	80071ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b4:	461a      	mov	r2, r3
 80071b6:	2300      	movs	r3, #0
 80071b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c6:	461a      	mov	r2, r3
 80071c8:	2300      	movs	r3, #0
 80071ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d8:	461a      	mov	r2, r3
 80071da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3301      	adds	r3, #1
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071ea:	461a      	mov	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d3b5      	bcc.n	800715e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007204:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007212:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007214:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007218:	2b00      	cmp	r3, #0
 800721a:	d105      	bne.n	8007228 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f043 0210 	orr.w	r2, r3, #16
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	4b0f      	ldr	r3, [pc, #60]	@ (800726c <USB_DevInit+0x2b4>)
 800722e:	4313      	orrs	r3, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007234:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007238:	2b00      	cmp	r3, #0
 800723a:	d005      	beq.n	8007248 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f043 0208 	orr.w	r2, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007248:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800724c:	2b01      	cmp	r3, #1
 800724e:	d105      	bne.n	800725c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <USB_DevInit+0x2b8>)
 8007256:	4313      	orrs	r3, r2
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007268:	b004      	add	sp, #16
 800726a:	4770      	bx	lr
 800726c:	803c3800 	.word	0x803c3800
 8007270:	40000004 	.word	0x40000004

08007274 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3301      	adds	r3, #1
 8007286:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800728e:	d901      	bls.n	8007294 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e01b      	b.n	80072cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	daf2      	bge.n	8007282 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	019b      	lsls	r3, r3, #6
 80072a4:	f043 0220 	orr.w	r2, r3, #32
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b8:	d901      	bls.n	80072be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e006      	b.n	80072cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b20      	cmp	r3, #32
 80072c8:	d0f0      	beq.n	80072ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3301      	adds	r3, #1
 80072e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072f0:	d901      	bls.n	80072f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e018      	b.n	8007328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	daf2      	bge.n	80072e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2210      	movs	r2, #16
 8007306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007314:	d901      	bls.n	800731a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e006      	b.n	8007328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b10      	cmp	r3, #16
 8007324:	d0f0      	beq.n	8007308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	68f9      	ldr	r1, [r7, #12]
 8007350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007354:	4313      	orrs	r3, r2
 8007356:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007380:	f023 0303 	bic.w	r3, r3, #3
 8007384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007394:	f043 0302 	orr.w	r3, r3, #2
 8007398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f003 0301 	and.w	r3, r3, #1
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073dc:	d901      	bls.n	80073e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e01b      	b.n	800741a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	daf2      	bge.n	80073d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f043 0201 	orr.w	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007406:	d901      	bls.n	800740c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e006      	b.n	800741a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d0f0      	beq.n	80073fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <__cvt>:
 8007426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007428:	ed2d 8b02 	vpush	{d8}
 800742c:	eeb0 8b40 	vmov.f64	d8, d0
 8007430:	b085      	sub	sp, #20
 8007432:	4617      	mov	r7, r2
 8007434:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007438:	ee18 2a90 	vmov	r2, s17
 800743c:	f025 0520 	bic.w	r5, r5, #32
 8007440:	2a00      	cmp	r2, #0
 8007442:	bfb6      	itet	lt
 8007444:	222d      	movlt	r2, #45	@ 0x2d
 8007446:	2200      	movge	r2, #0
 8007448:	eeb1 8b40 	vneglt.f64	d8, d0
 800744c:	2d46      	cmp	r5, #70	@ 0x46
 800744e:	460c      	mov	r4, r1
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	d004      	beq.n	800745e <__cvt+0x38>
 8007454:	2d45      	cmp	r5, #69	@ 0x45
 8007456:	d100      	bne.n	800745a <__cvt+0x34>
 8007458:	3401      	adds	r4, #1
 800745a:	2102      	movs	r1, #2
 800745c:	e000      	b.n	8007460 <__cvt+0x3a>
 800745e:	2103      	movs	r1, #3
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	ab02      	add	r3, sp, #8
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4622      	mov	r2, r4
 800746a:	4633      	mov	r3, r6
 800746c:	eeb0 0b48 	vmov.f64	d0, d8
 8007470:	f000 fd96 	bl	8007fa0 <_dtoa_r>
 8007474:	2d47      	cmp	r5, #71	@ 0x47
 8007476:	d114      	bne.n	80074a2 <__cvt+0x7c>
 8007478:	07fb      	lsls	r3, r7, #31
 800747a:	d50a      	bpl.n	8007492 <__cvt+0x6c>
 800747c:	1902      	adds	r2, r0, r4
 800747e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	bf08      	it	eq
 8007488:	9203      	streq	r2, [sp, #12]
 800748a:	2130      	movs	r1, #48	@ 0x30
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	4293      	cmp	r3, r2
 8007490:	d319      	bcc.n	80074c6 <__cvt+0xa0>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007496:	1a1b      	subs	r3, r3, r0
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	b005      	add	sp, #20
 800749c:	ecbd 8b02 	vpop	{d8}
 80074a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074a2:	2d46      	cmp	r5, #70	@ 0x46
 80074a4:	eb00 0204 	add.w	r2, r0, r4
 80074a8:	d1e9      	bne.n	800747e <__cvt+0x58>
 80074aa:	7803      	ldrb	r3, [r0, #0]
 80074ac:	2b30      	cmp	r3, #48	@ 0x30
 80074ae:	d107      	bne.n	80074c0 <__cvt+0x9a>
 80074b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	bf1c      	itt	ne
 80074ba:	f1c4 0401 	rsbne	r4, r4, #1
 80074be:	6034      	strne	r4, [r6, #0]
 80074c0:	6833      	ldr	r3, [r6, #0]
 80074c2:	441a      	add	r2, r3
 80074c4:	e7db      	b.n	800747e <__cvt+0x58>
 80074c6:	1c5c      	adds	r4, r3, #1
 80074c8:	9403      	str	r4, [sp, #12]
 80074ca:	7019      	strb	r1, [r3, #0]
 80074cc:	e7de      	b.n	800748c <__cvt+0x66>

080074ce <__exponent>:
 80074ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074d0:	2900      	cmp	r1, #0
 80074d2:	bfba      	itte	lt
 80074d4:	4249      	neglt	r1, r1
 80074d6:	232d      	movlt	r3, #45	@ 0x2d
 80074d8:	232b      	movge	r3, #43	@ 0x2b
 80074da:	2909      	cmp	r1, #9
 80074dc:	7002      	strb	r2, [r0, #0]
 80074de:	7043      	strb	r3, [r0, #1]
 80074e0:	dd29      	ble.n	8007536 <__exponent+0x68>
 80074e2:	f10d 0307 	add.w	r3, sp, #7
 80074e6:	461d      	mov	r5, r3
 80074e8:	270a      	movs	r7, #10
 80074ea:	461a      	mov	r2, r3
 80074ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80074f0:	fb07 1416 	mls	r4, r7, r6, r1
 80074f4:	3430      	adds	r4, #48	@ 0x30
 80074f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074fa:	460c      	mov	r4, r1
 80074fc:	2c63      	cmp	r4, #99	@ 0x63
 80074fe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007502:	4631      	mov	r1, r6
 8007504:	dcf1      	bgt.n	80074ea <__exponent+0x1c>
 8007506:	3130      	adds	r1, #48	@ 0x30
 8007508:	1e94      	subs	r4, r2, #2
 800750a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800750e:	1c41      	adds	r1, r0, #1
 8007510:	4623      	mov	r3, r4
 8007512:	42ab      	cmp	r3, r5
 8007514:	d30a      	bcc.n	800752c <__exponent+0x5e>
 8007516:	f10d 0309 	add.w	r3, sp, #9
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	42ac      	cmp	r4, r5
 800751e:	bf88      	it	hi
 8007520:	2300      	movhi	r3, #0
 8007522:	3302      	adds	r3, #2
 8007524:	4403      	add	r3, r0
 8007526:	1a18      	subs	r0, r3, r0
 8007528:	b003      	add	sp, #12
 800752a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007530:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007534:	e7ed      	b.n	8007512 <__exponent+0x44>
 8007536:	2330      	movs	r3, #48	@ 0x30
 8007538:	3130      	adds	r1, #48	@ 0x30
 800753a:	7083      	strb	r3, [r0, #2]
 800753c:	70c1      	strb	r1, [r0, #3]
 800753e:	1d03      	adds	r3, r0, #4
 8007540:	e7f1      	b.n	8007526 <__exponent+0x58>
 8007542:	0000      	movs	r0, r0
 8007544:	0000      	movs	r0, r0
	...

08007548 <_printf_float>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	b08d      	sub	sp, #52	@ 0x34
 800754e:	460c      	mov	r4, r1
 8007550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007554:	4616      	mov	r6, r2
 8007556:	461f      	mov	r7, r3
 8007558:	4605      	mov	r5, r0
 800755a:	f000 fc67 	bl	8007e2c <_localeconv_r>
 800755e:	f8d0 b000 	ldr.w	fp, [r0]
 8007562:	4658      	mov	r0, fp
 8007564:	f7f8 febc 	bl	80002e0 <strlen>
 8007568:	2300      	movs	r3, #0
 800756a:	930a      	str	r3, [sp, #40]	@ 0x28
 800756c:	f8d8 3000 	ldr.w	r3, [r8]
 8007570:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007574:	6822      	ldr	r2, [r4, #0]
 8007576:	9005      	str	r0, [sp, #20]
 8007578:	3307      	adds	r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	f103 0108 	add.w	r1, r3, #8
 8007582:	f8c8 1000 	str.w	r1, [r8]
 8007586:	ed93 0b00 	vldr	d0, [r3]
 800758a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80077e8 <_printf_float+0x2a0>
 800758e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007592:	eeb4 7b46 	vcmp.f64	d7, d6
 8007596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800759e:	dd24      	ble.n	80075ea <_printf_float+0xa2>
 80075a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	d502      	bpl.n	80075b0 <_printf_float+0x68>
 80075aa:	232d      	movs	r3, #45	@ 0x2d
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075b0:	498f      	ldr	r1, [pc, #572]	@ (80077f0 <_printf_float+0x2a8>)
 80075b2:	4b90      	ldr	r3, [pc, #576]	@ (80077f4 <_printf_float+0x2ac>)
 80075b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80075b8:	bf94      	ite	ls
 80075ba:	4688      	movls	r8, r1
 80075bc:	4698      	movhi	r8, r3
 80075be:	f022 0204 	bic.w	r2, r2, #4
 80075c2:	2303      	movs	r3, #3
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	6022      	str	r2, [r4, #0]
 80075c8:	f04f 0a00 	mov.w	sl, #0
 80075cc:	9700      	str	r7, [sp, #0]
 80075ce:	4633      	mov	r3, r6
 80075d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075d2:	4621      	mov	r1, r4
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 f9d1 	bl	800797c <_printf_common>
 80075da:	3001      	adds	r0, #1
 80075dc:	f040 8089 	bne.w	80076f2 <_printf_float+0x1aa>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e4:	b00d      	add	sp, #52	@ 0x34
 80075e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ea:	eeb4 0b40 	vcmp.f64	d0, d0
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	d709      	bvc.n	8007608 <_printf_float+0xc0>
 80075f4:	ee10 3a90 	vmov	r3, s1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bfbc      	itt	lt
 80075fc:	232d      	movlt	r3, #45	@ 0x2d
 80075fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007602:	497d      	ldr	r1, [pc, #500]	@ (80077f8 <_printf_float+0x2b0>)
 8007604:	4b7d      	ldr	r3, [pc, #500]	@ (80077fc <_printf_float+0x2b4>)
 8007606:	e7d5      	b.n	80075b4 <_printf_float+0x6c>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	1c59      	adds	r1, r3, #1
 800760c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007610:	d139      	bne.n	8007686 <_printf_float+0x13e>
 8007612:	2306      	movs	r3, #6
 8007614:	6063      	str	r3, [r4, #4]
 8007616:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800761a:	2300      	movs	r3, #0
 800761c:	6022      	str	r2, [r4, #0]
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	ab0a      	add	r3, sp, #40	@ 0x28
 8007622:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007626:	ab09      	add	r3, sp, #36	@ 0x24
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	6861      	ldr	r1, [r4, #4]
 800762c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007630:	4628      	mov	r0, r5
 8007632:	f7ff fef8 	bl	8007426 <__cvt>
 8007636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800763a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800763c:	4680      	mov	r8, r0
 800763e:	d129      	bne.n	8007694 <_printf_float+0x14c>
 8007640:	1cc8      	adds	r0, r1, #3
 8007642:	db02      	blt.n	800764a <_printf_float+0x102>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	4299      	cmp	r1, r3
 8007648:	dd41      	ble.n	80076ce <_printf_float+0x186>
 800764a:	f1a9 0902 	sub.w	r9, r9, #2
 800764e:	fa5f f989 	uxtb.w	r9, r9
 8007652:	3901      	subs	r1, #1
 8007654:	464a      	mov	r2, r9
 8007656:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800765a:	9109      	str	r1, [sp, #36]	@ 0x24
 800765c:	f7ff ff37 	bl	80074ce <__exponent>
 8007660:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007662:	1813      	adds	r3, r2, r0
 8007664:	2a01      	cmp	r2, #1
 8007666:	4682      	mov	sl, r0
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	dc02      	bgt.n	8007672 <_printf_float+0x12a>
 800766c:	6822      	ldr	r2, [r4, #0]
 800766e:	07d2      	lsls	r2, r2, #31
 8007670:	d501      	bpl.n	8007676 <_printf_float+0x12e>
 8007672:	3301      	adds	r3, #1
 8007674:	6123      	str	r3, [r4, #16]
 8007676:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0a6      	beq.n	80075cc <_printf_float+0x84>
 800767e:	232d      	movs	r3, #45	@ 0x2d
 8007680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007684:	e7a2      	b.n	80075cc <_printf_float+0x84>
 8007686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800768a:	d1c4      	bne.n	8007616 <_printf_float+0xce>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1c2      	bne.n	8007616 <_printf_float+0xce>
 8007690:	2301      	movs	r3, #1
 8007692:	e7bf      	b.n	8007614 <_printf_float+0xcc>
 8007694:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007698:	d9db      	bls.n	8007652 <_printf_float+0x10a>
 800769a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800769e:	d118      	bne.n	80076d2 <_printf_float+0x18a>
 80076a0:	2900      	cmp	r1, #0
 80076a2:	6863      	ldr	r3, [r4, #4]
 80076a4:	dd0b      	ble.n	80076be <_printf_float+0x176>
 80076a6:	6121      	str	r1, [r4, #16]
 80076a8:	b913      	cbnz	r3, 80076b0 <_printf_float+0x168>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	07d0      	lsls	r0, r2, #31
 80076ae:	d502      	bpl.n	80076b6 <_printf_float+0x16e>
 80076b0:	3301      	adds	r3, #1
 80076b2:	440b      	add	r3, r1
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076b8:	f04f 0a00 	mov.w	sl, #0
 80076bc:	e7db      	b.n	8007676 <_printf_float+0x12e>
 80076be:	b913      	cbnz	r3, 80076c6 <_printf_float+0x17e>
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	07d2      	lsls	r2, r2, #31
 80076c4:	d501      	bpl.n	80076ca <_printf_float+0x182>
 80076c6:	3302      	adds	r3, #2
 80076c8:	e7f4      	b.n	80076b4 <_printf_float+0x16c>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7f2      	b.n	80076b4 <_printf_float+0x16c>
 80076ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80076d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d4:	4299      	cmp	r1, r3
 80076d6:	db05      	blt.n	80076e4 <_printf_float+0x19c>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	6121      	str	r1, [r4, #16]
 80076dc:	07d8      	lsls	r0, r3, #31
 80076de:	d5ea      	bpl.n	80076b6 <_printf_float+0x16e>
 80076e0:	1c4b      	adds	r3, r1, #1
 80076e2:	e7e7      	b.n	80076b4 <_printf_float+0x16c>
 80076e4:	2900      	cmp	r1, #0
 80076e6:	bfd4      	ite	le
 80076e8:	f1c1 0202 	rsble	r2, r1, #2
 80076ec:	2201      	movgt	r2, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	e7e0      	b.n	80076b4 <_printf_float+0x16c>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	055a      	lsls	r2, r3, #21
 80076f6:	d407      	bmi.n	8007708 <_printf_float+0x1c0>
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	4642      	mov	r2, r8
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	d12a      	bne.n	800775c <_printf_float+0x214>
 8007706:	e76b      	b.n	80075e0 <_printf_float+0x98>
 8007708:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800770c:	f240 80e0 	bls.w	80078d0 <_printf_float+0x388>
 8007710:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771c:	d133      	bne.n	8007786 <_printf_float+0x23e>
 800771e:	4a38      	ldr	r2, [pc, #224]	@ (8007800 <_printf_float+0x2b8>)
 8007720:	2301      	movs	r3, #1
 8007722:	4631      	mov	r1, r6
 8007724:	4628      	mov	r0, r5
 8007726:	47b8      	blx	r7
 8007728:	3001      	adds	r0, #1
 800772a:	f43f af59 	beq.w	80075e0 <_printf_float+0x98>
 800772e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007732:	4543      	cmp	r3, r8
 8007734:	db02      	blt.n	800773c <_printf_float+0x1f4>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	07d8      	lsls	r0, r3, #31
 800773a:	d50f      	bpl.n	800775c <_printf_float+0x214>
 800773c:	9b05      	ldr	r3, [sp, #20]
 800773e:	465a      	mov	r2, fp
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	47b8      	blx	r7
 8007746:	3001      	adds	r0, #1
 8007748:	f43f af4a 	beq.w	80075e0 <_printf_float+0x98>
 800774c:	f04f 0900 	mov.w	r9, #0
 8007750:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007754:	f104 0a1a 	add.w	sl, r4, #26
 8007758:	45c8      	cmp	r8, r9
 800775a:	dc09      	bgt.n	8007770 <_printf_float+0x228>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	079b      	lsls	r3, r3, #30
 8007760:	f100 8107 	bmi.w	8007972 <_printf_float+0x42a>
 8007764:	68e0      	ldr	r0, [r4, #12]
 8007766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007768:	4298      	cmp	r0, r3
 800776a:	bfb8      	it	lt
 800776c:	4618      	movlt	r0, r3
 800776e:	e739      	b.n	80075e4 <_printf_float+0x9c>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f af30 	beq.w	80075e0 <_printf_float+0x98>
 8007780:	f109 0901 	add.w	r9, r9, #1
 8007784:	e7e8      	b.n	8007758 <_printf_float+0x210>
 8007786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	dc3b      	bgt.n	8007804 <_printf_float+0x2bc>
 800778c:	4a1c      	ldr	r2, [pc, #112]	@ (8007800 <_printf_float+0x2b8>)
 800778e:	2301      	movs	r3, #1
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f af22 	beq.w	80075e0 <_printf_float+0x98>
 800779c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077a0:	ea59 0303 	orrs.w	r3, r9, r3
 80077a4:	d102      	bne.n	80077ac <_printf_float+0x264>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	07d9      	lsls	r1, r3, #31
 80077aa:	d5d7      	bpl.n	800775c <_printf_float+0x214>
 80077ac:	9b05      	ldr	r3, [sp, #20]
 80077ae:	465a      	mov	r2, fp
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af12 	beq.w	80075e0 <_printf_float+0x98>
 80077bc:	f04f 0a00 	mov.w	sl, #0
 80077c0:	f104 0b1a 	add.w	fp, r4, #26
 80077c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c6:	425b      	negs	r3, r3
 80077c8:	4553      	cmp	r3, sl
 80077ca:	dc01      	bgt.n	80077d0 <_printf_float+0x288>
 80077cc:	464b      	mov	r3, r9
 80077ce:	e794      	b.n	80076fa <_printf_float+0x1b2>
 80077d0:	2301      	movs	r3, #1
 80077d2:	465a      	mov	r2, fp
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af00 	beq.w	80075e0 <_printf_float+0x98>
 80077e0:	f10a 0a01 	add.w	sl, sl, #1
 80077e4:	e7ee      	b.n	80077c4 <_printf_float+0x27c>
 80077e6:	bf00      	nop
 80077e8:	ffffffff 	.word	0xffffffff
 80077ec:	7fefffff 	.word	0x7fefffff
 80077f0:	08009c40 	.word	0x08009c40
 80077f4:	08009c44 	.word	0x08009c44
 80077f8:	08009c48 	.word	0x08009c48
 80077fc:	08009c4c 	.word	0x08009c4c
 8007800:	08009c50 	.word	0x08009c50
 8007804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007806:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800780a:	4553      	cmp	r3, sl
 800780c:	bfa8      	it	ge
 800780e:	4653      	movge	r3, sl
 8007810:	2b00      	cmp	r3, #0
 8007812:	4699      	mov	r9, r3
 8007814:	dc37      	bgt.n	8007886 <_printf_float+0x33e>
 8007816:	2300      	movs	r3, #0
 8007818:	9307      	str	r3, [sp, #28]
 800781a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781e:	f104 021a 	add.w	r2, r4, #26
 8007822:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007824:	9907      	ldr	r1, [sp, #28]
 8007826:	9306      	str	r3, [sp, #24]
 8007828:	eba3 0309 	sub.w	r3, r3, r9
 800782c:	428b      	cmp	r3, r1
 800782e:	dc31      	bgt.n	8007894 <_printf_float+0x34c>
 8007830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007832:	459a      	cmp	sl, r3
 8007834:	dc3b      	bgt.n	80078ae <_printf_float+0x366>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07da      	lsls	r2, r3, #31
 800783a:	d438      	bmi.n	80078ae <_printf_float+0x366>
 800783c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783e:	ebaa 0903 	sub.w	r9, sl, r3
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	ebaa 0303 	sub.w	r3, sl, r3
 8007848:	4599      	cmp	r9, r3
 800784a:	bfa8      	it	ge
 800784c:	4699      	movge	r9, r3
 800784e:	f1b9 0f00 	cmp.w	r9, #0
 8007852:	dc34      	bgt.n	80078be <_printf_float+0x376>
 8007854:	f04f 0800 	mov.w	r8, #0
 8007858:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785c:	f104 0b1a 	add.w	fp, r4, #26
 8007860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007862:	ebaa 0303 	sub.w	r3, sl, r3
 8007866:	eba3 0309 	sub.w	r3, r3, r9
 800786a:	4543      	cmp	r3, r8
 800786c:	f77f af76 	ble.w	800775c <_printf_float+0x214>
 8007870:	2301      	movs	r3, #1
 8007872:	465a      	mov	r2, fp
 8007874:	4631      	mov	r1, r6
 8007876:	4628      	mov	r0, r5
 8007878:	47b8      	blx	r7
 800787a:	3001      	adds	r0, #1
 800787c:	f43f aeb0 	beq.w	80075e0 <_printf_float+0x98>
 8007880:	f108 0801 	add.w	r8, r8, #1
 8007884:	e7ec      	b.n	8007860 <_printf_float+0x318>
 8007886:	4642      	mov	r2, r8
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	d1c1      	bne.n	8007816 <_printf_float+0x2ce>
 8007892:	e6a5      	b.n	80075e0 <_printf_float+0x98>
 8007894:	2301      	movs	r3, #1
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	9206      	str	r2, [sp, #24]
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f ae9e 	beq.w	80075e0 <_printf_float+0x98>
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	9a06      	ldr	r2, [sp, #24]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9307      	str	r3, [sp, #28]
 80078ac:	e7b9      	b.n	8007822 <_printf_float+0x2da>
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	465a      	mov	r2, fp
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1bf      	bne.n	800783c <_printf_float+0x2f4>
 80078bc:	e690      	b.n	80075e0 <_printf_float+0x98>
 80078be:	9a06      	ldr	r2, [sp, #24]
 80078c0:	464b      	mov	r3, r9
 80078c2:	4442      	add	r2, r8
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	d1c2      	bne.n	8007854 <_printf_float+0x30c>
 80078ce:	e687      	b.n	80075e0 <_printf_float+0x98>
 80078d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80078d4:	f1b9 0f01 	cmp.w	r9, #1
 80078d8:	dc01      	bgt.n	80078de <_printf_float+0x396>
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	d536      	bpl.n	800794c <_printf_float+0x404>
 80078de:	2301      	movs	r3, #1
 80078e0:	4642      	mov	r2, r8
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f ae79 	beq.w	80075e0 <_printf_float+0x98>
 80078ee:	9b05      	ldr	r3, [sp, #20]
 80078f0:	465a      	mov	r2, fp
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	47b8      	blx	r7
 80078f8:	3001      	adds	r0, #1
 80078fa:	f43f ae71 	beq.w	80075e0 <_printf_float+0x98>
 80078fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007902:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800790e:	d018      	beq.n	8007942 <_printf_float+0x3fa>
 8007910:	464b      	mov	r3, r9
 8007912:	f108 0201 	add.w	r2, r8, #1
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d10c      	bne.n	800793a <_printf_float+0x3f2>
 8007920:	e65e      	b.n	80075e0 <_printf_float+0x98>
 8007922:	2301      	movs	r3, #1
 8007924:	465a      	mov	r2, fp
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f ae57 	beq.w	80075e0 <_printf_float+0x98>
 8007932:	f108 0801 	add.w	r8, r8, #1
 8007936:	45c8      	cmp	r8, r9
 8007938:	dbf3      	blt.n	8007922 <_printf_float+0x3da>
 800793a:	4653      	mov	r3, sl
 800793c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007940:	e6dc      	b.n	80076fc <_printf_float+0x1b4>
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	f104 0b1a 	add.w	fp, r4, #26
 800794a:	e7f4      	b.n	8007936 <_printf_float+0x3ee>
 800794c:	2301      	movs	r3, #1
 800794e:	4642      	mov	r2, r8
 8007950:	e7e1      	b.n	8007916 <_printf_float+0x3ce>
 8007952:	2301      	movs	r3, #1
 8007954:	464a      	mov	r2, r9
 8007956:	4631      	mov	r1, r6
 8007958:	4628      	mov	r0, r5
 800795a:	47b8      	blx	r7
 800795c:	3001      	adds	r0, #1
 800795e:	f43f ae3f 	beq.w	80075e0 <_printf_float+0x98>
 8007962:	f108 0801 	add.w	r8, r8, #1
 8007966:	68e3      	ldr	r3, [r4, #12]
 8007968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800796a:	1a5b      	subs	r3, r3, r1
 800796c:	4543      	cmp	r3, r8
 800796e:	dcf0      	bgt.n	8007952 <_printf_float+0x40a>
 8007970:	e6f8      	b.n	8007764 <_printf_float+0x21c>
 8007972:	f04f 0800 	mov.w	r8, #0
 8007976:	f104 0919 	add.w	r9, r4, #25
 800797a:	e7f4      	b.n	8007966 <_printf_float+0x41e>

0800797c <_printf_common>:
 800797c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007980:	4616      	mov	r6, r2
 8007982:	4698      	mov	r8, r3
 8007984:	688a      	ldr	r2, [r1, #8]
 8007986:	690b      	ldr	r3, [r1, #16]
 8007988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800798c:	4293      	cmp	r3, r2
 800798e:	bfb8      	it	lt
 8007990:	4613      	movlt	r3, r2
 8007992:	6033      	str	r3, [r6, #0]
 8007994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007998:	4607      	mov	r7, r0
 800799a:	460c      	mov	r4, r1
 800799c:	b10a      	cbz	r2, 80079a2 <_printf_common+0x26>
 800799e:	3301      	adds	r3, #1
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	0699      	lsls	r1, r3, #26
 80079a6:	bf42      	ittt	mi
 80079a8:	6833      	ldrmi	r3, [r6, #0]
 80079aa:	3302      	addmi	r3, #2
 80079ac:	6033      	strmi	r3, [r6, #0]
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	f015 0506 	ands.w	r5, r5, #6
 80079b4:	d106      	bne.n	80079c4 <_printf_common+0x48>
 80079b6:	f104 0a19 	add.w	sl, r4, #25
 80079ba:	68e3      	ldr	r3, [r4, #12]
 80079bc:	6832      	ldr	r2, [r6, #0]
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	dc26      	bgt.n	8007a12 <_printf_common+0x96>
 80079c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079c8:	6822      	ldr	r2, [r4, #0]
 80079ca:	3b00      	subs	r3, #0
 80079cc:	bf18      	it	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	0692      	lsls	r2, r2, #26
 80079d2:	d42b      	bmi.n	8007a2c <_printf_common+0xb0>
 80079d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079d8:	4641      	mov	r1, r8
 80079da:	4638      	mov	r0, r7
 80079dc:	47c8      	blx	r9
 80079de:	3001      	adds	r0, #1
 80079e0:	d01e      	beq.n	8007a20 <_printf_common+0xa4>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	6922      	ldr	r2, [r4, #16]
 80079e6:	f003 0306 	and.w	r3, r3, #6
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	bf02      	ittt	eq
 80079ee:	68e5      	ldreq	r5, [r4, #12]
 80079f0:	6833      	ldreq	r3, [r6, #0]
 80079f2:	1aed      	subeq	r5, r5, r3
 80079f4:	68a3      	ldr	r3, [r4, #8]
 80079f6:	bf0c      	ite	eq
 80079f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079fc:	2500      	movne	r5, #0
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bfc4      	itt	gt
 8007a02:	1a9b      	subgt	r3, r3, r2
 8007a04:	18ed      	addgt	r5, r5, r3
 8007a06:	2600      	movs	r6, #0
 8007a08:	341a      	adds	r4, #26
 8007a0a:	42b5      	cmp	r5, r6
 8007a0c:	d11a      	bne.n	8007a44 <_printf_common+0xc8>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e008      	b.n	8007a24 <_printf_common+0xa8>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4652      	mov	r2, sl
 8007a16:	4641      	mov	r1, r8
 8007a18:	4638      	mov	r0, r7
 8007a1a:	47c8      	blx	r9
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d103      	bne.n	8007a28 <_printf_common+0xac>
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	3501      	adds	r5, #1
 8007a2a:	e7c6      	b.n	80079ba <_printf_common+0x3e>
 8007a2c:	18e1      	adds	r1, r4, r3
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	2030      	movs	r0, #48	@ 0x30
 8007a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a36:	4422      	add	r2, r4
 8007a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a40:	3302      	adds	r3, #2
 8007a42:	e7c7      	b.n	80079d4 <_printf_common+0x58>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4622      	mov	r2, r4
 8007a48:	4641      	mov	r1, r8
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	47c8      	blx	r9
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d0e6      	beq.n	8007a20 <_printf_common+0xa4>
 8007a52:	3601      	adds	r6, #1
 8007a54:	e7d9      	b.n	8007a0a <_printf_common+0x8e>
	...

08007a58 <_printf_i>:
 8007a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	7e0f      	ldrb	r7, [r1, #24]
 8007a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a60:	2f78      	cmp	r7, #120	@ 0x78
 8007a62:	4691      	mov	r9, r2
 8007a64:	4680      	mov	r8, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	469a      	mov	sl, r3
 8007a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a6e:	d807      	bhi.n	8007a80 <_printf_i+0x28>
 8007a70:	2f62      	cmp	r7, #98	@ 0x62
 8007a72:	d80a      	bhi.n	8007a8a <_printf_i+0x32>
 8007a74:	2f00      	cmp	r7, #0
 8007a76:	f000 80d2 	beq.w	8007c1e <_printf_i+0x1c6>
 8007a7a:	2f58      	cmp	r7, #88	@ 0x58
 8007a7c:	f000 80b9 	beq.w	8007bf2 <_printf_i+0x19a>
 8007a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a88:	e03a      	b.n	8007b00 <_printf_i+0xa8>
 8007a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a8e:	2b15      	cmp	r3, #21
 8007a90:	d8f6      	bhi.n	8007a80 <_printf_i+0x28>
 8007a92:	a101      	add	r1, pc, #4	@ (adr r1, 8007a98 <_printf_i+0x40>)
 8007a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a98:	08007af1 	.word	0x08007af1
 8007a9c:	08007b05 	.word	0x08007b05
 8007aa0:	08007a81 	.word	0x08007a81
 8007aa4:	08007a81 	.word	0x08007a81
 8007aa8:	08007a81 	.word	0x08007a81
 8007aac:	08007a81 	.word	0x08007a81
 8007ab0:	08007b05 	.word	0x08007b05
 8007ab4:	08007a81 	.word	0x08007a81
 8007ab8:	08007a81 	.word	0x08007a81
 8007abc:	08007a81 	.word	0x08007a81
 8007ac0:	08007a81 	.word	0x08007a81
 8007ac4:	08007c05 	.word	0x08007c05
 8007ac8:	08007b2f 	.word	0x08007b2f
 8007acc:	08007bbf 	.word	0x08007bbf
 8007ad0:	08007a81 	.word	0x08007a81
 8007ad4:	08007a81 	.word	0x08007a81
 8007ad8:	08007c27 	.word	0x08007c27
 8007adc:	08007a81 	.word	0x08007a81
 8007ae0:	08007b2f 	.word	0x08007b2f
 8007ae4:	08007a81 	.word	0x08007a81
 8007ae8:	08007a81 	.word	0x08007a81
 8007aec:	08007bc7 	.word	0x08007bc7
 8007af0:	6833      	ldr	r3, [r6, #0]
 8007af2:	1d1a      	adds	r2, r3, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6032      	str	r2, [r6, #0]
 8007af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b00:	2301      	movs	r3, #1
 8007b02:	e09d      	b.n	8007c40 <_printf_i+0x1e8>
 8007b04:	6833      	ldr	r3, [r6, #0]
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	6031      	str	r1, [r6, #0]
 8007b0c:	0606      	lsls	r6, r0, #24
 8007b0e:	d501      	bpl.n	8007b14 <_printf_i+0xbc>
 8007b10:	681d      	ldr	r5, [r3, #0]
 8007b12:	e003      	b.n	8007b1c <_printf_i+0xc4>
 8007b14:	0645      	lsls	r5, r0, #25
 8007b16:	d5fb      	bpl.n	8007b10 <_printf_i+0xb8>
 8007b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	da03      	bge.n	8007b28 <_printf_i+0xd0>
 8007b20:	232d      	movs	r3, #45	@ 0x2d
 8007b22:	426d      	negs	r5, r5
 8007b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b28:	4859      	ldr	r0, [pc, #356]	@ (8007c90 <_printf_i+0x238>)
 8007b2a:	230a      	movs	r3, #10
 8007b2c:	e011      	b.n	8007b52 <_printf_i+0xfa>
 8007b2e:	6821      	ldr	r1, [r4, #0]
 8007b30:	6833      	ldr	r3, [r6, #0]
 8007b32:	0608      	lsls	r0, r1, #24
 8007b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b38:	d402      	bmi.n	8007b40 <_printf_i+0xe8>
 8007b3a:	0649      	lsls	r1, r1, #25
 8007b3c:	bf48      	it	mi
 8007b3e:	b2ad      	uxthmi	r5, r5
 8007b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b42:	4853      	ldr	r0, [pc, #332]	@ (8007c90 <_printf_i+0x238>)
 8007b44:	6033      	str	r3, [r6, #0]
 8007b46:	bf14      	ite	ne
 8007b48:	230a      	movne	r3, #10
 8007b4a:	2308      	moveq	r3, #8
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b52:	6866      	ldr	r6, [r4, #4]
 8007b54:	60a6      	str	r6, [r4, #8]
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	bfa2      	ittt	ge
 8007b5a:	6821      	ldrge	r1, [r4, #0]
 8007b5c:	f021 0104 	bicge.w	r1, r1, #4
 8007b60:	6021      	strge	r1, [r4, #0]
 8007b62:	b90d      	cbnz	r5, 8007b68 <_printf_i+0x110>
 8007b64:	2e00      	cmp	r6, #0
 8007b66:	d04b      	beq.n	8007c00 <_printf_i+0x1a8>
 8007b68:	4616      	mov	r6, r2
 8007b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b72:	5dc7      	ldrb	r7, [r0, r7]
 8007b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b78:	462f      	mov	r7, r5
 8007b7a:	42bb      	cmp	r3, r7
 8007b7c:	460d      	mov	r5, r1
 8007b7e:	d9f4      	bls.n	8007b6a <_printf_i+0x112>
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d10b      	bne.n	8007b9c <_printf_i+0x144>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07df      	lsls	r7, r3, #31
 8007b88:	d508      	bpl.n	8007b9c <_printf_i+0x144>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6861      	ldr	r1, [r4, #4]
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	bfde      	ittt	le
 8007b92:	2330      	movle	r3, #48	@ 0x30
 8007b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b98:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007b9c:	1b92      	subs	r2, r2, r6
 8007b9e:	6122      	str	r2, [r4, #16]
 8007ba0:	f8cd a000 	str.w	sl, [sp]
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	aa03      	add	r2, sp, #12
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7ff fee6 	bl	800797c <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d14a      	bne.n	8007c4a <_printf_i+0x1f2>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bb8:	b004      	add	sp, #16
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f043 0320 	orr.w	r3, r3, #32
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	4833      	ldr	r0, [pc, #204]	@ (8007c94 <_printf_i+0x23c>)
 8007bc8:	2778      	movs	r7, #120	@ 0x78
 8007bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6831      	ldr	r1, [r6, #0]
 8007bd2:	061f      	lsls	r7, r3, #24
 8007bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bd8:	d402      	bmi.n	8007be0 <_printf_i+0x188>
 8007bda:	065f      	lsls	r7, r3, #25
 8007bdc:	bf48      	it	mi
 8007bde:	b2ad      	uxthmi	r5, r5
 8007be0:	6031      	str	r1, [r6, #0]
 8007be2:	07d9      	lsls	r1, r3, #31
 8007be4:	bf44      	itt	mi
 8007be6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bea:	6023      	strmi	r3, [r4, #0]
 8007bec:	b11d      	cbz	r5, 8007bf6 <_printf_i+0x19e>
 8007bee:	2310      	movs	r3, #16
 8007bf0:	e7ac      	b.n	8007b4c <_printf_i+0xf4>
 8007bf2:	4827      	ldr	r0, [pc, #156]	@ (8007c90 <_printf_i+0x238>)
 8007bf4:	e7e9      	b.n	8007bca <_printf_i+0x172>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	f023 0320 	bic.w	r3, r3, #32
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	e7f6      	b.n	8007bee <_printf_i+0x196>
 8007c00:	4616      	mov	r6, r2
 8007c02:	e7bd      	b.n	8007b80 <_printf_i+0x128>
 8007c04:	6833      	ldr	r3, [r6, #0]
 8007c06:	6825      	ldr	r5, [r4, #0]
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	1d18      	adds	r0, r3, #4
 8007c0c:	6030      	str	r0, [r6, #0]
 8007c0e:	062e      	lsls	r6, r5, #24
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0x1c0>
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0x1c6>
 8007c18:	0668      	lsls	r0, r5, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0x1bc>
 8007c1c:	8019      	strh	r1, [r3, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	4616      	mov	r6, r2
 8007c24:	e7bc      	b.n	8007ba0 <_printf_i+0x148>
 8007c26:	6833      	ldr	r3, [r6, #0]
 8007c28:	1d1a      	adds	r2, r3, #4
 8007c2a:	6032      	str	r2, [r6, #0]
 8007c2c:	681e      	ldr	r6, [r3, #0]
 8007c2e:	6862      	ldr	r2, [r4, #4]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7f8 fb04 	bl	8000240 <memchr>
 8007c38:	b108      	cbz	r0, 8007c3e <_printf_i+0x1e6>
 8007c3a:	1b80      	subs	r0, r0, r6
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	2300      	movs	r3, #0
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c48:	e7aa      	b.n	8007ba0 <_printf_i+0x148>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d0ad      	beq.n	8007bb4 <_printf_i+0x15c>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	d413      	bmi.n	8007c86 <_printf_i+0x22e>
 8007c5e:	68e0      	ldr	r0, [r4, #12]
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	4298      	cmp	r0, r3
 8007c64:	bfb8      	it	lt
 8007c66:	4618      	movlt	r0, r3
 8007c68:	e7a6      	b.n	8007bb8 <_printf_i+0x160>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d09d      	beq.n	8007bb4 <_printf_i+0x15c>
 8007c78:	3501      	adds	r5, #1
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	1a5b      	subs	r3, r3, r1
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	dcf2      	bgt.n	8007c6a <_printf_i+0x212>
 8007c84:	e7eb      	b.n	8007c5e <_printf_i+0x206>
 8007c86:	2500      	movs	r5, #0
 8007c88:	f104 0619 	add.w	r6, r4, #25
 8007c8c:	e7f5      	b.n	8007c7a <_printf_i+0x222>
 8007c8e:	bf00      	nop
 8007c90:	08009c52 	.word	0x08009c52
 8007c94:	08009c63 	.word	0x08009c63

08007c98 <std>:
 8007c98:	2300      	movs	r3, #0
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca6:	6083      	str	r3, [r0, #8]
 8007ca8:	8181      	strh	r1, [r0, #12]
 8007caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cac:	81c2      	strh	r2, [r0, #14]
 8007cae:	6183      	str	r3, [r0, #24]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	305c      	adds	r0, #92	@ 0x5c
 8007cb6:	f000 f8b1 	bl	8007e1c <memset>
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x58>)
 8007cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x5c>)
 8007cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x60>)
 8007cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <std+0x64>)
 8007cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cca:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <std+0x68>)
 8007ccc:	6224      	str	r4, [r4, #32]
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d006      	beq.n	8007ce0 <std+0x48>
 8007cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cd6:	4294      	cmp	r4, r2
 8007cd8:	d002      	beq.n	8007ce0 <std+0x48>
 8007cda:	33d0      	adds	r3, #208	@ 0xd0
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d105      	bne.n	8007cec <std+0x54>
 8007ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 b8ce 	b.w	8007e88 <__retarget_lock_init_recursive>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	08009415 	.word	0x08009415
 8007cf4:	08009437 	.word	0x08009437
 8007cf8:	0800946f 	.word	0x0800946f
 8007cfc:	08009493 	.word	0x08009493
 8007d00:	20000bb4 	.word	0x20000bb4

08007d04 <stdio_exit_handler>:
 8007d04:	4a02      	ldr	r2, [pc, #8]	@ (8007d10 <stdio_exit_handler+0xc>)
 8007d06:	4903      	ldr	r1, [pc, #12]	@ (8007d14 <stdio_exit_handler+0x10>)
 8007d08:	4803      	ldr	r0, [pc, #12]	@ (8007d18 <stdio_exit_handler+0x14>)
 8007d0a:	f000 b869 	b.w	8007de0 <_fwalk_sglue>
 8007d0e:	bf00      	nop
 8007d10:	20000024 	.word	0x20000024
 8007d14:	08008ca9 	.word	0x08008ca9
 8007d18:	20000034 	.word	0x20000034

08007d1c <cleanup_stdio>:
 8007d1c:	6841      	ldr	r1, [r0, #4]
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d50 <cleanup_stdio+0x34>)
 8007d20:	4299      	cmp	r1, r3
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	d001      	beq.n	8007d2c <cleanup_stdio+0x10>
 8007d28:	f000 ffbe 	bl	8008ca8 <_fflush_r>
 8007d2c:	68a1      	ldr	r1, [r4, #8]
 8007d2e:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <cleanup_stdio+0x38>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <cleanup_stdio+0x1e>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 ffb7 	bl	8008ca8 <_fflush_r>
 8007d3a:	68e1      	ldr	r1, [r4, #12]
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <cleanup_stdio+0x3c>)
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d004      	beq.n	8007d4c <cleanup_stdio+0x30>
 8007d42:	4620      	mov	r0, r4
 8007d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d48:	f000 bfae 	b.w	8008ca8 <_fflush_r>
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000bb4 	.word	0x20000bb4
 8007d54:	20000c1c 	.word	0x20000c1c
 8007d58:	20000c84 	.word	0x20000c84

08007d5c <global_stdio_init.part.0>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <global_stdio_init.part.0+0x30>)
 8007d60:	4c0b      	ldr	r4, [pc, #44]	@ (8007d90 <global_stdio_init.part.0+0x34>)
 8007d62:	4a0c      	ldr	r2, [pc, #48]	@ (8007d94 <global_stdio_init.part.0+0x38>)
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	4620      	mov	r0, r4
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2104      	movs	r1, #4
 8007d6c:	f7ff ff94 	bl	8007c98 <std>
 8007d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d74:	2201      	movs	r2, #1
 8007d76:	2109      	movs	r1, #9
 8007d78:	f7ff ff8e 	bl	8007c98 <std>
 8007d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d80:	2202      	movs	r2, #2
 8007d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d86:	2112      	movs	r1, #18
 8007d88:	f7ff bf86 	b.w	8007c98 <std>
 8007d8c:	20000cec 	.word	0x20000cec
 8007d90:	20000bb4 	.word	0x20000bb4
 8007d94:	08007d05 	.word	0x08007d05

08007d98 <__sfp_lock_acquire>:
 8007d98:	4801      	ldr	r0, [pc, #4]	@ (8007da0 <__sfp_lock_acquire+0x8>)
 8007d9a:	f000 b876 	b.w	8007e8a <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	20000cf1 	.word	0x20000cf1

08007da4 <__sfp_lock_release>:
 8007da4:	4801      	ldr	r0, [pc, #4]	@ (8007dac <__sfp_lock_release+0x8>)
 8007da6:	f000 b871 	b.w	8007e8c <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	20000cf1 	.word	0x20000cf1

08007db0 <__sinit>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	f7ff fff0 	bl	8007d98 <__sfp_lock_acquire>
 8007db8:	6a23      	ldr	r3, [r4, #32]
 8007dba:	b11b      	cbz	r3, 8007dc4 <__sinit+0x14>
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f7ff bff0 	b.w	8007da4 <__sfp_lock_release>
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <__sinit+0x28>)
 8007dc6:	6223      	str	r3, [r4, #32]
 8007dc8:	4b04      	ldr	r3, [pc, #16]	@ (8007ddc <__sinit+0x2c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f5      	bne.n	8007dbc <__sinit+0xc>
 8007dd0:	f7ff ffc4 	bl	8007d5c <global_stdio_init.part.0>
 8007dd4:	e7f2      	b.n	8007dbc <__sinit+0xc>
 8007dd6:	bf00      	nop
 8007dd8:	08007d1d 	.word	0x08007d1d
 8007ddc:	20000cec 	.word	0x20000cec

08007de0 <_fwalk_sglue>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4607      	mov	r7, r0
 8007de6:	4688      	mov	r8, r1
 8007de8:	4614      	mov	r4, r2
 8007dea:	2600      	movs	r6, #0
 8007dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007df0:	f1b9 0901 	subs.w	r9, r9, #1
 8007df4:	d505      	bpl.n	8007e02 <_fwalk_sglue+0x22>
 8007df6:	6824      	ldr	r4, [r4, #0]
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	d1f7      	bne.n	8007dec <_fwalk_sglue+0xc>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d907      	bls.n	8007e18 <_fwalk_sglue+0x38>
 8007e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	d003      	beq.n	8007e18 <_fwalk_sglue+0x38>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c0      	blx	r8
 8007e16:	4306      	orrs	r6, r0
 8007e18:	3568      	adds	r5, #104	@ 0x68
 8007e1a:	e7e9      	b.n	8007df0 <_fwalk_sglue+0x10>

08007e1c <memset>:
 8007e1c:	4402      	add	r2, r0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d100      	bne.n	8007e26 <memset+0xa>
 8007e24:	4770      	bx	lr
 8007e26:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2a:	e7f9      	b.n	8007e20 <memset+0x4>

08007e2c <_localeconv_r>:
 8007e2c:	4800      	ldr	r0, [pc, #0]	@ (8007e30 <_localeconv_r+0x4>)
 8007e2e:	4770      	bx	lr
 8007e30:	20000170 	.word	0x20000170

08007e34 <__errno>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	@ (8007e3c <__errno+0x8>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000030 	.word	0x20000030

08007e40 <__libc_init_array>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4d0d      	ldr	r5, [pc, #52]	@ (8007e78 <__libc_init_array+0x38>)
 8007e44:	4c0d      	ldr	r4, [pc, #52]	@ (8007e7c <__libc_init_array+0x3c>)
 8007e46:	1b64      	subs	r4, r4, r5
 8007e48:	10a4      	asrs	r4, r4, #2
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	d109      	bne.n	8007e64 <__libc_init_array+0x24>
 8007e50:	4d0b      	ldr	r5, [pc, #44]	@ (8007e80 <__libc_init_array+0x40>)
 8007e52:	4c0c      	ldr	r4, [pc, #48]	@ (8007e84 <__libc_init_array+0x44>)
 8007e54:	f001 fed8 	bl	8009c08 <_init>
 8007e58:	1b64      	subs	r4, r4, r5
 8007e5a:	10a4      	asrs	r4, r4, #2
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	42a6      	cmp	r6, r4
 8007e60:	d105      	bne.n	8007e6e <__libc_init_array+0x2e>
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e68:	4798      	blx	r3
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7ee      	b.n	8007e4c <__libc_init_array+0xc>
 8007e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e72:	4798      	blx	r3
 8007e74:	3601      	adds	r6, #1
 8007e76:	e7f2      	b.n	8007e5e <__libc_init_array+0x1e>
 8007e78:	08009fb8 	.word	0x08009fb8
 8007e7c:	08009fb8 	.word	0x08009fb8
 8007e80:	08009fb8 	.word	0x08009fb8
 8007e84:	08009fbc 	.word	0x08009fbc

08007e88 <__retarget_lock_init_recursive>:
 8007e88:	4770      	bx	lr

08007e8a <__retarget_lock_acquire_recursive>:
 8007e8a:	4770      	bx	lr

08007e8c <__retarget_lock_release_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <quorem>:
 8007e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e92:	6903      	ldr	r3, [r0, #16]
 8007e94:	690c      	ldr	r4, [r1, #16]
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	4607      	mov	r7, r0
 8007e9a:	db7e      	blt.n	8007f9a <quorem+0x10c>
 8007e9c:	3c01      	subs	r4, #1
 8007e9e:	f101 0814 	add.w	r8, r1, #20
 8007ea2:	00a3      	lsls	r3, r4, #2
 8007ea4:	f100 0514 	add.w	r5, r0, #20
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec4:	d32e      	bcc.n	8007f24 <quorem+0x96>
 8007ec6:	f04f 0a00 	mov.w	sl, #0
 8007eca:	46c4      	mov	ip, r8
 8007ecc:	46ae      	mov	lr, r5
 8007ece:	46d3      	mov	fp, sl
 8007ed0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ed4:	b298      	uxth	r0, r3
 8007ed6:	fb06 a000 	mla	r0, r6, r0, sl
 8007eda:	0c02      	lsrs	r2, r0, #16
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	fb06 2303 	mla	r3, r6, r3, r2
 8007ee2:	f8de 2000 	ldr.w	r2, [lr]
 8007ee6:	b280      	uxth	r0, r0
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	1a12      	subs	r2, r2, r0
 8007eec:	445a      	add	r2, fp
 8007eee:	f8de 0000 	ldr.w	r0, [lr]
 8007ef2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007efc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f00:	b292      	uxth	r2, r2
 8007f02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f06:	45e1      	cmp	r9, ip
 8007f08:	f84e 2b04 	str.w	r2, [lr], #4
 8007f0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f10:	d2de      	bcs.n	8007ed0 <quorem+0x42>
 8007f12:	9b00      	ldr	r3, [sp, #0]
 8007f14:	58eb      	ldr	r3, [r5, r3]
 8007f16:	b92b      	cbnz	r3, 8007f24 <quorem+0x96>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	3b04      	subs	r3, #4
 8007f1c:	429d      	cmp	r5, r3
 8007f1e:	461a      	mov	r2, r3
 8007f20:	d32f      	bcc.n	8007f82 <quorem+0xf4>
 8007f22:	613c      	str	r4, [r7, #16]
 8007f24:	4638      	mov	r0, r7
 8007f26:	f001 f96d 	bl	8009204 <__mcmp>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	db25      	blt.n	8007f7a <quorem+0xec>
 8007f2e:	4629      	mov	r1, r5
 8007f30:	2000      	movs	r0, #0
 8007f32:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f36:	f8d1 c000 	ldr.w	ip, [r1]
 8007f3a:	fa1f fe82 	uxth.w	lr, r2
 8007f3e:	fa1f f38c 	uxth.w	r3, ip
 8007f42:	eba3 030e 	sub.w	r3, r3, lr
 8007f46:	4403      	add	r3, r0
 8007f48:	0c12      	lsrs	r2, r2, #16
 8007f4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f58:	45c1      	cmp	r9, r8
 8007f5a:	f841 3b04 	str.w	r3, [r1], #4
 8007f5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f62:	d2e6      	bcs.n	8007f32 <quorem+0xa4>
 8007f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f6c:	b922      	cbnz	r2, 8007f78 <quorem+0xea>
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	429d      	cmp	r5, r3
 8007f72:	461a      	mov	r2, r3
 8007f74:	d30b      	bcc.n	8007f8e <quorem+0x100>
 8007f76:	613c      	str	r4, [r7, #16]
 8007f78:	3601      	adds	r6, #1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	b003      	add	sp, #12
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	d1cb      	bne.n	8007f22 <quorem+0x94>
 8007f8a:	3c01      	subs	r4, #1
 8007f8c:	e7c6      	b.n	8007f1c <quorem+0x8e>
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	3b04      	subs	r3, #4
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	d1ef      	bne.n	8007f76 <quorem+0xe8>
 8007f96:	3c01      	subs	r4, #1
 8007f98:	e7ea      	b.n	8007f70 <quorem+0xe2>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e7ee      	b.n	8007f7c <quorem+0xee>
	...

08007fa0 <_dtoa_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	ed2d 8b02 	vpush	{d8}
 8007fa8:	69c7      	ldr	r7, [r0, #28]
 8007faa:	b091      	sub	sp, #68	@ 0x44
 8007fac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fb0:	ec55 4b10 	vmov	r4, r5, d0
 8007fb4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007fb6:	9107      	str	r1, [sp, #28]
 8007fb8:	4681      	mov	r9, r0
 8007fba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fbc:	930d      	str	r3, [sp, #52]	@ 0x34
 8007fbe:	b97f      	cbnz	r7, 8007fe0 <_dtoa_r+0x40>
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	f000 fd43 	bl	8008a4c <malloc>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	f8c9 001c 	str.w	r0, [r9, #28]
 8007fcc:	b920      	cbnz	r0, 8007fd8 <_dtoa_r+0x38>
 8007fce:	4ba0      	ldr	r3, [pc, #640]	@ (8008250 <_dtoa_r+0x2b0>)
 8007fd0:	21ef      	movs	r1, #239	@ 0xef
 8007fd2:	48a0      	ldr	r0, [pc, #640]	@ (8008254 <_dtoa_r+0x2b4>)
 8007fd4:	f001 fac6 	bl	8009564 <__assert_func>
 8007fd8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fdc:	6007      	str	r7, [r0, #0]
 8007fde:	60c7      	str	r7, [r0, #12]
 8007fe0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	b159      	cbz	r1, 8008000 <_dtoa_r+0x60>
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	604a      	str	r2, [r1, #4]
 8007fec:	2301      	movs	r3, #1
 8007fee:	4093      	lsls	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	f000 fecc 	bl	8008d90 <_Bfree>
 8007ff8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	1e2b      	subs	r3, r5, #0
 8008002:	bfbb      	ittet	lt
 8008004:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008008:	9303      	strlt	r3, [sp, #12]
 800800a:	2300      	movge	r3, #0
 800800c:	2201      	movlt	r2, #1
 800800e:	bfac      	ite	ge
 8008010:	6033      	strge	r3, [r6, #0]
 8008012:	6032      	strlt	r2, [r6, #0]
 8008014:	4b90      	ldr	r3, [pc, #576]	@ (8008258 <_dtoa_r+0x2b8>)
 8008016:	9e03      	ldr	r6, [sp, #12]
 8008018:	43b3      	bics	r3, r6
 800801a:	d110      	bne.n	800803e <_dtoa_r+0x9e>
 800801c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800801e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008028:	4323      	orrs	r3, r4
 800802a:	f000 84de 	beq.w	80089ea <_dtoa_r+0xa4a>
 800802e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008030:	4f8a      	ldr	r7, [pc, #552]	@ (800825c <_dtoa_r+0x2bc>)
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 84e0 	beq.w	80089f8 <_dtoa_r+0xa58>
 8008038:	1cfb      	adds	r3, r7, #3
 800803a:	f000 bcdb 	b.w	80089f4 <_dtoa_r+0xa54>
 800803e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008042:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804a:	d10a      	bne.n	8008062 <_dtoa_r+0xc2>
 800804c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800804e:	2301      	movs	r3, #1
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008054:	b113      	cbz	r3, 800805c <_dtoa_r+0xbc>
 8008056:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008058:	4b81      	ldr	r3, [pc, #516]	@ (8008260 <_dtoa_r+0x2c0>)
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	4f81      	ldr	r7, [pc, #516]	@ (8008264 <_dtoa_r+0x2c4>)
 800805e:	f000 bccb 	b.w	80089f8 <_dtoa_r+0xa58>
 8008062:	aa0e      	add	r2, sp, #56	@ 0x38
 8008064:	a90f      	add	r1, sp, #60	@ 0x3c
 8008066:	4648      	mov	r0, r9
 8008068:	eeb0 0b48 	vmov.f64	d0, d8
 800806c:	f001 f97a 	bl	8009364 <__d2b>
 8008070:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008076:	9001      	str	r0, [sp, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d045      	beq.n	8008108 <_dtoa_r+0x168>
 800807c:	eeb0 7b48 	vmov.f64	d7, d8
 8008080:	ee18 1a90 	vmov	r1, s17
 8008084:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008088:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800808c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008090:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008094:	2500      	movs	r5, #0
 8008096:	ee07 1a90 	vmov	s15, r1
 800809a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800809e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008238 <_dtoa_r+0x298>
 80080a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80080a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008240 <_dtoa_r+0x2a0>
 80080aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80080ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008248 <_dtoa_r+0x2a8>
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80080ba:	eeb0 7b46 	vmov.f64	d7, d6
 80080be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80080c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80080c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ce:	ee16 8a90 	vmov	r8, s13
 80080d2:	d508      	bpl.n	80080e6 <_dtoa_r+0x146>
 80080d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	bf18      	it	ne
 80080e2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80080e6:	f1b8 0f16 	cmp.w	r8, #22
 80080ea:	d82b      	bhi.n	8008144 <_dtoa_r+0x1a4>
 80080ec:	495e      	ldr	r1, [pc, #376]	@ (8008268 <_dtoa_r+0x2c8>)
 80080ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80080f2:	ed91 7b00 	vldr	d7, [r1]
 80080f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	d501      	bpl.n	8008104 <_dtoa_r+0x164>
 8008100:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008104:	2100      	movs	r1, #0
 8008106:	e01e      	b.n	8008146 <_dtoa_r+0x1a6>
 8008108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800810a:	4413      	add	r3, r2
 800810c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008110:	2920      	cmp	r1, #32
 8008112:	bfc1      	itttt	gt
 8008114:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008118:	408e      	lslgt	r6, r1
 800811a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800811e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008122:	bfd6      	itet	le
 8008124:	f1c1 0120 	rsble	r1, r1, #32
 8008128:	4331      	orrgt	r1, r6
 800812a:	fa04 f101 	lslle.w	r1, r4, r1
 800812e:	ee07 1a90 	vmov	s15, r1
 8008132:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008136:	3b01      	subs	r3, #1
 8008138:	ee17 1a90 	vmov	r1, s15
 800813c:	2501      	movs	r5, #1
 800813e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008142:	e7a8      	b.n	8008096 <_dtoa_r+0xf6>
 8008144:	2101      	movs	r1, #1
 8008146:	1ad2      	subs	r2, r2, r3
 8008148:	1e53      	subs	r3, r2, #1
 800814a:	9306      	str	r3, [sp, #24]
 800814c:	bf45      	ittet	mi
 800814e:	f1c2 0301 	rsbmi	r3, r2, #1
 8008152:	9305      	strmi	r3, [sp, #20]
 8008154:	2300      	movpl	r3, #0
 8008156:	2300      	movmi	r3, #0
 8008158:	bf4c      	ite	mi
 800815a:	9306      	strmi	r3, [sp, #24]
 800815c:	9305      	strpl	r3, [sp, #20]
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	910c      	str	r1, [sp, #48]	@ 0x30
 8008164:	db18      	blt.n	8008198 <_dtoa_r+0x1f8>
 8008166:	9b06      	ldr	r3, [sp, #24]
 8008168:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800816c:	4443      	add	r3, r8
 800816e:	9306      	str	r3, [sp, #24]
 8008170:	2300      	movs	r3, #0
 8008172:	9a07      	ldr	r2, [sp, #28]
 8008174:	2a09      	cmp	r2, #9
 8008176:	d849      	bhi.n	800820c <_dtoa_r+0x26c>
 8008178:	2a05      	cmp	r2, #5
 800817a:	bfc4      	itt	gt
 800817c:	3a04      	subgt	r2, #4
 800817e:	9207      	strgt	r2, [sp, #28]
 8008180:	9a07      	ldr	r2, [sp, #28]
 8008182:	f1a2 0202 	sub.w	r2, r2, #2
 8008186:	bfcc      	ite	gt
 8008188:	2400      	movgt	r4, #0
 800818a:	2401      	movle	r4, #1
 800818c:	2a03      	cmp	r2, #3
 800818e:	d848      	bhi.n	8008222 <_dtoa_r+0x282>
 8008190:	e8df f002 	tbb	[pc, r2]
 8008194:	3a2c2e0b 	.word	0x3a2c2e0b
 8008198:	9b05      	ldr	r3, [sp, #20]
 800819a:	2200      	movs	r2, #0
 800819c:	eba3 0308 	sub.w	r3, r3, r8
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80081a4:	f1c8 0300 	rsb	r3, r8, #0
 80081a8:	e7e3      	b.n	8008172 <_dtoa_r+0x1d2>
 80081aa:	2200      	movs	r2, #0
 80081ac:	9208      	str	r2, [sp, #32]
 80081ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	dc39      	bgt.n	8008228 <_dtoa_r+0x288>
 80081b4:	f04f 0b01 	mov.w	fp, #1
 80081b8:	46da      	mov	sl, fp
 80081ba:	465a      	mov	r2, fp
 80081bc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80081c0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80081c4:	2100      	movs	r1, #0
 80081c6:	2004      	movs	r0, #4
 80081c8:	f100 0614 	add.w	r6, r0, #20
 80081cc:	4296      	cmp	r6, r2
 80081ce:	d930      	bls.n	8008232 <_dtoa_r+0x292>
 80081d0:	6079      	str	r1, [r7, #4]
 80081d2:	4648      	mov	r0, r9
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	f000 fd9b 	bl	8008d10 <_Balloc>
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	4607      	mov	r7, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d146      	bne.n	8008270 <_dtoa_r+0x2d0>
 80081e2:	4b22      	ldr	r3, [pc, #136]	@ (800826c <_dtoa_r+0x2cc>)
 80081e4:	4602      	mov	r2, r0
 80081e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80081ea:	e6f2      	b.n	8007fd2 <_dtoa_r+0x32>
 80081ec:	2201      	movs	r2, #1
 80081ee:	e7dd      	b.n	80081ac <_dtoa_r+0x20c>
 80081f0:	2200      	movs	r2, #0
 80081f2:	9208      	str	r2, [sp, #32]
 80081f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081f6:	eb08 0b02 	add.w	fp, r8, r2
 80081fa:	f10b 0a01 	add.w	sl, fp, #1
 80081fe:	4652      	mov	r2, sl
 8008200:	2a01      	cmp	r2, #1
 8008202:	bfb8      	it	lt
 8008204:	2201      	movlt	r2, #1
 8008206:	e7db      	b.n	80081c0 <_dtoa_r+0x220>
 8008208:	2201      	movs	r2, #1
 800820a:	e7f2      	b.n	80081f2 <_dtoa_r+0x252>
 800820c:	2401      	movs	r4, #1
 800820e:	2200      	movs	r2, #0
 8008210:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008214:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008218:	2100      	movs	r1, #0
 800821a:	46da      	mov	sl, fp
 800821c:	2212      	movs	r2, #18
 800821e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008220:	e7ce      	b.n	80081c0 <_dtoa_r+0x220>
 8008222:	2201      	movs	r2, #1
 8008224:	9208      	str	r2, [sp, #32]
 8008226:	e7f5      	b.n	8008214 <_dtoa_r+0x274>
 8008228:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800822c:	46da      	mov	sl, fp
 800822e:	465a      	mov	r2, fp
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x220>
 8008232:	3101      	adds	r1, #1
 8008234:	0040      	lsls	r0, r0, #1
 8008236:	e7c7      	b.n	80081c8 <_dtoa_r+0x228>
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	08009c81 	.word	0x08009c81
 8008254:	08009c98 	.word	0x08009c98
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	08009c7d 	.word	0x08009c7d
 8008260:	08009c51 	.word	0x08009c51
 8008264:	08009c50 	.word	0x08009c50
 8008268:	08009d90 	.word	0x08009d90
 800826c:	08009cf0 	.word	0x08009cf0
 8008270:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008274:	f1ba 0f0e 	cmp.w	sl, #14
 8008278:	6010      	str	r0, [r2, #0]
 800827a:	d86f      	bhi.n	800835c <_dtoa_r+0x3bc>
 800827c:	2c00      	cmp	r4, #0
 800827e:	d06d      	beq.n	800835c <_dtoa_r+0x3bc>
 8008280:	f1b8 0f00 	cmp.w	r8, #0
 8008284:	f340 80c2 	ble.w	800840c <_dtoa_r+0x46c>
 8008288:	4aca      	ldr	r2, [pc, #808]	@ (80085b4 <_dtoa_r+0x614>)
 800828a:	f008 010f 	and.w	r1, r8, #15
 800828e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008292:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008296:	ed92 7b00 	vldr	d7, [r2]
 800829a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800829e:	f000 80a9 	beq.w	80083f4 <_dtoa_r+0x454>
 80082a2:	4ac5      	ldr	r2, [pc, #788]	@ (80085b8 <_dtoa_r+0x618>)
 80082a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80082a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80082ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082b0:	f001 010f 	and.w	r1, r1, #15
 80082b4:	2203      	movs	r2, #3
 80082b6:	48c0      	ldr	r0, [pc, #768]	@ (80085b8 <_dtoa_r+0x618>)
 80082b8:	2900      	cmp	r1, #0
 80082ba:	f040 809d 	bne.w	80083f8 <_dtoa_r+0x458>
 80082be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80082cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082d0:	2900      	cmp	r1, #0
 80082d2:	f000 80c1 	beq.w	8008458 <_dtoa_r+0x4b8>
 80082d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80082da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	f140 80b9 	bpl.w	8008458 <_dtoa_r+0x4b8>
 80082e6:	f1ba 0f00 	cmp.w	sl, #0
 80082ea:	f000 80b5 	beq.w	8008458 <_dtoa_r+0x4b8>
 80082ee:	f1bb 0f00 	cmp.w	fp, #0
 80082f2:	dd31      	ble.n	8008358 <_dtoa_r+0x3b8>
 80082f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80082f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008300:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8008304:	9104      	str	r1, [sp, #16]
 8008306:	3201      	adds	r2, #1
 8008308:	465c      	mov	r4, fp
 800830a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800830e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008312:	ee07 2a90 	vmov	s15, r2
 8008316:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800831a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800831e:	ee15 2a90 	vmov	r2, s11
 8008322:	ec51 0b15 	vmov	r0, r1, d5
 8008326:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800832a:	2c00      	cmp	r4, #0
 800832c:	f040 8098 	bne.w	8008460 <_dtoa_r+0x4c0>
 8008330:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008334:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008338:	ec41 0b17 	vmov	d7, r0, r1
 800833c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008344:	f300 8261 	bgt.w	800880a <_dtoa_r+0x86a>
 8008348:	eeb1 7b47 	vneg.f64	d7, d7
 800834c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	f100 80f5 	bmi.w	8008542 <_dtoa_r+0x5a2>
 8008358:	ed8d 8b02 	vstr	d8, [sp, #8]
 800835c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800835e:	2a00      	cmp	r2, #0
 8008360:	f2c0 812c 	blt.w	80085bc <_dtoa_r+0x61c>
 8008364:	f1b8 0f0e 	cmp.w	r8, #14
 8008368:	f300 8128 	bgt.w	80085bc <_dtoa_r+0x61c>
 800836c:	4b91      	ldr	r3, [pc, #580]	@ (80085b4 <_dtoa_r+0x614>)
 800836e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008372:	ed93 6b00 	vldr	d6, [r3]
 8008376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	da03      	bge.n	8008384 <_dtoa_r+0x3e4>
 800837c:	f1ba 0f00 	cmp.w	sl, #0
 8008380:	f340 80d2 	ble.w	8008528 <_dtoa_r+0x588>
 8008384:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008388:	ed9d 7b02 	vldr	d7, [sp, #8]
 800838c:	463e      	mov	r6, r7
 800838e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008392:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008396:	ee15 3a10 	vmov	r3, s10
 800839a:	3330      	adds	r3, #48	@ 0x30
 800839c:	f806 3b01 	strb.w	r3, [r6], #1
 80083a0:	1bf3      	subs	r3, r6, r7
 80083a2:	459a      	cmp	sl, r3
 80083a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80083a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80083ac:	f040 80f8 	bne.w	80085a0 <_dtoa_r+0x600>
 80083b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	f300 80dd 	bgt.w	800857a <_dtoa_r+0x5da>
 80083c0:	eeb4 7b46 	vcmp.f64	d7, d6
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	d104      	bne.n	80083d4 <_dtoa_r+0x434>
 80083ca:	ee15 3a10 	vmov	r3, s10
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	f100 80d3 	bmi.w	800857a <_dtoa_r+0x5da>
 80083d4:	9901      	ldr	r1, [sp, #4]
 80083d6:	4648      	mov	r0, r9
 80083d8:	f000 fcda 	bl	8008d90 <_Bfree>
 80083dc:	2300      	movs	r3, #0
 80083de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083e0:	7033      	strb	r3, [r6, #0]
 80083e2:	f108 0301 	add.w	r3, r8, #1
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8304 	beq.w	80089f8 <_dtoa_r+0xa58>
 80083f0:	601e      	str	r6, [r3, #0]
 80083f2:	e301      	b.n	80089f8 <_dtoa_r+0xa58>
 80083f4:	2202      	movs	r2, #2
 80083f6:	e75e      	b.n	80082b6 <_dtoa_r+0x316>
 80083f8:	07cc      	lsls	r4, r1, #31
 80083fa:	d504      	bpl.n	8008406 <_dtoa_r+0x466>
 80083fc:	ed90 6b00 	vldr	d6, [r0]
 8008400:	3201      	adds	r2, #1
 8008402:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008406:	1049      	asrs	r1, r1, #1
 8008408:	3008      	adds	r0, #8
 800840a:	e755      	b.n	80082b8 <_dtoa_r+0x318>
 800840c:	d022      	beq.n	8008454 <_dtoa_r+0x4b4>
 800840e:	f1c8 0100 	rsb	r1, r8, #0
 8008412:	4a68      	ldr	r2, [pc, #416]	@ (80085b4 <_dtoa_r+0x614>)
 8008414:	f001 000f 	and.w	r0, r1, #15
 8008418:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800841c:	ed92 7b00 	vldr	d7, [r2]
 8008420:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008424:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008428:	4863      	ldr	r0, [pc, #396]	@ (80085b8 <_dtoa_r+0x618>)
 800842a:	1109      	asrs	r1, r1, #4
 800842c:	2400      	movs	r4, #0
 800842e:	2202      	movs	r2, #2
 8008430:	b929      	cbnz	r1, 800843e <_dtoa_r+0x49e>
 8008432:	2c00      	cmp	r4, #0
 8008434:	f43f af49 	beq.w	80082ca <_dtoa_r+0x32a>
 8008438:	ed8d 7b02 	vstr	d7, [sp, #8]
 800843c:	e745      	b.n	80082ca <_dtoa_r+0x32a>
 800843e:	07ce      	lsls	r6, r1, #31
 8008440:	d505      	bpl.n	800844e <_dtoa_r+0x4ae>
 8008442:	ed90 6b00 	vldr	d6, [r0]
 8008446:	3201      	adds	r2, #1
 8008448:	2401      	movs	r4, #1
 800844a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800844e:	1049      	asrs	r1, r1, #1
 8008450:	3008      	adds	r0, #8
 8008452:	e7ed      	b.n	8008430 <_dtoa_r+0x490>
 8008454:	2202      	movs	r2, #2
 8008456:	e738      	b.n	80082ca <_dtoa_r+0x32a>
 8008458:	f8cd 8010 	str.w	r8, [sp, #16]
 800845c:	4654      	mov	r4, sl
 800845e:	e754      	b.n	800830a <_dtoa_r+0x36a>
 8008460:	4a54      	ldr	r2, [pc, #336]	@ (80085b4 <_dtoa_r+0x614>)
 8008462:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008466:	ed12 4b02 	vldr	d4, [r2, #-8]
 800846a:	9a08      	ldr	r2, [sp, #32]
 800846c:	ec41 0b17 	vmov	d7, r0, r1
 8008470:	443c      	add	r4, r7
 8008472:	b34a      	cbz	r2, 80084c8 <_dtoa_r+0x528>
 8008474:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008478:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800847c:	463e      	mov	r6, r7
 800847e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008482:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008486:	ee35 7b47 	vsub.f64	d7, d5, d7
 800848a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800848e:	ee14 2a90 	vmov	r2, s9
 8008492:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008496:	3230      	adds	r2, #48	@ 0x30
 8008498:	ee36 6b45 	vsub.f64	d6, d6, d5
 800849c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a4:	f806 2b01 	strb.w	r2, [r6], #1
 80084a8:	d438      	bmi.n	800851c <_dtoa_r+0x57c>
 80084aa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80084ae:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80084b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b6:	d462      	bmi.n	800857e <_dtoa_r+0x5de>
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	f43f af4d 	beq.w	8008358 <_dtoa_r+0x3b8>
 80084be:	ee27 7b03 	vmul.f64	d7, d7, d3
 80084c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084c6:	e7e0      	b.n	800848a <_dtoa_r+0x4ea>
 80084c8:	4621      	mov	r1, r4
 80084ca:	463e      	mov	r6, r7
 80084cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084d0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80084d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80084d8:	ee14 2a90 	vmov	r2, s9
 80084dc:	3230      	adds	r2, #48	@ 0x30
 80084de:	f806 2b01 	strb.w	r2, [r6], #1
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084ec:	d119      	bne.n	8008522 <_dtoa_r+0x582>
 80084ee:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80084f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80084f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80084fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084fe:	dc3e      	bgt.n	800857e <_dtoa_r+0x5de>
 8008500:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008504:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850c:	f57f af24 	bpl.w	8008358 <_dtoa_r+0x3b8>
 8008510:	460e      	mov	r6, r1
 8008512:	3901      	subs	r1, #1
 8008514:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008518:	2b30      	cmp	r3, #48	@ 0x30
 800851a:	d0f9      	beq.n	8008510 <_dtoa_r+0x570>
 800851c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008520:	e758      	b.n	80083d4 <_dtoa_r+0x434>
 8008522:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008526:	e7d5      	b.n	80084d4 <_dtoa_r+0x534>
 8008528:	d10b      	bne.n	8008542 <_dtoa_r+0x5a2>
 800852a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800852e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008532:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853e:	f2c0 8161 	blt.w	8008804 <_dtoa_r+0x864>
 8008542:	2400      	movs	r4, #0
 8008544:	4625      	mov	r5, r4
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	43db      	mvns	r3, r3
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	463e      	mov	r6, r7
 800854e:	f04f 0800 	mov.w	r8, #0
 8008552:	4621      	mov	r1, r4
 8008554:	4648      	mov	r0, r9
 8008556:	f000 fc1b 	bl	8008d90 <_Bfree>
 800855a:	2d00      	cmp	r5, #0
 800855c:	d0de      	beq.n	800851c <_dtoa_r+0x57c>
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	d005      	beq.n	8008570 <_dtoa_r+0x5d0>
 8008564:	45a8      	cmp	r8, r5
 8008566:	d003      	beq.n	8008570 <_dtoa_r+0x5d0>
 8008568:	4641      	mov	r1, r8
 800856a:	4648      	mov	r0, r9
 800856c:	f000 fc10 	bl	8008d90 <_Bfree>
 8008570:	4629      	mov	r1, r5
 8008572:	4648      	mov	r0, r9
 8008574:	f000 fc0c 	bl	8008d90 <_Bfree>
 8008578:	e7d0      	b.n	800851c <_dtoa_r+0x57c>
 800857a:	f8cd 8010 	str.w	r8, [sp, #16]
 800857e:	4633      	mov	r3, r6
 8008580:	461e      	mov	r6, r3
 8008582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008586:	2a39      	cmp	r2, #57	@ 0x39
 8008588:	d106      	bne.n	8008598 <_dtoa_r+0x5f8>
 800858a:	429f      	cmp	r7, r3
 800858c:	d1f8      	bne.n	8008580 <_dtoa_r+0x5e0>
 800858e:	9a04      	ldr	r2, [sp, #16]
 8008590:	3201      	adds	r2, #1
 8008592:	9204      	str	r2, [sp, #16]
 8008594:	2230      	movs	r2, #48	@ 0x30
 8008596:	703a      	strb	r2, [r7, #0]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	3201      	adds	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e7bd      	b.n	800851c <_dtoa_r+0x57c>
 80085a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80085a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ac:	f47f aeef 	bne.w	800838e <_dtoa_r+0x3ee>
 80085b0:	e710      	b.n	80083d4 <_dtoa_r+0x434>
 80085b2:	bf00      	nop
 80085b4:	08009d90 	.word	0x08009d90
 80085b8:	08009d68 	.word	0x08009d68
 80085bc:	9908      	ldr	r1, [sp, #32]
 80085be:	2900      	cmp	r1, #0
 80085c0:	f000 80e3 	beq.w	800878a <_dtoa_r+0x7ea>
 80085c4:	9907      	ldr	r1, [sp, #28]
 80085c6:	2901      	cmp	r1, #1
 80085c8:	f300 80c8 	bgt.w	800875c <_dtoa_r+0x7bc>
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f000 80c1 	beq.w	8008754 <_dtoa_r+0x7b4>
 80085d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80085d6:	9e05      	ldr	r6, [sp, #20]
 80085d8:	461c      	mov	r4, r3
 80085da:	9304      	str	r3, [sp, #16]
 80085dc:	9b05      	ldr	r3, [sp, #20]
 80085de:	4413      	add	r3, r2
 80085e0:	9305      	str	r3, [sp, #20]
 80085e2:	9b06      	ldr	r3, [sp, #24]
 80085e4:	2101      	movs	r1, #1
 80085e6:	4413      	add	r3, r2
 80085e8:	4648      	mov	r0, r9
 80085ea:	9306      	str	r3, [sp, #24]
 80085ec:	f000 fc84 	bl	8008ef8 <__i2b>
 80085f0:	9b04      	ldr	r3, [sp, #16]
 80085f2:	4605      	mov	r5, r0
 80085f4:	b166      	cbz	r6, 8008610 <_dtoa_r+0x670>
 80085f6:	9a06      	ldr	r2, [sp, #24]
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	dd09      	ble.n	8008610 <_dtoa_r+0x670>
 80085fc:	42b2      	cmp	r2, r6
 80085fe:	9905      	ldr	r1, [sp, #20]
 8008600:	bfa8      	it	ge
 8008602:	4632      	movge	r2, r6
 8008604:	1a89      	subs	r1, r1, r2
 8008606:	9105      	str	r1, [sp, #20]
 8008608:	9906      	ldr	r1, [sp, #24]
 800860a:	1ab6      	subs	r6, r6, r2
 800860c:	1a8a      	subs	r2, r1, r2
 800860e:	9206      	str	r2, [sp, #24]
 8008610:	b1fb      	cbz	r3, 8008652 <_dtoa_r+0x6b2>
 8008612:	9a08      	ldr	r2, [sp, #32]
 8008614:	2a00      	cmp	r2, #0
 8008616:	f000 80bc 	beq.w	8008792 <_dtoa_r+0x7f2>
 800861a:	b19c      	cbz	r4, 8008644 <_dtoa_r+0x6a4>
 800861c:	4629      	mov	r1, r5
 800861e:	4622      	mov	r2, r4
 8008620:	4648      	mov	r0, r9
 8008622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008624:	f000 fd28 	bl	8009078 <__pow5mult>
 8008628:	9a01      	ldr	r2, [sp, #4]
 800862a:	4601      	mov	r1, r0
 800862c:	4605      	mov	r5, r0
 800862e:	4648      	mov	r0, r9
 8008630:	f000 fc78 	bl	8008f24 <__multiply>
 8008634:	9901      	ldr	r1, [sp, #4]
 8008636:	9004      	str	r0, [sp, #16]
 8008638:	4648      	mov	r0, r9
 800863a:	f000 fba9 	bl	8008d90 <_Bfree>
 800863e:	9a04      	ldr	r2, [sp, #16]
 8008640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008642:	9201      	str	r2, [sp, #4]
 8008644:	1b1a      	subs	r2, r3, r4
 8008646:	d004      	beq.n	8008652 <_dtoa_r+0x6b2>
 8008648:	9901      	ldr	r1, [sp, #4]
 800864a:	4648      	mov	r0, r9
 800864c:	f000 fd14 	bl	8009078 <__pow5mult>
 8008650:	9001      	str	r0, [sp, #4]
 8008652:	2101      	movs	r1, #1
 8008654:	4648      	mov	r0, r9
 8008656:	f000 fc4f 	bl	8008ef8 <__i2b>
 800865a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800865c:	4604      	mov	r4, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 81d0 	beq.w	8008a04 <_dtoa_r+0xa64>
 8008664:	461a      	mov	r2, r3
 8008666:	4601      	mov	r1, r0
 8008668:	4648      	mov	r0, r9
 800866a:	f000 fd05 	bl	8009078 <__pow5mult>
 800866e:	9b07      	ldr	r3, [sp, #28]
 8008670:	2b01      	cmp	r3, #1
 8008672:	4604      	mov	r4, r0
 8008674:	f300 8095 	bgt.w	80087a2 <_dtoa_r+0x802>
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f040 808b 	bne.w	8008796 <_dtoa_r+0x7f6>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008686:	2a00      	cmp	r2, #0
 8008688:	f040 8087 	bne.w	800879a <_dtoa_r+0x7fa>
 800868c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008690:	0d12      	lsrs	r2, r2, #20
 8008692:	0512      	lsls	r2, r2, #20
 8008694:	2a00      	cmp	r2, #0
 8008696:	f000 8082 	beq.w	800879e <_dtoa_r+0x7fe>
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	3301      	adds	r3, #1
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	9b06      	ldr	r3, [sp, #24]
 80086a2:	3301      	adds	r3, #1
 80086a4:	9306      	str	r3, [sp, #24]
 80086a6:	2301      	movs	r3, #1
 80086a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 81af 	beq.w	8008a10 <_dtoa_r+0xa70>
 80086b2:	6922      	ldr	r2, [r4, #16]
 80086b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80086b8:	6910      	ldr	r0, [r2, #16]
 80086ba:	f000 fbd1 	bl	8008e60 <__hi0bits>
 80086be:	f1c0 0020 	rsb	r0, r0, #32
 80086c2:	9b06      	ldr	r3, [sp, #24]
 80086c4:	4418      	add	r0, r3
 80086c6:	f010 001f 	ands.w	r0, r0, #31
 80086ca:	d076      	beq.n	80087ba <_dtoa_r+0x81a>
 80086cc:	f1c0 0220 	rsb	r2, r0, #32
 80086d0:	2a04      	cmp	r2, #4
 80086d2:	dd69      	ble.n	80087a8 <_dtoa_r+0x808>
 80086d4:	9b05      	ldr	r3, [sp, #20]
 80086d6:	f1c0 001c 	rsb	r0, r0, #28
 80086da:	4403      	add	r3, r0
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	9b06      	ldr	r3, [sp, #24]
 80086e0:	4406      	add	r6, r0
 80086e2:	4403      	add	r3, r0
 80086e4:	9306      	str	r3, [sp, #24]
 80086e6:	9b05      	ldr	r3, [sp, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dd05      	ble.n	80086f8 <_dtoa_r+0x758>
 80086ec:	9901      	ldr	r1, [sp, #4]
 80086ee:	461a      	mov	r2, r3
 80086f0:	4648      	mov	r0, r9
 80086f2:	f000 fd1b 	bl	800912c <__lshift>
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd05      	ble.n	800870a <_dtoa_r+0x76a>
 80086fe:	4621      	mov	r1, r4
 8008700:	461a      	mov	r2, r3
 8008702:	4648      	mov	r0, r9
 8008704:	f000 fd12 	bl	800912c <__lshift>
 8008708:	4604      	mov	r4, r0
 800870a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d056      	beq.n	80087be <_dtoa_r+0x81e>
 8008710:	9801      	ldr	r0, [sp, #4]
 8008712:	4621      	mov	r1, r4
 8008714:	f000 fd76 	bl	8009204 <__mcmp>
 8008718:	2800      	cmp	r0, #0
 800871a:	da50      	bge.n	80087be <_dtoa_r+0x81e>
 800871c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	9901      	ldr	r1, [sp, #4]
 8008724:	2300      	movs	r3, #0
 8008726:	220a      	movs	r2, #10
 8008728:	4648      	mov	r0, r9
 800872a:	f000 fb53 	bl	8008dd4 <__multadd>
 800872e:	9b08      	ldr	r3, [sp, #32]
 8008730:	9001      	str	r0, [sp, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 816e 	beq.w	8008a14 <_dtoa_r+0xa74>
 8008738:	4629      	mov	r1, r5
 800873a:	2300      	movs	r3, #0
 800873c:	220a      	movs	r2, #10
 800873e:	4648      	mov	r0, r9
 8008740:	f000 fb48 	bl	8008dd4 <__multadd>
 8008744:	f1bb 0f00 	cmp.w	fp, #0
 8008748:	4605      	mov	r5, r0
 800874a:	dc64      	bgt.n	8008816 <_dtoa_r+0x876>
 800874c:	9b07      	ldr	r3, [sp, #28]
 800874e:	2b02      	cmp	r3, #2
 8008750:	dc3e      	bgt.n	80087d0 <_dtoa_r+0x830>
 8008752:	e060      	b.n	8008816 <_dtoa_r+0x876>
 8008754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008756:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800875a:	e73c      	b.n	80085d6 <_dtoa_r+0x636>
 800875c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8008760:	42a3      	cmp	r3, r4
 8008762:	bfbf      	itttt	lt
 8008764:	1ae2      	sublt	r2, r4, r3
 8008766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008768:	189b      	addlt	r3, r3, r2
 800876a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800876c:	bfae      	itee	ge
 800876e:	1b1c      	subge	r4, r3, r4
 8008770:	4623      	movlt	r3, r4
 8008772:	2400      	movlt	r4, #0
 8008774:	f1ba 0f00 	cmp.w	sl, #0
 8008778:	bfb5      	itete	lt
 800877a:	9a05      	ldrlt	r2, [sp, #20]
 800877c:	9e05      	ldrge	r6, [sp, #20]
 800877e:	eba2 060a 	sublt.w	r6, r2, sl
 8008782:	4652      	movge	r2, sl
 8008784:	bfb8      	it	lt
 8008786:	2200      	movlt	r2, #0
 8008788:	e727      	b.n	80085da <_dtoa_r+0x63a>
 800878a:	9e05      	ldr	r6, [sp, #20]
 800878c:	9d08      	ldr	r5, [sp, #32]
 800878e:	461c      	mov	r4, r3
 8008790:	e730      	b.n	80085f4 <_dtoa_r+0x654>
 8008792:	461a      	mov	r2, r3
 8008794:	e758      	b.n	8008648 <_dtoa_r+0x6a8>
 8008796:	2300      	movs	r3, #0
 8008798:	e786      	b.n	80086a8 <_dtoa_r+0x708>
 800879a:	9b02      	ldr	r3, [sp, #8]
 800879c:	e784      	b.n	80086a8 <_dtoa_r+0x708>
 800879e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087a0:	e783      	b.n	80086aa <_dtoa_r+0x70a>
 80087a2:	2300      	movs	r3, #0
 80087a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087a6:	e784      	b.n	80086b2 <_dtoa_r+0x712>
 80087a8:	d09d      	beq.n	80086e6 <_dtoa_r+0x746>
 80087aa:	9b05      	ldr	r3, [sp, #20]
 80087ac:	321c      	adds	r2, #28
 80087ae:	4413      	add	r3, r2
 80087b0:	9305      	str	r3, [sp, #20]
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	4416      	add	r6, r2
 80087b6:	4413      	add	r3, r2
 80087b8:	e794      	b.n	80086e4 <_dtoa_r+0x744>
 80087ba:	4602      	mov	r2, r0
 80087bc:	e7f5      	b.n	80087aa <_dtoa_r+0x80a>
 80087be:	f1ba 0f00 	cmp.w	sl, #0
 80087c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80087c6:	46d3      	mov	fp, sl
 80087c8:	dc21      	bgt.n	800880e <_dtoa_r+0x86e>
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	dd1e      	ble.n	800880e <_dtoa_r+0x86e>
 80087d0:	f1bb 0f00 	cmp.w	fp, #0
 80087d4:	f47f aeb7 	bne.w	8008546 <_dtoa_r+0x5a6>
 80087d8:	4621      	mov	r1, r4
 80087da:	465b      	mov	r3, fp
 80087dc:	2205      	movs	r2, #5
 80087de:	4648      	mov	r0, r9
 80087e0:	f000 faf8 	bl	8008dd4 <__multadd>
 80087e4:	4601      	mov	r1, r0
 80087e6:	4604      	mov	r4, r0
 80087e8:	9801      	ldr	r0, [sp, #4]
 80087ea:	f000 fd0b 	bl	8009204 <__mcmp>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f77f aea9 	ble.w	8008546 <_dtoa_r+0x5a6>
 80087f4:	463e      	mov	r6, r7
 80087f6:	2331      	movs	r3, #49	@ 0x31
 80087f8:	f806 3b01 	strb.w	r3, [r6], #1
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	3301      	adds	r3, #1
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	e6a4      	b.n	800854e <_dtoa_r+0x5ae>
 8008804:	f8cd 8010 	str.w	r8, [sp, #16]
 8008808:	4654      	mov	r4, sl
 800880a:	4625      	mov	r5, r4
 800880c:	e7f2      	b.n	80087f4 <_dtoa_r+0x854>
 800880e:	9b08      	ldr	r3, [sp, #32]
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 8103 	beq.w	8008a1c <_dtoa_r+0xa7c>
 8008816:	2e00      	cmp	r6, #0
 8008818:	dd05      	ble.n	8008826 <_dtoa_r+0x886>
 800881a:	4629      	mov	r1, r5
 800881c:	4632      	mov	r2, r6
 800881e:	4648      	mov	r0, r9
 8008820:	f000 fc84 	bl	800912c <__lshift>
 8008824:	4605      	mov	r5, r0
 8008826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d058      	beq.n	80088de <_dtoa_r+0x93e>
 800882c:	6869      	ldr	r1, [r5, #4]
 800882e:	4648      	mov	r0, r9
 8008830:	f000 fa6e 	bl	8008d10 <_Balloc>
 8008834:	4606      	mov	r6, r0
 8008836:	b928      	cbnz	r0, 8008844 <_dtoa_r+0x8a4>
 8008838:	4b82      	ldr	r3, [pc, #520]	@ (8008a44 <_dtoa_r+0xaa4>)
 800883a:	4602      	mov	r2, r0
 800883c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008840:	f7ff bbc7 	b.w	8007fd2 <_dtoa_r+0x32>
 8008844:	692a      	ldr	r2, [r5, #16]
 8008846:	3202      	adds	r2, #2
 8008848:	0092      	lsls	r2, r2, #2
 800884a:	f105 010c 	add.w	r1, r5, #12
 800884e:	300c      	adds	r0, #12
 8008850:	f000 fe7a 	bl	8009548 <memcpy>
 8008854:	2201      	movs	r2, #1
 8008856:	4631      	mov	r1, r6
 8008858:	4648      	mov	r0, r9
 800885a:	f000 fc67 	bl	800912c <__lshift>
 800885e:	1c7b      	adds	r3, r7, #1
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	eb07 030b 	add.w	r3, r7, fp
 8008866:	9309      	str	r3, [sp, #36]	@ 0x24
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	46a8      	mov	r8, r5
 8008870:	9308      	str	r3, [sp, #32]
 8008872:	4605      	mov	r5, r0
 8008874:	9b05      	ldr	r3, [sp, #20]
 8008876:	9801      	ldr	r0, [sp, #4]
 8008878:	4621      	mov	r1, r4
 800887a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800887e:	f7ff fb06 	bl	8007e8e <quorem>
 8008882:	4641      	mov	r1, r8
 8008884:	9002      	str	r0, [sp, #8]
 8008886:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800888a:	9801      	ldr	r0, [sp, #4]
 800888c:	f000 fcba 	bl	8009204 <__mcmp>
 8008890:	462a      	mov	r2, r5
 8008892:	9006      	str	r0, [sp, #24]
 8008894:	4621      	mov	r1, r4
 8008896:	4648      	mov	r0, r9
 8008898:	f000 fcd0 	bl	800923c <__mdiff>
 800889c:	68c2      	ldr	r2, [r0, #12]
 800889e:	4606      	mov	r6, r0
 80088a0:	b9fa      	cbnz	r2, 80088e2 <_dtoa_r+0x942>
 80088a2:	4601      	mov	r1, r0
 80088a4:	9801      	ldr	r0, [sp, #4]
 80088a6:	f000 fcad 	bl	8009204 <__mcmp>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4631      	mov	r1, r6
 80088ae:	4648      	mov	r0, r9
 80088b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80088b2:	f000 fa6d 	bl	8008d90 <_Bfree>
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088ba:	9e05      	ldr	r6, [sp, #20]
 80088bc:	ea43 0102 	orr.w	r1, r3, r2
 80088c0:	9b08      	ldr	r3, [sp, #32]
 80088c2:	4319      	orrs	r1, r3
 80088c4:	d10f      	bne.n	80088e6 <_dtoa_r+0x946>
 80088c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80088ca:	d028      	beq.n	800891e <_dtoa_r+0x97e>
 80088cc:	9b06      	ldr	r3, [sp, #24]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd02      	ble.n	80088d8 <_dtoa_r+0x938>
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80088d8:	f88b a000 	strb.w	sl, [fp]
 80088dc:	e639      	b.n	8008552 <_dtoa_r+0x5b2>
 80088de:	4628      	mov	r0, r5
 80088e0:	e7bd      	b.n	800885e <_dtoa_r+0x8be>
 80088e2:	2201      	movs	r2, #1
 80088e4:	e7e2      	b.n	80088ac <_dtoa_r+0x90c>
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	db04      	blt.n	80088f6 <_dtoa_r+0x956>
 80088ec:	9907      	ldr	r1, [sp, #28]
 80088ee:	430b      	orrs	r3, r1
 80088f0:	9908      	ldr	r1, [sp, #32]
 80088f2:	430b      	orrs	r3, r1
 80088f4:	d120      	bne.n	8008938 <_dtoa_r+0x998>
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	ddee      	ble.n	80088d8 <_dtoa_r+0x938>
 80088fa:	9901      	ldr	r1, [sp, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	4648      	mov	r0, r9
 8008900:	f000 fc14 	bl	800912c <__lshift>
 8008904:	4621      	mov	r1, r4
 8008906:	9001      	str	r0, [sp, #4]
 8008908:	f000 fc7c 	bl	8009204 <__mcmp>
 800890c:	2800      	cmp	r0, #0
 800890e:	dc03      	bgt.n	8008918 <_dtoa_r+0x978>
 8008910:	d1e2      	bne.n	80088d8 <_dtoa_r+0x938>
 8008912:	f01a 0f01 	tst.w	sl, #1
 8008916:	d0df      	beq.n	80088d8 <_dtoa_r+0x938>
 8008918:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800891c:	d1d9      	bne.n	80088d2 <_dtoa_r+0x932>
 800891e:	2339      	movs	r3, #57	@ 0x39
 8008920:	f88b 3000 	strb.w	r3, [fp]
 8008924:	4633      	mov	r3, r6
 8008926:	461e      	mov	r6, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800892e:	2a39      	cmp	r2, #57	@ 0x39
 8008930:	d053      	beq.n	80089da <_dtoa_r+0xa3a>
 8008932:	3201      	adds	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
 8008936:	e60c      	b.n	8008552 <_dtoa_r+0x5b2>
 8008938:	2a00      	cmp	r2, #0
 800893a:	dd07      	ble.n	800894c <_dtoa_r+0x9ac>
 800893c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008940:	d0ed      	beq.n	800891e <_dtoa_r+0x97e>
 8008942:	f10a 0301 	add.w	r3, sl, #1
 8008946:	f88b 3000 	strb.w	r3, [fp]
 800894a:	e602      	b.n	8008552 <_dtoa_r+0x5b2>
 800894c:	9b05      	ldr	r3, [sp, #20]
 800894e:	9a05      	ldr	r2, [sp, #20]
 8008950:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008956:	4293      	cmp	r3, r2
 8008958:	d029      	beq.n	80089ae <_dtoa_r+0xa0e>
 800895a:	9901      	ldr	r1, [sp, #4]
 800895c:	2300      	movs	r3, #0
 800895e:	220a      	movs	r2, #10
 8008960:	4648      	mov	r0, r9
 8008962:	f000 fa37 	bl	8008dd4 <__multadd>
 8008966:	45a8      	cmp	r8, r5
 8008968:	9001      	str	r0, [sp, #4]
 800896a:	f04f 0300 	mov.w	r3, #0
 800896e:	f04f 020a 	mov.w	r2, #10
 8008972:	4641      	mov	r1, r8
 8008974:	4648      	mov	r0, r9
 8008976:	d107      	bne.n	8008988 <_dtoa_r+0x9e8>
 8008978:	f000 fa2c 	bl	8008dd4 <__multadd>
 800897c:	4680      	mov	r8, r0
 800897e:	4605      	mov	r5, r0
 8008980:	9b05      	ldr	r3, [sp, #20]
 8008982:	3301      	adds	r3, #1
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	e775      	b.n	8008874 <_dtoa_r+0x8d4>
 8008988:	f000 fa24 	bl	8008dd4 <__multadd>
 800898c:	4629      	mov	r1, r5
 800898e:	4680      	mov	r8, r0
 8008990:	2300      	movs	r3, #0
 8008992:	220a      	movs	r2, #10
 8008994:	4648      	mov	r0, r9
 8008996:	f000 fa1d 	bl	8008dd4 <__multadd>
 800899a:	4605      	mov	r5, r0
 800899c:	e7f0      	b.n	8008980 <_dtoa_r+0x9e0>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	bfcc      	ite	gt
 80089a4:	465e      	movgt	r6, fp
 80089a6:	2601      	movle	r6, #1
 80089a8:	443e      	add	r6, r7
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	4648      	mov	r0, r9
 80089b4:	f000 fbba 	bl	800912c <__lshift>
 80089b8:	4621      	mov	r1, r4
 80089ba:	9001      	str	r0, [sp, #4]
 80089bc:	f000 fc22 	bl	8009204 <__mcmp>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	dcaf      	bgt.n	8008924 <_dtoa_r+0x984>
 80089c4:	d102      	bne.n	80089cc <_dtoa_r+0xa2c>
 80089c6:	f01a 0f01 	tst.w	sl, #1
 80089ca:	d1ab      	bne.n	8008924 <_dtoa_r+0x984>
 80089cc:	4633      	mov	r3, r6
 80089ce:	461e      	mov	r6, r3
 80089d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089d4:	2a30      	cmp	r2, #48	@ 0x30
 80089d6:	d0fa      	beq.n	80089ce <_dtoa_r+0xa2e>
 80089d8:	e5bb      	b.n	8008552 <_dtoa_r+0x5b2>
 80089da:	429f      	cmp	r7, r3
 80089dc:	d1a3      	bne.n	8008926 <_dtoa_r+0x986>
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	3301      	adds	r3, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	2331      	movs	r3, #49	@ 0x31
 80089e6:	703b      	strb	r3, [r7, #0]
 80089e8:	e5b3      	b.n	8008552 <_dtoa_r+0x5b2>
 80089ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80089ec:	4f16      	ldr	r7, [pc, #88]	@ (8008a48 <_dtoa_r+0xaa8>)
 80089ee:	b11b      	cbz	r3, 80089f8 <_dtoa_r+0xa58>
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	4638      	mov	r0, r7
 80089fa:	b011      	add	sp, #68	@ 0x44
 80089fc:	ecbd 8b02 	vpop	{d8}
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	f77f ae36 	ble.w	8008678 <_dtoa_r+0x6d8>
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a10:	2001      	movs	r0, #1
 8008a12:	e656      	b.n	80086c2 <_dtoa_r+0x722>
 8008a14:	f1bb 0f00 	cmp.w	fp, #0
 8008a18:	f77f aed7 	ble.w	80087ca <_dtoa_r+0x82a>
 8008a1c:	463e      	mov	r6, r7
 8008a1e:	9801      	ldr	r0, [sp, #4]
 8008a20:	4621      	mov	r1, r4
 8008a22:	f7ff fa34 	bl	8007e8e <quorem>
 8008a26:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008a2a:	f806 ab01 	strb.w	sl, [r6], #1
 8008a2e:	1bf2      	subs	r2, r6, r7
 8008a30:	4593      	cmp	fp, r2
 8008a32:	ddb4      	ble.n	800899e <_dtoa_r+0x9fe>
 8008a34:	9901      	ldr	r1, [sp, #4]
 8008a36:	2300      	movs	r3, #0
 8008a38:	220a      	movs	r2, #10
 8008a3a:	4648      	mov	r0, r9
 8008a3c:	f000 f9ca 	bl	8008dd4 <__multadd>
 8008a40:	9001      	str	r0, [sp, #4]
 8008a42:	e7ec      	b.n	8008a1e <_dtoa_r+0xa7e>
 8008a44:	08009cf0 	.word	0x08009cf0
 8008a48:	08009c74 	.word	0x08009c74

08008a4c <malloc>:
 8008a4c:	4b02      	ldr	r3, [pc, #8]	@ (8008a58 <malloc+0xc>)
 8008a4e:	4601      	mov	r1, r0
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f000 b825 	b.w	8008aa0 <_malloc_r>
 8008a56:	bf00      	nop
 8008a58:	20000030 	.word	0x20000030

08008a5c <sbrk_aligned>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a9c <sbrk_aligned+0x40>)
 8008a60:	460c      	mov	r4, r1
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	4605      	mov	r5, r0
 8008a66:	b911      	cbnz	r1, 8008a6e <sbrk_aligned+0x12>
 8008a68:	f000 fd4c 	bl	8009504 <_sbrk_r>
 8008a6c:	6030      	str	r0, [r6, #0]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 fd47 	bl	8009504 <_sbrk_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d103      	bne.n	8008a82 <sbrk_aligned+0x26>
 8008a7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a7e:	4620      	mov	r0, r4
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d0f8      	beq.n	8008a7e <sbrk_aligned+0x22>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 fd38 	bl	8009504 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1f2      	bne.n	8008a7e <sbrk_aligned+0x22>
 8008a98:	e7ef      	b.n	8008a7a <sbrk_aligned+0x1e>
 8008a9a:	bf00      	nop
 8008a9c:	20000cf4 	.word	0x20000cf4

08008aa0 <_malloc_r>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d904      	bls.n	8008ac6 <_malloc_r+0x26>
 8008abc:	230c      	movs	r3, #12
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b9c <_malloc_r+0xfc>
 8008aca:	f000 f915 	bl	8008cf8 <__malloc_lock>
 8008ace:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	bb44      	cbnz	r4, 8008b28 <_malloc_r+0x88>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff ffbf 	bl	8008a5c <sbrk_aligned>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	d158      	bne.n	8008b96 <_malloc_r+0xf6>
 8008ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ae8:	4627      	mov	r7, r4
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	d143      	bne.n	8008b76 <_malloc_r+0xd6>
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d04b      	beq.n	8008b8a <_malloc_r+0xea>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	4639      	mov	r1, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	eb04 0903 	add.w	r9, r4, r3
 8008afc:	f000 fd02 	bl	8009504 <_sbrk_r>
 8008b00:	4581      	cmp	r9, r0
 8008b02:	d142      	bne.n	8008b8a <_malloc_r+0xea>
 8008b04:	6821      	ldr	r1, [r4, #0]
 8008b06:	1a6d      	subs	r5, r5, r1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffa6 	bl	8008a5c <sbrk_aligned>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d03a      	beq.n	8008b8a <_malloc_r+0xea>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	442b      	add	r3, r5
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	bb62      	cbnz	r2, 8008b7c <_malloc_r+0xdc>
 8008b22:	f8c8 7000 	str.w	r7, [r8]
 8008b26:	e00f      	b.n	8008b48 <_malloc_r+0xa8>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	1b52      	subs	r2, r2, r5
 8008b2c:	d420      	bmi.n	8008b70 <_malloc_r+0xd0>
 8008b2e:	2a0b      	cmp	r2, #11
 8008b30:	d917      	bls.n	8008b62 <_malloc_r+0xc2>
 8008b32:	1961      	adds	r1, r4, r5
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	6025      	str	r5, [r4, #0]
 8008b38:	bf18      	it	ne
 8008b3a:	6059      	strne	r1, [r3, #4]
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	bf08      	it	eq
 8008b40:	f8c8 1000 	streq.w	r1, [r8]
 8008b44:	5162      	str	r2, [r4, r5]
 8008b46:	604b      	str	r3, [r1, #4]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 f8db 	bl	8008d04 <__malloc_unlock>
 8008b4e:	f104 000b 	add.w	r0, r4, #11
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	f020 0007 	bic.w	r0, r0, #7
 8008b58:	1ac2      	subs	r2, r0, r3
 8008b5a:	bf1c      	itt	ne
 8008b5c:	1a1b      	subne	r3, r3, r0
 8008b5e:	50a3      	strne	r3, [r4, r2]
 8008b60:	e7af      	b.n	8008ac2 <_malloc_r+0x22>
 8008b62:	6862      	ldr	r2, [r4, #4]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	bf0c      	ite	eq
 8008b68:	f8c8 2000 	streq.w	r2, [r8]
 8008b6c:	605a      	strne	r2, [r3, #4]
 8008b6e:	e7eb      	b.n	8008b48 <_malloc_r+0xa8>
 8008b70:	4623      	mov	r3, r4
 8008b72:	6864      	ldr	r4, [r4, #4]
 8008b74:	e7ae      	b.n	8008ad4 <_malloc_r+0x34>
 8008b76:	463c      	mov	r4, r7
 8008b78:	687f      	ldr	r7, [r7, #4]
 8008b7a:	e7b6      	b.n	8008aea <_malloc_r+0x4a>
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d1fb      	bne.n	8008b7c <_malloc_r+0xdc>
 8008b84:	2300      	movs	r3, #0
 8008b86:	6053      	str	r3, [r2, #4]
 8008b88:	e7de      	b.n	8008b48 <_malloc_r+0xa8>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f000 f8b8 	bl	8008d04 <__malloc_unlock>
 8008b94:	e794      	b.n	8008ac0 <_malloc_r+0x20>
 8008b96:	6005      	str	r5, [r0, #0]
 8008b98:	e7d6      	b.n	8008b48 <_malloc_r+0xa8>
 8008b9a:	bf00      	nop
 8008b9c:	20000cf8 	.word	0x20000cf8

08008ba0 <__sflush_r>:
 8008ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	0716      	lsls	r6, r2, #28
 8008baa:	4605      	mov	r5, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	d454      	bmi.n	8008c5a <__sflush_r+0xba>
 8008bb0:	684b      	ldr	r3, [r1, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dc02      	bgt.n	8008bbc <__sflush_r+0x1c>
 8008bb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dd48      	ble.n	8008c4e <__sflush_r+0xae>
 8008bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	d045      	beq.n	8008c4e <__sflush_r+0xae>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bc8:	682f      	ldr	r7, [r5, #0]
 8008bca:	6a21      	ldr	r1, [r4, #32]
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	d030      	beq.n	8008c32 <__sflush_r+0x92>
 8008bd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	0759      	lsls	r1, r3, #29
 8008bd6:	d505      	bpl.n	8008be4 <__sflush_r+0x44>
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bde:	b10b      	cbz	r3, 8008be4 <__sflush_r+0x44>
 8008be0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008be2:	1ad2      	subs	r2, r2, r3
 8008be4:	2300      	movs	r3, #0
 8008be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008be8:	6a21      	ldr	r1, [r4, #32]
 8008bea:	4628      	mov	r0, r5
 8008bec:	47b0      	blx	r6
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	d106      	bne.n	8008c02 <__sflush_r+0x62>
 8008bf4:	6829      	ldr	r1, [r5, #0]
 8008bf6:	291d      	cmp	r1, #29
 8008bf8:	d82b      	bhi.n	8008c52 <__sflush_r+0xb2>
 8008bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca4 <__sflush_r+0x104>)
 8008bfc:	410a      	asrs	r2, r1
 8008bfe:	07d6      	lsls	r6, r2, #31
 8008c00:	d427      	bmi.n	8008c52 <__sflush_r+0xb2>
 8008c02:	2200      	movs	r2, #0
 8008c04:	6062      	str	r2, [r4, #4]
 8008c06:	04d9      	lsls	r1, r3, #19
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	6022      	str	r2, [r4, #0]
 8008c0c:	d504      	bpl.n	8008c18 <__sflush_r+0x78>
 8008c0e:	1c42      	adds	r2, r0, #1
 8008c10:	d101      	bne.n	8008c16 <__sflush_r+0x76>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	b903      	cbnz	r3, 8008c18 <__sflush_r+0x78>
 8008c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c1a:	602f      	str	r7, [r5, #0]
 8008c1c:	b1b9      	cbz	r1, 8008c4e <__sflush_r+0xae>
 8008c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c22:	4299      	cmp	r1, r3
 8008c24:	d002      	beq.n	8008c2c <__sflush_r+0x8c>
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 fcce 	bl	80095c8 <_free_r>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c30:	e00d      	b.n	8008c4e <__sflush_r+0xae>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b0      	blx	r6
 8008c38:	4602      	mov	r2, r0
 8008c3a:	1c50      	adds	r0, r2, #1
 8008c3c:	d1c9      	bne.n	8008bd2 <__sflush_r+0x32>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0c6      	beq.n	8008bd2 <__sflush_r+0x32>
 8008c44:	2b1d      	cmp	r3, #29
 8008c46:	d001      	beq.n	8008c4c <__sflush_r+0xac>
 8008c48:	2b16      	cmp	r3, #22
 8008c4a:	d11e      	bne.n	8008c8a <__sflush_r+0xea>
 8008c4c:	602f      	str	r7, [r5, #0]
 8008c4e:	2000      	movs	r0, #0
 8008c50:	e022      	b.n	8008c98 <__sflush_r+0xf8>
 8008c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c56:	b21b      	sxth	r3, r3
 8008c58:	e01b      	b.n	8008c92 <__sflush_r+0xf2>
 8008c5a:	690f      	ldr	r7, [r1, #16]
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	d0f6      	beq.n	8008c4e <__sflush_r+0xae>
 8008c60:	0793      	lsls	r3, r2, #30
 8008c62:	680e      	ldr	r6, [r1, #0]
 8008c64:	bf08      	it	eq
 8008c66:	694b      	ldreq	r3, [r1, #20]
 8008c68:	600f      	str	r7, [r1, #0]
 8008c6a:	bf18      	it	ne
 8008c6c:	2300      	movne	r3, #0
 8008c6e:	eba6 0807 	sub.w	r8, r6, r7
 8008c72:	608b      	str	r3, [r1, #8]
 8008c74:	f1b8 0f00 	cmp.w	r8, #0
 8008c78:	dde9      	ble.n	8008c4e <__sflush_r+0xae>
 8008c7a:	6a21      	ldr	r1, [r4, #32]
 8008c7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c7e:	4643      	mov	r3, r8
 8008c80:	463a      	mov	r2, r7
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b0      	blx	r6
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dc08      	bgt.n	8008c9c <__sflush_r+0xfc>
 8008c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	4407      	add	r7, r0
 8008c9e:	eba8 0800 	sub.w	r8, r8, r0
 8008ca2:	e7e7      	b.n	8008c74 <__sflush_r+0xd4>
 8008ca4:	dfbffffe 	.word	0xdfbffffe

08008ca8 <_fflush_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	690b      	ldr	r3, [r1, #16]
 8008cac:	4605      	mov	r5, r0
 8008cae:	460c      	mov	r4, r1
 8008cb0:	b913      	cbnz	r3, 8008cb8 <_fflush_r+0x10>
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	b118      	cbz	r0, 8008cc2 <_fflush_r+0x1a>
 8008cba:	6a03      	ldr	r3, [r0, #32]
 8008cbc:	b90b      	cbnz	r3, 8008cc2 <_fflush_r+0x1a>
 8008cbe:	f7ff f877 	bl	8007db0 <__sinit>
 8008cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f3      	beq.n	8008cb2 <_fflush_r+0xa>
 8008cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ccc:	07d0      	lsls	r0, r2, #31
 8008cce:	d404      	bmi.n	8008cda <_fflush_r+0x32>
 8008cd0:	0599      	lsls	r1, r3, #22
 8008cd2:	d402      	bmi.n	8008cda <_fflush_r+0x32>
 8008cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cd6:	f7ff f8d8 	bl	8007e8a <__retarget_lock_acquire_recursive>
 8008cda:	4628      	mov	r0, r5
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f7ff ff5f 	bl	8008ba0 <__sflush_r>
 8008ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ce4:	07da      	lsls	r2, r3, #31
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	d4e4      	bmi.n	8008cb4 <_fflush_r+0xc>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	059b      	lsls	r3, r3, #22
 8008cee:	d4e1      	bmi.n	8008cb4 <_fflush_r+0xc>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cf2:	f7ff f8cb 	bl	8007e8c <__retarget_lock_release_recursive>
 8008cf6:	e7dd      	b.n	8008cb4 <_fflush_r+0xc>

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	@ (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff b8c6 	b.w	8007e8a <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20000cf0 	.word	0x20000cf0

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	@ (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff b8c1 	b.w	8007e8c <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20000cf0 	.word	0x20000cf0

08008d10 <_Balloc>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	69c6      	ldr	r6, [r0, #28]
 8008d14:	4604      	mov	r4, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	b976      	cbnz	r6, 8008d38 <_Balloc+0x28>
 8008d1a:	2010      	movs	r0, #16
 8008d1c:	f7ff fe96 	bl	8008a4c <malloc>
 8008d20:	4602      	mov	r2, r0
 8008d22:	61e0      	str	r0, [r4, #28]
 8008d24:	b920      	cbnz	r0, 8008d30 <_Balloc+0x20>
 8008d26:	4b18      	ldr	r3, [pc, #96]	@ (8008d88 <_Balloc+0x78>)
 8008d28:	4818      	ldr	r0, [pc, #96]	@ (8008d8c <_Balloc+0x7c>)
 8008d2a:	216b      	movs	r1, #107	@ 0x6b
 8008d2c:	f000 fc1a 	bl	8009564 <__assert_func>
 8008d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d34:	6006      	str	r6, [r0, #0]
 8008d36:	60c6      	str	r6, [r0, #12]
 8008d38:	69e6      	ldr	r6, [r4, #28]
 8008d3a:	68f3      	ldr	r3, [r6, #12]
 8008d3c:	b183      	cbz	r3, 8008d60 <_Balloc+0x50>
 8008d3e:	69e3      	ldr	r3, [r4, #28]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d46:	b9b8      	cbnz	r0, 8008d78 <_Balloc+0x68>
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d4e:	1d72      	adds	r2, r6, #5
 8008d50:	0092      	lsls	r2, r2, #2
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fc24 	bl	80095a0 <_calloc_r>
 8008d58:	b160      	cbz	r0, 8008d74 <_Balloc+0x64>
 8008d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d5e:	e00e      	b.n	8008d7e <_Balloc+0x6e>
 8008d60:	2221      	movs	r2, #33	@ 0x21
 8008d62:	2104      	movs	r1, #4
 8008d64:	4620      	mov	r0, r4
 8008d66:	f000 fc1b 	bl	80095a0 <_calloc_r>
 8008d6a:	69e3      	ldr	r3, [r4, #28]
 8008d6c:	60f0      	str	r0, [r6, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e4      	bne.n	8008d3e <_Balloc+0x2e>
 8008d74:	2000      	movs	r0, #0
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	6802      	ldr	r2, [r0, #0]
 8008d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d84:	e7f7      	b.n	8008d76 <_Balloc+0x66>
 8008d86:	bf00      	nop
 8008d88:	08009c81 	.word	0x08009c81
 8008d8c:	08009d01 	.word	0x08009d01

08008d90 <_Bfree>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	69c6      	ldr	r6, [r0, #28]
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b976      	cbnz	r6, 8008db8 <_Bfree+0x28>
 8008d9a:	2010      	movs	r0, #16
 8008d9c:	f7ff fe56 	bl	8008a4c <malloc>
 8008da0:	4602      	mov	r2, r0
 8008da2:	61e8      	str	r0, [r5, #28]
 8008da4:	b920      	cbnz	r0, 8008db0 <_Bfree+0x20>
 8008da6:	4b09      	ldr	r3, [pc, #36]	@ (8008dcc <_Bfree+0x3c>)
 8008da8:	4809      	ldr	r0, [pc, #36]	@ (8008dd0 <_Bfree+0x40>)
 8008daa:	218f      	movs	r1, #143	@ 0x8f
 8008dac:	f000 fbda 	bl	8009564 <__assert_func>
 8008db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008db4:	6006      	str	r6, [r0, #0]
 8008db6:	60c6      	str	r6, [r0, #12]
 8008db8:	b13c      	cbz	r4, 8008dca <_Bfree+0x3a>
 8008dba:	69eb      	ldr	r3, [r5, #28]
 8008dbc:	6862      	ldr	r2, [r4, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc4:	6021      	str	r1, [r4, #0]
 8008dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	08009c81 	.word	0x08009c81
 8008dd0:	08009d01 	.word	0x08009d01

08008dd4 <__multadd>:
 8008dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	690d      	ldr	r5, [r1, #16]
 8008dda:	4607      	mov	r7, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	461e      	mov	r6, r3
 8008de0:	f101 0c14 	add.w	ip, r1, #20
 8008de4:	2000      	movs	r0, #0
 8008de6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dea:	b299      	uxth	r1, r3
 8008dec:	fb02 6101 	mla	r1, r2, r1, r6
 8008df0:	0c1e      	lsrs	r6, r3, #16
 8008df2:	0c0b      	lsrs	r3, r1, #16
 8008df4:	fb02 3306 	mla	r3, r2, r6, r3
 8008df8:	b289      	uxth	r1, r1
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e00:	4285      	cmp	r5, r0
 8008e02:	f84c 1b04 	str.w	r1, [ip], #4
 8008e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e0a:	dcec      	bgt.n	8008de6 <__multadd+0x12>
 8008e0c:	b30e      	cbz	r6, 8008e52 <__multadd+0x7e>
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc19      	bgt.n	8008e48 <__multadd+0x74>
 8008e14:	6861      	ldr	r1, [r4, #4]
 8008e16:	4638      	mov	r0, r7
 8008e18:	3101      	adds	r1, #1
 8008e1a:	f7ff ff79 	bl	8008d10 <_Balloc>
 8008e1e:	4680      	mov	r8, r0
 8008e20:	b928      	cbnz	r0, 8008e2e <__multadd+0x5a>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <__multadd+0x84>)
 8008e26:	480d      	ldr	r0, [pc, #52]	@ (8008e5c <__multadd+0x88>)
 8008e28:	21ba      	movs	r1, #186	@ 0xba
 8008e2a:	f000 fb9b 	bl	8009564 <__assert_func>
 8008e2e:	6922      	ldr	r2, [r4, #16]
 8008e30:	3202      	adds	r2, #2
 8008e32:	f104 010c 	add.w	r1, r4, #12
 8008e36:	0092      	lsls	r2, r2, #2
 8008e38:	300c      	adds	r0, #12
 8008e3a:	f000 fb85 	bl	8009548 <memcpy>
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7ff ffa5 	bl	8008d90 <_Bfree>
 8008e46:	4644      	mov	r4, r8
 8008e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	615e      	str	r6, [r3, #20]
 8008e50:	6125      	str	r5, [r4, #16]
 8008e52:	4620      	mov	r0, r4
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	08009cf0 	.word	0x08009cf0
 8008e5c:	08009d01 	.word	0x08009d01

08008e60 <__hi0bits>:
 8008e60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e64:	4603      	mov	r3, r0
 8008e66:	bf36      	itet	cc
 8008e68:	0403      	lslcc	r3, r0, #16
 8008e6a:	2000      	movcs	r0, #0
 8008e6c:	2010      	movcc	r0, #16
 8008e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e72:	bf3c      	itt	cc
 8008e74:	021b      	lslcc	r3, r3, #8
 8008e76:	3008      	addcc	r0, #8
 8008e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e7c:	bf3c      	itt	cc
 8008e7e:	011b      	lslcc	r3, r3, #4
 8008e80:	3004      	addcc	r0, #4
 8008e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e86:	bf3c      	itt	cc
 8008e88:	009b      	lslcc	r3, r3, #2
 8008e8a:	3002      	addcc	r0, #2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	db05      	blt.n	8008e9c <__hi0bits+0x3c>
 8008e90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e94:	f100 0001 	add.w	r0, r0, #1
 8008e98:	bf08      	it	eq
 8008e9a:	2020      	moveq	r0, #32
 8008e9c:	4770      	bx	lr

08008e9e <__lo0bits>:
 8008e9e:	6803      	ldr	r3, [r0, #0]
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	f013 0007 	ands.w	r0, r3, #7
 8008ea6:	d00b      	beq.n	8008ec0 <__lo0bits+0x22>
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	d421      	bmi.n	8008ef0 <__lo0bits+0x52>
 8008eac:	0798      	lsls	r0, r3, #30
 8008eae:	bf49      	itett	mi
 8008eb0:	085b      	lsrmi	r3, r3, #1
 8008eb2:	089b      	lsrpl	r3, r3, #2
 8008eb4:	2001      	movmi	r0, #1
 8008eb6:	6013      	strmi	r3, [r2, #0]
 8008eb8:	bf5c      	itt	pl
 8008eba:	6013      	strpl	r3, [r2, #0]
 8008ebc:	2002      	movpl	r0, #2
 8008ebe:	4770      	bx	lr
 8008ec0:	b299      	uxth	r1, r3
 8008ec2:	b909      	cbnz	r1, 8008ec8 <__lo0bits+0x2a>
 8008ec4:	0c1b      	lsrs	r3, r3, #16
 8008ec6:	2010      	movs	r0, #16
 8008ec8:	b2d9      	uxtb	r1, r3
 8008eca:	b909      	cbnz	r1, 8008ed0 <__lo0bits+0x32>
 8008ecc:	3008      	adds	r0, #8
 8008ece:	0a1b      	lsrs	r3, r3, #8
 8008ed0:	0719      	lsls	r1, r3, #28
 8008ed2:	bf04      	itt	eq
 8008ed4:	091b      	lsreq	r3, r3, #4
 8008ed6:	3004      	addeq	r0, #4
 8008ed8:	0799      	lsls	r1, r3, #30
 8008eda:	bf04      	itt	eq
 8008edc:	089b      	lsreq	r3, r3, #2
 8008ede:	3002      	addeq	r0, #2
 8008ee0:	07d9      	lsls	r1, r3, #31
 8008ee2:	d403      	bmi.n	8008eec <__lo0bits+0x4e>
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	f100 0001 	add.w	r0, r0, #1
 8008eea:	d003      	beq.n	8008ef4 <__lo0bits+0x56>
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	4770      	bx	lr
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4770      	bx	lr
 8008ef4:	2020      	movs	r0, #32
 8008ef6:	4770      	bx	lr

08008ef8 <__i2b>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	460c      	mov	r4, r1
 8008efc:	2101      	movs	r1, #1
 8008efe:	f7ff ff07 	bl	8008d10 <_Balloc>
 8008f02:	4602      	mov	r2, r0
 8008f04:	b928      	cbnz	r0, 8008f12 <__i2b+0x1a>
 8008f06:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <__i2b+0x24>)
 8008f08:	4805      	ldr	r0, [pc, #20]	@ (8008f20 <__i2b+0x28>)
 8008f0a:	f240 1145 	movw	r1, #325	@ 0x145
 8008f0e:	f000 fb29 	bl	8009564 <__assert_func>
 8008f12:	2301      	movs	r3, #1
 8008f14:	6144      	str	r4, [r0, #20]
 8008f16:	6103      	str	r3, [r0, #16]
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009cf0 	.word	0x08009cf0
 8008f20:	08009d01 	.word	0x08009d01

08008f24 <__multiply>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	4614      	mov	r4, r2
 8008f2a:	690a      	ldr	r2, [r1, #16]
 8008f2c:	6923      	ldr	r3, [r4, #16]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	bfa8      	it	ge
 8008f32:	4623      	movge	r3, r4
 8008f34:	460f      	mov	r7, r1
 8008f36:	bfa4      	itt	ge
 8008f38:	460c      	movge	r4, r1
 8008f3a:	461f      	movge	r7, r3
 8008f3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	6861      	ldr	r1, [r4, #4]
 8008f48:	eb0a 0609 	add.w	r6, sl, r9
 8008f4c:	42b3      	cmp	r3, r6
 8008f4e:	b085      	sub	sp, #20
 8008f50:	bfb8      	it	lt
 8008f52:	3101      	addlt	r1, #1
 8008f54:	f7ff fedc 	bl	8008d10 <_Balloc>
 8008f58:	b930      	cbnz	r0, 8008f68 <__multiply+0x44>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b44      	ldr	r3, [pc, #272]	@ (8009070 <__multiply+0x14c>)
 8008f5e:	4845      	ldr	r0, [pc, #276]	@ (8009074 <__multiply+0x150>)
 8008f60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f64:	f000 fafe 	bl	8009564 <__assert_func>
 8008f68:	f100 0514 	add.w	r5, r0, #20
 8008f6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f70:	462b      	mov	r3, r5
 8008f72:	2200      	movs	r2, #0
 8008f74:	4543      	cmp	r3, r8
 8008f76:	d321      	bcc.n	8008fbc <__multiply+0x98>
 8008f78:	f107 0114 	add.w	r1, r7, #20
 8008f7c:	f104 0214 	add.w	r2, r4, #20
 8008f80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f88:	9302      	str	r3, [sp, #8]
 8008f8a:	1b13      	subs	r3, r2, r4
 8008f8c:	3b15      	subs	r3, #21
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	3304      	adds	r3, #4
 8008f94:	f104 0715 	add.w	r7, r4, #21
 8008f98:	42ba      	cmp	r2, r7
 8008f9a:	bf38      	it	cc
 8008f9c:	2304      	movcc	r3, #4
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	9b02      	ldr	r3, [sp, #8]
 8008fa2:	9103      	str	r1, [sp, #12]
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	d80c      	bhi.n	8008fc2 <__multiply+0x9e>
 8008fa8:	2e00      	cmp	r6, #0
 8008faa:	dd03      	ble.n	8008fb4 <__multiply+0x90>
 8008fac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d05b      	beq.n	800906c <__multiply+0x148>
 8008fb4:	6106      	str	r6, [r0, #16]
 8008fb6:	b005      	add	sp, #20
 8008fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbc:	f843 2b04 	str.w	r2, [r3], #4
 8008fc0:	e7d8      	b.n	8008f74 <__multiply+0x50>
 8008fc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fc6:	f1ba 0f00 	cmp.w	sl, #0
 8008fca:	d024      	beq.n	8009016 <__multiply+0xf2>
 8008fcc:	f104 0e14 	add.w	lr, r4, #20
 8008fd0:	46a9      	mov	r9, r5
 8008fd2:	f04f 0c00 	mov.w	ip, #0
 8008fd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fda:	f8d9 3000 	ldr.w	r3, [r9]
 8008fde:	fa1f fb87 	uxth.w	fp, r7
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008fe8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008fec:	f8d9 7000 	ldr.w	r7, [r9]
 8008ff0:	4463      	add	r3, ip
 8008ff2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ff6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ffa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009004:	4572      	cmp	r2, lr
 8009006:	f849 3b04 	str.w	r3, [r9], #4
 800900a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800900e:	d8e2      	bhi.n	8008fd6 <__multiply+0xb2>
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	f845 c003 	str.w	ip, [r5, r3]
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800901c:	3104      	adds	r1, #4
 800901e:	f1b9 0f00 	cmp.w	r9, #0
 8009022:	d021      	beq.n	8009068 <__multiply+0x144>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	f104 0c14 	add.w	ip, r4, #20
 800902a:	46ae      	mov	lr, r5
 800902c:	f04f 0a00 	mov.w	sl, #0
 8009030:	f8bc b000 	ldrh.w	fp, [ip]
 8009034:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009038:	fb09 770b 	mla	r7, r9, fp, r7
 800903c:	4457      	add	r7, sl
 800903e:	b29b      	uxth	r3, r3
 8009040:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009044:	f84e 3b04 	str.w	r3, [lr], #4
 8009048:	f85c 3b04 	ldr.w	r3, [ip], #4
 800904c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009050:	f8be 3000 	ldrh.w	r3, [lr]
 8009054:	fb09 330a 	mla	r3, r9, sl, r3
 8009058:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800905c:	4562      	cmp	r2, ip
 800905e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009062:	d8e5      	bhi.n	8009030 <__multiply+0x10c>
 8009064:	9f01      	ldr	r7, [sp, #4]
 8009066:	51eb      	str	r3, [r5, r7]
 8009068:	3504      	adds	r5, #4
 800906a:	e799      	b.n	8008fa0 <__multiply+0x7c>
 800906c:	3e01      	subs	r6, #1
 800906e:	e79b      	b.n	8008fa8 <__multiply+0x84>
 8009070:	08009cf0 	.word	0x08009cf0
 8009074:	08009d01 	.word	0x08009d01

08009078 <__pow5mult>:
 8009078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800907c:	4615      	mov	r5, r2
 800907e:	f012 0203 	ands.w	r2, r2, #3
 8009082:	4607      	mov	r7, r0
 8009084:	460e      	mov	r6, r1
 8009086:	d007      	beq.n	8009098 <__pow5mult+0x20>
 8009088:	4c25      	ldr	r4, [pc, #148]	@ (8009120 <__pow5mult+0xa8>)
 800908a:	3a01      	subs	r2, #1
 800908c:	2300      	movs	r3, #0
 800908e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009092:	f7ff fe9f 	bl	8008dd4 <__multadd>
 8009096:	4606      	mov	r6, r0
 8009098:	10ad      	asrs	r5, r5, #2
 800909a:	d03d      	beq.n	8009118 <__pow5mult+0xa0>
 800909c:	69fc      	ldr	r4, [r7, #28]
 800909e:	b97c      	cbnz	r4, 80090c0 <__pow5mult+0x48>
 80090a0:	2010      	movs	r0, #16
 80090a2:	f7ff fcd3 	bl	8008a4c <malloc>
 80090a6:	4602      	mov	r2, r0
 80090a8:	61f8      	str	r0, [r7, #28]
 80090aa:	b928      	cbnz	r0, 80090b8 <__pow5mult+0x40>
 80090ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009124 <__pow5mult+0xac>)
 80090ae:	481e      	ldr	r0, [pc, #120]	@ (8009128 <__pow5mult+0xb0>)
 80090b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090b4:	f000 fa56 	bl	8009564 <__assert_func>
 80090b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090bc:	6004      	str	r4, [r0, #0]
 80090be:	60c4      	str	r4, [r0, #12]
 80090c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090c8:	b94c      	cbnz	r4, 80090de <__pow5mult+0x66>
 80090ca:	f240 2171 	movw	r1, #625	@ 0x271
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7ff ff12 	bl	8008ef8 <__i2b>
 80090d4:	2300      	movs	r3, #0
 80090d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090da:	4604      	mov	r4, r0
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	f04f 0900 	mov.w	r9, #0
 80090e2:	07eb      	lsls	r3, r5, #31
 80090e4:	d50a      	bpl.n	80090fc <__pow5mult+0x84>
 80090e6:	4631      	mov	r1, r6
 80090e8:	4622      	mov	r2, r4
 80090ea:	4638      	mov	r0, r7
 80090ec:	f7ff ff1a 	bl	8008f24 <__multiply>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4680      	mov	r8, r0
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff fe4b 	bl	8008d90 <_Bfree>
 80090fa:	4646      	mov	r6, r8
 80090fc:	106d      	asrs	r5, r5, #1
 80090fe:	d00b      	beq.n	8009118 <__pow5mult+0xa0>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	b938      	cbnz	r0, 8009114 <__pow5mult+0x9c>
 8009104:	4622      	mov	r2, r4
 8009106:	4621      	mov	r1, r4
 8009108:	4638      	mov	r0, r7
 800910a:	f7ff ff0b 	bl	8008f24 <__multiply>
 800910e:	6020      	str	r0, [r4, #0]
 8009110:	f8c0 9000 	str.w	r9, [r0]
 8009114:	4604      	mov	r4, r0
 8009116:	e7e4      	b.n	80090e2 <__pow5mult+0x6a>
 8009118:	4630      	mov	r0, r6
 800911a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800911e:	bf00      	nop
 8009120:	08009d5c 	.word	0x08009d5c
 8009124:	08009c81 	.word	0x08009c81
 8009128:	08009d01 	.word	0x08009d01

0800912c <__lshift>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	460c      	mov	r4, r1
 8009132:	6849      	ldr	r1, [r1, #4]
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	4607      	mov	r7, r0
 800913e:	4691      	mov	r9, r2
 8009140:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009144:	f108 0601 	add.w	r6, r8, #1
 8009148:	42b3      	cmp	r3, r6
 800914a:	db0b      	blt.n	8009164 <__lshift+0x38>
 800914c:	4638      	mov	r0, r7
 800914e:	f7ff fddf 	bl	8008d10 <_Balloc>
 8009152:	4605      	mov	r5, r0
 8009154:	b948      	cbnz	r0, 800916a <__lshift+0x3e>
 8009156:	4602      	mov	r2, r0
 8009158:	4b28      	ldr	r3, [pc, #160]	@ (80091fc <__lshift+0xd0>)
 800915a:	4829      	ldr	r0, [pc, #164]	@ (8009200 <__lshift+0xd4>)
 800915c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009160:	f000 fa00 	bl	8009564 <__assert_func>
 8009164:	3101      	adds	r1, #1
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	e7ee      	b.n	8009148 <__lshift+0x1c>
 800916a:	2300      	movs	r3, #0
 800916c:	f100 0114 	add.w	r1, r0, #20
 8009170:	f100 0210 	add.w	r2, r0, #16
 8009174:	4618      	mov	r0, r3
 8009176:	4553      	cmp	r3, sl
 8009178:	db33      	blt.n	80091e2 <__lshift+0xb6>
 800917a:	6920      	ldr	r0, [r4, #16]
 800917c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009180:	f104 0314 	add.w	r3, r4, #20
 8009184:	f019 091f 	ands.w	r9, r9, #31
 8009188:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800918c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009190:	d02b      	beq.n	80091ea <__lshift+0xbe>
 8009192:	f1c9 0e20 	rsb	lr, r9, #32
 8009196:	468a      	mov	sl, r1
 8009198:	2200      	movs	r2, #0
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	fa00 f009 	lsl.w	r0, r0, r9
 80091a0:	4310      	orrs	r0, r2
 80091a2:	f84a 0b04 	str.w	r0, [sl], #4
 80091a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091aa:	459c      	cmp	ip, r3
 80091ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80091b0:	d8f3      	bhi.n	800919a <__lshift+0x6e>
 80091b2:	ebac 0304 	sub.w	r3, ip, r4
 80091b6:	3b15      	subs	r3, #21
 80091b8:	f023 0303 	bic.w	r3, r3, #3
 80091bc:	3304      	adds	r3, #4
 80091be:	f104 0015 	add.w	r0, r4, #21
 80091c2:	4584      	cmp	ip, r0
 80091c4:	bf38      	it	cc
 80091c6:	2304      	movcc	r3, #4
 80091c8:	50ca      	str	r2, [r1, r3]
 80091ca:	b10a      	cbz	r2, 80091d0 <__lshift+0xa4>
 80091cc:	f108 0602 	add.w	r6, r8, #2
 80091d0:	3e01      	subs	r6, #1
 80091d2:	4638      	mov	r0, r7
 80091d4:	612e      	str	r6, [r5, #16]
 80091d6:	4621      	mov	r1, r4
 80091d8:	f7ff fdda 	bl	8008d90 <_Bfree>
 80091dc:	4628      	mov	r0, r5
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091e6:	3301      	adds	r3, #1
 80091e8:	e7c5      	b.n	8009176 <__lshift+0x4a>
 80091ea:	3904      	subs	r1, #4
 80091ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091f4:	459c      	cmp	ip, r3
 80091f6:	d8f9      	bhi.n	80091ec <__lshift+0xc0>
 80091f8:	e7ea      	b.n	80091d0 <__lshift+0xa4>
 80091fa:	bf00      	nop
 80091fc:	08009cf0 	.word	0x08009cf0
 8009200:	08009d01 	.word	0x08009d01

08009204 <__mcmp>:
 8009204:	690a      	ldr	r2, [r1, #16]
 8009206:	4603      	mov	r3, r0
 8009208:	6900      	ldr	r0, [r0, #16]
 800920a:	1a80      	subs	r0, r0, r2
 800920c:	b530      	push	{r4, r5, lr}
 800920e:	d10e      	bne.n	800922e <__mcmp+0x2a>
 8009210:	3314      	adds	r3, #20
 8009212:	3114      	adds	r1, #20
 8009214:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009218:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800921c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009220:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009224:	4295      	cmp	r5, r2
 8009226:	d003      	beq.n	8009230 <__mcmp+0x2c>
 8009228:	d205      	bcs.n	8009236 <__mcmp+0x32>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800922e:	bd30      	pop	{r4, r5, pc}
 8009230:	42a3      	cmp	r3, r4
 8009232:	d3f3      	bcc.n	800921c <__mcmp+0x18>
 8009234:	e7fb      	b.n	800922e <__mcmp+0x2a>
 8009236:	2001      	movs	r0, #1
 8009238:	e7f9      	b.n	800922e <__mcmp+0x2a>
	...

0800923c <__mdiff>:
 800923c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4689      	mov	r9, r1
 8009242:	4606      	mov	r6, r0
 8009244:	4611      	mov	r1, r2
 8009246:	4648      	mov	r0, r9
 8009248:	4614      	mov	r4, r2
 800924a:	f7ff ffdb 	bl	8009204 <__mcmp>
 800924e:	1e05      	subs	r5, r0, #0
 8009250:	d112      	bne.n	8009278 <__mdiff+0x3c>
 8009252:	4629      	mov	r1, r5
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff fd5b 	bl	8008d10 <_Balloc>
 800925a:	4602      	mov	r2, r0
 800925c:	b928      	cbnz	r0, 800926a <__mdiff+0x2e>
 800925e:	4b3f      	ldr	r3, [pc, #252]	@ (800935c <__mdiff+0x120>)
 8009260:	f240 2137 	movw	r1, #567	@ 0x237
 8009264:	483e      	ldr	r0, [pc, #248]	@ (8009360 <__mdiff+0x124>)
 8009266:	f000 f97d 	bl	8009564 <__assert_func>
 800926a:	2301      	movs	r3, #1
 800926c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009270:	4610      	mov	r0, r2
 8009272:	b003      	add	sp, #12
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	bfbc      	itt	lt
 800927a:	464b      	movlt	r3, r9
 800927c:	46a1      	movlt	r9, r4
 800927e:	4630      	mov	r0, r6
 8009280:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009284:	bfba      	itte	lt
 8009286:	461c      	movlt	r4, r3
 8009288:	2501      	movlt	r5, #1
 800928a:	2500      	movge	r5, #0
 800928c:	f7ff fd40 	bl	8008d10 <_Balloc>
 8009290:	4602      	mov	r2, r0
 8009292:	b918      	cbnz	r0, 800929c <__mdiff+0x60>
 8009294:	4b31      	ldr	r3, [pc, #196]	@ (800935c <__mdiff+0x120>)
 8009296:	f240 2145 	movw	r1, #581	@ 0x245
 800929a:	e7e3      	b.n	8009264 <__mdiff+0x28>
 800929c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092a0:	6926      	ldr	r6, [r4, #16]
 80092a2:	60c5      	str	r5, [r0, #12]
 80092a4:	f109 0310 	add.w	r3, r9, #16
 80092a8:	f109 0514 	add.w	r5, r9, #20
 80092ac:	f104 0e14 	add.w	lr, r4, #20
 80092b0:	f100 0b14 	add.w	fp, r0, #20
 80092b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	46d9      	mov	r9, fp
 80092c0:	f04f 0c00 	mov.w	ip, #0
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	fa1f f38a 	uxth.w	r3, sl
 80092d4:	4619      	mov	r1, r3
 80092d6:	b283      	uxth	r3, r0
 80092d8:	1acb      	subs	r3, r1, r3
 80092da:	0c00      	lsrs	r0, r0, #16
 80092dc:	4463      	add	r3, ip
 80092de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092ec:	4576      	cmp	r6, lr
 80092ee:	f849 3b04 	str.w	r3, [r9], #4
 80092f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092f6:	d8e5      	bhi.n	80092c4 <__mdiff+0x88>
 80092f8:	1b33      	subs	r3, r6, r4
 80092fa:	3b15      	subs	r3, #21
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	3415      	adds	r4, #21
 8009302:	3304      	adds	r3, #4
 8009304:	42a6      	cmp	r6, r4
 8009306:	bf38      	it	cc
 8009308:	2304      	movcc	r3, #4
 800930a:	441d      	add	r5, r3
 800930c:	445b      	add	r3, fp
 800930e:	461e      	mov	r6, r3
 8009310:	462c      	mov	r4, r5
 8009312:	4544      	cmp	r4, r8
 8009314:	d30e      	bcc.n	8009334 <__mdiff+0xf8>
 8009316:	f108 0103 	add.w	r1, r8, #3
 800931a:	1b49      	subs	r1, r1, r5
 800931c:	f021 0103 	bic.w	r1, r1, #3
 8009320:	3d03      	subs	r5, #3
 8009322:	45a8      	cmp	r8, r5
 8009324:	bf38      	it	cc
 8009326:	2100      	movcc	r1, #0
 8009328:	440b      	add	r3, r1
 800932a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800932e:	b191      	cbz	r1, 8009356 <__mdiff+0x11a>
 8009330:	6117      	str	r7, [r2, #16]
 8009332:	e79d      	b.n	8009270 <__mdiff+0x34>
 8009334:	f854 1b04 	ldr.w	r1, [r4], #4
 8009338:	46e6      	mov	lr, ip
 800933a:	0c08      	lsrs	r0, r1, #16
 800933c:	fa1c fc81 	uxtah	ip, ip, r1
 8009340:	4471      	add	r1, lr
 8009342:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009346:	b289      	uxth	r1, r1
 8009348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800934c:	f846 1b04 	str.w	r1, [r6], #4
 8009350:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009354:	e7dd      	b.n	8009312 <__mdiff+0xd6>
 8009356:	3f01      	subs	r7, #1
 8009358:	e7e7      	b.n	800932a <__mdiff+0xee>
 800935a:	bf00      	nop
 800935c:	08009cf0 	.word	0x08009cf0
 8009360:	08009d01 	.word	0x08009d01

08009364 <__d2b>:
 8009364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009368:	460f      	mov	r7, r1
 800936a:	2101      	movs	r1, #1
 800936c:	ec59 8b10 	vmov	r8, r9, d0
 8009370:	4616      	mov	r6, r2
 8009372:	f7ff fccd 	bl	8008d10 <_Balloc>
 8009376:	4604      	mov	r4, r0
 8009378:	b930      	cbnz	r0, 8009388 <__d2b+0x24>
 800937a:	4602      	mov	r2, r0
 800937c:	4b23      	ldr	r3, [pc, #140]	@ (800940c <__d2b+0xa8>)
 800937e:	4824      	ldr	r0, [pc, #144]	@ (8009410 <__d2b+0xac>)
 8009380:	f240 310f 	movw	r1, #783	@ 0x30f
 8009384:	f000 f8ee 	bl	8009564 <__assert_func>
 8009388:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800938c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009390:	b10d      	cbz	r5, 8009396 <__d2b+0x32>
 8009392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	f1b8 0300 	subs.w	r3, r8, #0
 800939c:	d023      	beq.n	80093e6 <__d2b+0x82>
 800939e:	4668      	mov	r0, sp
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	f7ff fd7c 	bl	8008e9e <__lo0bits>
 80093a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093aa:	b1d0      	cbz	r0, 80093e2 <__d2b+0x7e>
 80093ac:	f1c0 0320 	rsb	r3, r0, #32
 80093b0:	fa02 f303 	lsl.w	r3, r2, r3
 80093b4:	430b      	orrs	r3, r1
 80093b6:	40c2      	lsrs	r2, r0
 80093b8:	6163      	str	r3, [r4, #20]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	9b01      	ldr	r3, [sp, #4]
 80093be:	61a3      	str	r3, [r4, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf0c      	ite	eq
 80093c4:	2201      	moveq	r2, #1
 80093c6:	2202      	movne	r2, #2
 80093c8:	6122      	str	r2, [r4, #16]
 80093ca:	b1a5      	cbz	r5, 80093f6 <__d2b+0x92>
 80093cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093d0:	4405      	add	r5, r0
 80093d2:	603d      	str	r5, [r7, #0]
 80093d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093d8:	6030      	str	r0, [r6, #0]
 80093da:	4620      	mov	r0, r4
 80093dc:	b003      	add	sp, #12
 80093de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e2:	6161      	str	r1, [r4, #20]
 80093e4:	e7ea      	b.n	80093bc <__d2b+0x58>
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fd59 	bl	8008e9e <__lo0bits>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	3020      	adds	r0, #32
 80093f2:	2201      	movs	r2, #1
 80093f4:	e7e8      	b.n	80093c8 <__d2b+0x64>
 80093f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093fe:	6038      	str	r0, [r7, #0]
 8009400:	6918      	ldr	r0, [r3, #16]
 8009402:	f7ff fd2d 	bl	8008e60 <__hi0bits>
 8009406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940a:	e7e5      	b.n	80093d8 <__d2b+0x74>
 800940c:	08009cf0 	.word	0x08009cf0
 8009410:	08009d01 	.word	0x08009d01

08009414 <__sread>:
 8009414:	b510      	push	{r4, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	f000 f860 	bl	80094e0 <_read_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	bfab      	itete	ge
 8009424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009426:	89a3      	ldrhlt	r3, [r4, #12]
 8009428:	181b      	addge	r3, r3, r0
 800942a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800942e:	bfac      	ite	ge
 8009430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009432:	81a3      	strhlt	r3, [r4, #12]
 8009434:	bd10      	pop	{r4, pc}

08009436 <__swrite>:
 8009436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	461f      	mov	r7, r3
 800943c:	898b      	ldrh	r3, [r1, #12]
 800943e:	05db      	lsls	r3, r3, #23
 8009440:	4605      	mov	r5, r0
 8009442:	460c      	mov	r4, r1
 8009444:	4616      	mov	r6, r2
 8009446:	d505      	bpl.n	8009454 <__swrite+0x1e>
 8009448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944c:	2302      	movs	r3, #2
 800944e:	2200      	movs	r2, #0
 8009450:	f000 f834 	bl	80094bc <_lseek_r>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800945a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800945e:	81a3      	strh	r3, [r4, #12]
 8009460:	4632      	mov	r2, r6
 8009462:	463b      	mov	r3, r7
 8009464:	4628      	mov	r0, r5
 8009466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946a:	f000 b85b 	b.w	8009524 <_write_r>

0800946e <__sseek>:
 800946e:	b510      	push	{r4, lr}
 8009470:	460c      	mov	r4, r1
 8009472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009476:	f000 f821 	bl	80094bc <_lseek_r>
 800947a:	1c43      	adds	r3, r0, #1
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	bf15      	itete	ne
 8009480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800948a:	81a3      	strheq	r3, [r4, #12]
 800948c:	bf18      	it	ne
 800948e:	81a3      	strhne	r3, [r4, #12]
 8009490:	bd10      	pop	{r4, pc}

08009492 <__sclose>:
 8009492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009496:	f000 b801 	b.w	800949c <_close_r>
	...

0800949c <_close_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	@ (80094b8 <_close_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f8 f9d0 	bl	800184c <_close>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_close_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_close_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000cfc 	.word	0x20000cfc

080094bc <_lseek_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_lseek_r+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f8 f9e5 	bl	800189a <_lseek>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_lseek_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_lseek_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20000cfc 	.word	0x20000cfc

080094e0 <_read_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	@ (8009500 <_read_r+0x20>)
 80094e4:	4604      	mov	r4, r0
 80094e6:	4608      	mov	r0, r1
 80094e8:	4611      	mov	r1, r2
 80094ea:	2200      	movs	r2, #0
 80094ec:	602a      	str	r2, [r5, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7f8 f973 	bl	80017da <_read>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_read_r+0x1e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_read_r+0x1e>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20000cfc 	.word	0x20000cfc

08009504 <_sbrk_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	@ (8009520 <_sbrk_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f8 f9d0 	bl	80018b4 <_sbrk>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_sbrk_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_sbrk_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	20000cfc 	.word	0x20000cfc

08009524 <_write_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4d07      	ldr	r5, [pc, #28]	@ (8009544 <_write_r+0x20>)
 8009528:	4604      	mov	r4, r0
 800952a:	4608      	mov	r0, r1
 800952c:	4611      	mov	r1, r2
 800952e:	2200      	movs	r2, #0
 8009530:	602a      	str	r2, [r5, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f7f8 f96e 	bl	8001814 <_write>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_write_r+0x1e>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_write_r+0x1e>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20000cfc 	.word	0x20000cfc

08009548 <memcpy>:
 8009548:	440a      	add	r2, r1
 800954a:	4291      	cmp	r1, r2
 800954c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009550:	d100      	bne.n	8009554 <memcpy+0xc>
 8009552:	4770      	bx	lr
 8009554:	b510      	push	{r4, lr}
 8009556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800955a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800955e:	4291      	cmp	r1, r2
 8009560:	d1f9      	bne.n	8009556 <memcpy+0xe>
 8009562:	bd10      	pop	{r4, pc}

08009564 <__assert_func>:
 8009564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009566:	4614      	mov	r4, r2
 8009568:	461a      	mov	r2, r3
 800956a:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <__assert_func+0x2c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4605      	mov	r5, r0
 8009570:	68d8      	ldr	r0, [r3, #12]
 8009572:	b954      	cbnz	r4, 800958a <__assert_func+0x26>
 8009574:	4b07      	ldr	r3, [pc, #28]	@ (8009594 <__assert_func+0x30>)
 8009576:	461c      	mov	r4, r3
 8009578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800957c:	9100      	str	r1, [sp, #0]
 800957e:	462b      	mov	r3, r5
 8009580:	4905      	ldr	r1, [pc, #20]	@ (8009598 <__assert_func+0x34>)
 8009582:	f000 f87d 	bl	8009680 <fiprintf>
 8009586:	f000 f89a 	bl	80096be <abort>
 800958a:	4b04      	ldr	r3, [pc, #16]	@ (800959c <__assert_func+0x38>)
 800958c:	e7f4      	b.n	8009578 <__assert_func+0x14>
 800958e:	bf00      	nop
 8009590:	20000030 	.word	0x20000030
 8009594:	08009f9e 	.word	0x08009f9e
 8009598:	08009f70 	.word	0x08009f70
 800959c:	08009f63 	.word	0x08009f63

080095a0 <_calloc_r>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	fba1 5402 	umull	r5, r4, r1, r2
 80095a6:	b93c      	cbnz	r4, 80095b8 <_calloc_r+0x18>
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7ff fa79 	bl	8008aa0 <_malloc_r>
 80095ae:	4606      	mov	r6, r0
 80095b0:	b928      	cbnz	r0, 80095be <_calloc_r+0x1e>
 80095b2:	2600      	movs	r6, #0
 80095b4:	4630      	mov	r0, r6
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	220c      	movs	r2, #12
 80095ba:	6002      	str	r2, [r0, #0]
 80095bc:	e7f9      	b.n	80095b2 <_calloc_r+0x12>
 80095be:	462a      	mov	r2, r5
 80095c0:	4621      	mov	r1, r4
 80095c2:	f7fe fc2b 	bl	8007e1c <memset>
 80095c6:	e7f5      	b.n	80095b4 <_calloc_r+0x14>

080095c8 <_free_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4605      	mov	r5, r0
 80095cc:	2900      	cmp	r1, #0
 80095ce:	d041      	beq.n	8009654 <_free_r+0x8c>
 80095d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d4:	1f0c      	subs	r4, r1, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	bfb8      	it	lt
 80095da:	18e4      	addlt	r4, r4, r3
 80095dc:	f7ff fb8c 	bl	8008cf8 <__malloc_lock>
 80095e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009658 <_free_r+0x90>)
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	b933      	cbnz	r3, 80095f4 <_free_r+0x2c>
 80095e6:	6063      	str	r3, [r4, #4]
 80095e8:	6014      	str	r4, [r2, #0]
 80095ea:	4628      	mov	r0, r5
 80095ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095f0:	f7ff bb88 	b.w	8008d04 <__malloc_unlock>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d908      	bls.n	800960a <_free_r+0x42>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	1821      	adds	r1, r4, r0
 80095fc:	428b      	cmp	r3, r1
 80095fe:	bf01      	itttt	eq
 8009600:	6819      	ldreq	r1, [r3, #0]
 8009602:	685b      	ldreq	r3, [r3, #4]
 8009604:	1809      	addeq	r1, r1, r0
 8009606:	6021      	streq	r1, [r4, #0]
 8009608:	e7ed      	b.n	80095e6 <_free_r+0x1e>
 800960a:	461a      	mov	r2, r3
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	b10b      	cbz	r3, 8009614 <_free_r+0x4c>
 8009610:	42a3      	cmp	r3, r4
 8009612:	d9fa      	bls.n	800960a <_free_r+0x42>
 8009614:	6811      	ldr	r1, [r2, #0]
 8009616:	1850      	adds	r0, r2, r1
 8009618:	42a0      	cmp	r0, r4
 800961a:	d10b      	bne.n	8009634 <_free_r+0x6c>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	4401      	add	r1, r0
 8009620:	1850      	adds	r0, r2, r1
 8009622:	4283      	cmp	r3, r0
 8009624:	6011      	str	r1, [r2, #0]
 8009626:	d1e0      	bne.n	80095ea <_free_r+0x22>
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	4408      	add	r0, r1
 8009630:	6010      	str	r0, [r2, #0]
 8009632:	e7da      	b.n	80095ea <_free_r+0x22>
 8009634:	d902      	bls.n	800963c <_free_r+0x74>
 8009636:	230c      	movs	r3, #12
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	e7d6      	b.n	80095ea <_free_r+0x22>
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	1821      	adds	r1, r4, r0
 8009640:	428b      	cmp	r3, r1
 8009642:	bf04      	itt	eq
 8009644:	6819      	ldreq	r1, [r3, #0]
 8009646:	685b      	ldreq	r3, [r3, #4]
 8009648:	6063      	str	r3, [r4, #4]
 800964a:	bf04      	itt	eq
 800964c:	1809      	addeq	r1, r1, r0
 800964e:	6021      	streq	r1, [r4, #0]
 8009650:	6054      	str	r4, [r2, #4]
 8009652:	e7ca      	b.n	80095ea <_free_r+0x22>
 8009654:	bd38      	pop	{r3, r4, r5, pc}
 8009656:	bf00      	nop
 8009658:	20000cf8 	.word	0x20000cf8

0800965c <__ascii_mbtowc>:
 800965c:	b082      	sub	sp, #8
 800965e:	b901      	cbnz	r1, 8009662 <__ascii_mbtowc+0x6>
 8009660:	a901      	add	r1, sp, #4
 8009662:	b142      	cbz	r2, 8009676 <__ascii_mbtowc+0x1a>
 8009664:	b14b      	cbz	r3, 800967a <__ascii_mbtowc+0x1e>
 8009666:	7813      	ldrb	r3, [r2, #0]
 8009668:	600b      	str	r3, [r1, #0]
 800966a:	7812      	ldrb	r2, [r2, #0]
 800966c:	1e10      	subs	r0, r2, #0
 800966e:	bf18      	it	ne
 8009670:	2001      	movne	r0, #1
 8009672:	b002      	add	sp, #8
 8009674:	4770      	bx	lr
 8009676:	4610      	mov	r0, r2
 8009678:	e7fb      	b.n	8009672 <__ascii_mbtowc+0x16>
 800967a:	f06f 0001 	mvn.w	r0, #1
 800967e:	e7f8      	b.n	8009672 <__ascii_mbtowc+0x16>

08009680 <fiprintf>:
 8009680:	b40e      	push	{r1, r2, r3}
 8009682:	b503      	push	{r0, r1, lr}
 8009684:	4601      	mov	r1, r0
 8009686:	ab03      	add	r3, sp, #12
 8009688:	4805      	ldr	r0, [pc, #20]	@ (80096a0 <fiprintf+0x20>)
 800968a:	f853 2b04 	ldr.w	r2, [r3], #4
 800968e:	6800      	ldr	r0, [r0, #0]
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	f000 f845 	bl	8009720 <_vfiprintf_r>
 8009696:	b002      	add	sp, #8
 8009698:	f85d eb04 	ldr.w	lr, [sp], #4
 800969c:	b003      	add	sp, #12
 800969e:	4770      	bx	lr
 80096a0:	20000030 	.word	0x20000030

080096a4 <__ascii_wctomb>:
 80096a4:	4603      	mov	r3, r0
 80096a6:	4608      	mov	r0, r1
 80096a8:	b141      	cbz	r1, 80096bc <__ascii_wctomb+0x18>
 80096aa:	2aff      	cmp	r2, #255	@ 0xff
 80096ac:	d904      	bls.n	80096b8 <__ascii_wctomb+0x14>
 80096ae:	228a      	movs	r2, #138	@ 0x8a
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096b6:	4770      	bx	lr
 80096b8:	700a      	strb	r2, [r1, #0]
 80096ba:	2001      	movs	r0, #1
 80096bc:	4770      	bx	lr

080096be <abort>:
 80096be:	b508      	push	{r3, lr}
 80096c0:	2006      	movs	r0, #6
 80096c2:	f000 fa85 	bl	8009bd0 <raise>
 80096c6:	2001      	movs	r0, #1
 80096c8:	f7f8 f87c 	bl	80017c4 <_exit>

080096cc <__sfputc_r>:
 80096cc:	6893      	ldr	r3, [r2, #8]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	b410      	push	{r4}
 80096d4:	6093      	str	r3, [r2, #8]
 80096d6:	da08      	bge.n	80096ea <__sfputc_r+0x1e>
 80096d8:	6994      	ldr	r4, [r2, #24]
 80096da:	42a3      	cmp	r3, r4
 80096dc:	db01      	blt.n	80096e2 <__sfputc_r+0x16>
 80096de:	290a      	cmp	r1, #10
 80096e0:	d103      	bne.n	80096ea <__sfputc_r+0x1e>
 80096e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096e6:	f000 b933 	b.w	8009950 <__swbuf_r>
 80096ea:	6813      	ldr	r3, [r2, #0]
 80096ec:	1c58      	adds	r0, r3, #1
 80096ee:	6010      	str	r0, [r2, #0]
 80096f0:	7019      	strb	r1, [r3, #0]
 80096f2:	4608      	mov	r0, r1
 80096f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <__sfputs_r>:
 80096fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fc:	4606      	mov	r6, r0
 80096fe:	460f      	mov	r7, r1
 8009700:	4614      	mov	r4, r2
 8009702:	18d5      	adds	r5, r2, r3
 8009704:	42ac      	cmp	r4, r5
 8009706:	d101      	bne.n	800970c <__sfputs_r+0x12>
 8009708:	2000      	movs	r0, #0
 800970a:	e007      	b.n	800971c <__sfputs_r+0x22>
 800970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009710:	463a      	mov	r2, r7
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ffda 	bl	80096cc <__sfputc_r>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d1f3      	bne.n	8009704 <__sfputs_r+0xa>
 800971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009720 <_vfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	460d      	mov	r5, r1
 8009726:	b09d      	sub	sp, #116	@ 0x74
 8009728:	4614      	mov	r4, r2
 800972a:	4698      	mov	r8, r3
 800972c:	4606      	mov	r6, r0
 800972e:	b118      	cbz	r0, 8009738 <_vfiprintf_r+0x18>
 8009730:	6a03      	ldr	r3, [r0, #32]
 8009732:	b90b      	cbnz	r3, 8009738 <_vfiprintf_r+0x18>
 8009734:	f7fe fb3c 	bl	8007db0 <__sinit>
 8009738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	d405      	bmi.n	800974a <_vfiprintf_r+0x2a>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	059a      	lsls	r2, r3, #22
 8009742:	d402      	bmi.n	800974a <_vfiprintf_r+0x2a>
 8009744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009746:	f7fe fba0 	bl	8007e8a <__retarget_lock_acquire_recursive>
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	071b      	lsls	r3, r3, #28
 800974e:	d501      	bpl.n	8009754 <_vfiprintf_r+0x34>
 8009750:	692b      	ldr	r3, [r5, #16]
 8009752:	b99b      	cbnz	r3, 800977c <_vfiprintf_r+0x5c>
 8009754:	4629      	mov	r1, r5
 8009756:	4630      	mov	r0, r6
 8009758:	f000 f938 	bl	80099cc <__swsetup_r>
 800975c:	b170      	cbz	r0, 800977c <_vfiprintf_r+0x5c>
 800975e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009760:	07dc      	lsls	r4, r3, #31
 8009762:	d504      	bpl.n	800976e <_vfiprintf_r+0x4e>
 8009764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009768:	b01d      	add	sp, #116	@ 0x74
 800976a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	0598      	lsls	r0, r3, #22
 8009772:	d4f7      	bmi.n	8009764 <_vfiprintf_r+0x44>
 8009774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009776:	f7fe fb89 	bl	8007e8c <__retarget_lock_release_recursive>
 800977a:	e7f3      	b.n	8009764 <_vfiprintf_r+0x44>
 800977c:	2300      	movs	r3, #0
 800977e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009780:	2320      	movs	r3, #32
 8009782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009786:	f8cd 800c 	str.w	r8, [sp, #12]
 800978a:	2330      	movs	r3, #48	@ 0x30
 800978c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800993c <_vfiprintf_r+0x21c>
 8009790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009794:	f04f 0901 	mov.w	r9, #1
 8009798:	4623      	mov	r3, r4
 800979a:	469a      	mov	sl, r3
 800979c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097a0:	b10a      	cbz	r2, 80097a6 <_vfiprintf_r+0x86>
 80097a2:	2a25      	cmp	r2, #37	@ 0x25
 80097a4:	d1f9      	bne.n	800979a <_vfiprintf_r+0x7a>
 80097a6:	ebba 0b04 	subs.w	fp, sl, r4
 80097aa:	d00b      	beq.n	80097c4 <_vfiprintf_r+0xa4>
 80097ac:	465b      	mov	r3, fp
 80097ae:	4622      	mov	r2, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7ff ffa1 	bl	80096fa <__sfputs_r>
 80097b8:	3001      	adds	r0, #1
 80097ba:	f000 80a7 	beq.w	800990c <_vfiprintf_r+0x1ec>
 80097be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097c0:	445a      	add	r2, fp
 80097c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80097c4:	f89a 3000 	ldrb.w	r3, [sl]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 809f 	beq.w	800990c <_vfiprintf_r+0x1ec>
 80097ce:	2300      	movs	r3, #0
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d8:	f10a 0a01 	add.w	sl, sl, #1
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	9307      	str	r3, [sp, #28]
 80097e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80097e6:	4654      	mov	r4, sl
 80097e8:	2205      	movs	r2, #5
 80097ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ee:	4853      	ldr	r0, [pc, #332]	@ (800993c <_vfiprintf_r+0x21c>)
 80097f0:	f7f6 fd26 	bl	8000240 <memchr>
 80097f4:	9a04      	ldr	r2, [sp, #16]
 80097f6:	b9d8      	cbnz	r0, 8009830 <_vfiprintf_r+0x110>
 80097f8:	06d1      	lsls	r1, r2, #27
 80097fa:	bf44      	itt	mi
 80097fc:	2320      	movmi	r3, #32
 80097fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009802:	0713      	lsls	r3, r2, #28
 8009804:	bf44      	itt	mi
 8009806:	232b      	movmi	r3, #43	@ 0x2b
 8009808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800980c:	f89a 3000 	ldrb.w	r3, [sl]
 8009810:	2b2a      	cmp	r3, #42	@ 0x2a
 8009812:	d015      	beq.n	8009840 <_vfiprintf_r+0x120>
 8009814:	9a07      	ldr	r2, [sp, #28]
 8009816:	4654      	mov	r4, sl
 8009818:	2000      	movs	r0, #0
 800981a:	f04f 0c0a 	mov.w	ip, #10
 800981e:	4621      	mov	r1, r4
 8009820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009824:	3b30      	subs	r3, #48	@ 0x30
 8009826:	2b09      	cmp	r3, #9
 8009828:	d94b      	bls.n	80098c2 <_vfiprintf_r+0x1a2>
 800982a:	b1b0      	cbz	r0, 800985a <_vfiprintf_r+0x13a>
 800982c:	9207      	str	r2, [sp, #28]
 800982e:	e014      	b.n	800985a <_vfiprintf_r+0x13a>
 8009830:	eba0 0308 	sub.w	r3, r0, r8
 8009834:	fa09 f303 	lsl.w	r3, r9, r3
 8009838:	4313      	orrs	r3, r2
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	46a2      	mov	sl, r4
 800983e:	e7d2      	b.n	80097e6 <_vfiprintf_r+0xc6>
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	1d19      	adds	r1, r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	9103      	str	r1, [sp, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	bfbb      	ittet	lt
 800984c:	425b      	neglt	r3, r3
 800984e:	f042 0202 	orrlt.w	r2, r2, #2
 8009852:	9307      	strge	r3, [sp, #28]
 8009854:	9307      	strlt	r3, [sp, #28]
 8009856:	bfb8      	it	lt
 8009858:	9204      	strlt	r2, [sp, #16]
 800985a:	7823      	ldrb	r3, [r4, #0]
 800985c:	2b2e      	cmp	r3, #46	@ 0x2e
 800985e:	d10a      	bne.n	8009876 <_vfiprintf_r+0x156>
 8009860:	7863      	ldrb	r3, [r4, #1]
 8009862:	2b2a      	cmp	r3, #42	@ 0x2a
 8009864:	d132      	bne.n	80098cc <_vfiprintf_r+0x1ac>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	1d1a      	adds	r2, r3, #4
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	9203      	str	r2, [sp, #12]
 800986e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009872:	3402      	adds	r4, #2
 8009874:	9305      	str	r3, [sp, #20]
 8009876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800994c <_vfiprintf_r+0x22c>
 800987a:	7821      	ldrb	r1, [r4, #0]
 800987c:	2203      	movs	r2, #3
 800987e:	4650      	mov	r0, sl
 8009880:	f7f6 fcde 	bl	8000240 <memchr>
 8009884:	b138      	cbz	r0, 8009896 <_vfiprintf_r+0x176>
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	eba0 000a 	sub.w	r0, r0, sl
 800988c:	2240      	movs	r2, #64	@ 0x40
 800988e:	4082      	lsls	r2, r0
 8009890:	4313      	orrs	r3, r2
 8009892:	3401      	adds	r4, #1
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989a:	4829      	ldr	r0, [pc, #164]	@ (8009940 <_vfiprintf_r+0x220>)
 800989c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098a0:	2206      	movs	r2, #6
 80098a2:	f7f6 fccd 	bl	8000240 <memchr>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d03f      	beq.n	800992a <_vfiprintf_r+0x20a>
 80098aa:	4b26      	ldr	r3, [pc, #152]	@ (8009944 <_vfiprintf_r+0x224>)
 80098ac:	bb1b      	cbnz	r3, 80098f6 <_vfiprintf_r+0x1d6>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	3307      	adds	r3, #7
 80098b2:	f023 0307 	bic.w	r3, r3, #7
 80098b6:	3308      	adds	r3, #8
 80098b8:	9303      	str	r3, [sp, #12]
 80098ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098bc:	443b      	add	r3, r7
 80098be:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c0:	e76a      	b.n	8009798 <_vfiprintf_r+0x78>
 80098c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098c6:	460c      	mov	r4, r1
 80098c8:	2001      	movs	r0, #1
 80098ca:	e7a8      	b.n	800981e <_vfiprintf_r+0xfe>
 80098cc:	2300      	movs	r3, #0
 80098ce:	3401      	adds	r4, #1
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	4619      	mov	r1, r3
 80098d4:	f04f 0c0a 	mov.w	ip, #10
 80098d8:	4620      	mov	r0, r4
 80098da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098de:	3a30      	subs	r2, #48	@ 0x30
 80098e0:	2a09      	cmp	r2, #9
 80098e2:	d903      	bls.n	80098ec <_vfiprintf_r+0x1cc>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0c6      	beq.n	8009876 <_vfiprintf_r+0x156>
 80098e8:	9105      	str	r1, [sp, #20]
 80098ea:	e7c4      	b.n	8009876 <_vfiprintf_r+0x156>
 80098ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80098f0:	4604      	mov	r4, r0
 80098f2:	2301      	movs	r3, #1
 80098f4:	e7f0      	b.n	80098d8 <_vfiprintf_r+0x1b8>
 80098f6:	ab03      	add	r3, sp, #12
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	462a      	mov	r2, r5
 80098fc:	4b12      	ldr	r3, [pc, #72]	@ (8009948 <_vfiprintf_r+0x228>)
 80098fe:	a904      	add	r1, sp, #16
 8009900:	4630      	mov	r0, r6
 8009902:	f7fd fe21 	bl	8007548 <_printf_float>
 8009906:	4607      	mov	r7, r0
 8009908:	1c78      	adds	r0, r7, #1
 800990a:	d1d6      	bne.n	80098ba <_vfiprintf_r+0x19a>
 800990c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800990e:	07d9      	lsls	r1, r3, #31
 8009910:	d405      	bmi.n	800991e <_vfiprintf_r+0x1fe>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	059a      	lsls	r2, r3, #22
 8009916:	d402      	bmi.n	800991e <_vfiprintf_r+0x1fe>
 8009918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800991a:	f7fe fab7 	bl	8007e8c <__retarget_lock_release_recursive>
 800991e:	89ab      	ldrh	r3, [r5, #12]
 8009920:	065b      	lsls	r3, r3, #25
 8009922:	f53f af1f 	bmi.w	8009764 <_vfiprintf_r+0x44>
 8009926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009928:	e71e      	b.n	8009768 <_vfiprintf_r+0x48>
 800992a:	ab03      	add	r3, sp, #12
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	462a      	mov	r2, r5
 8009930:	4b05      	ldr	r3, [pc, #20]	@ (8009948 <_vfiprintf_r+0x228>)
 8009932:	a904      	add	r1, sp, #16
 8009934:	4630      	mov	r0, r6
 8009936:	f7fe f88f 	bl	8007a58 <_printf_i>
 800993a:	e7e4      	b.n	8009906 <_vfiprintf_r+0x1e6>
 800993c:	08009f9f 	.word	0x08009f9f
 8009940:	08009fa9 	.word	0x08009fa9
 8009944:	08007549 	.word	0x08007549
 8009948:	080096fb 	.word	0x080096fb
 800994c:	08009fa5 	.word	0x08009fa5

08009950 <__swbuf_r>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	460e      	mov	r6, r1
 8009954:	4614      	mov	r4, r2
 8009956:	4605      	mov	r5, r0
 8009958:	b118      	cbz	r0, 8009962 <__swbuf_r+0x12>
 800995a:	6a03      	ldr	r3, [r0, #32]
 800995c:	b90b      	cbnz	r3, 8009962 <__swbuf_r+0x12>
 800995e:	f7fe fa27 	bl	8007db0 <__sinit>
 8009962:	69a3      	ldr	r3, [r4, #24]
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	071a      	lsls	r2, r3, #28
 800996a:	d501      	bpl.n	8009970 <__swbuf_r+0x20>
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	b943      	cbnz	r3, 8009982 <__swbuf_r+0x32>
 8009970:	4621      	mov	r1, r4
 8009972:	4628      	mov	r0, r5
 8009974:	f000 f82a 	bl	80099cc <__swsetup_r>
 8009978:	b118      	cbz	r0, 8009982 <__swbuf_r+0x32>
 800997a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800997e:	4638      	mov	r0, r7
 8009980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	6922      	ldr	r2, [r4, #16]
 8009986:	1a98      	subs	r0, r3, r2
 8009988:	6963      	ldr	r3, [r4, #20]
 800998a:	b2f6      	uxtb	r6, r6
 800998c:	4283      	cmp	r3, r0
 800998e:	4637      	mov	r7, r6
 8009990:	dc05      	bgt.n	800999e <__swbuf_r+0x4e>
 8009992:	4621      	mov	r1, r4
 8009994:	4628      	mov	r0, r5
 8009996:	f7ff f987 	bl	8008ca8 <_fflush_r>
 800999a:	2800      	cmp	r0, #0
 800999c:	d1ed      	bne.n	800997a <__swbuf_r+0x2a>
 800999e:	68a3      	ldr	r3, [r4, #8]
 80099a0:	3b01      	subs	r3, #1
 80099a2:	60a3      	str	r3, [r4, #8]
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	6022      	str	r2, [r4, #0]
 80099aa:	701e      	strb	r6, [r3, #0]
 80099ac:	6962      	ldr	r2, [r4, #20]
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d004      	beq.n	80099be <__swbuf_r+0x6e>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	07db      	lsls	r3, r3, #31
 80099b8:	d5e1      	bpl.n	800997e <__swbuf_r+0x2e>
 80099ba:	2e0a      	cmp	r6, #10
 80099bc:	d1df      	bne.n	800997e <__swbuf_r+0x2e>
 80099be:	4621      	mov	r1, r4
 80099c0:	4628      	mov	r0, r5
 80099c2:	f7ff f971 	bl	8008ca8 <_fflush_r>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d0d9      	beq.n	800997e <__swbuf_r+0x2e>
 80099ca:	e7d6      	b.n	800997a <__swbuf_r+0x2a>

080099cc <__swsetup_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4b29      	ldr	r3, [pc, #164]	@ (8009a74 <__swsetup_r+0xa8>)
 80099d0:	4605      	mov	r5, r0
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	460c      	mov	r4, r1
 80099d6:	b118      	cbz	r0, 80099e0 <__swsetup_r+0x14>
 80099d8:	6a03      	ldr	r3, [r0, #32]
 80099da:	b90b      	cbnz	r3, 80099e0 <__swsetup_r+0x14>
 80099dc:	f7fe f9e8 	bl	8007db0 <__sinit>
 80099e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e4:	0719      	lsls	r1, r3, #28
 80099e6:	d422      	bmi.n	8009a2e <__swsetup_r+0x62>
 80099e8:	06da      	lsls	r2, r3, #27
 80099ea:	d407      	bmi.n	80099fc <__swsetup_r+0x30>
 80099ec:	2209      	movs	r2, #9
 80099ee:	602a      	str	r2, [r5, #0]
 80099f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099fa:	e033      	b.n	8009a64 <__swsetup_r+0x98>
 80099fc:	0758      	lsls	r0, r3, #29
 80099fe:	d512      	bpl.n	8009a26 <__swsetup_r+0x5a>
 8009a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a02:	b141      	cbz	r1, 8009a16 <__swsetup_r+0x4a>
 8009a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	d002      	beq.n	8009a12 <__swsetup_r+0x46>
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f7ff fddb 	bl	80095c8 <_free_r>
 8009a12:	2300      	movs	r3, #0
 8009a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	6063      	str	r3, [r4, #4]
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	f043 0308 	orr.w	r3, r3, #8
 8009a2c:	81a3      	strh	r3, [r4, #12]
 8009a2e:	6923      	ldr	r3, [r4, #16]
 8009a30:	b94b      	cbnz	r3, 8009a46 <__swsetup_r+0x7a>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a3c:	d003      	beq.n	8009a46 <__swsetup_r+0x7a>
 8009a3e:	4621      	mov	r1, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f000 f83f 	bl	8009ac4 <__smakebuf_r>
 8009a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4a:	f013 0201 	ands.w	r2, r3, #1
 8009a4e:	d00a      	beq.n	8009a66 <__swsetup_r+0x9a>
 8009a50:	2200      	movs	r2, #0
 8009a52:	60a2      	str	r2, [r4, #8]
 8009a54:	6962      	ldr	r2, [r4, #20]
 8009a56:	4252      	negs	r2, r2
 8009a58:	61a2      	str	r2, [r4, #24]
 8009a5a:	6922      	ldr	r2, [r4, #16]
 8009a5c:	b942      	cbnz	r2, 8009a70 <__swsetup_r+0xa4>
 8009a5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a62:	d1c5      	bne.n	80099f0 <__swsetup_r+0x24>
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	0799      	lsls	r1, r3, #30
 8009a68:	bf58      	it	pl
 8009a6a:	6962      	ldrpl	r2, [r4, #20]
 8009a6c:	60a2      	str	r2, [r4, #8]
 8009a6e:	e7f4      	b.n	8009a5a <__swsetup_r+0x8e>
 8009a70:	2000      	movs	r0, #0
 8009a72:	e7f7      	b.n	8009a64 <__swsetup_r+0x98>
 8009a74:	20000030 	.word	0x20000030

08009a78 <__swhatbuf_r>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	2900      	cmp	r1, #0
 8009a82:	b096      	sub	sp, #88	@ 0x58
 8009a84:	4615      	mov	r5, r2
 8009a86:	461e      	mov	r6, r3
 8009a88:	da0d      	bge.n	8009aa6 <__swhatbuf_r+0x2e>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a90:	f04f 0100 	mov.w	r1, #0
 8009a94:	bf14      	ite	ne
 8009a96:	2340      	movne	r3, #64	@ 0x40
 8009a98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	6031      	str	r1, [r6, #0]
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	b016      	add	sp, #88	@ 0x58
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
 8009aa6:	466a      	mov	r2, sp
 8009aa8:	f000 f848 	bl	8009b3c <_fstat_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	dbec      	blt.n	8009a8a <__swhatbuf_r+0x12>
 8009ab0:	9901      	ldr	r1, [sp, #4]
 8009ab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009ab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009aba:	4259      	negs	r1, r3
 8009abc:	4159      	adcs	r1, r3
 8009abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ac2:	e7eb      	b.n	8009a9c <__swhatbuf_r+0x24>

08009ac4 <__smakebuf_r>:
 8009ac4:	898b      	ldrh	r3, [r1, #12]
 8009ac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac8:	079d      	lsls	r5, r3, #30
 8009aca:	4606      	mov	r6, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	d507      	bpl.n	8009ae0 <__smakebuf_r+0x1c>
 8009ad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	6123      	str	r3, [r4, #16]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	6163      	str	r3, [r4, #20]
 8009adc:	b003      	add	sp, #12
 8009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae0:	ab01      	add	r3, sp, #4
 8009ae2:	466a      	mov	r2, sp
 8009ae4:	f7ff ffc8 	bl	8009a78 <__swhatbuf_r>
 8009ae8:	9f00      	ldr	r7, [sp, #0]
 8009aea:	4605      	mov	r5, r0
 8009aec:	4639      	mov	r1, r7
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7fe ffd6 	bl	8008aa0 <_malloc_r>
 8009af4:	b948      	cbnz	r0, 8009b0a <__smakebuf_r+0x46>
 8009af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009afa:	059a      	lsls	r2, r3, #22
 8009afc:	d4ee      	bmi.n	8009adc <__smakebuf_r+0x18>
 8009afe:	f023 0303 	bic.w	r3, r3, #3
 8009b02:	f043 0302 	orr.w	r3, r3, #2
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	e7e2      	b.n	8009ad0 <__smakebuf_r+0xc>
 8009b0a:	89a3      	ldrh	r3, [r4, #12]
 8009b0c:	6020      	str	r0, [r4, #0]
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b1a:	b15b      	cbz	r3, 8009b34 <__smakebuf_r+0x70>
 8009b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b20:	4630      	mov	r0, r6
 8009b22:	f000 f81d 	bl	8009b60 <_isatty_r>
 8009b26:	b128      	cbz	r0, 8009b34 <__smakebuf_r+0x70>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	431d      	orrs	r5, r3
 8009b38:	81a5      	strh	r5, [r4, #12]
 8009b3a:	e7cf      	b.n	8009adc <__smakebuf_r+0x18>

08009b3c <_fstat_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	@ (8009b5c <_fstat_r+0x20>)
 8009b40:	2300      	movs	r3, #0
 8009b42:	4604      	mov	r4, r0
 8009b44:	4608      	mov	r0, r1
 8009b46:	4611      	mov	r1, r2
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	f7f7 fe8b 	bl	8001864 <_fstat>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	d102      	bne.n	8009b58 <_fstat_r+0x1c>
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	b103      	cbz	r3, 8009b58 <_fstat_r+0x1c>
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000cfc 	.word	0x20000cfc

08009b60 <_isatty_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d06      	ldr	r5, [pc, #24]	@ (8009b7c <_isatty_r+0x1c>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	f7f7 fe8a 	bl	8001884 <_isatty>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_isatty_r+0x1a>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_isatty_r+0x1a>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	20000cfc 	.word	0x20000cfc

08009b80 <_raise_r>:
 8009b80:	291f      	cmp	r1, #31
 8009b82:	b538      	push	{r3, r4, r5, lr}
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	d904      	bls.n	8009b94 <_raise_r+0x14>
 8009b8a:	2316      	movs	r3, #22
 8009b8c:	6003      	str	r3, [r0, #0]
 8009b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b96:	b112      	cbz	r2, 8009b9e <_raise_r+0x1e>
 8009b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b9c:	b94b      	cbnz	r3, 8009bb2 <_raise_r+0x32>
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f000 f830 	bl	8009c04 <_getpid_r>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bae:	f000 b817 	b.w	8009be0 <_kill_r>
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d00a      	beq.n	8009bcc <_raise_r+0x4c>
 8009bb6:	1c59      	adds	r1, r3, #1
 8009bb8:	d103      	bne.n	8009bc2 <_raise_r+0x42>
 8009bba:	2316      	movs	r3, #22
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7e7      	b.n	8009b92 <_raise_r+0x12>
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	4798      	blx	r3
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7e0      	b.n	8009b92 <_raise_r+0x12>

08009bd0 <raise>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	@ (8009bdc <raise+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f7ff bfd3 	b.w	8009b80 <_raise_r>
 8009bda:	bf00      	nop
 8009bdc:	20000030 	.word	0x20000030

08009be0 <_kill_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	@ (8009c00 <_kill_r+0x20>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	4611      	mov	r1, r2
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	f7f7 fdd9 	bl	80017a4 <_kill>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	d102      	bne.n	8009bfc <_kill_r+0x1c>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	b103      	cbz	r3, 8009bfc <_kill_r+0x1c>
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	bd38      	pop	{r3, r4, r5, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000cfc 	.word	0x20000cfc

08009c04 <_getpid_r>:
 8009c04:	f7f7 bdc6 	b.w	8001794 <_getpid>

08009c08 <_init>:
 8009c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0a:	bf00      	nop
 8009c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0e:	bc08      	pop	{r3}
 8009c10:	469e      	mov	lr, r3
 8009c12:	4770      	bx	lr

08009c14 <_fini>:
 8009c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c16:	bf00      	nop
 8009c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c1a:	bc08      	pop	{r3}
 8009c1c:	469e      	mov	lr, r3
 8009c1e:	4770      	bx	lr
