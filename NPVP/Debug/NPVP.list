
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a18  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009c18  08009c18  0000ac18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a008  0800a008  0000c32c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a008  0800a008  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a010  0800a010  0000c32c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a010  0800a010  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a014  0800a014  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a018  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001ec  0800a204  0000c1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000028c  0800a2a4  0000c28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000944  2000032c  0800a344  0000c32c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c70  0800a344  0000cc70  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c32c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019a9d  00000000  00000000  0000c35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003241  00000000  00000000  00025df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001590  00000000  00000000  00029038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ca  00000000  00000000  0002a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b3e8  00000000  00000000  0002b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019368  00000000  00000000  00056a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b5dc  00000000  00000000  0006fde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0017b3be  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b44  00000000  00000000  0017b404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  00181f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000032c 	.word	0x2000032c
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c00 	.word	0x08009c00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000330 	.word	0x20000330
 800023c:	08009c00 	.word	0x08009c00

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <func_clear_values>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Clear variable values
void func_clear_values(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
//	float *volt_value_ptr = &measured_voltage_value;
//	float *adc_value_ptr = &adc_value;

	raw_adc_value = 0.0;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <func_clear_values+0x20>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	measured_voltage_value = 0.0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <func_clear_values+0x24>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]

}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000a84 	.word	0x20000a84
 8000604:	20000a90 	.word	0x20000a90

08000608 <func_init_sensor_connection_status>:

// Initial sensor connection status
void func_init_sensor_connection_status(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
//	int *sensor_status_ptr = &sensor_status;
	func_clear_values();
 800060c:	f7ff ffe8 	bl	80005e0 <func_clear_values>

	HAL_ADC_Stop(&hadc1);
 8000610:	481b      	ldr	r0, [pc, #108]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000612:	f001 fb37 	bl	8001c84 <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000618:	f001 fa66 	bl	8001ae8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800061c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000620:	4817      	ldr	r0, [pc, #92]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000622:	f001 fb63 	bl	8001cec <HAL_ADC_PollForConversion>

	//Get new measurements
	func_get_adc_value(); // Does not need to be an average
 8000626:	f000 f8b7 	bl	8000798 <func_get_adc_value>
	func_adc_to_voltage();
 800062a:	f000 f8d9 	bl	80007e0 <func_adc_to_voltage>

//	if(measured_voltage_value < 0.1)
	if(measured_voltage_value < 0.1){
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <func_init_sensor_connection_status+0x7c>)
 8000630:	edd3 7a00 	vldr	s15, [r3]
 8000634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000638:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8000678 <func_init_sensor_connection_status+0x70>
 800063c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000644:	d513      	bpl.n	800066e <func_init_sensor_connection_status+0x66>
		sprintf(output_message, "+++ SENSOR DISCONNECTED +++\r\n");
 8000646:	4910      	ldr	r1, [pc, #64]	@ (8000688 <func_init_sensor_connection_status+0x80>)
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <func_init_sensor_connection_status+0x84>)
 800064a:	f007 f959 	bl	8007900 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 800064e:	480f      	ldr	r0, [pc, #60]	@ (800068c <func_init_sensor_connection_status+0x84>)
 8000650:	f7ff fe46 	bl	80002e0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	490b      	ldr	r1, [pc, #44]	@ (800068c <func_init_sensor_connection_status+0x84>)
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <func_init_sensor_connection_status+0x88>)
 8000660:	f005 f9ca 	bl	80059f8 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000668:	f001 f9d6 	bl	8001a18 <HAL_Delay>
	} else {
		sensor_status = 0;
	}
}
 800066c:	e002      	b.n	8000674 <func_init_sensor_connection_status+0x6c>
		sensor_status = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <func_init_sensor_connection_status+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	9999999a 	.word	0x9999999a
 800067c:	3fb99999 	.word	0x3fb99999
 8000680:	20000380 	.word	0x20000380
 8000684:	20000a90 	.word	0x20000a90
 8000688:	08009c18 	.word	0x08009c18
 800068c:	20000ab0 	.word	0x20000ab0
 8000690:	20000510 	.word	0x20000510
 8000694:	20000000 	.word	0x20000000

08000698 <func_monitor_sensor_status>:

// Sensor connection monitoring
void func_monitor_sensor_status(void){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	if(measured_voltage_value < 0.1){
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <func_monitor_sensor_status+0x38>)
 800069e:	edd3 7a00 	vldr	s15, [r3]
 80006a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006a6:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80006c8 <func_monitor_sensor_status+0x30>
 80006aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	d400      	bmi.n	80006b6 <func_monitor_sensor_status+0x1e>
		sensor_status = 1;
	}
}
 80006b4:	e002      	b.n	80006bc <func_monitor_sensor_status+0x24>
		sensor_status = 1;
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <func_monitor_sensor_status+0x3c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	9999999a 	.word	0x9999999a
 80006cc:	3fb99999 	.word	0x3fb99999
 80006d0:	20000a90 	.word	0x20000a90
 80006d4:	20000000 	.word	0x20000000

080006d8 <func_calibrate_sensor>:

// Calibrate sensor
void func_calibrate_sensor(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	// Take initial measurements
	func_average_adc_measurement();
 80006dc:	f000 f816 	bl	800070c <func_average_adc_measurement>

	// Set auto-zero value
	func_auto_zero();
 80006e0:	f000 f86c 	bl	80007bc <func_auto_zero>
	calibration_status = 0;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <func_calibrate_sensor+0x18>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000004 	.word	0x20000004

080006f4 <func_adc_conversion>:

// Get measurement values
void func_adc_conversion(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	func_adc_to_voltage();
 80006f8:	f000 f872 	bl	80007e0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 80006fc:	f000 f8cc 	bl	8000898 <func_voltage_to_kpa>
	func_kpa_to_cmh2o();
 8000700:	f000 f902 	bl	8000908 <func_kpa_to_cmh2o>
	func_kpa_to_inh2o();
 8000704:	f000 f920 	bl	8000948 <func_kpa_to_inh2o>

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <func_average_adc_measurement>:

// Average measurement
void func_average_adc_measurement(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    // Initialize accumulation variables
    adc_sum = 0.0;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <func_average_adc_measurement+0x68>)
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
    sample_count = 0.0;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <func_average_adc_measurement+0x6c>)
 800071a:	f04f 0200 	mov.w	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
    sampling_done = 0;
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <func_average_adc_measurement+0x70>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000726:	4816      	ldr	r0, [pc, #88]	@ (8000780 <func_average_adc_measurement+0x74>)
 8000728:	f003 ff92 	bl	8004650 <HAL_TIM_Base_Start_IT>

    // Wait for 1000ms
    HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000730:	f001 f972 	bl	8001a18 <HAL_Delay>

    // Stop the timer
    HAL_TIM_Base_Stop_IT(&htim2);
 8000734:	4812      	ldr	r0, [pc, #72]	@ (8000780 <func_average_adc_measurement+0x74>)
 8000736:	f004 f803 	bl	8004740 <HAL_TIM_Base_Stop_IT>

    // Calculate average
    if (sample_count > 0) {
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <func_average_adc_measurement+0x6c>)
 800073c:	edd3 7a00 	vldr	s15, [r3]
 8000740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	dd0b      	ble.n	8000762 <func_average_adc_measurement+0x56>
    	avg_adc_value = adc_sum / sample_count; // Average ADC value stored
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <func_average_adc_measurement+0x68>)
 800074c:	edd3 6a00 	vldr	s13, [r3]
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <func_average_adc_measurement+0x6c>)
 8000752:	ed93 7a00 	vldr	s14, [r3]
 8000756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <func_average_adc_measurement+0x78>)
 800075c:	edc3 7a00 	vstr	s15, [r3]
 8000760:	e003      	b.n	800076a <func_average_adc_measurement+0x5e>
    } else {
    	avg_adc_value = 0.0; // Default value if no samples were taken
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <func_average_adc_measurement+0x78>)
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
    }

    // Mark sampling as done
    sampling_done = 1;
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <func_average_adc_measurement+0x70>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000a78 	.word	0x20000a78
 8000778:	20000a7c 	.word	0x20000a7c
 800077c:	20000a80 	.word	0x20000a80
 8000780:	20000478 	.word	0x20000478
 8000784:	20000a88 	.word	0x20000a88

08000788 <new_measurement>:

// New measurement
void new_measurement(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	func_get_adc_value();
 800078c:	f000 f804 	bl	8000798 <func_get_adc_value>
	func_adc_conversion();
 8000790:	f7ff ffb0 	bl	80006f4 <func_adc_conversion>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <func_get_adc_value>:

// Get ADC value
void func_get_adc_value(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
//	float *adc_ptr = &adc_value;
	raw_adc_value = HAL_ADC_GetValue(&hadc1);
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <func_get_adc_value+0x1c>)
 800079e:	f001 fb30 	bl	8001e02 <HAL_ADC_GetValue>
 80007a2:	ee07 0a90 	vmov	s15, r0
 80007a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007aa:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <func_get_adc_value+0x20>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000380 	.word	0x20000380
 80007b8:	20000a84 	.word	0x20000a84

080007bc <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	func_adc_to_voltage();
 80007c0:	f000 f80e 	bl	80007e0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 80007c4:	f000 f868 	bl	8000898 <func_voltage_to_kpa>
	auto_zero_pressure_value =  measured_kpa_pressure - KNOWN_REF_PRESSURE;
 80007c8:	4b02      	ldr	r3, [pc, #8]	@ (80007d4 <func_auto_zero+0x18>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a02      	ldr	r2, [pc, #8]	@ (80007d8 <func_auto_zero+0x1c>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000a8c 	.word	0x20000a8c
 80007d8:	20000a94 	.word	0x20000a94
 80007dc:	00000000 	.word	0x00000000

080007e0 <func_adc_to_voltage>:

// ADC to voltage
void func_adc_to_voltage(void){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	if(sensor_status){
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <func_adc_to_voltage+0xa0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d012      	beq.n	8000812 <func_adc_to_voltage+0x32>
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <func_adc_to_voltage+0xa4>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8000870 <func_adc_to_voltage+0x90>
 80007fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007fe:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000878 <func_adc_to_voltage+0x98>
 8000802:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000806:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <func_adc_to_voltage+0xa8>)
 800080c:	edc3 7a00 	vstr	s15, [r3]
	} else if(calibration_status){
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
	} else {
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
	}
}
 8000810:	e028      	b.n	8000864 <func_adc_to_voltage+0x84>
	} else if(calibration_status){
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <func_adc_to_voltage+0xac>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d012      	beq.n	8000840 <func_adc_to_voltage+0x60>
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <func_adc_to_voltage+0xb0>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000824:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8000870 <func_adc_to_voltage+0x90>
 8000828:	ee27 6b06 	vmul.f64	d6, d7, d6
 800082c:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000878 <func_adc_to_voltage+0x98>
 8000830:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <func_adc_to_voltage+0xa8>)
 800083a:	edc3 7a00 	vstr	s15, [r3]
}
 800083e:	e011      	b.n	8000864 <func_adc_to_voltage+0x84>
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <func_adc_to_voltage+0xa4>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000870 <func_adc_to_voltage+0x90>
 800084e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000852:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000878 <func_adc_to_voltage+0x98>
 8000856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <func_adc_to_voltage+0xa8>)
 8000860:	edc3 7a00 	vstr	s15, [r3]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	66666666 	.word	0x66666666
 8000874:	400a6666 	.word	0x400a6666
 8000878:	00000000 	.word	0x00000000
 800087c:	40affe00 	.word	0x40affe00
 8000880:	20000000 	.word	0x20000000
 8000884:	20000a84 	.word	0x20000a84
 8000888:	20000a90 	.word	0x20000a90
 800088c:	20000004 	.word	0x20000004
 8000890:	20000a88 	.word	0x20000a88
 8000894:	00000000 	.word	0x00000000

08000898 <func_voltage_to_kpa>:

// Voltage to Pa
void func_voltage_to_kpa(void){
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	measured_kpa_pressure = ((measured_voltage_value / OUTPUT_VOLTAGE_MAX) - 0.5) / 0.057;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <func_voltage_to_kpa+0x60>)
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ae:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80008b2:	ee37 6b46 	vsub.f64	d6, d7, d6
 80008b6:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80008f0 <func_voltage_to_kpa+0x58>
 80008ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008c4:	edc3 7a00 	vstr	s15, [r3]
	if(!calibration_status){
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <func_voltage_to_kpa+0x68>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10a      	bne.n	80008e6 <func_voltage_to_kpa+0x4e>
		measured_kpa_pressure = measured_kpa_pressure - auto_zero_pressure_value;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008d2:	ed93 7a00 	vldr	s14, [r3]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <func_voltage_to_kpa+0x6c>)
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008e2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	9fbe76c9 	.word	0x9fbe76c9
 80008f4:	3fad2f1a 	.word	0x3fad2f1a
 80008f8:	20000a90 	.word	0x20000a90
 80008fc:	20000a8c 	.word	0x20000a8c
 8000900:	20000004 	.word	0x20000004
 8000904:	20000a94 	.word	0x20000a94

08000908 <func_kpa_to_cmh2o>:

// psi to cmh2o
void func_kpa_to_cmh2o(void){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	measured_cmh2o_pressure = measured_kpa_pressure * 10.1971621298;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <func_kpa_to_cmh2o+0x38>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000916:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000938 <func_kpa_to_cmh2o+0x30>
 800091a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <func_kpa_to_cmh2o+0x3c>)
 8000924:	edc3 7a00 	vstr	s15, [r3]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	f3af 8000 	nop.w
 8000938:	6f47005d 	.word	0x6f47005d
 800093c:	402464f2 	.word	0x402464f2
 8000940:	20000a8c 	.word	0x20000a8c
 8000944:	20000a98 	.word	0x20000a98

08000948 <func_kpa_to_inh2o>:

// psi to inh2o
void func_kpa_to_inh2o(void){
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	measured_inh2o_pressure = measured_kpa_pressure * 4.01463;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <func_kpa_to_inh2o+0x38>)
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000956:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000978 <func_kpa_to_inh2o+0x30>
 800095a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800095e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <func_kpa_to_inh2o+0x3c>)
 8000964:	edc3 7a00 	vstr	s15, [r3]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	2aae2974 	.word	0x2aae2974
 800097c:	40100efb 	.word	0x40100efb
 8000980:	20000a8c 	.word	0x20000a8c
 8000984:	20000a9c 	.word	0x20000a9c

08000988 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000998:	d11a      	bne.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x48>
        if (!sampling_done) {
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d116      	bne.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x48>
        	func_get_adc_value();
 80009a2:	f7ff fef9 	bl	8000798 <func_get_adc_value>
            adc_sum += raw_adc_value;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009a8:	ed93 7a00 	vldr	s14, [r3]
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]
            sample_count++;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009cc:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000a80 	.word	0x20000a80
 80009dc:	20000a78 	.word	0x20000a78
 80009e0:	20000a84 	.word	0x20000a84
 80009e4:	20000a7c 	.word	0x20000a7c

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f000 ffb6 	bl	800195e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f8cd 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 fb01 	bl	8000ffc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009fa:	f000 faa1 	bl	8000f40 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fe:	f000 facf 	bl	8000fa0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a02:	f000 f937 	bl	8000c74 <MX_ADC1_Init>
  MX_ETH_Init();
 8000a06:	f000 f987 	bl	8000d18 <MX_ETH_Init>
  MX_TIM2_Init();
 8000a0a:	f000 f9d3 	bl	8000db4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a0e:	f000 fa1f 	bl	8000e50 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Turn alarm on when program starts
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	484a      	ldr	r0, [pc, #296]	@ (8000b40 <main+0x158>)
 8000a18:	f002 faee 	bl	8002ff8 <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 8000a1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a20:	f000 fffa 	bl	8001a18 <HAL_Delay>
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	4845      	ldr	r0, [pc, #276]	@ (8000b40 <main+0x158>)
 8000a2a:	f002 fae5 	bl	8002ff8 <HAL_GPIO_WritePin>

  // Initialize breath cycle variables
  breath_cycle_time = 60.0 / breath_rate;
 8000a2e:	4b45      	ldr	r3, [pc, #276]	@ (8000b44 <main+0x15c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a3a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8000b38 <main+0x150>
 8000a3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a46:	4b40      	ldr	r3, [pc, #256]	@ (8000b48 <main+0x160>)
 8000a48:	edc3 7a00 	vstr	s15, [r3]
  inspiration_time = (breath_cycle_time / (inspiratory_ratio_portion + expiratory_ratio_portion)) * inspiratory_ratio_portion;
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <main+0x160>)
 8000a4e:	edd3 6a00 	vldr	s13, [r3]
 8000a52:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <main+0x164>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b3e      	ldr	r3, [pc, #248]	@ (8000b50 <main+0x168>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	ee07 3a90 	vmov	s15, r3
 8000a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a68:	4b38      	ldr	r3, [pc, #224]	@ (8000b4c <main+0x164>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	ee07 3a90 	vmov	s15, r3
 8000a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a78:	4b36      	ldr	r3, [pc, #216]	@ (8000b54 <main+0x16c>)
 8000a7a:	edc3 7a00 	vstr	s15, [r3]
  expiration_time = breath_cycle_time - inspiration_time;
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <main+0x160>)
 8000a80:	ed93 7a00 	vldr	s14, [r3]
 8000a84:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <main+0x16c>)
 8000a86:	edd3 7a00 	vldr	s15, [r3]
 8000a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <main+0x170>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]

  // Initialize setpoint
  setpoint = inspiratory_pressure_value;
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <main+0x174>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a31      	ldr	r2, [pc, #196]	@ (8000b60 <main+0x178>)
 8000a9a:	6013      	str	r3, [r2, #0]

  // Start PWM
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	4831      	ldr	r0, [pc, #196]	@ (8000b64 <main+0x17c>)
 8000aa0:	f003 fede 	bl	8004860 <HAL_TIM_PWM_Start>

  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 8000aa4:	4830      	ldr	r0, [pc, #192]	@ (8000b68 <main+0x180>)
 8000aa6:	f001 f81f 	bl	8001ae8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000aaa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000aae:	482e      	ldr	r0, [pc, #184]	@ (8000b68 <main+0x180>)
 8000ab0:	f001 f91c 	bl	8001cec <HAL_ADC_PollForConversion>

	  // Check initial sensor connection.
	  while(sensor_status){
 8000ab4:	e001      	b.n	8000aba <main+0xd2>
		  func_init_sensor_connection_status();
 8000ab6:	f7ff fda7 	bl	8000608 <func_init_sensor_connection_status>
	  while(sensor_status){
 8000aba:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <main+0x184>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1f9      	bne.n	8000ab6 <main+0xce>
	  }

	  // Ongoing sensor connection status
	  func_monitor_sensor_status();
 8000ac2:	f7ff fde9 	bl	8000698 <func_monitor_sensor_status>

	  //Sensor calibration
	  while(calibration_status){
 8000ac6:	e001      	b.n	8000acc <main+0xe4>
		  func_calibrate_sensor();
 8000ac8:	f7ff fe06 	bl	80006d8 <func_calibrate_sensor>
	  while(calibration_status){
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <main+0x188>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f9      	bne.n	8000ac8 <main+0xe0>
	  }

	  // Take and convert measurement
	  new_measurement();
 8000ad4:	f7ff fe58 	bl	8000788 <new_measurement>
//      HAL_Delay(inspiration_time * 1000); // Inspiration time
//      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // Turn off blower
//      HAL_Delay(expiration_time * 1000); // Expiration time

	  // Output to terminal
	  sprintf(output_message, "Raw ADC Value: %.2f, Voltage: %.2fV, kpa: %.1fkpa, inh2o: %.1finh2o\r\n", raw_adc_value, measured_voltage_value, measured_kpa_pressure, measured_inh2o_pressure);
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <main+0x18c>)
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <main+0x190>)
 8000ae4:	edd3 7a00 	vldr	s15, [r3]
 8000ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aec:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <main+0x194>)
 8000aee:	edd3 6a00 	vldr	s13, [r3]
 8000af2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <main+0x198>)
 8000af8:	edd3 5a00 	vldr	s11, [r3]
 8000afc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b00:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b08:	ed8d 7b00 	vstr	d7, [sp]
 8000b0c:	ec53 2b14 	vmov	r2, r3, d4
 8000b10:	491c      	ldr	r1, [pc, #112]	@ (8000b84 <main+0x19c>)
 8000b12:	481d      	ldr	r0, [pc, #116]	@ (8000b88 <main+0x1a0>)
 8000b14:	f006 fef4 	bl	8007900 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000b18:	481b      	ldr	r0, [pc, #108]	@ (8000b88 <main+0x1a0>)
 8000b1a:	f7ff fbe1 	bl	80002e0 <strlen>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b26:	4918      	ldr	r1, [pc, #96]	@ (8000b88 <main+0x1a0>)
 8000b28:	4818      	ldr	r0, [pc, #96]	@ (8000b8c <main+0x1a4>)
 8000b2a:	f004 ff65 	bl	80059f8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b32:	f000 ff71 	bl	8001a18 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000b36:	e7b5      	b.n	8000aa4 <main+0xbc>
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	404e0000 	.word	0x404e0000
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000aa0 	.word	0x20000aa0
 8000b4c:	2000000c 	.word	0x2000000c
 8000b50:	20000010 	.word	0x20000010
 8000b54:	20000aa4 	.word	0x20000aa4
 8000b58:	20000aa8 	.word	0x20000aa8
 8000b5c:	20000014 	.word	0x20000014
 8000b60:	20000aac 	.word	0x20000aac
 8000b64:	200004c4 	.word	0x200004c4
 8000b68:	20000380 	.word	0x20000380
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000004 	.word	0x20000004
 8000b74:	20000a84 	.word	0x20000a84
 8000b78:	20000a90 	.word	0x20000a90
 8000b7c:	20000a8c 	.word	0x20000a8c
 8000b80:	20000a9c 	.word	0x20000a9c
 8000b84:	08009c38 	.word	0x08009c38
 8000b88:	20000ab0 	.word	0x20000ab0
 8000b8c:	20000510 	.word	0x20000510

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	@ 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	2234      	movs	r2, #52	@ 0x34
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f006 ff90 	bl	8007ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bb4:	f002 fb98 	bl	80032e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <SystemClock_Config+0xdc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bd0:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <SystemClock_Config+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd8:	4a25      	ldr	r2, [pc, #148]	@ (8000c70 <SystemClock_Config+0xe0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <SystemClock_Config+0xe0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bf0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c04:	2360      	movs	r3, #96	@ 0x60
 8000c06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 fbc5 	bl	80033a8 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c24:	f000 fada 	bl	80011dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c28:	f002 fb6e 	bl	8003308 <HAL_PWREx_EnableOverDrive>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c32:	f000 fad3 	bl	80011dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	230f      	movs	r3, #15
 8000c38:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2103      	movs	r1, #3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fe56 	bl	8003904 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c5e:	f000 fabd 	bl	80011dc <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	@ 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <MX_ADC1_Init+0x9c>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000c8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <MX_ADC1_Init+0xa0>)
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cd6:	f000 fec3 	bl	8001a60 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 fa7c 	bl	80011dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ce4:	230d      	movs	r3, #13
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000cec:	2307      	movs	r3, #7
 8000cee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_ADC1_Init+0x98>)
 8000cf6:	f001 f891 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d00:	f000 fa6c 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000380 	.word	0x20000380
 8000d10:	40012000 	.word	0x40012000
 8000d14:	0f000001 	.word	0x0f000001

08000d18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d1e:	4a20      	ldr	r2, [pc, #128]	@ (8000da0 <MX_ETH_Init+0x88>)
 8000d20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d22:	4b20      	ldr	r3, [pc, #128]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d30:	22e1      	movs	r2, #225	@ 0xe1
 8000d32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d48:	4a16      	ldr	r2, [pc, #88]	@ (8000da4 <MX_ETH_Init+0x8c>)
 8000d4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d56:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <MX_ETH_Init+0x90>)
 8000d58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d5c:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <MX_ETH_Init+0x94>)
 8000d5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d62:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <MX_ETH_Init+0x84>)
 8000d6a:	f001 fc4b 	bl	8002604 <HAL_ETH_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d74:	f000 fa32 	bl	80011dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d78:	2238      	movs	r2, #56	@ 0x38
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_ETH_Init+0x98>)
 8000d7e:	f006 fea1 	bl	8007ac4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <MX_ETH_Init+0x98>)
 8000d84:	2221      	movs	r2, #33	@ 0x21
 8000d86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d88:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_ETH_Init+0x98>)
 8000d8a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <MX_ETH_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200003c8 	.word	0x200003c8
 8000da0:	40028000 	.word	0x40028000
 8000da4:	20000b14 	.word	0x20000b14
 8000da8:	2000028c 	.word	0x2000028c
 8000dac:	200001ec 	.word	0x200001ec
 8000db0:	20000348 	.word	0x20000348

08000db4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000ddc:	225f      	movs	r2, #95	@ 0x5f
 8000dde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000de8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000dfc:	f003 fbd0 	bl	80045a0 <HAL_TIM_Base_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e06:	f000 f9e9 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000e18:	f004 f838 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e22:	f000 f9db 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_TIM2_Init+0x98>)
 8000e34:	f004 fce6 	bl	8005804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e3e:	f000 f9cd 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000478 	.word	0x20000478

08000e50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000e84:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <MX_TIM4_Init+0xec>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e88:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9599;
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000e96:	f242 527f 	movw	r2, #9599	@ 0x257f
 8000e9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ea8:	4823      	ldr	r0, [pc, #140]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000eaa:	f003 fb79 	bl	80045a0 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f000 f992 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000ec6:	f003 ffe1 	bl	8004e8c <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ed0:	f000 f984 	bl	80011dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ed4:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000ed6:	f003 fc62 	bl	800479e <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f000 f97c 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4811      	ldr	r0, [pc, #68]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000ef4:	f004 fc86 	bl	8005804 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000efe:	f000 f96d 	bl	80011dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4800;
 8000f06:	f44f 5396 	mov.w	r3, #4800	@ 0x12c0
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	220c      	movs	r2, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000f1c:	f003 fea2 	bl	8004c64 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000f26:	f000 f959 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM4_Init+0xe8>)
 8000f2c:	f000 fab0 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	@ 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200004c4 	.word	0x200004c4
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	@ (8000f9c <MX_USART3_UART_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_USART3_UART_Init+0x58>)
 8000f84:	f004 fcea 	bl	800595c <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f925 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000510 	.word	0x20000510
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000faa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fae:	2206      	movs	r2, #6
 8000fb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe4:	f002 f845 	bl	8003072 <HAL_PCD_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f8f5 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000598 	.word	0x20000598

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	4b6c      	ldr	r3, [pc, #432]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a6b      	ldr	r2, [pc, #428]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b69      	ldr	r3, [pc, #420]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	61bb      	str	r3, [r7, #24]
 8001028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a65      	ldr	r2, [pc, #404]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a5f      	ldr	r2, [pc, #380]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	4b5a      	ldr	r3, [pc, #360]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a59      	ldr	r2, [pc, #356]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b57      	ldr	r3, [pc, #348]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	4b54      	ldr	r3, [pc, #336]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a53      	ldr	r2, [pc, #332]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b51      	ldr	r3, [pc, #324]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b4e      	ldr	r3, [pc, #312]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a4d      	ldr	r2, [pc, #308]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a2:	4b48      	ldr	r3, [pc, #288]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a47      	ldr	r2, [pc, #284]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 80010a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b45      	ldr	r3, [pc, #276]	@ (80011c4 <MX_GPIO_Init+0x1c8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2101      	movs	r1, #1
 80010be:	4842      	ldr	r0, [pc, #264]	@ (80011c8 <MX_GPIO_Init+0x1cc>)
 80010c0:	f001 ff9a 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010ca:	4840      	ldr	r0, [pc, #256]	@ (80011cc <MX_GPIO_Init+0x1d0>)
 80010cc:	f001 ff94 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2140      	movs	r1, #64	@ 0x40
 80010d4:	483e      	ldr	r0, [pc, #248]	@ (80011d0 <MX_GPIO_Init+0x1d4>)
 80010d6:	f001 ff8f 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	483d      	ldr	r0, [pc, #244]	@ (80011d4 <MX_GPIO_Init+0x1d8>)
 80010e0:	f001 ff8a 	bl	8002ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80010e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4833      	ldr	r0, [pc, #204]	@ (80011c8 <MX_GPIO_Init+0x1cc>)
 80010fc:	f001 fdd0 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	482c      	ldr	r0, [pc, #176]	@ (80011c8 <MX_GPIO_Init+0x1cc>)
 8001118:	f001 fdc2 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800111c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4825      	ldr	r0, [pc, #148]	@ (80011cc <MX_GPIO_Init+0x1d0>)
 8001136:	f001 fdb3 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4820      	ldr	r0, [pc, #128]	@ (80011d8 <MX_GPIO_Init+0x1dc>)
 8001158:	f001 fda2 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800115c:	2340      	movs	r3, #64	@ 0x40
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <MX_GPIO_Init+0x1d4>)
 8001174:	f001 fd94 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <MX_GPIO_Init+0x1d4>)
 800118c:	f001 fd88 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001198:	2302      	movs	r3, #2
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <MX_GPIO_Init+0x1d8>)
 80011a8:	f001 fd7a 	bl	8002ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	2028      	movs	r0, #40	@ 0x28
 80011b2:	f001 f95e 	bl	8002472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011b6:	2028      	movs	r0, #40	@ 0x28
 80011b8:	f001 f977 	bl	80024aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	@ 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40021000 	.word	0x40021000

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <Error_Handler+0x8>

080011e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_MspInit+0x44>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a0e      	ldr	r2, [pc, #56]	@ (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_MspInit+0x44>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_MspInit+0x44>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_MspInit+0x44>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_MspInit+0x44>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a15      	ldr	r2, [pc, #84]	@ (80012a4 <HAL_ADC_MspInit+0x74>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d123      	bne.n	800129a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 8001258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800125c:	6453      	str	r3, [r2, #68]	@ 0x44
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <HAL_ADC_MspInit+0x78>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 8001282:	2308      	movs	r3, #8
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001286:	2303      	movs	r3, #3
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	@ (80012ac <HAL_ADC_MspInit+0x7c>)
 8001296:	f001 fd03 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012000 	.word	0x40012000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800

080012b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001408 <HAL_ETH_MspInit+0x158>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	f040 8096 	bne.w	8001400 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012d4:	4b4d      	ldr	r3, [pc, #308]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a4c      	ldr	r2, [pc, #304]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	4b47      	ldr	r3, [pc, #284]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	4a46      	ldr	r2, [pc, #280]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f8:	4b44      	ldr	r3, [pc, #272]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a40      	ldr	r2, [pc, #256]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800130a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a3a      	ldr	r2, [pc, #232]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b38      	ldr	r3, [pc, #224]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b35      	ldr	r3, [pc, #212]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a34      	ldr	r2, [pc, #208]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001364:	4b29      	ldr	r3, [pc, #164]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	4a28      	ldr	r2, [pc, #160]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 800136a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_ETH_MspInit+0x15c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800137c:	2332      	movs	r3, #50	@ 0x32
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138c:	230b      	movs	r3, #11
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	481e      	ldr	r0, [pc, #120]	@ (8001410 <HAL_ETH_MspInit+0x160>)
 8001398:	f001 fc82 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800139c:	2386      	movs	r3, #134	@ 0x86
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ac:	230b      	movs	r3, #11
 80013ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4817      	ldr	r0, [pc, #92]	@ (8001414 <HAL_ETH_MspInit+0x164>)
 80013b8:	f001 fc72 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ce:	230b      	movs	r3, #11
 80013d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <HAL_ETH_MspInit+0x168>)
 80013da:	f001 fc61 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	@ (800141c <HAL_ETH_MspInit+0x16c>)
 80013fc:	f001 fc50 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3738      	adds	r7, #56	@ 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40028000 	.word	0x40028000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020800 	.word	0x40020800
 8001414:	40020000 	.word	0x40020000
 8001418:	40020400 	.word	0x40020400
 800141c:	40021800 	.word	0x40021800

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001430:	d114      	bne.n	800145c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6413      	str	r3, [r2, #64]	@ 0x40
 800143e:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	201c      	movs	r0, #28
 8001450:	f001 f80f 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001454:	201c      	movs	r0, #28
 8001456:	f001 f828 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800145a:	e010      	b.n	800147e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <HAL_TIM_Base_MspInit+0x6c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10b      	bne.n	800147e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_TIM_Base_MspInit+0x68>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40000800 	.word	0x40000800

08001490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_TIM_MspPostInit+0x64>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d11c      	bne.n	80014ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_TIM_MspPostInit+0x68>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <HAL_TIM_MspPostInit+0x6c>)
 80014e8:	f001 fbda 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40000800 	.word	0x40000800
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020c00 	.word	0x40020c00

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0ae      	sub	sp, #184	@ 0xb8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2290      	movs	r2, #144	@ 0x90
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f006 facf 	bl	8007ac4 <memset>
  if(huart->Instance==USART3)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <HAL_UART_MspInit+0xc4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d144      	bne.n	80015ba <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001534:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001536:	2300      	movs	r3, #0
 8001538:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fc06 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800154a:	f7ff fe47 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154e:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6413      	str	r3, [r2, #64]	@ 0x40
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <HAL_UART_MspInit+0xc8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800157e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4809      	ldr	r0, [pc, #36]	@ (80015cc <HAL_UART_MspInit+0xcc>)
 80015a6:	f001 fb7b 	bl	8002ca0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2027      	movs	r0, #39	@ 0x27
 80015b0:	f000 ff5f 	bl	8002472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015b4:	2027      	movs	r0, #39	@ 0x27
 80015b6:	f000 ff78 	bl	80024aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	37b8      	adds	r7, #184	@ 0xb8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40004800 	.word	0x40004800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020c00 	.word	0x40020c00

080015d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ae      	sub	sp, #184	@ 0xb8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2290      	movs	r2, #144	@ 0x90
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fa67 	bl	8007ac4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015fe:	d159      	bne.n	80016b4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001600:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001604:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fb9d 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800161c:	f7ff fdde 	bl	80011dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b26      	ldr	r3, [pc, #152]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001624:	4a25      	ldr	r2, [pc, #148]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6313      	str	r3, [r2, #48]	@ 0x30
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001638:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800163c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001652:	230a      	movs	r3, #10
 8001654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800165c:	4619      	mov	r1, r3
 800165e:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <HAL_PCD_MspInit+0xf0>)
 8001660:	f001 fb1e 	bl	8002ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001668:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800167c:	4619      	mov	r1, r3
 800167e:	4810      	ldr	r0, [pc, #64]	@ (80016c0 <HAL_PCD_MspInit+0xf0>)
 8001680:	f001 fb0e 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	4a0c      	ldr	r2, [pc, #48]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 800168a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800168e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001690:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 8001692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	4a06      	ldr	r2, [pc, #24]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <HAL_PCD_MspInit+0xec>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	37b8      	adds	r7, #184	@ 0xb8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f95d 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <TIM2_IRQHandler+0x10>)
 800172a:	f003 f993 	bl	8004a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000478 	.word	0x20000478

08001738 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <USART3_IRQHandler+0x10>)
 800173e:	f004 f9e5 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000510 	.word	0x20000510

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001750:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001754:	f001 fc6a 	bl	800302c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_kill>:

int _kill(int pid, int sig)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001776:	f006 f9b1 	bl	8007adc <__errno>
 800177a:	4603      	mov	r3, r0
 800177c:	2216      	movs	r2, #22
 800177e:	601a      	str	r2, [r3, #0]
  return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_exit>:

void _exit (int status)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ffe7 	bl	800176c <_kill>
  while (1) {}    /* Make sure we hang here */
 800179e:	bf00      	nop
 80017a0:	e7fd      	b.n	800179e <_exit+0x12>

080017a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e00a      	b.n	80017ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b4:	f3af 8000 	nop.w
 80017b8:	4601      	mov	r1, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	60ba      	str	r2, [r7, #8]
 80017c0:	b2ca      	uxtb	r2, r1
 80017c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbf0      	blt.n	80017b4 <_read+0x12>
  }

  return len;
 80017d2:	687b      	ldr	r3, [r7, #4]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e009      	b.n	8001802 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	60ba      	str	r2, [r7, #8]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbf1      	blt.n	80017ee <_write+0x12>
  }
  return len;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_close>:

int _close(int file)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800183c:	605a      	str	r2, [r3, #4]
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_isatty>:

int _isatty(int file)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f006 f916 	bl	8007adc <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20080000 	.word	0x20080000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	20000b1c 	.word	0x20000b1c
 80018e4:	20000c70 	.word	0x20000c70

080018e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	@ (8001948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	@ (800194c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	@ (8001958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd7 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f006 f8d5 	bl	8007ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff f853 	bl	80009e8 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001950:	0800a018 	.word	0x0800a018
  ldr r2, =_sbss
 8001954:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8001958:	20000c70 	.word	0x20000c70

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>

0800195e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001962:	2003      	movs	r0, #3
 8001964:	f000 fd7a 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f805 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196e:	f7ff fc3b 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fd95 	bl	80024c6 <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b4:	f000 fd5d 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000018 	.word	0x20000018
 80019d0:	20000020 	.word	0x20000020
 80019d4:	2000001c 	.word	0x2000001c

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	@ (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000020 	.word	0x20000020
 80019fc:	20000b20 	.word	0x20000b20

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000b20 	.word	0x20000b20

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000020 	.word	0x20000020

08001a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e031      	b.n	8001ada <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fbd6 	bl	8001230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d116      	bne.n	8001acc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_ADC_Init+0x84>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	f043 0202 	orr.w	r2, r3, #2
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fb0a 	bl	80020c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f023 0303 	bic.w	r3, r3, #3
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001aca:	e001      	b.n	8001ad0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	ffffeefd 	.word	0xffffeefd

08001ae8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Start+0x1a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0ad      	b.n	8001c5e <HAL_ADC_Start+0x176>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d018      	beq.n	8001b4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b28:	4b50      	ldr	r3, [pc, #320]	@ (8001c6c <HAL_ADC_Start+0x184>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	@ (8001c70 <HAL_ADC_Start+0x188>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9a      	lsrs	r2, r3, #18
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b3c:	e002      	b.n	8001b44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f9      	bne.n	8001b3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d175      	bne.n	8001c44 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b5c:	4b45      	ldr	r3, [pc, #276]	@ (8001c74 <HAL_ADC_Start+0x18c>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f023 0206 	bic.w	r2, r3, #6
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bba:	4b2f      	ldr	r3, [pc, #188]	@ (8001c78 <HAL_ADC_Start+0x190>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d143      	bne.n	8001c5c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e03a      	b.n	8001c5c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a24      	ldr	r2, [pc, #144]	@ (8001c7c <HAL_ADC_Start+0x194>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10e      	bne.n	8001c0e <HAL_ADC_Start+0x126>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c0c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <HAL_ADC_Start+0x190>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d120      	bne.n	8001c5c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <HAL_ADC_Start+0x198>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d11b      	bne.n	8001c5c <HAL_ADC_Start+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d114      	bne.n	8001c5c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	e00b      	b.n	8001c5c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000018 	.word	0x20000018
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	fffff8fe 	.word	0xfffff8fe
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	40012200 	.word	0x40012200

08001c84 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Stop+0x16>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e01f      	b.n	8001cda <HAL_ADC_Stop+0x56>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0201 	bic.w	r2, r2, #1
 8001cb0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <HAL_ADC_Stop+0x64>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	ffffeefe 	.word	0xffffeefe

08001cec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d08:	d113      	bne.n	8001d32 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d18:	d10b      	bne.n	8001d32 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f043 0220 	orr.w	r2, r3, #32
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e063      	b.n	8001dfa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d32:	f7ff fe65 	bl	8001a00 <HAL_GetTick>
 8001d36:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d38:	e021      	b.n	8001d7e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d40:	d01d      	beq.n	8001d7e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_ADC_PollForConversion+0x6c>
 8001d48:	f7ff fe5a 	bl	8001a00 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d212      	bcs.n	8001d7e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d00b      	beq.n	8001d7e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f043 0204 	orr.w	r2, r3, #4
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e03d      	b.n	8001dfa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d1d6      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0212 	mvn.w	r2, #18
 8001d94:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d123      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d11f      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d111      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f043 0201 	orr.w	r2, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1c>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e136      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x28a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b09      	cmp	r3, #9
 8001e46:	d93a      	bls.n	8001ebe <HAL_ADC_ConfigChannel+0xa2>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e50:	d035      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	3b1e      	subs	r3, #30
 8001e68:	2207      	movs	r2, #7
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	400a      	ands	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a8d      	ldr	r2, [pc, #564]	@ (80020b4 <HAL_ADC_ConfigChannel+0x298>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d10a      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68d9      	ldr	r1, [r3, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	061a      	lsls	r2, r3, #24
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	e035      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4403      	add	r3, r0
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebc:	e022      	b.n	8001f04 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	400a      	ands	r2, r1
 8001ee0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6919      	ldr	r1, [r3, #16]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4403      	add	r3, r0
 8001efa:	409a      	lsls	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b06      	cmp	r3, #6
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b05      	subs	r3, #5
 8001f1e:	221f      	movs	r2, #31
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b05      	subs	r3, #5
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f54:	e04c      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d824      	bhi.n	8001fa8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b23      	subs	r3, #35	@ 0x23
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b23      	subs	r3, #35	@ 0x23
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fa6:	e023      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b41      	subs	r3, #65	@ 0x41
 8001fba:	221f      	movs	r2, #31
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b41      	subs	r3, #65	@ 0x41
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a30      	ldr	r2, [pc, #192]	@ (80020b8 <HAL_ADC_ConfigChannel+0x29c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10a      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1f4>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002002:	d105      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002004:	4b2d      	ldr	r3, [pc, #180]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a2c      	ldr	r2, [pc, #176]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 800200a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800200e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a28      	ldr	r2, [pc, #160]	@ (80020b8 <HAL_ADC_ConfigChannel+0x29c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10f      	bne.n	800203a <HAL_ADC_ConfigChannel+0x21e>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d10b      	bne.n	800203a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002022:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a25      	ldr	r2, [pc, #148]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002028:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800202c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800202e:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a22      	ldr	r2, [pc, #136]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002034:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002038:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_ADC_ConfigChannel+0x29c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d12b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1a      	ldr	r2, [pc, #104]	@ (80020b4 <HAL_ADC_ConfigChannel+0x298>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d003      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x23a>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b11      	cmp	r3, #17
 8002054:	d122      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a18      	ldr	r2, [pc, #96]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 800205c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002060:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002068:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800206c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_ADC_ConfigChannel+0x298>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002078:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9a      	lsrs	r2, r3, #18
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800208e:	e002      	b.n	8002096 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	10000012 	.word	0x10000012
 80020b8:	40012000 	.word	0x40012000
 80020bc:	40012300 	.word	0x40012300
 80020c0:	20000018 	.word	0x20000018
 80020c4:	431bde83 	.word	0x431bde83

080020c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020d0:	4b78      	ldr	r3, [pc, #480]	@ (80022b4 <ADC_Init+0x1ec>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a77      	ldr	r2, [pc, #476]	@ (80022b4 <ADC_Init+0x1ec>)
 80020d6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80020da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020dc:	4b75      	ldr	r3, [pc, #468]	@ (80022b4 <ADC_Init+0x1ec>)
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4973      	ldr	r1, [pc, #460]	@ (80022b4 <ADC_Init+0x1ec>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	021a      	lsls	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800211c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <ADC_Init+0x1f0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800216a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6899      	ldr	r1, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6899      	ldr	r1, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e00f      	b.n	80021c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0202 	bic.w	r2, r2, #2
 80021d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	005a      	lsls	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800220e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	3b01      	subs	r3, #1
 800221c:	035a      	lsls	r2, r3, #13
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e007      	b.n	8002238 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002236:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	3b01      	subs	r3, #1
 8002254:	051a      	lsls	r2, r3, #20
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800226c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800227a:	025a      	lsls	r2, r3, #9
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	029a      	lsls	r2, r3, #10
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40012300 	.word	0x40012300
 80022b8:	0f000001 	.word	0x0f000001

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fa88 	bl	8001a00 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d008      	beq.n	8002510 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e052      	b.n	80025b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0216 	bic.w	r2, r2, #22
 800251e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800252e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <HAL_DMA_Abort+0x62>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0208 	bic.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002560:	e013      	b.n	800258a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002562:	f7ff fa4d 	bl	8001a00 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	d90c      	bls.n	800258a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2203      	movs	r2, #3
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e015      	b.n	80025b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e4      	bne.n	8002562 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	223f      	movs	r2, #63	@ 0x3f
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2280      	movs	r2, #128	@ 0x80
 80025d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e00c      	b.n	80025f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2205      	movs	r2, #5
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e086      	b.n	8002724 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2223      	movs	r2, #35	@ 0x23
 8002624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe fe41 	bl	80012b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	4b3f      	ldr	r3, [pc, #252]	@ (800272c <HAL_ETH_Init+0x128>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	4a3e      	ldr	r2, [pc, #248]	@ (800272c <HAL_ETH_Init+0x128>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002638:	6453      	str	r3, [r2, #68]	@ 0x44
 800263a:	4b3c      	ldr	r3, [pc, #240]	@ (800272c <HAL_ETH_Init+0x128>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002646:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <HAL_ETH_Init+0x12c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a39      	ldr	r2, [pc, #228]	@ (8002730 <HAL_ETH_Init+0x12c>)
 800264c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002650:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002652:	4b37      	ldr	r3, [pc, #220]	@ (8002730 <HAL_ETH_Init+0x12c>)
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4935      	ldr	r1, [pc, #212]	@ (8002730 <HAL_ETH_Init+0x12c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002660:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_ETH_Init+0x12c>)
 8002662:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800267a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800267c:	f7ff f9c0 	bl	8001a00 <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002682:	e011      	b.n	80026a8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002684:	f7ff f9bc 	bl	8001a00 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002692:	d909      	bls.n	80026a8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	22e0      	movs	r2, #224	@ 0xe0
 80026a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e03d      	b.n	8002724 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1e4      	bne.n	8002684 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f97a 	bl	80029b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa25 	bl	8002b10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fa7b 	bl	8002bc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	461a      	mov	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f9e3 	bl	8002aa0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80026e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_ETH_Init+0x130>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800270e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2210      	movs	r2, #16
 800271e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	00020060 	.word	0x00020060

08002738 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <ETH_SetMACConfig+0x164>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7b9b      	ldrb	r3, [r3, #14]
 8002756:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	7c12      	ldrb	r2, [r2, #16]
 800275c:	2a00      	cmp	r2, #0
 800275e:	d102      	bne.n	8002766 <ETH_SetMACConfig+0x2e>
 8002760:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002764:	e000      	b.n	8002768 <ETH_SetMACConfig+0x30>
 8002766:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002768:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	7c52      	ldrb	r2, [r2, #17]
 800276e:	2a00      	cmp	r2, #0
 8002770:	d102      	bne.n	8002778 <ETH_SetMACConfig+0x40>
 8002772:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002776:	e000      	b.n	800277a <ETH_SetMACConfig+0x42>
 8002778:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800277a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002780:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7fdb      	ldrb	r3, [r3, #31]
 8002786:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002788:	431a      	orrs	r2, r3
                        macconf->Speed |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800278e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	7f92      	ldrb	r2, [r2, #30]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d102      	bne.n	800279e <ETH_SetMACConfig+0x66>
 8002798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800279c:	e000      	b.n	80027a0 <ETH_SetMACConfig+0x68>
 800279e:	2200      	movs	r2, #0
                        macconf->Speed |
 80027a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
 80027a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetMACConfig+0x90>
 80027c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c6:	e000      	b.n	80027ca <ETH_SetMACConfig+0x92>
 80027c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	7bdb      	ldrb	r3, [r3, #15]
 80027d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff f90c 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002826:	2a00      	cmp	r2, #0
 8002828:	d101      	bne.n	800282e <ETH_SetMACConfig+0xf6>
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	e000      	b.n	8002830 <ETH_SetMACConfig+0xf8>
 800282e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002830:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800283e:	2a01      	cmp	r2, #1
 8002840:	d101      	bne.n	8002846 <ETH_SetMACConfig+0x10e>
 8002842:	2208      	movs	r2, #8
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x110>
 8002846:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002848:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002850:	2a01      	cmp	r2, #1
 8002852:	d101      	bne.n	8002858 <ETH_SetMACConfig+0x120>
 8002854:	2204      	movs	r2, #4
 8002856:	e000      	b.n	800285a <ETH_SetMACConfig+0x122>
 8002858:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800285a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002862:	2a01      	cmp	r2, #1
 8002864:	d101      	bne.n	800286a <ETH_SetMACConfig+0x132>
 8002866:	2202      	movs	r2, #2
 8002868:	e000      	b.n	800286c <ETH_SetMACConfig+0x134>
 800286a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800286c:	4313      	orrs	r3, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002884:	2001      	movs	r0, #1
 8002886:	f7ff f8c7 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	fd20810f 	.word	0xfd20810f

080028a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <ETH_SetDMAConfig+0x110>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetDMAConfig+0x2c>
 80028c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028ca:	e000      	b.n	80028ce <ETH_SetDMAConfig+0x2e>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7b5b      	ldrb	r3, [r3, #13]
 80028d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	7f52      	ldrb	r2, [r2, #29]
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d102      	bne.n	80028e4 <ETH_SetDMAConfig+0x44>
 80028de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028e2:	e000      	b.n	80028e6 <ETH_SetDMAConfig+0x46>
 80028e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7b9b      	ldrb	r3, [r3, #14]
 80028ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7f1b      	ldrb	r3, [r3, #28]
 80028fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7f9b      	ldrb	r3, [r3, #30]
 8002902:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002904:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800290a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002912:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002914:	4313      	orrs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002936:	2001      	movs	r0, #1
 8002938:	f7ff f86e 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	791b      	ldrb	r3, [r3, #4]
 800294e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002954:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800295a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002960:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002968:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800296a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002972:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002978:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002986:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002994:	2001      	movs	r0, #1
 8002996:	f7ff f83f 	bl	8001a18 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	f8de3f23 	.word	0xf8de3f23

080029b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a6      	sub	sp, #152	@ 0x98
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029f6:	2300      	movs	r3, #0
 80029f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fe7f 	bl	8002738 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a66:	2301      	movs	r3, #1
 8002a68:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a74:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a7a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff05 	bl	80028a0 <ETH_SetDMAConfig>
}
 8002a96:	bf00      	nop
 8002a98:	3798      	adds	r7, #152	@ 0x98
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3305      	adds	r3, #5
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	3204      	adds	r2, #4
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <ETH_MACAddressConfig+0x68>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3303      	adds	r3, #3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	061a      	lsls	r2, r3, #24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <ETH_MACAddressConfig+0x6c>)
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6013      	str	r3, [r2, #0]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40028040 	.word	0x40028040
 8002b0c:	40028044 	.word	0x40028044

08002b10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e03e      	b.n	8002b9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68d9      	ldr	r1, [r3, #12]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	3206      	adds	r2, #6
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d80c      	bhi.n	8002b80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	e004      	b.n	8002b8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d9bd      	bls.n	8002b1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb4:	611a      	str	r2, [r3, #16]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e048      	b.n	8002c62 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6919      	ldr	r1, [r3, #16]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	440b      	add	r3, r1
 8002be0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2200      	movs	r2, #0
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	3212      	adds	r2, #18
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d80c      	bhi.n	8002c52 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6919      	ldr	r1, [r3, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	e004      	b.n	8002c5c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d9b3      	bls.n	8002bd0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c92:	60da      	str	r2, [r3, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	@ 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e175      	b.n	8002fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8164 	bne.w	8002fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d005      	beq.n	8002cf6 <HAL_GPIO_Init+0x56>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d130      	bne.n	8002d58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 0201 	and.w	r2, r3, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d017      	beq.n	8002d94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d123      	bne.n	8002de8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80be 	beq.w	8002fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	4b66      	ldr	r3, [pc, #408]	@ (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	4a65      	ldr	r2, [pc, #404]	@ (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e36:	4b63      	ldr	r3, [pc, #396]	@ (8002fc4 <HAL_GPIO_Init+0x324>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e42:	4a61      	ldr	r2, [pc, #388]	@ (8002fc8 <HAL_GPIO_Init+0x328>)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a58      	ldr	r2, [pc, #352]	@ (8002fcc <HAL_GPIO_Init+0x32c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d037      	beq.n	8002ede <HAL_GPIO_Init+0x23e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_GPIO_Init+0x330>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_GPIO_Init+0x23a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_GPIO_Init+0x334>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02b      	beq.n	8002ed6 <HAL_GPIO_Init+0x236>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a55      	ldr	r2, [pc, #340]	@ (8002fd8 <HAL_GPIO_Init+0x338>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d025      	beq.n	8002ed2 <HAL_GPIO_Init+0x232>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a54      	ldr	r2, [pc, #336]	@ (8002fdc <HAL_GPIO_Init+0x33c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d01f      	beq.n	8002ece <HAL_GPIO_Init+0x22e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a53      	ldr	r2, [pc, #332]	@ (8002fe0 <HAL_GPIO_Init+0x340>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d019      	beq.n	8002eca <HAL_GPIO_Init+0x22a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a52      	ldr	r2, [pc, #328]	@ (8002fe4 <HAL_GPIO_Init+0x344>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0x226>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a51      	ldr	r2, [pc, #324]	@ (8002fe8 <HAL_GPIO_Init+0x348>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00d      	beq.n	8002ec2 <HAL_GPIO_Init+0x222>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a50      	ldr	r2, [pc, #320]	@ (8002fec <HAL_GPIO_Init+0x34c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <HAL_GPIO_Init+0x21e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ff0 <HAL_GPIO_Init+0x350>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_GPIO_Init+0x21a>
 8002eb6:	2309      	movs	r3, #9
 8002eb8:	e012      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eba:	230a      	movs	r3, #10
 8002ebc:	e010      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	e00e      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e00c      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ec6:	2306      	movs	r3, #6
 8002ec8:	e00a      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x240>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ef0:	4935      	ldr	r1, [pc, #212]	@ (8002fc8 <HAL_GPIO_Init+0x328>)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f22:	4a34      	ldr	r2, [pc, #208]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f52:	4b28      	ldr	r3, [pc, #160]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	@ (8002ff4 <HAL_GPIO_Init+0x354>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	f67f ae86 	bls.w	8002cc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021800 	.word	0x40021800
 8002fe8:	40021c00 	.word	0x40021c00
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022400 	.word	0x40022400
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	807b      	strh	r3, [r7, #2]
 8003004:	4613      	mov	r3, r2
 8003006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003008:	787b      	ldrb	r3, [r7, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300e:	887a      	ldrh	r2, [r7, #2]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003014:	e003      	b.n	800301e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	619a      	str	r2, [r3, #24]
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003036:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003042:	4a05      	ldr	r2, [pc, #20]	@ (8003058 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f806 	bl	800305c <HAL_GPIO_EXTI_Callback>
  }
}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af02      	add	r7, sp, #8
 8003078:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e108      	b.n	8003296 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe fa96 	bl	80015d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b2:	d102      	bne.n	80030ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fd50 	bl	8006b64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7c1a      	ldrb	r2, [r3, #16]
 80030cc:	f88d 2000 	strb.w	r2, [sp]
 80030d0:	3304      	adds	r3, #4
 80030d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d4:	f003 fcec 	bl	8006ab0 <USB_CoreInit>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0d5      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fd48 	bl	8006b86 <USB_SetCurrentMode>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0c6      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e04a      	b.n	80031a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	3315      	adds	r3, #21
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3314      	adds	r3, #20
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	b298      	uxth	r0, r3
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	332e      	adds	r3, #46	@ 0x2e
 800314a:	4602      	mov	r2, r0
 800314c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3318      	adds	r3, #24
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	331c      	adds	r3, #28
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3320      	adds	r3, #32
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3324      	adds	r3, #36	@ 0x24
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	3301      	adds	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	791b      	ldrb	r3, [r3, #4]
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d3af      	bcc.n	800310e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	3301      	adds	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	791b      	ldrb	r3, [r3, #4]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	429a      	cmp	r2, r3
 8003246:	d3b5      	bcc.n	80031b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7c1a      	ldrb	r2, [r3, #16]
 8003250:	f88d 2000 	strb.w	r2, [sp]
 8003254:	3304      	adds	r3, #4
 8003256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003258:	f003 fce2 	bl	8006c20 <USB_DevInit>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e013      	b.n	8003296 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7b1b      	ldrb	r3, [r3, #12]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f80b 	bl	80032a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fe9d 	bl	8006fce <USB_DevDisconnect>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	10000003 	.word	0x10000003

080032e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a04      	ldr	r2, [pc, #16]	@ (8003304 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	@ 0x40
 800331e:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003336:	f7fe fb63 	bl	8001a00 <HAL_GetTick>
 800333a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800333c:	e009      	b.n	8003352 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800333e:	f7fe fb5f 	bl	8001a00 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800334c:	d901      	bls.n	8003352 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e022      	b.n	8003398 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003352:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335e:	d1ee      	bne.n	800333e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003360:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0f      	ldr	r2, [pc, #60]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800336c:	f7fe fb48 	bl	8001a00 <HAL_GetTick>
 8003370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003372:	e009      	b.n	8003388 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003374:	f7fe fb44 	bl	8001a00 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003382:	d901      	bls.n	8003388 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e007      	b.n	8003398 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003394:	d1ee      	bne.n	8003374 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033b0:	2300      	movs	r3, #0
 80033b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e29b      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 8087 	beq.w	80034da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033cc:	4b96      	ldr	r3, [pc, #600]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d00c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d8:	4b93      	ldr	r3, [pc, #588]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d112      	bne.n	800340a <HAL_RCC_OscConfig+0x62>
 80033e4:	4b90      	ldr	r3, [pc, #576]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f0:	d10b      	bne.n	800340a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d06c      	beq.n	80034d8 <HAL_RCC_OscConfig+0x130>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d168      	bne.n	80034d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e275      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x7a>
 8003414:	4b84      	ldr	r3, [pc, #528]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a83      	ldr	r2, [pc, #524]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800341a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e02e      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x9c>
 800342a:	4b7f      	ldr	r3, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7b      	ldr	r2, [pc, #492]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800343c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0xc0>
 800344e:	4b76      	ldr	r3, [pc, #472]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b73      	ldr	r3, [pc, #460]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a72      	ldr	r2, [pc, #456]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xd8>
 8003468:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a6e      	ldr	r2, [pc, #440]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b6c      	ldr	r3, [pc, #432]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6b      	ldr	r2, [pc, #428]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe faba 	bl	8001a00 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fab6 	bl	8001a00 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e229      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe faa6 	bl	8001a00 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe faa2 	bl	8001a00 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	@ 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e215      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b57      	ldr	r3, [pc, #348]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x110>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d069      	beq.n	80035ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034e6:	4b50      	ldr	r3, [pc, #320]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x190>
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b47      	ldr	r3, [pc, #284]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x17a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1e9      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	493d      	ldr	r1, [pc, #244]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e040      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fa58 	bl	8001a00 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fa54 	bl	8001a00 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1c7      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003566:	4b30      	ldr	r3, [pc, #192]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b2d      	ldr	r3, [pc, #180]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4929      	ldr	r1, [pc, #164]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
 8003586:	e018      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a26      	ldr	r2, [pc, #152]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fa34 	bl	8001a00 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe fa30 	bl	8001a00 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1a3      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d038      	beq.n	8003638 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b16      	ldr	r3, [pc, #88]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d2:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fa11 	bl	8001a00 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe fa0d 	bl	8001a00 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e180      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x23a>
 8003600:	e01a      	b.n	8003638 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <HAL_RCC_OscConfig+0x280>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe f9f7 	bl	8001a00 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00a      	b.n	800362c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe f9f3 	bl	8001a00 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d903      	bls.n	800362c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e166      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
 8003628:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	4b92      	ldr	r3, [pc, #584]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800362e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ee      	bne.n	8003616 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a4 	beq.w	800378e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b8c      	ldr	r3, [pc, #560]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b89      	ldr	r3, [pc, #548]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	4a88      	ldr	r2, [pc, #544]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	@ 0x40
 800365e:	4b86      	ldr	r3, [pc, #536]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	4b83      	ldr	r3, [pc, #524]	@ (800387c <HAL_RCC_OscConfig+0x4d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800367a:	4b80      	ldr	r3, [pc, #512]	@ (800387c <HAL_RCC_OscConfig+0x4d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7f      	ldr	r2, [pc, #508]	@ (800387c <HAL_RCC_OscConfig+0x4d4>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe f9bb 	bl	8001a00 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe f9b7 	bl	8001a00 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	@ 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e12a      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a0:	4b76      	ldr	r3, [pc, #472]	@ (800387c <HAL_RCC_OscConfig+0x4d4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x31a>
 80036b4:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a6f      	ldr	r2, [pc, #444]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	e02d      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x33c>
 80036ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d6:	4b68      	ldr	r3, [pc, #416]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	4a67      	ldr	r2, [pc, #412]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e2:	e01c      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x35e>
 80036ec:	4b62      	ldr	r3, [pc, #392]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a61      	ldr	r2, [pc, #388]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6713      	str	r3, [r2, #112]	@ 0x70
 8003704:	e00b      	b.n	800371e <HAL_RCC_OscConfig+0x376>
 8003706:	4b5c      	ldr	r3, [pc, #368]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	4a5b      	ldr	r2, [pc, #364]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	@ 0x70
 8003712:	4b59      	ldr	r3, [pc, #356]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003716:	4a58      	ldr	r2, [pc, #352]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe f96b 	bl	8001a00 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe f967 	bl	8001a00 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0d8      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCC_OscConfig+0x386>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe f955 	bl	8001a00 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe f951 	bl	8001a00 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0c2      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	4b41      	ldr	r3, [pc, #260]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4a3c      	ldr	r2, [pc, #240]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80ae 	beq.w	80038f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b37      	ldr	r3, [pc, #220]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d06d      	beq.n	8003880 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d14b      	bne.n	8003844 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b32      	ldr	r3, [pc, #200]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a31      	ldr	r2, [pc, #196]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe f922 	bl	8001a00 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe f91e 	bl	8001a00 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e091      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b29      	ldr	r3, [pc, #164]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	071b      	lsls	r3, r3, #28
 800380a:	491b      	ldr	r1, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003810:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a18      	ldr	r2, [pc, #96]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800381a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe f8f0 	bl	8001a00 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe f8ec 	bl	8001a00 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e05f      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x47c>
 8003842:	e057      	b.n	80038f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0b      	ldr	r2, [pc, #44]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe f8d6 	bl	8001a00 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f8d2 	bl	8001a00 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e045      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x4b0>
 8003876:	e03d      	b.n	80038f4 <HAL_RCC_OscConfig+0x54c>
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003880:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <HAL_RCC_OscConfig+0x558>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d030      	beq.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d129      	bne.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d122      	bne.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038b0:	4013      	ands	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d119      	bne.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	3b01      	subs	r3, #1
 80038ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d10f      	bne.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0d0      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d910      	bls.n	800394c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b67      	ldr	r3, [pc, #412]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 020f 	bic.w	r2, r3, #15
 8003932:	4965      	ldr	r1, [pc, #404]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d040      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d115      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e073      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06b      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b39      	ldr	r3, [pc, #228]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4936      	ldr	r1, [pc, #216]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe f802 	bl	8001a00 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fd fffe 	bl	8001a00 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e053      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2d      	ldr	r3, [pc, #180]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b27      	ldr	r3, [pc, #156]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d210      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	4922      	ldr	r1, [pc, #136]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a82:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	490a      	ldr	r1, [pc, #40]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8003aa8:	5ccb      	ldrb	r3, [r1, r3]
 8003aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd ff5e 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	08009c80 	.word	0x08009c80
 8003ad4:	20000018 	.word	0x20000018
 8003ad8:	2000001c 	.word	0x2000001c

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae0:	b094      	sub	sp, #80	@ 0x50
 8003ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae8:	2300      	movs	r3, #0
 8003aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aec:	2300      	movs	r3, #0
 8003aee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af4:	4b79      	ldr	r3, [pc, #484]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d00d      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x40>
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	f200 80e1 	bhi.w	8003cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0e:	e0db      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b73      	ldr	r3, [pc, #460]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b14:	e0db      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b16:	4b73      	ldr	r3, [pc, #460]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b1a:	e0d8      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b1c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b26:	4b6d      	ldr	r3, [pc, #436]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d063      	beq.n	8003bfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b32:	4b6a      	ldr	r3, [pc, #424]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b46:	2300      	movs	r3, #0
 8003b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b60:	0150      	lsls	r0, r2, #5
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4621      	mov	r1, r4
 8003b68:	1a51      	subs	r1, r2, r1
 8003b6a:	6139      	str	r1, [r7, #16]
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b80:	4659      	mov	r1, fp
 8003b82:	018b      	lsls	r3, r1, #6
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	018a      	lsls	r2, r1, #6
 8003b8e:	4651      	mov	r1, sl
 8003b90:	ebb2 0801 	subs.w	r8, r2, r1
 8003b94:	4659      	mov	r1, fp
 8003b96:	eb63 0901 	sbc.w	r9, r3, r1
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bae:	4690      	mov	r8, r2
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	eb18 0303 	adds.w	r3, r8, r3
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	462b      	mov	r3, r5
 8003bbc:	eb49 0303 	adc.w	r3, r9, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	024b      	lsls	r3, r1, #9
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bd8:	4621      	mov	r1, r4
 8003bda:	024a      	lsls	r2, r1, #9
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003be2:	2200      	movs	r2, #0
 8003be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003be8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bec:	f7fc fb80 	bl	80002f0 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	e058      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfa:	4b38      	ldr	r3, [pc, #224]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	2200      	movs	r2, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	4611      	mov	r1, r2
 8003c06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	0159      	lsls	r1, r3, #5
 8003c22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c26:	0150      	lsls	r0, r2, #5
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c32:	4649      	mov	r1, r9
 8003c34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c50:	eb63 050b 	sbc.w	r5, r3, fp
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	00eb      	lsls	r3, r5, #3
 8003c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c62:	00e2      	lsls	r2, r4, #3
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	4643      	mov	r3, r8
 8003c6a:	18e3      	adds	r3, r4, r3
 8003c6c:	603b      	str	r3, [r7, #0]
 8003c6e:	464b      	mov	r3, r9
 8003c70:	eb45 0303 	adc.w	r3, r5, r3
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c82:	4629      	mov	r1, r5
 8003c84:	028b      	lsls	r3, r1, #10
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	028a      	lsls	r2, r1, #10
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c96:	2200      	movs	r2, #0
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	61fa      	str	r2, [r7, #28]
 8003c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca0:	f7fc fb26 	bl	80002f0 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cc6:	e002      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3750      	adds	r7, #80	@ 0x50
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	007a1200 	.word	0x007a1200

08003ce8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b03      	ldr	r3, [pc, #12]	@ (8003cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000018 	.word	0x20000018

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff0 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	@ (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08009c90 	.word	0x08009c90

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d2c:	f7ff ffdc 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0b5b      	lsrs	r3, r3, #13
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	08009c90 	.word	0x08009c90

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d78:	4b69      	ldr	r3, [pc, #420]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	4b66      	ldr	r3, [pc, #408]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8c:	4964      	ldr	r1, [pc, #400]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d017      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003daa:	4b5d      	ldr	r3, [pc, #372]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	4959      	ldr	r1, [pc, #356]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de6:	4b4e      	ldr	r3, [pc, #312]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	494a      	ldr	r1, [pc, #296]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 808b 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b3a      	ldr	r3, [pc, #232]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e38:	4a39      	ldr	r2, [pc, #228]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e40:	4b37      	ldr	r3, [pc, #220]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e4c:	4b35      	ldr	r3, [pc, #212]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a34      	ldr	r2, [pc, #208]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e58:	f7fd fdd2 	bl	8001a00 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd fdce 	bl	8001a00 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e38f      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e72:	4b2c      	ldr	r3, [pc, #176]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e7e:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d035      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d02e      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e9c:	4b20      	ldr	r3, [pc, #128]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ebe:	4a18      	ldr	r2, [pc, #96]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec4:	4b16      	ldr	r3, [pc, #88]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d114      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fd96 	bl	8001a00 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fd92 	bl	8001a00 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e351      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ee      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f06:	d111      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f08:	4b05      	ldr	r3, [pc, #20]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f14:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	4901      	ldr	r1, [pc, #4]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40007000 	.word	0x40007000
 8003f28:	0ffffcff 	.word	0x0ffffcff
 8003f2c:	4bac      	ldr	r3, [pc, #688]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4aab      	ldr	r2, [pc, #684]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f36:	6093      	str	r3, [r2, #8]
 8003f38:	4ba9      	ldr	r3, [pc, #676]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	49a6      	ldr	r1, [pc, #664]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d010      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f56:	4ba2      	ldr	r3, [pc, #648]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f5c:	4aa0      	ldr	r2, [pc, #640]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f66:	4b9e      	ldr	r3, [pc, #632]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	499b      	ldr	r1, [pc, #620]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f84:	4b96      	ldr	r3, [pc, #600]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f92:	4993      	ldr	r1, [pc, #588]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa6:	4b8e      	ldr	r3, [pc, #568]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb4:	498a      	ldr	r1, [pc, #552]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc8:	4b85      	ldr	r3, [pc, #532]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd6:	4982      	ldr	r1, [pc, #520]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fea:	4b7d      	ldr	r3, [pc, #500]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	4979      	ldr	r1, [pc, #484]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b74      	ldr	r3, [pc, #464]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	4971      	ldr	r1, [pc, #452]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402e:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004034:	f023 020c 	bic.w	r2, r3, #12
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403c:	4968      	ldr	r1, [pc, #416]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004050:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	4960      	ldr	r1, [pc, #384]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004072:	4b5b      	ldr	r3, [pc, #364]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	4957      	ldr	r1, [pc, #348]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004094:	4b52      	ldr	r3, [pc, #328]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	494f      	ldr	r1, [pc, #316]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040b6:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	4946      	ldr	r1, [pc, #280]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040d8:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	493e      	ldr	r1, [pc, #248]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040fa:	4b39      	ldr	r3, [pc, #228]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004108:	4935      	ldr	r1, [pc, #212]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800411c:	4b30      	ldr	r3, [pc, #192]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800412a:	492d      	ldr	r1, [pc, #180]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d011      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800413e:	4b28      	ldr	r3, [pc, #160]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800414c:	4924      	ldr	r1, [pc, #144]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800415c:	d101      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b18      	ldr	r3, [pc, #96]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004184:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418c:	4914      	ldr	r1, [pc, #80]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a0:	4b0f      	ldr	r3, [pc, #60]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b0:	490b      	ldr	r1, [pc, #44]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00f      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d4:	4902      	ldr	r1, [pc, #8]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f0:	4b8a      	ldr	r3, [pc, #552]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	4986      	ldr	r1, [pc, #536]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004214:	4b81      	ldr	r3, [pc, #516]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004224:	497d      	ldr	r1, [pc, #500]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d006      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80d6 	beq.w	80043ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004240:	4b76      	ldr	r3, [pc, #472]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a75      	ldr	r2, [pc, #468]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800424a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424c:	f7fd fbd8 	bl	8001a00 <HAL_GetTick>
 8004250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004254:	f7fd fbd4 	bl	8001a00 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	@ 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e195      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004266:	4b6d      	ldr	r3, [pc, #436]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d021      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11d      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004286:	4b65      	ldr	r3, [pc, #404]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004294:	4b61      	ldr	r3, [pc, #388]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	019a      	lsls	r2, r3, #6
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	071b      	lsls	r3, r3, #28
 80042ba:	4958      	ldr	r1, [pc, #352]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d004      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02e      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ec:	d129      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042ee:	4b4b      	ldr	r3, [pc, #300]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042fc:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004302:	0f1b      	lsrs	r3, r3, #28
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	019a      	lsls	r2, r3, #6
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	071b      	lsls	r3, r3, #28
 8004322:	493e      	ldr	r1, [pc, #248]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800432a:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004330:	f023 021f 	bic.w	r2, r3, #31
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	3b01      	subs	r3, #1
 800433a:	4938      	ldr	r1, [pc, #224]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01d      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800434e:	4b33      	ldr	r3, [pc, #204]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004350:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004354:	0e1b      	lsrs	r3, r3, #24
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800435c:	4b2f      	ldr	r3, [pc, #188]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004362:	0f1b      	lsrs	r3, r3, #28
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	019a      	lsls	r2, r3, #6
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	071b      	lsls	r3, r3, #28
 8004382:	4926      	ldr	r1, [pc, #152]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	019a      	lsls	r2, r3, #6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	041b      	lsls	r3, r3, #16
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	061b      	lsls	r3, r3, #24
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	071b      	lsls	r3, r3, #28
 80043b2:	491a      	ldr	r1, [pc, #104]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043ba:	4b18      	ldr	r3, [pc, #96]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a17      	ldr	r2, [pc, #92]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fd fb1b 	bl	8001a00 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ce:	f7fd fb17 	bl	8001a00 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b64      	cmp	r3, #100	@ 0x64
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0d8      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e0:	4b0e      	ldr	r3, [pc, #56]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f040 80ce 	bne.w	8004590 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043f4:	4b09      	ldr	r3, [pc, #36]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a08      	ldr	r2, [pc, #32]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fd fafe 	bl	8001a00 <HAL_GetTick>
 8004404:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004406:	e00b      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004408:	f7fd fafa 	bl	8001a00 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	@ 0x64
 8004414:	d904      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0bb      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004420:	4b5e      	ldr	r3, [pc, #376]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800442c:	d0ec      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02e      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d12a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004456:	4b51      	ldr	r3, [pc, #324]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004464:	4b4d      	ldr	r3, [pc, #308]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	0f1b      	lsrs	r3, r3, #28
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	019a      	lsls	r2, r3, #6
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	4944      	ldr	r1, [pc, #272]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004492:	4b42      	ldr	r3, [pc, #264]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004498:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	493d      	ldr	r1, [pc, #244]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d022      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c0:	d11d      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044c2:	4b36      	ldr	r3, [pc, #216]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	0e1b      	lsrs	r3, r3, #24
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044d0:	4b32      	ldr	r3, [pc, #200]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d6:	0f1b      	lsrs	r3, r3, #28
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	019a      	lsls	r2, r3, #6
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	071b      	lsls	r3, r3, #28
 80044f6:	4929      	ldr	r1, [pc, #164]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d028      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800450a:	4b24      	ldr	r3, [pc, #144]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	0e1b      	lsrs	r3, r3, #24
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004518:	4b20      	ldr	r3, [pc, #128]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	0c1b      	lsrs	r3, r3, #16
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	019a      	lsls	r2, r3, #6
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	431a      	orrs	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	071b      	lsls	r3, r3, #28
 800453e:	4917      	ldr	r1, [pc, #92]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004546:	4b15      	ldr	r3, [pc, #84]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	4911      	ldr	r1, [pc, #68]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800455c:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0e      	ldr	r2, [pc, #56]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fd fa4a 	bl	8001a00 <HAL_GetTick>
 800456c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004570:	f7fd fa46 	bl	8001a00 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e007      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800458a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800458e:	d1ef      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800

080045a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e049      	b.n	8004646 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc ff2a 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f000 fd46 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d001      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e054      	b.n	8004712 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <HAL_TIM_Base_Start_IT+0xd0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004692:	d01d      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <HAL_TIM_Base_Start_IT+0xd4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <HAL_TIM_Base_Start_IT+0xd8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	@ (800472c <HAL_TIM_Base_Start_IT+0xdc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004730 <HAL_TIM_Base_Start_IT+0xe0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004734 <HAL_TIM_Base_Start_IT+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0x80>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <HAL_TIM_Base_Start_IT+0xe8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d115      	bne.n	80046fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4b19      	ldr	r3, [pc, #100]	@ (800473c <HAL_TIM_Base_Start_IT+0xec>)
 80046d8:	4013      	ands	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d015      	beq.n	800470e <HAL_TIM_Base_Start_IT+0xbe>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e8:	d011      	beq.n	800470e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	e008      	b.n	800470e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e000      	b.n	8004710 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40010400 	.word	0x40010400
 8004734:	40014000 	.word	0x40014000
 8004738:	40001800 	.word	0x40001800
 800473c:	00010007 	.word	0x00010007

08004740 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10f      	bne.n	8004788 <HAL_TIM_Base_Stop_IT+0x48>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <HAL_TIM_Base_Stop_IT+0x48>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e049      	b.n	8004844 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f841 	bl	800484c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f000 fc47 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_TIM_PWM_Start+0x24>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e03c      	b.n	80048fe <HAL_TIM_PWM_Start+0x9e>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b04      	cmp	r3, #4
 8004888:	d109      	bne.n	800489e <HAL_TIM_PWM_Start+0x3e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	bf14      	ite	ne
 8004896:	2301      	movne	r3, #1
 8004898:	2300      	moveq	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e02f      	b.n	80048fe <HAL_TIM_PWM_Start+0x9e>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d109      	bne.n	80048b8 <HAL_TIM_PWM_Start+0x58>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	bf14      	ite	ne
 80048b0:	2301      	movne	r3, #1
 80048b2:	2300      	moveq	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e022      	b.n	80048fe <HAL_TIM_PWM_Start+0x9e>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d109      	bne.n	80048d2 <HAL_TIM_PWM_Start+0x72>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e015      	b.n	80048fe <HAL_TIM_PWM_Start+0x9e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start+0x8c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e008      	b.n	80048fe <HAL_TIM_PWM_Start+0x9e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e092      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xb6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	e023      	b.n	800495e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b04      	cmp	r3, #4
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xc6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004924:	e01b      	b.n	800495e <HAL_TIM_PWM_Start+0xfe>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004934:	e013      	b.n	800495e <HAL_TIM_PWM_Start+0xfe>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b0c      	cmp	r3, #12
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xe6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004944:	e00b      	b.n	800495e <HAL_TIM_PWM_Start+0xfe>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b10      	cmp	r3, #16
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0xf6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004954:	e003      	b.n	800495e <HAL_TIM_PWM_Start+0xfe>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2201      	movs	r2, #1
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 ff26 	bl	80057b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a30      	ldr	r2, [pc, #192]	@ (8004a34 <HAL_TIM_PWM_Start+0x1d4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_PWM_Start+0x120>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a38 <HAL_TIM_PWM_Start+0x1d8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d101      	bne.n	8004984 <HAL_TIM_PWM_Start+0x124>
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_TIM_PWM_Start+0x126>
 8004984:	2300      	movs	r3, #0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a25      	ldr	r2, [pc, #148]	@ (8004a34 <HAL_TIM_PWM_Start+0x1d4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ac:	d01d      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <HAL_TIM_PWM_Start+0x1dc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a20      	ldr	r2, [pc, #128]	@ (8004a40 <HAL_TIM_PWM_Start+0x1e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a44 <HAL_TIM_PWM_Start+0x1e4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <HAL_TIM_PWM_Start+0x1d8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	@ (8004a48 <HAL_TIM_PWM_Start+0x1e8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIM_PWM_Start+0x18a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a19      	ldr	r2, [pc, #100]	@ (8004a4c <HAL_TIM_PWM_Start+0x1ec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d115      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	4b17      	ldr	r3, [pc, #92]	@ (8004a50 <HAL_TIM_PWM_Start+0x1f0>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b06      	cmp	r3, #6
 80049fa:	d015      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1c8>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a02:	d011      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	e008      	b.n	8004a28 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e000      	b.n	8004a2a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40010400 	.word	0x40010400
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800
 8004a50:	00010007 	.word	0x00010007

08004a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0202 	mvn.w	r2, #2
 8004a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fac8 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 faba 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 facb 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01b      	beq.n	8004b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0204 	mvn.w	r2, #4
 8004ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 faa2 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004af0:	e005      	b.n	8004afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa94 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 faa5 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d020      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d01b      	beq.n	8004b50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa7c 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa6e 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa7f 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d020      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa56 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa48 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa59 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0201 	mvn.w	r2, #1
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fb fee4 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fea3 	bl	8005934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fe9b 	bl	8005948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00c      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fa13 	bl	800505c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0220 	mvn.w	r2, #32
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fe63 	bl	8005920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0ff      	b.n	8004e82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b14      	cmp	r3, #20
 8004c8e:	f200 80f0 	bhi.w	8004e72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ced 	.word	0x08004ced
 8004c9c:	08004e73 	.word	0x08004e73
 8004ca0:	08004e73 	.word	0x08004e73
 8004ca4:	08004e73 	.word	0x08004e73
 8004ca8:	08004d2d 	.word	0x08004d2d
 8004cac:	08004e73 	.word	0x08004e73
 8004cb0:	08004e73 	.word	0x08004e73
 8004cb4:	08004e73 	.word	0x08004e73
 8004cb8:	08004d6f 	.word	0x08004d6f
 8004cbc:	08004e73 	.word	0x08004e73
 8004cc0:	08004e73 	.word	0x08004e73
 8004cc4:	08004e73 	.word	0x08004e73
 8004cc8:	08004daf 	.word	0x08004daf
 8004ccc:	08004e73 	.word	0x08004e73
 8004cd0:	08004e73 	.word	0x08004e73
 8004cd4:	08004e73 	.word	0x08004e73
 8004cd8:	08004df1 	.word	0x08004df1
 8004cdc:	08004e73 	.word	0x08004e73
 8004ce0:	08004e73 	.word	0x08004e73
 8004ce4:	08004e73 	.word	0x08004e73
 8004ce8:	08004e31 	.word	0x08004e31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fa68 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0208 	orr.w	r2, r2, #8
 8004d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0204 	bic.w	r2, r2, #4
 8004d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6999      	ldr	r1, [r3, #24]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
      break;
 8004d2a:	e0a5      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 faba 	bl	80052ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]
      break;
 8004d6c:	e084      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fb11 	bl	800539c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0208 	orr.w	r2, r2, #8
 8004d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0204 	bic.w	r2, r2, #4
 8004d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69d9      	ldr	r1, [r3, #28]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	61da      	str	r2, [r3, #28]
      break;
 8004dac:	e064      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fb67 	bl	8005488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	021a      	lsls	r2, r3, #8
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	61da      	str	r2, [r3, #28]
      break;
 8004dee:	e043      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fb9e 	bl	8005538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e2e:	e023      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fbd0 	bl	80055dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e70:	e002      	b.n	8004e78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
      break;
 8004e76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop

08004e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0b4      	b.n	8005012 <HAL_TIM_ConfigClockSource+0x186>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4b56      	ldr	r3, [pc, #344]	@ (800501c <HAL_TIM_ConfigClockSource+0x190>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee0:	d03e      	beq.n	8004f60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee6:	f200 8087 	bhi.w	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eee:	f000 8086 	beq.w	8004ffe <HAL_TIM_ConfigClockSource+0x172>
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef6:	d87f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b70      	cmp	r3, #112	@ 0x70
 8004efa:	d01a      	beq.n	8004f32 <HAL_TIM_ConfigClockSource+0xa6>
 8004efc:	2b70      	cmp	r3, #112	@ 0x70
 8004efe:	d87b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b60      	cmp	r3, #96	@ 0x60
 8004f02:	d050      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f04:	2b60      	cmp	r3, #96	@ 0x60
 8004f06:	d877      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b50      	cmp	r3, #80	@ 0x50
 8004f0a:	d03c      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0xfa>
 8004f0c:	2b50      	cmp	r3, #80	@ 0x50
 8004f0e:	d873      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b40      	cmp	r3, #64	@ 0x40
 8004f12:	d058      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d86f      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b30      	cmp	r3, #48	@ 0x30
 8004f1a:	d064      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b30      	cmp	r3, #48	@ 0x30
 8004f1e:	d86b      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d060      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d867      	bhi.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05c      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d05a      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f30:	e062      	b.n	8004ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f42:	f000 fc19 	bl	8005778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	609a      	str	r2, [r3, #8]
      break;
 8004f5e:	e04f      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f70:	f000 fc02 	bl	8005778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f82:	609a      	str	r2, [r3, #8]
      break;
 8004f84:	e03c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fb76 	bl	8005684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2150      	movs	r1, #80	@ 0x50
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fbcf 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e02c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 fb95 	bl	80056e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2160      	movs	r1, #96	@ 0x60
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fbbf 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e01c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fb56 	bl	8005684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2140      	movs	r1, #64	@ 0x40
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fbaf 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e00c      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f000 fba6 	bl	8005742 <TIM_ITRx_SetConfig>
      break;
 8004ff6:	e003      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	fffeff88 	.word	0xfffeff88

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a46      	ldr	r2, [pc, #280]	@ (800519c <TIM_Base_SetConfig+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a43      	ldr	r2, [pc, #268]	@ (80051a0 <TIM_Base_SetConfig+0x130>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a42      	ldr	r2, [pc, #264]	@ (80051a4 <TIM_Base_SetConfig+0x134>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a41      	ldr	r2, [pc, #260]	@ (80051a8 <TIM_Base_SetConfig+0x138>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a40      	ldr	r2, [pc, #256]	@ (80051ac <TIM_Base_SetConfig+0x13c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a35      	ldr	r2, [pc, #212]	@ (800519c <TIM_Base_SetConfig+0x12c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d02b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d0:	d027      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a32      	ldr	r2, [pc, #200]	@ (80051a0 <TIM_Base_SetConfig+0x130>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d023      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a31      	ldr	r2, [pc, #196]	@ (80051a4 <TIM_Base_SetConfig+0x134>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01f      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a30      	ldr	r2, [pc, #192]	@ (80051a8 <TIM_Base_SetConfig+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2f      	ldr	r2, [pc, #188]	@ (80051ac <TIM_Base_SetConfig+0x13c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d017      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2e      	ldr	r2, [pc, #184]	@ (80051b0 <TIM_Base_SetConfig+0x140>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	@ (80051b4 <TIM_Base_SetConfig+0x144>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00f      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <TIM_Base_SetConfig+0x148>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00b      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2b      	ldr	r2, [pc, #172]	@ (80051bc <TIM_Base_SetConfig+0x14c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2a      	ldr	r2, [pc, #168]	@ (80051c0 <TIM_Base_SetConfig+0x150>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a29      	ldr	r2, [pc, #164]	@ (80051c4 <TIM_Base_SetConfig+0x154>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d108      	bne.n	8005134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	@ (800519c <TIM_Base_SetConfig+0x12c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a12      	ldr	r2, [pc, #72]	@ (80051ac <TIM_Base_SetConfig+0x13c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d105      	bne.n	800518e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]
  }
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40010000 	.word	0x40010000
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40010400 	.word	0x40010400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800
 80051bc:	40001800 	.word	0x40001800
 80051c0:	40001c00 	.word	0x40001c00
 80051c4:	40002000 	.word	0x40002000

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f023 0201 	bic.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4b2b      	ldr	r3, [pc, #172]	@ (80052a0 <TIM_OC1_SetConfig+0xd8>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0302 	bic.w	r3, r3, #2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a21      	ldr	r2, [pc, #132]	@ (80052a4 <TIM_OC1_SetConfig+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC1_SetConfig+0x64>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a20      	ldr	r2, [pc, #128]	@ (80052a8 <TIM_OC1_SetConfig+0xe0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a16      	ldr	r2, [pc, #88]	@ (80052a4 <TIM_OC1_SetConfig+0xdc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC1_SetConfig+0x8e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a15      	ldr	r2, [pc, #84]	@ (80052a8 <TIM_OC1_SetConfig+0xe0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	fffeff8f 	.word	0xfffeff8f
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010400 	.word	0x40010400

080052ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0210 	bic.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4b2e      	ldr	r3, [pc, #184]	@ (8005390 <TIM_OC2_SetConfig+0xe4>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0320 	bic.w	r3, r3, #32
 80052f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a23      	ldr	r2, [pc, #140]	@ (8005394 <TIM_OC2_SetConfig+0xe8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d003      	beq.n	8005314 <TIM_OC2_SetConfig+0x68>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <TIM_OC2_SetConfig+0xec>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10d      	bne.n	8005330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800531a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800532e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a18      	ldr	r2, [pc, #96]	@ (8005394 <TIM_OC2_SetConfig+0xe8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x94>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a17      	ldr	r2, [pc, #92]	@ (8005398 <TIM_OC2_SetConfig+0xec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d113      	bne.n	8005368 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	bf00      	nop
 8005384:	371c      	adds	r7, #28
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	feff8fff 	.word	0xfeff8fff
 8005394:	40010000 	.word	0x40010000
 8005398:	40010400 	.word	0x40010400

0800539c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4b2d      	ldr	r3, [pc, #180]	@ (800547c <TIM_OC3_SetConfig+0xe0>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a22      	ldr	r2, [pc, #136]	@ (8005480 <TIM_OC3_SetConfig+0xe4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC3_SetConfig+0x66>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	@ (8005484 <TIM_OC3_SetConfig+0xe8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10d      	bne.n	800541e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800541c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a17      	ldr	r2, [pc, #92]	@ (8005480 <TIM_OC3_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_OC3_SetConfig+0x92>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <TIM_OC3_SetConfig+0xe8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d113      	bne.n	8005456 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	621a      	str	r2, [r3, #32]
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	fffeff8f 	.word	0xfffeff8f
 8005480:	40010000 	.word	0x40010000
 8005484:	40010400 	.word	0x40010400

08005488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <TIM_OC4_SetConfig+0xa4>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	021b      	lsls	r3, r3, #8
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	031b      	lsls	r3, r3, #12
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a13      	ldr	r2, [pc, #76]	@ (8005530 <TIM_OC4_SetConfig+0xa8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_OC4_SetConfig+0x68>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	@ (8005534 <TIM_OC4_SetConfig+0xac>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	019b      	lsls	r3, r3, #6
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	feff8fff 	.word	0xfeff8fff
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <TIM_OC5_SetConfig+0x98>)
 8005564:	4013      	ands	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005578:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	041b      	lsls	r3, r3, #16
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a12      	ldr	r2, [pc, #72]	@ (80055d4 <TIM_OC5_SetConfig+0x9c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC5_SetConfig+0x5e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a11      	ldr	r2, [pc, #68]	@ (80055d8 <TIM_OC5_SetConfig+0xa0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d109      	bne.n	80055aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	621a      	str	r2, [r3, #32]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	fffeff8f 	.word	0xfffeff8f
 80055d4:	40010000 	.word	0x40010000
 80055d8:	40010400 	.word	0x40010400

080055dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <TIM_OC6_SetConfig+0x9c>)
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800561e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	051b      	lsls	r3, r3, #20
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a13      	ldr	r2, [pc, #76]	@ (800567c <TIM_OC6_SetConfig+0xa0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d003      	beq.n	800563c <TIM_OC6_SetConfig+0x60>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a12      	ldr	r2, [pc, #72]	@ (8005680 <TIM_OC6_SetConfig+0xa4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d109      	bne.n	8005650 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	621a      	str	r2, [r3, #32]
}
 800566a:	bf00      	nop
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	feff8fff 	.word	0xfeff8fff
 800567c:	40010000 	.word	0x40010000
 8005680:	40010400 	.word	0x40010400

08005684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 030a 	bic.w	r3, r3, #10
 80056c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800570c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	031b      	lsls	r3, r3, #12
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	f043 0307 	orr.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	609a      	str	r2, [r3, #8]
}
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	021a      	lsls	r2, r3, #8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	431a      	orrs	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	2201      	movs	r2, #1
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	fa01 f303 	lsl.w	r3, r1, r3
 80057f0:	431a      	orrs	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005818:	2302      	movs	r3, #2
 800581a:	e06d      	b.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a30      	ldr	r2, [pc, #192]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2f      	ldr	r2, [pc, #188]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d108      	bne.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005856:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005868:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4313      	orrs	r3, r2
 8005872:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a20      	ldr	r2, [pc, #128]	@ (8005904 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d022      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588e:	d01d      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1d      	ldr	r2, [pc, #116]	@ (800590c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d018      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1c      	ldr	r2, [pc, #112]	@ (8005910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00e      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a15      	ldr	r2, [pc, #84]	@ (8005908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a15      	ldr	r2, [pc, #84]	@ (800591c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d10c      	bne.n	80058e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40014000 	.word	0x40014000
 800591c:	40001800 	.word	0x40001800

08005920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e040      	b.n	80059f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fb fdbe 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2224      	movs	r2, #36	@ 0x24
 8005988:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0201 	bic.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fe28 	bl	80065f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fbc1 	bl	8006130 <UART_SetConfig>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01b      	b.n	80059f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fea7 	bl	800673c <UART_CheckIdleState>
 80059ee:	4603      	mov	r3, r0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	@ 0x28
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d177      	bne.n	8005b00 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_UART_Transmit+0x24>
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e070      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2221      	movs	r2, #33	@ 0x21
 8005a2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2e:	f7fb ffe7 	bl	8001a00 <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a4c:	d108      	bne.n	8005a60 <HAL_UART_Transmit+0x68>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a68:	e02f      	b.n	8005aca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	2180      	movs	r1, #128	@ 0x80
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 ff09 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e03b      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e007      	b.n	8005ab8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1c9      	bne.n	8005a6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2140      	movs	r1, #64	@ 0x40
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fed3 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e005      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005b36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d115      	bne.n	8005b74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 82ac 	beq.w	80060c2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
      }
      return;
 8005b72:	e2a6      	b.n	80060c2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8117 	beq.w	8005dac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b8e:	4b85      	ldr	r3, [pc, #532]	@ (8005da4 <HAL_UART_IRQHandler+0x298>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 810a 	beq.w	8005dac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d011      	beq.n	8005bc8 <HAL_UART_IRQHandler+0xbc>
 8005ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d011      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xec>
 8005bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2202      	movs	r2, #2
 8005be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bee:	f043 0204 	orr.w	r2, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d011      	beq.n	8005c28 <HAL_UART_IRQHandler+0x11c>
 8005c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2204      	movs	r2, #4
 8005c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d017      	beq.n	8005c64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2208      	movs	r2, #8
 8005c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5a:	f043 0208 	orr.w	r2, r3, #8
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d012      	beq.n	8005c96 <HAL_UART_IRQHandler+0x18a>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00c      	beq.n	8005c96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8c:	f043 0220 	orr.w	r2, r3, #32
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8212 	beq.w	80060c6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d005      	beq.n	8005cee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ce6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04f      	beq.n	8005d8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fe39 	bl	8006966 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	2b40      	cmp	r3, #64	@ 0x40
 8005d00:	d141      	bne.n	8005d86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1d9      	bne.n	8005d02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d013      	beq.n	8005d7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5a:	4a13      	ldr	r2, [pc, #76]	@ (8005da8 <HAL_UART_IRQHandler+0x29c>)
 8005d5c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fc fc2b 	bl	80025be <HAL_DMA_Abort_IT>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e00f      	b.n	8005d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f9b6 	bl	80060f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d84:	e00b      	b.n	8005d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9b2 	bl	80060f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	e007      	b.n	8005d9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9ae 	bl	80060f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005d9c:	e193      	b.n	80060c6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9e:	bf00      	nop
    return;
 8005da0:	e191      	b.n	80060c6 <HAL_UART_IRQHandler+0x5ba>
 8005da2:	bf00      	nop
 8005da4:	04000120 	.word	0x04000120
 8005da8:	08006a2f 	.word	0x08006a2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 814c 	bne.w	800604e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8145 	beq.w	800604e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc8:	f003 0310 	and.w	r3, r3, #16
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 813e 	beq.w	800604e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de4:	2b40      	cmp	r3, #64	@ 0x40
 8005de6:	f040 80b6 	bne.w	8005f56 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005df6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8165 	beq.w	80060ca <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	f080 815d 	bcs.w	80060ca <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e24:	f000 8086 	beq.w	8005f34 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1da      	bne.n	8005e28 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e84:	f023 0301 	bic.w	r3, r3, #1
 8005e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e1      	bne.n	8005e72 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eb8:	e853 3f00 	ldrex	r3, [r3]
 8005ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ed8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e3      	bne.n	8005eae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f04:	f023 0310 	bic.w	r3, r3, #16
 8005f08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e4      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fc fad5 	bl	80024de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8d8 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f54:	e0b9      	b.n	80060ca <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80ab 	beq.w	80060ce <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80a6 	beq.w	80060ce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e4      	bne.n	8005f82 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60fb      	str	r3, [r7, #12]
   return(result);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69b9      	ldr	r1, [r7, #24]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	617b      	str	r3, [r7, #20]
   return(result);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e4      	bne.n	8006004 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f85c 	bl	8006104 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800604c:	e03f      	b.n	80060ce <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_UART_IRQHandler+0x56c>
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800606e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f853 	bl	800611c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006076:	e02d      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608c:	2b00      	cmp	r3, #0
 800608e:	d008      	beq.n	80060a2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01c      	beq.n	80060d2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
    }
    return;
 80060a0:	e017      	b.n	80060d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
 80060ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fccd 	bl	8006a5a <UART_EndTransmit_IT>
    return;
 80060c0:	e008      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80060c2:	bf00      	nop
 80060c4:	e006      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
      return;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_UART_IRQHandler+0x5c8>
    return;
 80060d2:	bf00      	nop
  }

}
 80060d4:	37e8      	adds	r7, #232	@ 0xe8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop

080060dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4ba6      	ldr	r3, [pc, #664]	@ (80063f4 <UART_SetConfig+0x2c4>)
 800615c:	4013      	ands	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	6979      	ldr	r1, [r7, #20]
 8006164:	430b      	orrs	r3, r1
 8006166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a94      	ldr	r2, [pc, #592]	@ (80063f8 <UART_SetConfig+0x2c8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d120      	bne.n	80061ee <UART_SetConfig+0xbe>
 80061ac:	4b93      	ldr	r3, [pc, #588]	@ (80063fc <UART_SetConfig+0x2cc>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b03      	cmp	r3, #3
 80061b8:	d816      	bhi.n	80061e8 <UART_SetConfig+0xb8>
 80061ba:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x90>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061d1 	.word	0x080061d1
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061d7 	.word	0x080061d7
 80061cc:	080061e3 	.word	0x080061e3
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e150      	b.n	8006478 <UART_SetConfig+0x348>
 80061d6:	2302      	movs	r3, #2
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e14d      	b.n	8006478 <UART_SetConfig+0x348>
 80061dc:	2304      	movs	r3, #4
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e14a      	b.n	8006478 <UART_SetConfig+0x348>
 80061e2:	2308      	movs	r3, #8
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e147      	b.n	8006478 <UART_SetConfig+0x348>
 80061e8:	2310      	movs	r3, #16
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e144      	b.n	8006478 <UART_SetConfig+0x348>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a83      	ldr	r2, [pc, #524]	@ (8006400 <UART_SetConfig+0x2d0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d132      	bne.n	800625e <UART_SetConfig+0x12e>
 80061f8:	4b80      	ldr	r3, [pc, #512]	@ (80063fc <UART_SetConfig+0x2cc>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fe:	f003 030c 	and.w	r3, r3, #12
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d828      	bhi.n	8006258 <UART_SetConfig+0x128>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0xdc>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006241 	.word	0x08006241
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	0800624d 	.word	0x0800624d
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	08006247 	.word	0x08006247
 8006230:	08006259 	.word	0x08006259
 8006234:	08006259 	.word	0x08006259
 8006238:	08006259 	.word	0x08006259
 800623c:	08006253 	.word	0x08006253
 8006240:	2300      	movs	r3, #0
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e118      	b.n	8006478 <UART_SetConfig+0x348>
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e115      	b.n	8006478 <UART_SetConfig+0x348>
 800624c:	2304      	movs	r3, #4
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e112      	b.n	8006478 <UART_SetConfig+0x348>
 8006252:	2308      	movs	r3, #8
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e10f      	b.n	8006478 <UART_SetConfig+0x348>
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e10c      	b.n	8006478 <UART_SetConfig+0x348>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a68      	ldr	r2, [pc, #416]	@ (8006404 <UART_SetConfig+0x2d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d120      	bne.n	80062aa <UART_SetConfig+0x17a>
 8006268:	4b64      	ldr	r3, [pc, #400]	@ (80063fc <UART_SetConfig+0x2cc>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006272:	2b30      	cmp	r3, #48	@ 0x30
 8006274:	d013      	beq.n	800629e <UART_SetConfig+0x16e>
 8006276:	2b30      	cmp	r3, #48	@ 0x30
 8006278:	d814      	bhi.n	80062a4 <UART_SetConfig+0x174>
 800627a:	2b20      	cmp	r3, #32
 800627c:	d009      	beq.n	8006292 <UART_SetConfig+0x162>
 800627e:	2b20      	cmp	r3, #32
 8006280:	d810      	bhi.n	80062a4 <UART_SetConfig+0x174>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <UART_SetConfig+0x15c>
 8006286:	2b10      	cmp	r3, #16
 8006288:	d006      	beq.n	8006298 <UART_SetConfig+0x168>
 800628a:	e00b      	b.n	80062a4 <UART_SetConfig+0x174>
 800628c:	2300      	movs	r3, #0
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e0f2      	b.n	8006478 <UART_SetConfig+0x348>
 8006292:	2302      	movs	r3, #2
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0ef      	b.n	8006478 <UART_SetConfig+0x348>
 8006298:	2304      	movs	r3, #4
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0ec      	b.n	8006478 <UART_SetConfig+0x348>
 800629e:	2308      	movs	r3, #8
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e0e9      	b.n	8006478 <UART_SetConfig+0x348>
 80062a4:	2310      	movs	r3, #16
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e0e6      	b.n	8006478 <UART_SetConfig+0x348>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a56      	ldr	r2, [pc, #344]	@ (8006408 <UART_SetConfig+0x2d8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d120      	bne.n	80062f6 <UART_SetConfig+0x1c6>
 80062b4:	4b51      	ldr	r3, [pc, #324]	@ (80063fc <UART_SetConfig+0x2cc>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062be:	2bc0      	cmp	r3, #192	@ 0xc0
 80062c0:	d013      	beq.n	80062ea <UART_SetConfig+0x1ba>
 80062c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062c4:	d814      	bhi.n	80062f0 <UART_SetConfig+0x1c0>
 80062c6:	2b80      	cmp	r3, #128	@ 0x80
 80062c8:	d009      	beq.n	80062de <UART_SetConfig+0x1ae>
 80062ca:	2b80      	cmp	r3, #128	@ 0x80
 80062cc:	d810      	bhi.n	80062f0 <UART_SetConfig+0x1c0>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <UART_SetConfig+0x1a8>
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d006      	beq.n	80062e4 <UART_SetConfig+0x1b4>
 80062d6:	e00b      	b.n	80062f0 <UART_SetConfig+0x1c0>
 80062d8:	2300      	movs	r3, #0
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0cc      	b.n	8006478 <UART_SetConfig+0x348>
 80062de:	2302      	movs	r3, #2
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e0c9      	b.n	8006478 <UART_SetConfig+0x348>
 80062e4:	2304      	movs	r3, #4
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e0c6      	b.n	8006478 <UART_SetConfig+0x348>
 80062ea:	2308      	movs	r3, #8
 80062ec:	77fb      	strb	r3, [r7, #31]
 80062ee:	e0c3      	b.n	8006478 <UART_SetConfig+0x348>
 80062f0:	2310      	movs	r3, #16
 80062f2:	77fb      	strb	r3, [r7, #31]
 80062f4:	e0c0      	b.n	8006478 <UART_SetConfig+0x348>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a44      	ldr	r2, [pc, #272]	@ (800640c <UART_SetConfig+0x2dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d125      	bne.n	800634c <UART_SetConfig+0x21c>
 8006300:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <UART_SetConfig+0x2cc>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800630e:	d017      	beq.n	8006340 <UART_SetConfig+0x210>
 8006310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006314:	d817      	bhi.n	8006346 <UART_SetConfig+0x216>
 8006316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800631a:	d00b      	beq.n	8006334 <UART_SetConfig+0x204>
 800631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006320:	d811      	bhi.n	8006346 <UART_SetConfig+0x216>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <UART_SetConfig+0x1fe>
 8006326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632a:	d006      	beq.n	800633a <UART_SetConfig+0x20a>
 800632c:	e00b      	b.n	8006346 <UART_SetConfig+0x216>
 800632e:	2300      	movs	r3, #0
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e0a1      	b.n	8006478 <UART_SetConfig+0x348>
 8006334:	2302      	movs	r3, #2
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e09e      	b.n	8006478 <UART_SetConfig+0x348>
 800633a:	2304      	movs	r3, #4
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e09b      	b.n	8006478 <UART_SetConfig+0x348>
 8006340:	2308      	movs	r3, #8
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e098      	b.n	8006478 <UART_SetConfig+0x348>
 8006346:	2310      	movs	r3, #16
 8006348:	77fb      	strb	r3, [r7, #31]
 800634a:	e095      	b.n	8006478 <UART_SetConfig+0x348>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a2f      	ldr	r2, [pc, #188]	@ (8006410 <UART_SetConfig+0x2e0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d125      	bne.n	80063a2 <UART_SetConfig+0x272>
 8006356:	4b29      	ldr	r3, [pc, #164]	@ (80063fc <UART_SetConfig+0x2cc>)
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006360:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006364:	d017      	beq.n	8006396 <UART_SetConfig+0x266>
 8006366:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800636a:	d817      	bhi.n	800639c <UART_SetConfig+0x26c>
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006370:	d00b      	beq.n	800638a <UART_SetConfig+0x25a>
 8006372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006376:	d811      	bhi.n	800639c <UART_SetConfig+0x26c>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <UART_SetConfig+0x254>
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006380:	d006      	beq.n	8006390 <UART_SetConfig+0x260>
 8006382:	e00b      	b.n	800639c <UART_SetConfig+0x26c>
 8006384:	2301      	movs	r3, #1
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e076      	b.n	8006478 <UART_SetConfig+0x348>
 800638a:	2302      	movs	r3, #2
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e073      	b.n	8006478 <UART_SetConfig+0x348>
 8006390:	2304      	movs	r3, #4
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e070      	b.n	8006478 <UART_SetConfig+0x348>
 8006396:	2308      	movs	r3, #8
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e06d      	b.n	8006478 <UART_SetConfig+0x348>
 800639c:	2310      	movs	r3, #16
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e06a      	b.n	8006478 <UART_SetConfig+0x348>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <UART_SetConfig+0x2e4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d138      	bne.n	800641e <UART_SetConfig+0x2ee>
 80063ac:	4b13      	ldr	r3, [pc, #76]	@ (80063fc <UART_SetConfig+0x2cc>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80063b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063ba:	d017      	beq.n	80063ec <UART_SetConfig+0x2bc>
 80063bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80063c0:	d82a      	bhi.n	8006418 <UART_SetConfig+0x2e8>
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c6:	d00b      	beq.n	80063e0 <UART_SetConfig+0x2b0>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063cc:	d824      	bhi.n	8006418 <UART_SetConfig+0x2e8>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <UART_SetConfig+0x2aa>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d6:	d006      	beq.n	80063e6 <UART_SetConfig+0x2b6>
 80063d8:	e01e      	b.n	8006418 <UART_SetConfig+0x2e8>
 80063da:	2300      	movs	r3, #0
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e04b      	b.n	8006478 <UART_SetConfig+0x348>
 80063e0:	2302      	movs	r3, #2
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e048      	b.n	8006478 <UART_SetConfig+0x348>
 80063e6:	2304      	movs	r3, #4
 80063e8:	77fb      	strb	r3, [r7, #31]
 80063ea:	e045      	b.n	8006478 <UART_SetConfig+0x348>
 80063ec:	2308      	movs	r3, #8
 80063ee:	77fb      	strb	r3, [r7, #31]
 80063f0:	e042      	b.n	8006478 <UART_SetConfig+0x348>
 80063f2:	bf00      	nop
 80063f4:	efff69f3 	.word	0xefff69f3
 80063f8:	40011000 	.word	0x40011000
 80063fc:	40023800 	.word	0x40023800
 8006400:	40004400 	.word	0x40004400
 8006404:	40004800 	.word	0x40004800
 8006408:	40004c00 	.word	0x40004c00
 800640c:	40005000 	.word	0x40005000
 8006410:	40011400 	.word	0x40011400
 8006414:	40007800 	.word	0x40007800
 8006418:	2310      	movs	r3, #16
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e02c      	b.n	8006478 <UART_SetConfig+0x348>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a72      	ldr	r2, [pc, #456]	@ (80065ec <UART_SetConfig+0x4bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d125      	bne.n	8006474 <UART_SetConfig+0x344>
 8006428:	4b71      	ldr	r3, [pc, #452]	@ (80065f0 <UART_SetConfig+0x4c0>)
 800642a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006432:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006436:	d017      	beq.n	8006468 <UART_SetConfig+0x338>
 8006438:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800643c:	d817      	bhi.n	800646e <UART_SetConfig+0x33e>
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006442:	d00b      	beq.n	800645c <UART_SetConfig+0x32c>
 8006444:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006448:	d811      	bhi.n	800646e <UART_SetConfig+0x33e>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <UART_SetConfig+0x326>
 800644e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006452:	d006      	beq.n	8006462 <UART_SetConfig+0x332>
 8006454:	e00b      	b.n	800646e <UART_SetConfig+0x33e>
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e00d      	b.n	8006478 <UART_SetConfig+0x348>
 800645c:	2302      	movs	r3, #2
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e00a      	b.n	8006478 <UART_SetConfig+0x348>
 8006462:	2304      	movs	r3, #4
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e007      	b.n	8006478 <UART_SetConfig+0x348>
 8006468:	2308      	movs	r3, #8
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x348>
 800646e:	2310      	movs	r3, #16
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e001      	b.n	8006478 <UART_SetConfig+0x348>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006480:	d15b      	bne.n	800653a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006482:	7ffb      	ldrb	r3, [r7, #31]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d828      	bhi.n	80064da <UART_SetConfig+0x3aa>
 8006488:	a201      	add	r2, pc, #4	@ (adr r2, 8006490 <UART_SetConfig+0x360>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064c5 	.word	0x080064c5
 800649c:	080064db 	.word	0x080064db
 80064a0:	080064cb 	.word	0x080064cb
 80064a4:	080064db 	.word	0x080064db
 80064a8:	080064db 	.word	0x080064db
 80064ac:	080064db 	.word	0x080064db
 80064b0:	080064d3 	.word	0x080064d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7fd fc24 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 80064b8:	61b8      	str	r0, [r7, #24]
        break;
 80064ba:	e013      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fd fc34 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 80064c0:	61b8      	str	r0, [r7, #24]
        break;
 80064c2:	e00f      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c4:	4b4b      	ldr	r3, [pc, #300]	@ (80065f4 <UART_SetConfig+0x4c4>)
 80064c6:	61bb      	str	r3, [r7, #24]
        break;
 80064c8:	e00c      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ca:	f7fd fb07 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 80064ce:	61b8      	str	r0, [r7, #24]
        break;
 80064d0:	e008      	b.n	80064e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d6:	61bb      	str	r3, [r7, #24]
        break;
 80064d8:	e004      	b.n	80064e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	77bb      	strb	r3, [r7, #30]
        break;
 80064e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d074      	beq.n	80065d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	005a      	lsls	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	2b0f      	cmp	r3, #15
 8006504:	d916      	bls.n	8006534 <UART_SetConfig+0x404>
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650c:	d212      	bcs.n	8006534 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f023 030f 	bic.w	r3, r3, #15
 8006516:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	b29b      	uxth	r3, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	b29a      	uxth	r2, r3
 8006524:	89fb      	ldrh	r3, [r7, #14]
 8006526:	4313      	orrs	r3, r2
 8006528:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	89fa      	ldrh	r2, [r7, #14]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e04f      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77bb      	strb	r3, [r7, #30]
 8006538:	e04c      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800653a:	7ffb      	ldrb	r3, [r7, #31]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d828      	bhi.n	8006592 <UART_SetConfig+0x462>
 8006540:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x418>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	0800656d 	.word	0x0800656d
 800654c:	08006575 	.word	0x08006575
 8006550:	0800657d 	.word	0x0800657d
 8006554:	08006593 	.word	0x08006593
 8006558:	08006583 	.word	0x08006583
 800655c:	08006593 	.word	0x08006593
 8006560:	08006593 	.word	0x08006593
 8006564:	08006593 	.word	0x08006593
 8006568:	0800658b 	.word	0x0800658b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fd fbc8 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8006570:	61b8      	str	r0, [r7, #24]
        break;
 8006572:	e013      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fd fbd8 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8006578:	61b8      	str	r0, [r7, #24]
        break;
 800657a:	e00f      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800657c:	4b1d      	ldr	r3, [pc, #116]	@ (80065f4 <UART_SetConfig+0x4c4>)
 800657e:	61bb      	str	r3, [r7, #24]
        break;
 8006580:	e00c      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006582:	f7fd faab 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8006586:	61b8      	str	r0, [r7, #24]
        break;
 8006588:	e008      	b.n	800659c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658e:	61bb      	str	r3, [r7, #24]
        break;
 8006590:	e004      	b.n	800659c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77bb      	strb	r3, [r7, #30]
        break;
 800659a:	bf00      	nop
    }

    if (pclk != 0U)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085a      	lsrs	r2, r3, #1
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b0f      	cmp	r3, #15
 80065ba:	d909      	bls.n	80065d0 <UART_SetConfig+0x4a0>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c2:	d205      	bcs.n	80065d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e001      	b.n	80065d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40007c00 	.word	0x40007c00
 80065f0:	40023800 	.word	0x40023800
 80065f4:	00f42400 	.word	0x00f42400

080065f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01a      	beq.n	800670e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066f6:	d10a      	bne.n	800670e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b098      	sub	sp, #96	@ 0x60
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800674c:	f7fb f958 	bl	8001a00 <HAL_GetTick>
 8006750:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d12e      	bne.n	80067be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006760:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006768:	2200      	movs	r2, #0
 800676a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f88c 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d021      	beq.n	80067be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800678e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006798:	647b      	str	r3, [r7, #68]	@ 0x44
 800679a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800679e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e6      	bne.n	800677a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e062      	b.n	8006884 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d149      	bne.n	8006860 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d4:	2200      	movs	r2, #0
 80067d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f856 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03c      	beq.n	8006860 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	e853 3f00 	ldrex	r3, [r3]
 80067f2:	623b      	str	r3, [r7, #32]
   return(result);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006804:	633b      	str	r3, [r7, #48]	@ 0x30
 8006806:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800680a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680c:	e841 2300 	strex	r3, r2, [r1]
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e6      	bne.n	80067e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60fb      	str	r3, [r7, #12]
   return(result);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006838:	61fa      	str	r2, [r7, #28]
 800683a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	69fa      	ldr	r2, [r7, #28]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	617b      	str	r3, [r7, #20]
   return(result);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e5      	bne.n	8006818 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e011      	b.n	8006884 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3758      	adds	r7, #88	@ 0x58
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	4613      	mov	r3, r2
 800689a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689c:	e04f      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a4:	d04b      	beq.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a6:	f7fb f8ab 	bl	8001a00 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d302      	bcc.n	80068bc <UART_WaitOnFlagUntilTimeout+0x30>
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e04e      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d037      	beq.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b80      	cmp	r3, #128	@ 0x80
 80068d2:	d034      	beq.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b40      	cmp	r3, #64	@ 0x40
 80068d8:	d031      	beq.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d110      	bne.n	800690a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2208      	movs	r2, #8
 80068ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f838 	bl	8006966 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2208      	movs	r2, #8
 80068fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e029      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006918:	d111      	bne.n	800693e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f81e 	bl	8006966 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e00f      	b.n	800695e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4013      	ands	r3, r2
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	429a      	cmp	r2, r3
 800695a:	d0a0      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006966:	b480      	push	{r7}
 8006968:	b095      	sub	sp, #84	@ 0x54
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698c:	643b      	str	r3, [r7, #64]	@ 0x40
 800698e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006992:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e6      	bne.n	800696e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d118      	bne.n	8006a0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a22:	bf00      	nop
 8006a24:	3754      	adds	r7, #84	@ 0x54
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff fb4f 	bl	80060f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b088      	sub	sp, #32
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6979      	ldr	r1, [r7, #20]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e6      	bne.n	8006a62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fb1b 	bl	80060dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aa6:	bf00      	nop
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	f107 001c 	add.w	r0, r7, #28
 8006abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ac2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d121      	bne.n	8006b0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	4b21      	ldr	r3, [pc, #132]	@ (8006b60 <USB_CoreInit+0xb0>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d105      	bne.n	8006b02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa92 	bl	800702c <USB_CoreReset>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
 8006b0c:	e010      	b.n	8006b30 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa86 	bl	800702c <USB_CoreReset>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b30:	7fbb      	ldrb	r3, [r7, #30]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10b      	bne.n	8006b4e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f043 0206 	orr.w	r2, r3, #6
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f043 0220 	orr.w	r2, r3, #32
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b5a:	b004      	add	sp, #16
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	ffbdffbf 	.word	0xffbdffbf

08006b64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f023 0201 	bic.w	r2, r3, #1
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d115      	bne.n	8006bd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bb4:	200a      	movs	r0, #10
 8006bb6:	f7fa ff2f 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	330a      	adds	r3, #10
 8006bbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa25 	bl	8007010 <USB_GetMode>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d01e      	beq.n	8006c0a <USB_SetCurrentMode+0x84>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bd0:	d9f0      	bls.n	8006bb4 <USB_SetCurrentMode+0x2e>
 8006bd2:	e01a      	b.n	8006c0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d115      	bne.n	8006c06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006be6:	200a      	movs	r0, #10
 8006be8:	f7fa ff16 	bl	8001a18 <HAL_Delay>
      ms += 10U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	330a      	adds	r3, #10
 8006bf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fa0c 	bl	8007010 <USB_GetMode>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <USB_SetCurrentMode+0x84>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c02:	d9f0      	bls.n	8006be6 <USB_SetCurrentMode+0x60>
 8006c04:	e001      	b.n	8006c0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e005      	b.n	8006c16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c0e:	d101      	bne.n	8006c14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e000      	b.n	8006c16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c20:	b084      	sub	sp, #16
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e009      	b.n	8006c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3340      	adds	r3, #64	@ 0x40
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3301      	adds	r3, #1
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b0e      	cmp	r3, #14
 8006c58:	d9f2      	bls.n	8006c40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11c      	bne.n	8006c9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e005      	b.n	8006ca8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10d      	bne.n	8006cd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f968 	bl	8006f9c <USB_SetDevSpeed>
 8006ccc:	e008      	b.n	8006ce0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cce:	2101      	movs	r1, #1
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f963 	bl	8006f9c <USB_SetDevSpeed>
 8006cd6:	e003      	b.n	8006ce0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cd8:	2103      	movs	r1, #3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f95e 	bl	8006f9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ce0:	2110      	movs	r1, #16
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f8fa 	bl	8006edc <USB_FlushTxFifo>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f924 	bl	8006f40 <USB_FlushRxFifo>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d14:	461a      	mov	r2, r3
 8006d16:	2300      	movs	r3, #0
 8006d18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	e043      	b.n	8006db4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d42:	d118      	bne.n	8006d76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d56:	461a      	mov	r2, r3
 8006d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d5c:	6013      	str	r3, [r2, #0]
 8006d5e:	e013      	b.n	8006d88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	e008      	b.n	8006d88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d82:	461a      	mov	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d94:	461a      	mov	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da6:	461a      	mov	r2, r3
 8006da8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3301      	adds	r3, #1
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006db8:	461a      	mov	r2, r3
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d3b5      	bcc.n	8006d2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	e043      	b.n	8006e4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ddc:	d118      	bne.n	8006e10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df0:	461a      	mov	r2, r3
 8006df2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	e013      	b.n	8006e22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e06:	461a      	mov	r2, r3
 8006e08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e008      	b.n	8006e22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2e:	461a      	mov	r2, r3
 8006e30:	2300      	movs	r3, #0
 8006e32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e40:	461a      	mov	r2, r3
 8006e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e52:	461a      	mov	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d3b5      	bcc.n	8006dc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	f043 0210 	orr.w	r2, r3, #16
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <USB_DevInit+0x2b4>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f043 0208 	orr.w	r2, r3, #8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d105      	bne.n	8006ec4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <USB_DevInit+0x2b8>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ed0:	b004      	add	sp, #16
 8006ed2:	4770      	bx	lr
 8006ed4:	803c3800 	.word	0x803c3800
 8006ed8:	40000004 	.word	0x40000004

08006edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ef6:	d901      	bls.n	8006efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01b      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	daf2      	bge.n	8006eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	019b      	lsls	r3, r3, #6
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f20:	d901      	bls.n	8006f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d0f0      	beq.n	8006f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f58:	d901      	bls.n	8006f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e018      	b.n	8006f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	daf2      	bge.n	8006f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e006      	b.n	8006f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d0f0      	beq.n	8006f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fe8:	f023 0303 	bic.w	r3, r3, #3
 8006fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0301 	and.w	r3, r3, #1
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007044:	d901      	bls.n	800704a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e01b      	b.n	8007082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	daf2      	bge.n	8007038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	f043 0201 	orr.w	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800706e:	d901      	bls.n	8007074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e006      	b.n	8007082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d0f0      	beq.n	8007062 <USB_CoreReset+0x36>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <__cvt>:
 800708e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007090:	ed2d 8b02 	vpush	{d8}
 8007094:	eeb0 8b40 	vmov.f64	d8, d0
 8007098:	b085      	sub	sp, #20
 800709a:	4617      	mov	r7, r2
 800709c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800709e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070a0:	ee18 2a90 	vmov	r2, s17
 80070a4:	f025 0520 	bic.w	r5, r5, #32
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	bfb6      	itet	lt
 80070ac:	222d      	movlt	r2, #45	@ 0x2d
 80070ae:	2200      	movge	r2, #0
 80070b0:	eeb1 8b40 	vneglt.f64	d8, d0
 80070b4:	2d46      	cmp	r5, #70	@ 0x46
 80070b6:	460c      	mov	r4, r1
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	d004      	beq.n	80070c6 <__cvt+0x38>
 80070bc:	2d45      	cmp	r5, #69	@ 0x45
 80070be:	d100      	bne.n	80070c2 <__cvt+0x34>
 80070c0:	3401      	adds	r4, #1
 80070c2:	2102      	movs	r1, #2
 80070c4:	e000      	b.n	80070c8 <__cvt+0x3a>
 80070c6:	2103      	movs	r1, #3
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	ab02      	add	r3, sp, #8
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4622      	mov	r2, r4
 80070d2:	4633      	mov	r3, r6
 80070d4:	eeb0 0b48 	vmov.f64	d0, d8
 80070d8:	f000 fdb6 	bl	8007c48 <_dtoa_r>
 80070dc:	2d47      	cmp	r5, #71	@ 0x47
 80070de:	d114      	bne.n	800710a <__cvt+0x7c>
 80070e0:	07fb      	lsls	r3, r7, #31
 80070e2:	d50a      	bpl.n	80070fa <__cvt+0x6c>
 80070e4:	1902      	adds	r2, r0, r4
 80070e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80070ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ee:	bf08      	it	eq
 80070f0:	9203      	streq	r2, [sp, #12]
 80070f2:	2130      	movs	r1, #48	@ 0x30
 80070f4:	9b03      	ldr	r3, [sp, #12]
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d319      	bcc.n	800712e <__cvt+0xa0>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070fe:	1a1b      	subs	r3, r3, r0
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	b005      	add	sp, #20
 8007104:	ecbd 8b02 	vpop	{d8}
 8007108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710a:	2d46      	cmp	r5, #70	@ 0x46
 800710c:	eb00 0204 	add.w	r2, r0, r4
 8007110:	d1e9      	bne.n	80070e6 <__cvt+0x58>
 8007112:	7803      	ldrb	r3, [r0, #0]
 8007114:	2b30      	cmp	r3, #48	@ 0x30
 8007116:	d107      	bne.n	8007128 <__cvt+0x9a>
 8007118:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	bf1c      	itt	ne
 8007122:	f1c4 0401 	rsbne	r4, r4, #1
 8007126:	6034      	strne	r4, [r6, #0]
 8007128:	6833      	ldr	r3, [r6, #0]
 800712a:	441a      	add	r2, r3
 800712c:	e7db      	b.n	80070e6 <__cvt+0x58>
 800712e:	1c5c      	adds	r4, r3, #1
 8007130:	9403      	str	r4, [sp, #12]
 8007132:	7019      	strb	r1, [r3, #0]
 8007134:	e7de      	b.n	80070f4 <__cvt+0x66>

08007136 <__exponent>:
 8007136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007138:	2900      	cmp	r1, #0
 800713a:	bfba      	itte	lt
 800713c:	4249      	neglt	r1, r1
 800713e:	232d      	movlt	r3, #45	@ 0x2d
 8007140:	232b      	movge	r3, #43	@ 0x2b
 8007142:	2909      	cmp	r1, #9
 8007144:	7002      	strb	r2, [r0, #0]
 8007146:	7043      	strb	r3, [r0, #1]
 8007148:	dd29      	ble.n	800719e <__exponent+0x68>
 800714a:	f10d 0307 	add.w	r3, sp, #7
 800714e:	461d      	mov	r5, r3
 8007150:	270a      	movs	r7, #10
 8007152:	461a      	mov	r2, r3
 8007154:	fbb1 f6f7 	udiv	r6, r1, r7
 8007158:	fb07 1416 	mls	r4, r7, r6, r1
 800715c:	3430      	adds	r4, #48	@ 0x30
 800715e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007162:	460c      	mov	r4, r1
 8007164:	2c63      	cmp	r4, #99	@ 0x63
 8007166:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800716a:	4631      	mov	r1, r6
 800716c:	dcf1      	bgt.n	8007152 <__exponent+0x1c>
 800716e:	3130      	adds	r1, #48	@ 0x30
 8007170:	1e94      	subs	r4, r2, #2
 8007172:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007176:	1c41      	adds	r1, r0, #1
 8007178:	4623      	mov	r3, r4
 800717a:	42ab      	cmp	r3, r5
 800717c:	d30a      	bcc.n	8007194 <__exponent+0x5e>
 800717e:	f10d 0309 	add.w	r3, sp, #9
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	42ac      	cmp	r4, r5
 8007186:	bf88      	it	hi
 8007188:	2300      	movhi	r3, #0
 800718a:	3302      	adds	r3, #2
 800718c:	4403      	add	r3, r0
 800718e:	1a18      	subs	r0, r3, r0
 8007190:	b003      	add	sp, #12
 8007192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007194:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007198:	f801 6f01 	strb.w	r6, [r1, #1]!
 800719c:	e7ed      	b.n	800717a <__exponent+0x44>
 800719e:	2330      	movs	r3, #48	@ 0x30
 80071a0:	3130      	adds	r1, #48	@ 0x30
 80071a2:	7083      	strb	r3, [r0, #2]
 80071a4:	70c1      	strb	r1, [r0, #3]
 80071a6:	1d03      	adds	r3, r0, #4
 80071a8:	e7f1      	b.n	800718e <__exponent+0x58>
 80071aa:	0000      	movs	r0, r0
 80071ac:	0000      	movs	r0, r0
	...

080071b0 <_printf_float>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	b08d      	sub	sp, #52	@ 0x34
 80071b6:	460c      	mov	r4, r1
 80071b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071bc:	4616      	mov	r6, r2
 80071be:	461f      	mov	r7, r3
 80071c0:	4605      	mov	r5, r0
 80071c2:	f000 fc87 	bl	8007ad4 <_localeconv_r>
 80071c6:	f8d0 b000 	ldr.w	fp, [r0]
 80071ca:	4658      	mov	r0, fp
 80071cc:	f7f9 f888 	bl	80002e0 <strlen>
 80071d0:	2300      	movs	r3, #0
 80071d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d4:	f8d8 3000 	ldr.w	r3, [r8]
 80071d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80071dc:	6822      	ldr	r2, [r4, #0]
 80071de:	9005      	str	r0, [sp, #20]
 80071e0:	3307      	adds	r3, #7
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	f103 0108 	add.w	r1, r3, #8
 80071ea:	f8c8 1000 	str.w	r1, [r8]
 80071ee:	ed93 0b00 	vldr	d0, [r3]
 80071f2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007450 <_printf_float+0x2a0>
 80071f6:	eeb0 7bc0 	vabs.f64	d7, d0
 80071fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80071fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007202:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007206:	dd24      	ble.n	8007252 <_printf_float+0xa2>
 8007208:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007210:	d502      	bpl.n	8007218 <_printf_float+0x68>
 8007212:	232d      	movs	r3, #45	@ 0x2d
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007218:	498f      	ldr	r1, [pc, #572]	@ (8007458 <_printf_float+0x2a8>)
 800721a:	4b90      	ldr	r3, [pc, #576]	@ (800745c <_printf_float+0x2ac>)
 800721c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007220:	bf94      	ite	ls
 8007222:	4688      	movls	r8, r1
 8007224:	4698      	movhi	r8, r3
 8007226:	f022 0204 	bic.w	r2, r2, #4
 800722a:	2303      	movs	r3, #3
 800722c:	6123      	str	r3, [r4, #16]
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	f04f 0a00 	mov.w	sl, #0
 8007234:	9700      	str	r7, [sp, #0]
 8007236:	4633      	mov	r3, r6
 8007238:	aa0b      	add	r2, sp, #44	@ 0x2c
 800723a:	4621      	mov	r1, r4
 800723c:	4628      	mov	r0, r5
 800723e:	f000 f9d1 	bl	80075e4 <_printf_common>
 8007242:	3001      	adds	r0, #1
 8007244:	f040 8089 	bne.w	800735a <_printf_float+0x1aa>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800724c:	b00d      	add	sp, #52	@ 0x34
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	eeb4 0b40 	vcmp.f64	d0, d0
 8007256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725a:	d709      	bvc.n	8007270 <_printf_float+0xc0>
 800725c:	ee10 3a90 	vmov	r3, s1
 8007260:	2b00      	cmp	r3, #0
 8007262:	bfbc      	itt	lt
 8007264:	232d      	movlt	r3, #45	@ 0x2d
 8007266:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800726a:	497d      	ldr	r1, [pc, #500]	@ (8007460 <_printf_float+0x2b0>)
 800726c:	4b7d      	ldr	r3, [pc, #500]	@ (8007464 <_printf_float+0x2b4>)
 800726e:	e7d5      	b.n	800721c <_printf_float+0x6c>
 8007270:	6863      	ldr	r3, [r4, #4]
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007278:	d139      	bne.n	80072ee <_printf_float+0x13e>
 800727a:	2306      	movs	r3, #6
 800727c:	6063      	str	r3, [r4, #4]
 800727e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007282:	2300      	movs	r3, #0
 8007284:	6022      	str	r2, [r4, #0]
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	ab0a      	add	r3, sp, #40	@ 0x28
 800728a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800728e:	ab09      	add	r3, sp, #36	@ 0x24
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	6861      	ldr	r1, [r4, #4]
 8007294:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007298:	4628      	mov	r0, r5
 800729a:	f7ff fef8 	bl	800708e <__cvt>
 800729e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80072a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072a4:	4680      	mov	r8, r0
 80072a6:	d129      	bne.n	80072fc <_printf_float+0x14c>
 80072a8:	1cc8      	adds	r0, r1, #3
 80072aa:	db02      	blt.n	80072b2 <_printf_float+0x102>
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	4299      	cmp	r1, r3
 80072b0:	dd41      	ble.n	8007336 <_printf_float+0x186>
 80072b2:	f1a9 0902 	sub.w	r9, r9, #2
 80072b6:	fa5f f989 	uxtb.w	r9, r9
 80072ba:	3901      	subs	r1, #1
 80072bc:	464a      	mov	r2, r9
 80072be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80072c4:	f7ff ff37 	bl	8007136 <__exponent>
 80072c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072ca:	1813      	adds	r3, r2, r0
 80072cc:	2a01      	cmp	r2, #1
 80072ce:	4682      	mov	sl, r0
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	dc02      	bgt.n	80072da <_printf_float+0x12a>
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	07d2      	lsls	r2, r2, #31
 80072d8:	d501      	bpl.n	80072de <_printf_float+0x12e>
 80072da:	3301      	adds	r3, #1
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0a6      	beq.n	8007234 <_printf_float+0x84>
 80072e6:	232d      	movs	r3, #45	@ 0x2d
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ec:	e7a2      	b.n	8007234 <_printf_float+0x84>
 80072ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80072f2:	d1c4      	bne.n	800727e <_printf_float+0xce>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1c2      	bne.n	800727e <_printf_float+0xce>
 80072f8:	2301      	movs	r3, #1
 80072fa:	e7bf      	b.n	800727c <_printf_float+0xcc>
 80072fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007300:	d9db      	bls.n	80072ba <_printf_float+0x10a>
 8007302:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007306:	d118      	bne.n	800733a <_printf_float+0x18a>
 8007308:	2900      	cmp	r1, #0
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	dd0b      	ble.n	8007326 <_printf_float+0x176>
 800730e:	6121      	str	r1, [r4, #16]
 8007310:	b913      	cbnz	r3, 8007318 <_printf_float+0x168>
 8007312:	6822      	ldr	r2, [r4, #0]
 8007314:	07d0      	lsls	r0, r2, #31
 8007316:	d502      	bpl.n	800731e <_printf_float+0x16e>
 8007318:	3301      	adds	r3, #1
 800731a:	440b      	add	r3, r1
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007320:	f04f 0a00 	mov.w	sl, #0
 8007324:	e7db      	b.n	80072de <_printf_float+0x12e>
 8007326:	b913      	cbnz	r3, 800732e <_printf_float+0x17e>
 8007328:	6822      	ldr	r2, [r4, #0]
 800732a:	07d2      	lsls	r2, r2, #31
 800732c:	d501      	bpl.n	8007332 <_printf_float+0x182>
 800732e:	3302      	adds	r3, #2
 8007330:	e7f4      	b.n	800731c <_printf_float+0x16c>
 8007332:	2301      	movs	r3, #1
 8007334:	e7f2      	b.n	800731c <_printf_float+0x16c>
 8007336:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800733a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800733c:	4299      	cmp	r1, r3
 800733e:	db05      	blt.n	800734c <_printf_float+0x19c>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	6121      	str	r1, [r4, #16]
 8007344:	07d8      	lsls	r0, r3, #31
 8007346:	d5ea      	bpl.n	800731e <_printf_float+0x16e>
 8007348:	1c4b      	adds	r3, r1, #1
 800734a:	e7e7      	b.n	800731c <_printf_float+0x16c>
 800734c:	2900      	cmp	r1, #0
 800734e:	bfd4      	ite	le
 8007350:	f1c1 0202 	rsble	r2, r1, #2
 8007354:	2201      	movgt	r2, #1
 8007356:	4413      	add	r3, r2
 8007358:	e7e0      	b.n	800731c <_printf_float+0x16c>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	055a      	lsls	r2, r3, #21
 800735e:	d407      	bmi.n	8007370 <_printf_float+0x1c0>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	4642      	mov	r2, r8
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	d12a      	bne.n	80073c4 <_printf_float+0x214>
 800736e:	e76b      	b.n	8007248 <_printf_float+0x98>
 8007370:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007374:	f240 80e0 	bls.w	8007538 <_printf_float+0x388>
 8007378:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800737c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007384:	d133      	bne.n	80073ee <_printf_float+0x23e>
 8007386:	4a38      	ldr	r2, [pc, #224]	@ (8007468 <_printf_float+0x2b8>)
 8007388:	2301      	movs	r3, #1
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	47b8      	blx	r7
 8007390:	3001      	adds	r0, #1
 8007392:	f43f af59 	beq.w	8007248 <_printf_float+0x98>
 8007396:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800739a:	4543      	cmp	r3, r8
 800739c:	db02      	blt.n	80073a4 <_printf_float+0x1f4>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	07d8      	lsls	r0, r3, #31
 80073a2:	d50f      	bpl.n	80073c4 <_printf_float+0x214>
 80073a4:	9b05      	ldr	r3, [sp, #20]
 80073a6:	465a      	mov	r2, fp
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f af4a 	beq.w	8007248 <_printf_float+0x98>
 80073b4:	f04f 0900 	mov.w	r9, #0
 80073b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80073bc:	f104 0a1a 	add.w	sl, r4, #26
 80073c0:	45c8      	cmp	r8, r9
 80073c2:	dc09      	bgt.n	80073d8 <_printf_float+0x228>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	079b      	lsls	r3, r3, #30
 80073c8:	f100 8107 	bmi.w	80075da <_printf_float+0x42a>
 80073cc:	68e0      	ldr	r0, [r4, #12]
 80073ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d0:	4298      	cmp	r0, r3
 80073d2:	bfb8      	it	lt
 80073d4:	4618      	movlt	r0, r3
 80073d6:	e739      	b.n	800724c <_printf_float+0x9c>
 80073d8:	2301      	movs	r3, #1
 80073da:	4652      	mov	r2, sl
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af30 	beq.w	8007248 <_printf_float+0x98>
 80073e8:	f109 0901 	add.w	r9, r9, #1
 80073ec:	e7e8      	b.n	80073c0 <_printf_float+0x210>
 80073ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc3b      	bgt.n	800746c <_printf_float+0x2bc>
 80073f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007468 <_printf_float+0x2b8>)
 80073f6:	2301      	movs	r3, #1
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	f43f af22 	beq.w	8007248 <_printf_float+0x98>
 8007404:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007408:	ea59 0303 	orrs.w	r3, r9, r3
 800740c:	d102      	bne.n	8007414 <_printf_float+0x264>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	07d9      	lsls	r1, r3, #31
 8007412:	d5d7      	bpl.n	80073c4 <_printf_float+0x214>
 8007414:	9b05      	ldr	r3, [sp, #20]
 8007416:	465a      	mov	r2, fp
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af12 	beq.w	8007248 <_printf_float+0x98>
 8007424:	f04f 0a00 	mov.w	sl, #0
 8007428:	f104 0b1a 	add.w	fp, r4, #26
 800742c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742e:	425b      	negs	r3, r3
 8007430:	4553      	cmp	r3, sl
 8007432:	dc01      	bgt.n	8007438 <_printf_float+0x288>
 8007434:	464b      	mov	r3, r9
 8007436:	e794      	b.n	8007362 <_printf_float+0x1b2>
 8007438:	2301      	movs	r3, #1
 800743a:	465a      	mov	r2, fp
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	f43f af00 	beq.w	8007248 <_printf_float+0x98>
 8007448:	f10a 0a01 	add.w	sl, sl, #1
 800744c:	e7ee      	b.n	800742c <_printf_float+0x27c>
 800744e:	bf00      	nop
 8007450:	ffffffff 	.word	0xffffffff
 8007454:	7fefffff 	.word	0x7fefffff
 8007458:	08009c98 	.word	0x08009c98
 800745c:	08009c9c 	.word	0x08009c9c
 8007460:	08009ca0 	.word	0x08009ca0
 8007464:	08009ca4 	.word	0x08009ca4
 8007468:	08009ca8 	.word	0x08009ca8
 800746c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800746e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007472:	4553      	cmp	r3, sl
 8007474:	bfa8      	it	ge
 8007476:	4653      	movge	r3, sl
 8007478:	2b00      	cmp	r3, #0
 800747a:	4699      	mov	r9, r3
 800747c:	dc37      	bgt.n	80074ee <_printf_float+0x33e>
 800747e:	2300      	movs	r3, #0
 8007480:	9307      	str	r3, [sp, #28]
 8007482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007486:	f104 021a 	add.w	r2, r4, #26
 800748a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800748c:	9907      	ldr	r1, [sp, #28]
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	eba3 0309 	sub.w	r3, r3, r9
 8007494:	428b      	cmp	r3, r1
 8007496:	dc31      	bgt.n	80074fc <_printf_float+0x34c>
 8007498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749a:	459a      	cmp	sl, r3
 800749c:	dc3b      	bgt.n	8007516 <_printf_float+0x366>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	07da      	lsls	r2, r3, #31
 80074a2:	d438      	bmi.n	8007516 <_printf_float+0x366>
 80074a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a6:	ebaa 0903 	sub.w	r9, sl, r3
 80074aa:	9b06      	ldr	r3, [sp, #24]
 80074ac:	ebaa 0303 	sub.w	r3, sl, r3
 80074b0:	4599      	cmp	r9, r3
 80074b2:	bfa8      	it	ge
 80074b4:	4699      	movge	r9, r3
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	dc34      	bgt.n	8007526 <_printf_float+0x376>
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074c4:	f104 0b1a 	add.w	fp, r4, #26
 80074c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ca:	ebaa 0303 	sub.w	r3, sl, r3
 80074ce:	eba3 0309 	sub.w	r3, r3, r9
 80074d2:	4543      	cmp	r3, r8
 80074d4:	f77f af76 	ble.w	80073c4 <_printf_float+0x214>
 80074d8:	2301      	movs	r3, #1
 80074da:	465a      	mov	r2, fp
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f aeb0 	beq.w	8007248 <_printf_float+0x98>
 80074e8:	f108 0801 	add.w	r8, r8, #1
 80074ec:	e7ec      	b.n	80074c8 <_printf_float+0x318>
 80074ee:	4642      	mov	r2, r8
 80074f0:	4631      	mov	r1, r6
 80074f2:	4628      	mov	r0, r5
 80074f4:	47b8      	blx	r7
 80074f6:	3001      	adds	r0, #1
 80074f8:	d1c1      	bne.n	800747e <_printf_float+0x2ce>
 80074fa:	e6a5      	b.n	8007248 <_printf_float+0x98>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4631      	mov	r1, r6
 8007500:	4628      	mov	r0, r5
 8007502:	9206      	str	r2, [sp, #24]
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	f43f ae9e 	beq.w	8007248 <_printf_float+0x98>
 800750c:	9b07      	ldr	r3, [sp, #28]
 800750e:	9a06      	ldr	r2, [sp, #24]
 8007510:	3301      	adds	r3, #1
 8007512:	9307      	str	r3, [sp, #28]
 8007514:	e7b9      	b.n	800748a <_printf_float+0x2da>
 8007516:	9b05      	ldr	r3, [sp, #20]
 8007518:	465a      	mov	r2, fp
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	d1bf      	bne.n	80074a4 <_printf_float+0x2f4>
 8007524:	e690      	b.n	8007248 <_printf_float+0x98>
 8007526:	9a06      	ldr	r2, [sp, #24]
 8007528:	464b      	mov	r3, r9
 800752a:	4442      	add	r2, r8
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	d1c2      	bne.n	80074bc <_printf_float+0x30c>
 8007536:	e687      	b.n	8007248 <_printf_float+0x98>
 8007538:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800753c:	f1b9 0f01 	cmp.w	r9, #1
 8007540:	dc01      	bgt.n	8007546 <_printf_float+0x396>
 8007542:	07db      	lsls	r3, r3, #31
 8007544:	d536      	bpl.n	80075b4 <_printf_float+0x404>
 8007546:	2301      	movs	r3, #1
 8007548:	4642      	mov	r2, r8
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	f43f ae79 	beq.w	8007248 <_printf_float+0x98>
 8007556:	9b05      	ldr	r3, [sp, #20]
 8007558:	465a      	mov	r2, fp
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f ae71 	beq.w	8007248 <_printf_float+0x98>
 8007566:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800756a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800756e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007572:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8007576:	d018      	beq.n	80075aa <_printf_float+0x3fa>
 8007578:	464b      	mov	r3, r9
 800757a:	f108 0201 	add.w	r2, r8, #1
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	47b8      	blx	r7
 8007584:	3001      	adds	r0, #1
 8007586:	d10c      	bne.n	80075a2 <_printf_float+0x3f2>
 8007588:	e65e      	b.n	8007248 <_printf_float+0x98>
 800758a:	2301      	movs	r3, #1
 800758c:	465a      	mov	r2, fp
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f ae57 	beq.w	8007248 <_printf_float+0x98>
 800759a:	f108 0801 	add.w	r8, r8, #1
 800759e:	45c8      	cmp	r8, r9
 80075a0:	dbf3      	blt.n	800758a <_printf_float+0x3da>
 80075a2:	4653      	mov	r3, sl
 80075a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075a8:	e6dc      	b.n	8007364 <_printf_float+0x1b4>
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	f104 0b1a 	add.w	fp, r4, #26
 80075b2:	e7f4      	b.n	800759e <_printf_float+0x3ee>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4642      	mov	r2, r8
 80075b8:	e7e1      	b.n	800757e <_printf_float+0x3ce>
 80075ba:	2301      	movs	r3, #1
 80075bc:	464a      	mov	r2, r9
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	f43f ae3f 	beq.w	8007248 <_printf_float+0x98>
 80075ca:	f108 0801 	add.w	r8, r8, #1
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075d2:	1a5b      	subs	r3, r3, r1
 80075d4:	4543      	cmp	r3, r8
 80075d6:	dcf0      	bgt.n	80075ba <_printf_float+0x40a>
 80075d8:	e6f8      	b.n	80073cc <_printf_float+0x21c>
 80075da:	f04f 0800 	mov.w	r8, #0
 80075de:	f104 0919 	add.w	r9, r4, #25
 80075e2:	e7f4      	b.n	80075ce <_printf_float+0x41e>

080075e4 <_printf_common>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	4616      	mov	r6, r2
 80075ea:	4698      	mov	r8, r3
 80075ec:	688a      	ldr	r2, [r1, #8]
 80075ee:	690b      	ldr	r3, [r1, #16]
 80075f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	bfb8      	it	lt
 80075f8:	4613      	movlt	r3, r2
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007600:	4607      	mov	r7, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b10a      	cbz	r2, 800760a <_printf_common+0x26>
 8007606:	3301      	adds	r3, #1
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	0699      	lsls	r1, r3, #26
 800760e:	bf42      	ittt	mi
 8007610:	6833      	ldrmi	r3, [r6, #0]
 8007612:	3302      	addmi	r3, #2
 8007614:	6033      	strmi	r3, [r6, #0]
 8007616:	6825      	ldr	r5, [r4, #0]
 8007618:	f015 0506 	ands.w	r5, r5, #6
 800761c:	d106      	bne.n	800762c <_printf_common+0x48>
 800761e:	f104 0a19 	add.w	sl, r4, #25
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	6832      	ldr	r2, [r6, #0]
 8007626:	1a9b      	subs	r3, r3, r2
 8007628:	42ab      	cmp	r3, r5
 800762a:	dc26      	bgt.n	800767a <_printf_common+0x96>
 800762c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	3b00      	subs	r3, #0
 8007634:	bf18      	it	ne
 8007636:	2301      	movne	r3, #1
 8007638:	0692      	lsls	r2, r2, #26
 800763a:	d42b      	bmi.n	8007694 <_printf_common+0xb0>
 800763c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007640:	4641      	mov	r1, r8
 8007642:	4638      	mov	r0, r7
 8007644:	47c8      	blx	r9
 8007646:	3001      	adds	r0, #1
 8007648:	d01e      	beq.n	8007688 <_printf_common+0xa4>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	6922      	ldr	r2, [r4, #16]
 800764e:	f003 0306 	and.w	r3, r3, #6
 8007652:	2b04      	cmp	r3, #4
 8007654:	bf02      	ittt	eq
 8007656:	68e5      	ldreq	r5, [r4, #12]
 8007658:	6833      	ldreq	r3, [r6, #0]
 800765a:	1aed      	subeq	r5, r5, r3
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	bf0c      	ite	eq
 8007660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007664:	2500      	movne	r5, #0
 8007666:	4293      	cmp	r3, r2
 8007668:	bfc4      	itt	gt
 800766a:	1a9b      	subgt	r3, r3, r2
 800766c:	18ed      	addgt	r5, r5, r3
 800766e:	2600      	movs	r6, #0
 8007670:	341a      	adds	r4, #26
 8007672:	42b5      	cmp	r5, r6
 8007674:	d11a      	bne.n	80076ac <_printf_common+0xc8>
 8007676:	2000      	movs	r0, #0
 8007678:	e008      	b.n	800768c <_printf_common+0xa8>
 800767a:	2301      	movs	r3, #1
 800767c:	4652      	mov	r2, sl
 800767e:	4641      	mov	r1, r8
 8007680:	4638      	mov	r0, r7
 8007682:	47c8      	blx	r9
 8007684:	3001      	adds	r0, #1
 8007686:	d103      	bne.n	8007690 <_printf_common+0xac>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800768c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007690:	3501      	adds	r5, #1
 8007692:	e7c6      	b.n	8007622 <_printf_common+0x3e>
 8007694:	18e1      	adds	r1, r4, r3
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	2030      	movs	r0, #48	@ 0x30
 800769a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800769e:	4422      	add	r2, r4
 80076a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076a8:	3302      	adds	r3, #2
 80076aa:	e7c7      	b.n	800763c <_printf_common+0x58>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4622      	mov	r2, r4
 80076b0:	4641      	mov	r1, r8
 80076b2:	4638      	mov	r0, r7
 80076b4:	47c8      	blx	r9
 80076b6:	3001      	adds	r0, #1
 80076b8:	d0e6      	beq.n	8007688 <_printf_common+0xa4>
 80076ba:	3601      	adds	r6, #1
 80076bc:	e7d9      	b.n	8007672 <_printf_common+0x8e>
	...

080076c0 <_printf_i>:
 80076c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	7e0f      	ldrb	r7, [r1, #24]
 80076c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076c8:	2f78      	cmp	r7, #120	@ 0x78
 80076ca:	4691      	mov	r9, r2
 80076cc:	4680      	mov	r8, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	469a      	mov	sl, r3
 80076d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076d6:	d807      	bhi.n	80076e8 <_printf_i+0x28>
 80076d8:	2f62      	cmp	r7, #98	@ 0x62
 80076da:	d80a      	bhi.n	80076f2 <_printf_i+0x32>
 80076dc:	2f00      	cmp	r7, #0
 80076de:	f000 80d2 	beq.w	8007886 <_printf_i+0x1c6>
 80076e2:	2f58      	cmp	r7, #88	@ 0x58
 80076e4:	f000 80b9 	beq.w	800785a <_printf_i+0x19a>
 80076e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076f0:	e03a      	b.n	8007768 <_printf_i+0xa8>
 80076f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076f6:	2b15      	cmp	r3, #21
 80076f8:	d8f6      	bhi.n	80076e8 <_printf_i+0x28>
 80076fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007700 <_printf_i+0x40>)
 80076fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007700:	08007759 	.word	0x08007759
 8007704:	0800776d 	.word	0x0800776d
 8007708:	080076e9 	.word	0x080076e9
 800770c:	080076e9 	.word	0x080076e9
 8007710:	080076e9 	.word	0x080076e9
 8007714:	080076e9 	.word	0x080076e9
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080076e9 	.word	0x080076e9
 8007720:	080076e9 	.word	0x080076e9
 8007724:	080076e9 	.word	0x080076e9
 8007728:	080076e9 	.word	0x080076e9
 800772c:	0800786d 	.word	0x0800786d
 8007730:	08007797 	.word	0x08007797
 8007734:	08007827 	.word	0x08007827
 8007738:	080076e9 	.word	0x080076e9
 800773c:	080076e9 	.word	0x080076e9
 8007740:	0800788f 	.word	0x0800788f
 8007744:	080076e9 	.word	0x080076e9
 8007748:	08007797 	.word	0x08007797
 800774c:	080076e9 	.word	0x080076e9
 8007750:	080076e9 	.word	0x080076e9
 8007754:	0800782f 	.word	0x0800782f
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6032      	str	r2, [r6, #0]
 8007760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007764:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007768:	2301      	movs	r3, #1
 800776a:	e09d      	b.n	80078a8 <_printf_i+0x1e8>
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	1d19      	adds	r1, r3, #4
 8007772:	6031      	str	r1, [r6, #0]
 8007774:	0606      	lsls	r6, r0, #24
 8007776:	d501      	bpl.n	800777c <_printf_i+0xbc>
 8007778:	681d      	ldr	r5, [r3, #0]
 800777a:	e003      	b.n	8007784 <_printf_i+0xc4>
 800777c:	0645      	lsls	r5, r0, #25
 800777e:	d5fb      	bpl.n	8007778 <_printf_i+0xb8>
 8007780:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007784:	2d00      	cmp	r5, #0
 8007786:	da03      	bge.n	8007790 <_printf_i+0xd0>
 8007788:	232d      	movs	r3, #45	@ 0x2d
 800778a:	426d      	negs	r5, r5
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007790:	4859      	ldr	r0, [pc, #356]	@ (80078f8 <_printf_i+0x238>)
 8007792:	230a      	movs	r3, #10
 8007794:	e011      	b.n	80077ba <_printf_i+0xfa>
 8007796:	6821      	ldr	r1, [r4, #0]
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	0608      	lsls	r0, r1, #24
 800779c:	f853 5b04 	ldr.w	r5, [r3], #4
 80077a0:	d402      	bmi.n	80077a8 <_printf_i+0xe8>
 80077a2:	0649      	lsls	r1, r1, #25
 80077a4:	bf48      	it	mi
 80077a6:	b2ad      	uxthmi	r5, r5
 80077a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077aa:	4853      	ldr	r0, [pc, #332]	@ (80078f8 <_printf_i+0x238>)
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	bf14      	ite	ne
 80077b0:	230a      	movne	r3, #10
 80077b2:	2308      	moveq	r3, #8
 80077b4:	2100      	movs	r1, #0
 80077b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ba:	6866      	ldr	r6, [r4, #4]
 80077bc:	60a6      	str	r6, [r4, #8]
 80077be:	2e00      	cmp	r6, #0
 80077c0:	bfa2      	ittt	ge
 80077c2:	6821      	ldrge	r1, [r4, #0]
 80077c4:	f021 0104 	bicge.w	r1, r1, #4
 80077c8:	6021      	strge	r1, [r4, #0]
 80077ca:	b90d      	cbnz	r5, 80077d0 <_printf_i+0x110>
 80077cc:	2e00      	cmp	r6, #0
 80077ce:	d04b      	beq.n	8007868 <_printf_i+0x1a8>
 80077d0:	4616      	mov	r6, r2
 80077d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077d6:	fb03 5711 	mls	r7, r3, r1, r5
 80077da:	5dc7      	ldrb	r7, [r0, r7]
 80077dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077e0:	462f      	mov	r7, r5
 80077e2:	42bb      	cmp	r3, r7
 80077e4:	460d      	mov	r5, r1
 80077e6:	d9f4      	bls.n	80077d2 <_printf_i+0x112>
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d10b      	bne.n	8007804 <_printf_i+0x144>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	07df      	lsls	r7, r3, #31
 80077f0:	d508      	bpl.n	8007804 <_printf_i+0x144>
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	6861      	ldr	r1, [r4, #4]
 80077f6:	4299      	cmp	r1, r3
 80077f8:	bfde      	ittt	le
 80077fa:	2330      	movle	r3, #48	@ 0x30
 80077fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007800:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007804:	1b92      	subs	r2, r2, r6
 8007806:	6122      	str	r2, [r4, #16]
 8007808:	f8cd a000 	str.w	sl, [sp]
 800780c:	464b      	mov	r3, r9
 800780e:	aa03      	add	r2, sp, #12
 8007810:	4621      	mov	r1, r4
 8007812:	4640      	mov	r0, r8
 8007814:	f7ff fee6 	bl	80075e4 <_printf_common>
 8007818:	3001      	adds	r0, #1
 800781a:	d14a      	bne.n	80078b2 <_printf_i+0x1f2>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007820:	b004      	add	sp, #16
 8007822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	f043 0320 	orr.w	r3, r3, #32
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	4833      	ldr	r0, [pc, #204]	@ (80078fc <_printf_i+0x23c>)
 8007830:	2778      	movs	r7, #120	@ 0x78
 8007832:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	6831      	ldr	r1, [r6, #0]
 800783a:	061f      	lsls	r7, r3, #24
 800783c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007840:	d402      	bmi.n	8007848 <_printf_i+0x188>
 8007842:	065f      	lsls	r7, r3, #25
 8007844:	bf48      	it	mi
 8007846:	b2ad      	uxthmi	r5, r5
 8007848:	6031      	str	r1, [r6, #0]
 800784a:	07d9      	lsls	r1, r3, #31
 800784c:	bf44      	itt	mi
 800784e:	f043 0320 	orrmi.w	r3, r3, #32
 8007852:	6023      	strmi	r3, [r4, #0]
 8007854:	b11d      	cbz	r5, 800785e <_printf_i+0x19e>
 8007856:	2310      	movs	r3, #16
 8007858:	e7ac      	b.n	80077b4 <_printf_i+0xf4>
 800785a:	4827      	ldr	r0, [pc, #156]	@ (80078f8 <_printf_i+0x238>)
 800785c:	e7e9      	b.n	8007832 <_printf_i+0x172>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	f023 0320 	bic.w	r3, r3, #32
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	e7f6      	b.n	8007856 <_printf_i+0x196>
 8007868:	4616      	mov	r6, r2
 800786a:	e7bd      	b.n	80077e8 <_printf_i+0x128>
 800786c:	6833      	ldr	r3, [r6, #0]
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	6961      	ldr	r1, [r4, #20]
 8007872:	1d18      	adds	r0, r3, #4
 8007874:	6030      	str	r0, [r6, #0]
 8007876:	062e      	lsls	r6, r5, #24
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	d501      	bpl.n	8007880 <_printf_i+0x1c0>
 800787c:	6019      	str	r1, [r3, #0]
 800787e:	e002      	b.n	8007886 <_printf_i+0x1c6>
 8007880:	0668      	lsls	r0, r5, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0x1bc>
 8007884:	8019      	strh	r1, [r3, #0]
 8007886:	2300      	movs	r3, #0
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	4616      	mov	r6, r2
 800788c:	e7bc      	b.n	8007808 <_printf_i+0x148>
 800788e:	6833      	ldr	r3, [r6, #0]
 8007890:	1d1a      	adds	r2, r3, #4
 8007892:	6032      	str	r2, [r6, #0]
 8007894:	681e      	ldr	r6, [r3, #0]
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	2100      	movs	r1, #0
 800789a:	4630      	mov	r0, r6
 800789c:	f7f8 fcd0 	bl	8000240 <memchr>
 80078a0:	b108      	cbz	r0, 80078a6 <_printf_i+0x1e6>
 80078a2:	1b80      	subs	r0, r0, r6
 80078a4:	6060      	str	r0, [r4, #4]
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	2300      	movs	r3, #0
 80078ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078b0:	e7aa      	b.n	8007808 <_printf_i+0x148>
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	4632      	mov	r2, r6
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	47d0      	blx	sl
 80078bc:	3001      	adds	r0, #1
 80078be:	d0ad      	beq.n	800781c <_printf_i+0x15c>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	d413      	bmi.n	80078ee <_printf_i+0x22e>
 80078c6:	68e0      	ldr	r0, [r4, #12]
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	4298      	cmp	r0, r3
 80078cc:	bfb8      	it	lt
 80078ce:	4618      	movlt	r0, r3
 80078d0:	e7a6      	b.n	8007820 <_printf_i+0x160>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4632      	mov	r2, r6
 80078d6:	4649      	mov	r1, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	47d0      	blx	sl
 80078dc:	3001      	adds	r0, #1
 80078de:	d09d      	beq.n	800781c <_printf_i+0x15c>
 80078e0:	3501      	adds	r5, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	9903      	ldr	r1, [sp, #12]
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dcf2      	bgt.n	80078d2 <_printf_i+0x212>
 80078ec:	e7eb      	b.n	80078c6 <_printf_i+0x206>
 80078ee:	2500      	movs	r5, #0
 80078f0:	f104 0619 	add.w	r6, r4, #25
 80078f4:	e7f5      	b.n	80078e2 <_printf_i+0x222>
 80078f6:	bf00      	nop
 80078f8:	08009caa 	.word	0x08009caa
 80078fc:	08009cbb 	.word	0x08009cbb

08007900 <siprintf>:
 8007900:	b40e      	push	{r1, r2, r3}
 8007902:	b500      	push	{lr}
 8007904:	b09c      	sub	sp, #112	@ 0x70
 8007906:	ab1d      	add	r3, sp, #116	@ 0x74
 8007908:	9002      	str	r0, [sp, #8]
 800790a:	9006      	str	r0, [sp, #24]
 800790c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007910:	4809      	ldr	r0, [pc, #36]	@ (8007938 <siprintf+0x38>)
 8007912:	9107      	str	r1, [sp, #28]
 8007914:	9104      	str	r1, [sp, #16]
 8007916:	4909      	ldr	r1, [pc, #36]	@ (800793c <siprintf+0x3c>)
 8007918:	f853 2b04 	ldr.w	r2, [r3], #4
 800791c:	9105      	str	r1, [sp, #20]
 800791e:	6800      	ldr	r0, [r0, #0]
 8007920:	9301      	str	r3, [sp, #4]
 8007922:	a902      	add	r1, sp, #8
 8007924:	f000 ff42 	bl	80087ac <_svfiprintf_r>
 8007928:	9b02      	ldr	r3, [sp, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	b01c      	add	sp, #112	@ 0x70
 8007930:	f85d eb04 	ldr.w	lr, [sp], #4
 8007934:	b003      	add	sp, #12
 8007936:	4770      	bx	lr
 8007938:	20000030 	.word	0x20000030
 800793c:	ffff0208 	.word	0xffff0208

08007940 <std>:
 8007940:	2300      	movs	r3, #0
 8007942:	b510      	push	{r4, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	e9c0 3300 	strd	r3, r3, [r0]
 800794a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800794e:	6083      	str	r3, [r0, #8]
 8007950:	8181      	strh	r1, [r0, #12]
 8007952:	6643      	str	r3, [r0, #100]	@ 0x64
 8007954:	81c2      	strh	r2, [r0, #14]
 8007956:	6183      	str	r3, [r0, #24]
 8007958:	4619      	mov	r1, r3
 800795a:	2208      	movs	r2, #8
 800795c:	305c      	adds	r0, #92	@ 0x5c
 800795e:	f000 f8b1 	bl	8007ac4 <memset>
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <std+0x58>)
 8007964:	6263      	str	r3, [r4, #36]	@ 0x24
 8007966:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <std+0x5c>)
 8007968:	62a3      	str	r3, [r4, #40]	@ 0x28
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <std+0x60>)
 800796c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800796e:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <std+0x64>)
 8007970:	6323      	str	r3, [r4, #48]	@ 0x30
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x68>)
 8007974:	6224      	str	r4, [r4, #32]
 8007976:	429c      	cmp	r4, r3
 8007978:	d006      	beq.n	8007988 <std+0x48>
 800797a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800797e:	4294      	cmp	r4, r2
 8007980:	d002      	beq.n	8007988 <std+0x48>
 8007982:	33d0      	adds	r3, #208	@ 0xd0
 8007984:	429c      	cmp	r4, r3
 8007986:	d105      	bne.n	8007994 <std+0x54>
 8007988:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800798c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007990:	f000 b8ce 	b.w	8007b30 <__retarget_lock_init_recursive>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	bf00      	nop
 8007998:	0800936d 	.word	0x0800936d
 800799c:	0800938f 	.word	0x0800938f
 80079a0:	080093c7 	.word	0x080093c7
 80079a4:	080093eb 	.word	0x080093eb
 80079a8:	20000b24 	.word	0x20000b24

080079ac <stdio_exit_handler>:
 80079ac:	4a02      	ldr	r2, [pc, #8]	@ (80079b8 <stdio_exit_handler+0xc>)
 80079ae:	4903      	ldr	r1, [pc, #12]	@ (80079bc <stdio_exit_handler+0x10>)
 80079b0:	4803      	ldr	r0, [pc, #12]	@ (80079c0 <stdio_exit_handler+0x14>)
 80079b2:	f000 b869 	b.w	8007a88 <_fwalk_sglue>
 80079b6:	bf00      	nop
 80079b8:	20000024 	.word	0x20000024
 80079bc:	08008c01 	.word	0x08008c01
 80079c0:	20000034 	.word	0x20000034

080079c4 <cleanup_stdio>:
 80079c4:	6841      	ldr	r1, [r0, #4]
 80079c6:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <cleanup_stdio+0x34>)
 80079c8:	4299      	cmp	r1, r3
 80079ca:	b510      	push	{r4, lr}
 80079cc:	4604      	mov	r4, r0
 80079ce:	d001      	beq.n	80079d4 <cleanup_stdio+0x10>
 80079d0:	f001 f916 	bl	8008c00 <_fflush_r>
 80079d4:	68a1      	ldr	r1, [r4, #8]
 80079d6:	4b09      	ldr	r3, [pc, #36]	@ (80079fc <cleanup_stdio+0x38>)
 80079d8:	4299      	cmp	r1, r3
 80079da:	d002      	beq.n	80079e2 <cleanup_stdio+0x1e>
 80079dc:	4620      	mov	r0, r4
 80079de:	f001 f90f 	bl	8008c00 <_fflush_r>
 80079e2:	68e1      	ldr	r1, [r4, #12]
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <cleanup_stdio+0x3c>)
 80079e6:	4299      	cmp	r1, r3
 80079e8:	d004      	beq.n	80079f4 <cleanup_stdio+0x30>
 80079ea:	4620      	mov	r0, r4
 80079ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f0:	f001 b906 	b.w	8008c00 <_fflush_r>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	bf00      	nop
 80079f8:	20000b24 	.word	0x20000b24
 80079fc:	20000b8c 	.word	0x20000b8c
 8007a00:	20000bf4 	.word	0x20000bf4

08007a04 <global_stdio_init.part.0>:
 8007a04:	b510      	push	{r4, lr}
 8007a06:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <global_stdio_init.part.0+0x30>)
 8007a08:	4c0b      	ldr	r4, [pc, #44]	@ (8007a38 <global_stdio_init.part.0+0x34>)
 8007a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a3c <global_stdio_init.part.0+0x38>)
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	4620      	mov	r0, r4
 8007a10:	2200      	movs	r2, #0
 8007a12:	2104      	movs	r1, #4
 8007a14:	f7ff ff94 	bl	8007940 <std>
 8007a18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	2109      	movs	r1, #9
 8007a20:	f7ff ff8e 	bl	8007940 <std>
 8007a24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a28:	2202      	movs	r2, #2
 8007a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a2e:	2112      	movs	r1, #18
 8007a30:	f7ff bf86 	b.w	8007940 <std>
 8007a34:	20000c5c 	.word	0x20000c5c
 8007a38:	20000b24 	.word	0x20000b24
 8007a3c:	080079ad 	.word	0x080079ad

08007a40 <__sfp_lock_acquire>:
 8007a40:	4801      	ldr	r0, [pc, #4]	@ (8007a48 <__sfp_lock_acquire+0x8>)
 8007a42:	f000 b876 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 8007a46:	bf00      	nop
 8007a48:	20000c61 	.word	0x20000c61

08007a4c <__sfp_lock_release>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	@ (8007a54 <__sfp_lock_release+0x8>)
 8007a4e:	f000 b871 	b.w	8007b34 <__retarget_lock_release_recursive>
 8007a52:	bf00      	nop
 8007a54:	20000c61 	.word	0x20000c61

08007a58 <__sinit>:
 8007a58:	b510      	push	{r4, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	f7ff fff0 	bl	8007a40 <__sfp_lock_acquire>
 8007a60:	6a23      	ldr	r3, [r4, #32]
 8007a62:	b11b      	cbz	r3, 8007a6c <__sinit+0x14>
 8007a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a68:	f7ff bff0 	b.w	8007a4c <__sfp_lock_release>
 8007a6c:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <__sinit+0x28>)
 8007a6e:	6223      	str	r3, [r4, #32]
 8007a70:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <__sinit+0x2c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f5      	bne.n	8007a64 <__sinit+0xc>
 8007a78:	f7ff ffc4 	bl	8007a04 <global_stdio_init.part.0>
 8007a7c:	e7f2      	b.n	8007a64 <__sinit+0xc>
 8007a7e:	bf00      	nop
 8007a80:	080079c5 	.word	0x080079c5
 8007a84:	20000c5c 	.word	0x20000c5c

08007a88 <_fwalk_sglue>:
 8007a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	4607      	mov	r7, r0
 8007a8e:	4688      	mov	r8, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	2600      	movs	r6, #0
 8007a94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a98:	f1b9 0901 	subs.w	r9, r9, #1
 8007a9c:	d505      	bpl.n	8007aaa <_fwalk_sglue+0x22>
 8007a9e:	6824      	ldr	r4, [r4, #0]
 8007aa0:	2c00      	cmp	r4, #0
 8007aa2:	d1f7      	bne.n	8007a94 <_fwalk_sglue+0xc>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d907      	bls.n	8007ac0 <_fwalk_sglue+0x38>
 8007ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	d003      	beq.n	8007ac0 <_fwalk_sglue+0x38>
 8007ab8:	4629      	mov	r1, r5
 8007aba:	4638      	mov	r0, r7
 8007abc:	47c0      	blx	r8
 8007abe:	4306      	orrs	r6, r0
 8007ac0:	3568      	adds	r5, #104	@ 0x68
 8007ac2:	e7e9      	b.n	8007a98 <_fwalk_sglue+0x10>

08007ac4 <memset>:
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d100      	bne.n	8007ace <memset+0xa>
 8007acc:	4770      	bx	lr
 8007ace:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad2:	e7f9      	b.n	8007ac8 <memset+0x4>

08007ad4 <_localeconv_r>:
 8007ad4:	4800      	ldr	r0, [pc, #0]	@ (8007ad8 <_localeconv_r+0x4>)
 8007ad6:	4770      	bx	lr
 8007ad8:	20000170 	.word	0x20000170

08007adc <__errno>:
 8007adc:	4b01      	ldr	r3, [pc, #4]	@ (8007ae4 <__errno+0x8>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20000030 	.word	0x20000030

08007ae8 <__libc_init_array>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4d0d      	ldr	r5, [pc, #52]	@ (8007b20 <__libc_init_array+0x38>)
 8007aec:	4c0d      	ldr	r4, [pc, #52]	@ (8007b24 <__libc_init_array+0x3c>)
 8007aee:	1b64      	subs	r4, r4, r5
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	2600      	movs	r6, #0
 8007af4:	42a6      	cmp	r6, r4
 8007af6:	d109      	bne.n	8007b0c <__libc_init_array+0x24>
 8007af8:	4d0b      	ldr	r5, [pc, #44]	@ (8007b28 <__libc_init_array+0x40>)
 8007afa:	4c0c      	ldr	r4, [pc, #48]	@ (8007b2c <__libc_init_array+0x44>)
 8007afc:	f002 f880 	bl	8009c00 <_init>
 8007b00:	1b64      	subs	r4, r4, r5
 8007b02:	10a4      	asrs	r4, r4, #2
 8007b04:	2600      	movs	r6, #0
 8007b06:	42a6      	cmp	r6, r4
 8007b08:	d105      	bne.n	8007b16 <__libc_init_array+0x2e>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b10:	4798      	blx	r3
 8007b12:	3601      	adds	r6, #1
 8007b14:	e7ee      	b.n	8007af4 <__libc_init_array+0xc>
 8007b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1a:	4798      	blx	r3
 8007b1c:	3601      	adds	r6, #1
 8007b1e:	e7f2      	b.n	8007b06 <__libc_init_array+0x1e>
 8007b20:	0800a010 	.word	0x0800a010
 8007b24:	0800a010 	.word	0x0800a010
 8007b28:	0800a010 	.word	0x0800a010
 8007b2c:	0800a014 	.word	0x0800a014

08007b30 <__retarget_lock_init_recursive>:
 8007b30:	4770      	bx	lr

08007b32 <__retarget_lock_acquire_recursive>:
 8007b32:	4770      	bx	lr

08007b34 <__retarget_lock_release_recursive>:
 8007b34:	4770      	bx	lr

08007b36 <quorem>:
 8007b36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	6903      	ldr	r3, [r0, #16]
 8007b3c:	690c      	ldr	r4, [r1, #16]
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	4607      	mov	r7, r0
 8007b42:	db7e      	blt.n	8007c42 <quorem+0x10c>
 8007b44:	3c01      	subs	r4, #1
 8007b46:	f101 0814 	add.w	r8, r1, #20
 8007b4a:	00a3      	lsls	r3, r4, #2
 8007b4c:	f100 0514 	add.w	r5, r0, #20
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b60:	3301      	adds	r3, #1
 8007b62:	429a      	cmp	r2, r3
 8007b64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b6c:	d32e      	bcc.n	8007bcc <quorem+0x96>
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	46c4      	mov	ip, r8
 8007b74:	46ae      	mov	lr, r5
 8007b76:	46d3      	mov	fp, sl
 8007b78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b7c:	b298      	uxth	r0, r3
 8007b7e:	fb06 a000 	mla	r0, r6, r0, sl
 8007b82:	0c02      	lsrs	r2, r0, #16
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	fb06 2303 	mla	r3, r6, r3, r2
 8007b8a:	f8de 2000 	ldr.w	r2, [lr]
 8007b8e:	b280      	uxth	r0, r0
 8007b90:	b292      	uxth	r2, r2
 8007b92:	1a12      	subs	r2, r2, r0
 8007b94:	445a      	add	r2, fp
 8007b96:	f8de 0000 	ldr.w	r0, [lr]
 8007b9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ba4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bae:	45e1      	cmp	r9, ip
 8007bb0:	f84e 2b04 	str.w	r2, [lr], #4
 8007bb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bb8:	d2de      	bcs.n	8007b78 <quorem+0x42>
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	58eb      	ldr	r3, [r5, r3]
 8007bbe:	b92b      	cbnz	r3, 8007bcc <quorem+0x96>
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	3b04      	subs	r3, #4
 8007bc4:	429d      	cmp	r5, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	d32f      	bcc.n	8007c2a <quorem+0xf4>
 8007bca:	613c      	str	r4, [r7, #16]
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f001 fac5 	bl	800915c <__mcmp>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	db25      	blt.n	8007c22 <quorem+0xec>
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bde:	f8d1 c000 	ldr.w	ip, [r1]
 8007be2:	fa1f fe82 	uxth.w	lr, r2
 8007be6:	fa1f f38c 	uxth.w	r3, ip
 8007bea:	eba3 030e 	sub.w	r3, r3, lr
 8007bee:	4403      	add	r3, r0
 8007bf0:	0c12      	lsrs	r2, r2, #16
 8007bf2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bf6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c00:	45c1      	cmp	r9, r8
 8007c02:	f841 3b04 	str.w	r3, [r1], #4
 8007c06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c0a:	d2e6      	bcs.n	8007bda <quorem+0xa4>
 8007c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c14:	b922      	cbnz	r2, 8007c20 <quorem+0xea>
 8007c16:	3b04      	subs	r3, #4
 8007c18:	429d      	cmp	r5, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	d30b      	bcc.n	8007c36 <quorem+0x100>
 8007c1e:	613c      	str	r4, [r7, #16]
 8007c20:	3601      	adds	r6, #1
 8007c22:	4630      	mov	r0, r6
 8007c24:	b003      	add	sp, #12
 8007c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d1cb      	bne.n	8007bca <quorem+0x94>
 8007c32:	3c01      	subs	r4, #1
 8007c34:	e7c6      	b.n	8007bc4 <quorem+0x8e>
 8007c36:	6812      	ldr	r2, [r2, #0]
 8007c38:	3b04      	subs	r3, #4
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	d1ef      	bne.n	8007c1e <quorem+0xe8>
 8007c3e:	3c01      	subs	r4, #1
 8007c40:	e7ea      	b.n	8007c18 <quorem+0xe2>
 8007c42:	2000      	movs	r0, #0
 8007c44:	e7ee      	b.n	8007c24 <quorem+0xee>
	...

08007c48 <_dtoa_r>:
 8007c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	ed2d 8b02 	vpush	{d8}
 8007c50:	69c7      	ldr	r7, [r0, #28]
 8007c52:	b091      	sub	sp, #68	@ 0x44
 8007c54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c58:	ec55 4b10 	vmov	r4, r5, d0
 8007c5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007c5e:	9107      	str	r1, [sp, #28]
 8007c60:	4681      	mov	r9, r0
 8007c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c64:	930d      	str	r3, [sp, #52]	@ 0x34
 8007c66:	b97f      	cbnz	r7, 8007c88 <_dtoa_r+0x40>
 8007c68:	2010      	movs	r0, #16
 8007c6a:	f000 fe9b 	bl	80089a4 <malloc>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	f8c9 001c 	str.w	r0, [r9, #28]
 8007c74:	b920      	cbnz	r0, 8007c80 <_dtoa_r+0x38>
 8007c76:	4ba0      	ldr	r3, [pc, #640]	@ (8007ef8 <_dtoa_r+0x2b0>)
 8007c78:	21ef      	movs	r1, #239	@ 0xef
 8007c7a:	48a0      	ldr	r0, [pc, #640]	@ (8007efc <_dtoa_r+0x2b4>)
 8007c7c:	f001 fc66 	bl	800954c <__assert_func>
 8007c80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c84:	6007      	str	r7, [r0, #0]
 8007c86:	60c7      	str	r7, [r0, #12]
 8007c88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	b159      	cbz	r1, 8007ca8 <_dtoa_r+0x60>
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	604a      	str	r2, [r1, #4]
 8007c94:	2301      	movs	r3, #1
 8007c96:	4093      	lsls	r3, r2
 8007c98:	608b      	str	r3, [r1, #8]
 8007c9a:	4648      	mov	r0, r9
 8007c9c:	f001 f824 	bl	8008ce8 <_Bfree>
 8007ca0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	1e2b      	subs	r3, r5, #0
 8007caa:	bfbb      	ittet	lt
 8007cac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cb0:	9303      	strlt	r3, [sp, #12]
 8007cb2:	2300      	movge	r3, #0
 8007cb4:	2201      	movlt	r2, #1
 8007cb6:	bfac      	ite	ge
 8007cb8:	6033      	strge	r3, [r6, #0]
 8007cba:	6032      	strlt	r2, [r6, #0]
 8007cbc:	4b90      	ldr	r3, [pc, #576]	@ (8007f00 <_dtoa_r+0x2b8>)
 8007cbe:	9e03      	ldr	r6, [sp, #12]
 8007cc0:	43b3      	bics	r3, r6
 8007cc2:	d110      	bne.n	8007ce6 <_dtoa_r+0x9e>
 8007cc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cc6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007cd0:	4323      	orrs	r3, r4
 8007cd2:	f000 84de 	beq.w	8008692 <_dtoa_r+0xa4a>
 8007cd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007cd8:	4f8a      	ldr	r7, [pc, #552]	@ (8007f04 <_dtoa_r+0x2bc>)
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 84e0 	beq.w	80086a0 <_dtoa_r+0xa58>
 8007ce0:	1cfb      	adds	r3, r7, #3
 8007ce2:	f000 bcdb 	b.w	800869c <_dtoa_r+0xa54>
 8007ce6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007cea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf2:	d10a      	bne.n	8007d0a <_dtoa_r+0xc2>
 8007cf4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007cfc:	b113      	cbz	r3, 8007d04 <_dtoa_r+0xbc>
 8007cfe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007d00:	4b81      	ldr	r3, [pc, #516]	@ (8007f08 <_dtoa_r+0x2c0>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	4f81      	ldr	r7, [pc, #516]	@ (8007f0c <_dtoa_r+0x2c4>)
 8007d06:	f000 bccb 	b.w	80086a0 <_dtoa_r+0xa58>
 8007d0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8007d0c:	a90f      	add	r1, sp, #60	@ 0x3c
 8007d0e:	4648      	mov	r0, r9
 8007d10:	eeb0 0b48 	vmov.f64	d0, d8
 8007d14:	f001 fad2 	bl	80092bc <__d2b>
 8007d18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007d1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d1e:	9001      	str	r0, [sp, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d045      	beq.n	8007db0 <_dtoa_r+0x168>
 8007d24:	eeb0 7b48 	vmov.f64	d7, d8
 8007d28:	ee18 1a90 	vmov	r1, s17
 8007d2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007d34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007d38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007d3c:	2500      	movs	r5, #0
 8007d3e:	ee07 1a90 	vmov	s15, r1
 8007d42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007d46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007ee0 <_dtoa_r+0x298>
 8007d4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007d4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007ee8 <_dtoa_r+0x2a0>
 8007d52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007d56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007ef0 <_dtoa_r+0x2a8>
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007d62:	eeb0 7b46 	vmov.f64	d7, d6
 8007d66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007d6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007d6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	ee16 8a90 	vmov	r8, s13
 8007d7a:	d508      	bpl.n	8007d8e <_dtoa_r+0x146>
 8007d7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007d80:	eeb4 6b47 	vcmp.f64	d6, d7
 8007d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d88:	bf18      	it	ne
 8007d8a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8007d8e:	f1b8 0f16 	cmp.w	r8, #22
 8007d92:	d82b      	bhi.n	8007dec <_dtoa_r+0x1a4>
 8007d94:	495e      	ldr	r1, [pc, #376]	@ (8007f10 <_dtoa_r+0x2c8>)
 8007d96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007d9a:	ed91 7b00 	vldr	d7, [r1]
 8007d9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	d501      	bpl.n	8007dac <_dtoa_r+0x164>
 8007da8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007dac:	2100      	movs	r1, #0
 8007dae:	e01e      	b.n	8007dee <_dtoa_r+0x1a6>
 8007db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db2:	4413      	add	r3, r2
 8007db4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007db8:	2920      	cmp	r1, #32
 8007dba:	bfc1      	itttt	gt
 8007dbc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007dc0:	408e      	lslgt	r6, r1
 8007dc2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007dc6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007dca:	bfd6      	itet	le
 8007dcc:	f1c1 0120 	rsble	r1, r1, #32
 8007dd0:	4331      	orrgt	r1, r6
 8007dd2:	fa04 f101 	lslle.w	r1, r4, r1
 8007dd6:	ee07 1a90 	vmov	s15, r1
 8007dda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007dde:	3b01      	subs	r3, #1
 8007de0:	ee17 1a90 	vmov	r1, s15
 8007de4:	2501      	movs	r5, #1
 8007de6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007dea:	e7a8      	b.n	8007d3e <_dtoa_r+0xf6>
 8007dec:	2101      	movs	r1, #1
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	1e53      	subs	r3, r2, #1
 8007df2:	9306      	str	r3, [sp, #24]
 8007df4:	bf45      	ittet	mi
 8007df6:	f1c2 0301 	rsbmi	r3, r2, #1
 8007dfa:	9305      	strmi	r3, [sp, #20]
 8007dfc:	2300      	movpl	r3, #0
 8007dfe:	2300      	movmi	r3, #0
 8007e00:	bf4c      	ite	mi
 8007e02:	9306      	strmi	r3, [sp, #24]
 8007e04:	9305      	strpl	r3, [sp, #20]
 8007e06:	f1b8 0f00 	cmp.w	r8, #0
 8007e0a:	910c      	str	r1, [sp, #48]	@ 0x30
 8007e0c:	db18      	blt.n	8007e40 <_dtoa_r+0x1f8>
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007e14:	4443      	add	r3, r8
 8007e16:	9306      	str	r3, [sp, #24]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	2a09      	cmp	r2, #9
 8007e1e:	d849      	bhi.n	8007eb4 <_dtoa_r+0x26c>
 8007e20:	2a05      	cmp	r2, #5
 8007e22:	bfc4      	itt	gt
 8007e24:	3a04      	subgt	r2, #4
 8007e26:	9207      	strgt	r2, [sp, #28]
 8007e28:	9a07      	ldr	r2, [sp, #28]
 8007e2a:	f1a2 0202 	sub.w	r2, r2, #2
 8007e2e:	bfcc      	ite	gt
 8007e30:	2400      	movgt	r4, #0
 8007e32:	2401      	movle	r4, #1
 8007e34:	2a03      	cmp	r2, #3
 8007e36:	d848      	bhi.n	8007eca <_dtoa_r+0x282>
 8007e38:	e8df f002 	tbb	[pc, r2]
 8007e3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	eba3 0308 	sub.w	r3, r3, r8
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8007e4c:	f1c8 0300 	rsb	r3, r8, #0
 8007e50:	e7e3      	b.n	8007e1a <_dtoa_r+0x1d2>
 8007e52:	2200      	movs	r2, #0
 8007e54:	9208      	str	r2, [sp, #32]
 8007e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	dc39      	bgt.n	8007ed0 <_dtoa_r+0x288>
 8007e5c:	f04f 0b01 	mov.w	fp, #1
 8007e60:	46da      	mov	sl, fp
 8007e62:	465a      	mov	r2, fp
 8007e64:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007e68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	2004      	movs	r0, #4
 8007e70:	f100 0614 	add.w	r6, r0, #20
 8007e74:	4296      	cmp	r6, r2
 8007e76:	d930      	bls.n	8007eda <_dtoa_r+0x292>
 8007e78:	6079      	str	r1, [r7, #4]
 8007e7a:	4648      	mov	r0, r9
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	f000 fef3 	bl	8008c68 <_Balloc>
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	4607      	mov	r7, r0
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d146      	bne.n	8007f18 <_dtoa_r+0x2d0>
 8007e8a:	4b22      	ldr	r3, [pc, #136]	@ (8007f14 <_dtoa_r+0x2cc>)
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e92:	e6f2      	b.n	8007c7a <_dtoa_r+0x32>
 8007e94:	2201      	movs	r2, #1
 8007e96:	e7dd      	b.n	8007e54 <_dtoa_r+0x20c>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	9208      	str	r2, [sp, #32]
 8007e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e9e:	eb08 0b02 	add.w	fp, r8, r2
 8007ea2:	f10b 0a01 	add.w	sl, fp, #1
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	2a01      	cmp	r2, #1
 8007eaa:	bfb8      	it	lt
 8007eac:	2201      	movlt	r2, #1
 8007eae:	e7db      	b.n	8007e68 <_dtoa_r+0x220>
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	e7f2      	b.n	8007e9a <_dtoa_r+0x252>
 8007eb4:	2401      	movs	r4, #1
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007ebc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	46da      	mov	sl, fp
 8007ec4:	2212      	movs	r2, #18
 8007ec6:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ec8:	e7ce      	b.n	8007e68 <_dtoa_r+0x220>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	9208      	str	r2, [sp, #32]
 8007ece:	e7f5      	b.n	8007ebc <_dtoa_r+0x274>
 8007ed0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007ed4:	46da      	mov	sl, fp
 8007ed6:	465a      	mov	r2, fp
 8007ed8:	e7c6      	b.n	8007e68 <_dtoa_r+0x220>
 8007eda:	3101      	adds	r1, #1
 8007edc:	0040      	lsls	r0, r0, #1
 8007ede:	e7c7      	b.n	8007e70 <_dtoa_r+0x228>
 8007ee0:	636f4361 	.word	0x636f4361
 8007ee4:	3fd287a7 	.word	0x3fd287a7
 8007ee8:	8b60c8b3 	.word	0x8b60c8b3
 8007eec:	3fc68a28 	.word	0x3fc68a28
 8007ef0:	509f79fb 	.word	0x509f79fb
 8007ef4:	3fd34413 	.word	0x3fd34413
 8007ef8:	08009cd9 	.word	0x08009cd9
 8007efc:	08009cf0 	.word	0x08009cf0
 8007f00:	7ff00000 	.word	0x7ff00000
 8007f04:	08009cd5 	.word	0x08009cd5
 8007f08:	08009ca9 	.word	0x08009ca9
 8007f0c:	08009ca8 	.word	0x08009ca8
 8007f10:	08009df8 	.word	0x08009df8
 8007f14:	08009d48 	.word	0x08009d48
 8007f18:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007f1c:	f1ba 0f0e 	cmp.w	sl, #14
 8007f20:	6010      	str	r0, [r2, #0]
 8007f22:	d86f      	bhi.n	8008004 <_dtoa_r+0x3bc>
 8007f24:	2c00      	cmp	r4, #0
 8007f26:	d06d      	beq.n	8008004 <_dtoa_r+0x3bc>
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	f340 80c2 	ble.w	80080b4 <_dtoa_r+0x46c>
 8007f30:	4aca      	ldr	r2, [pc, #808]	@ (800825c <_dtoa_r+0x614>)
 8007f32:	f008 010f 	and.w	r1, r8, #15
 8007f36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007f3a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007f3e:	ed92 7b00 	vldr	d7, [r2]
 8007f42:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007f46:	f000 80a9 	beq.w	800809c <_dtoa_r+0x454>
 8007f4a:	4ac5      	ldr	r2, [pc, #788]	@ (8008260 <_dtoa_r+0x618>)
 8007f4c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007f50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007f54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007f58:	f001 010f 	and.w	r1, r1, #15
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	48c0      	ldr	r0, [pc, #768]	@ (8008260 <_dtoa_r+0x618>)
 8007f60:	2900      	cmp	r1, #0
 8007f62:	f040 809d 	bne.w	80080a0 <_dtoa_r+0x458>
 8007f66:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007f6a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007f6e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007f74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f78:	2900      	cmp	r1, #0
 8007f7a:	f000 80c1 	beq.w	8008100 <_dtoa_r+0x4b8>
 8007f7e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007f82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	f140 80b9 	bpl.w	8008100 <_dtoa_r+0x4b8>
 8007f8e:	f1ba 0f00 	cmp.w	sl, #0
 8007f92:	f000 80b5 	beq.w	8008100 <_dtoa_r+0x4b8>
 8007f96:	f1bb 0f00 	cmp.w	fp, #0
 8007f9a:	dd31      	ble.n	8008000 <_dtoa_r+0x3b8>
 8007f9c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007fa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fa8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007fac:	9104      	str	r1, [sp, #16]
 8007fae:	3201      	adds	r2, #1
 8007fb0:	465c      	mov	r4, fp
 8007fb2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007fb6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007fba:	ee07 2a90 	vmov	s15, r2
 8007fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fc2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007fc6:	ee15 2a90 	vmov	r2, s11
 8007fca:	ec51 0b15 	vmov	r0, r1, d5
 8007fce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	f040 8098 	bne.w	8008108 <_dtoa_r+0x4c0>
 8007fd8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007fdc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007fe0:	ec41 0b17 	vmov	d7, r0, r1
 8007fe4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fec:	f300 8261 	bgt.w	80084b2 <_dtoa_r+0x86a>
 8007ff0:	eeb1 7b47 	vneg.f64	d7, d7
 8007ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffc:	f100 80f5 	bmi.w	80081ea <_dtoa_r+0x5a2>
 8008000:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008004:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008006:	2a00      	cmp	r2, #0
 8008008:	f2c0 812c 	blt.w	8008264 <_dtoa_r+0x61c>
 800800c:	f1b8 0f0e 	cmp.w	r8, #14
 8008010:	f300 8128 	bgt.w	8008264 <_dtoa_r+0x61c>
 8008014:	4b91      	ldr	r3, [pc, #580]	@ (800825c <_dtoa_r+0x614>)
 8008016:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800801a:	ed93 6b00 	vldr	d6, [r3]
 800801e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	da03      	bge.n	800802c <_dtoa_r+0x3e4>
 8008024:	f1ba 0f00 	cmp.w	sl, #0
 8008028:	f340 80d2 	ble.w	80081d0 <_dtoa_r+0x588>
 800802c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008030:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008034:	463e      	mov	r6, r7
 8008036:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800803a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800803e:	ee15 3a10 	vmov	r3, s10
 8008042:	3330      	adds	r3, #48	@ 0x30
 8008044:	f806 3b01 	strb.w	r3, [r6], #1
 8008048:	1bf3      	subs	r3, r6, r7
 800804a:	459a      	cmp	sl, r3
 800804c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008050:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008054:	f040 80f8 	bne.w	8008248 <_dtoa_r+0x600>
 8008058:	ee37 7b07 	vadd.f64	d7, d7, d7
 800805c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	f300 80dd 	bgt.w	8008222 <_dtoa_r+0x5da>
 8008068:	eeb4 7b46 	vcmp.f64	d7, d6
 800806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008070:	d104      	bne.n	800807c <_dtoa_r+0x434>
 8008072:	ee15 3a10 	vmov	r3, s10
 8008076:	07db      	lsls	r3, r3, #31
 8008078:	f100 80d3 	bmi.w	8008222 <_dtoa_r+0x5da>
 800807c:	9901      	ldr	r1, [sp, #4]
 800807e:	4648      	mov	r0, r9
 8008080:	f000 fe32 	bl	8008ce8 <_Bfree>
 8008084:	2300      	movs	r3, #0
 8008086:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008088:	7033      	strb	r3, [r6, #0]
 800808a:	f108 0301 	add.w	r3, r8, #1
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 8304 	beq.w	80086a0 <_dtoa_r+0xa58>
 8008098:	601e      	str	r6, [r3, #0]
 800809a:	e301      	b.n	80086a0 <_dtoa_r+0xa58>
 800809c:	2202      	movs	r2, #2
 800809e:	e75e      	b.n	8007f5e <_dtoa_r+0x316>
 80080a0:	07cc      	lsls	r4, r1, #31
 80080a2:	d504      	bpl.n	80080ae <_dtoa_r+0x466>
 80080a4:	ed90 6b00 	vldr	d6, [r0]
 80080a8:	3201      	adds	r2, #1
 80080aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080ae:	1049      	asrs	r1, r1, #1
 80080b0:	3008      	adds	r0, #8
 80080b2:	e755      	b.n	8007f60 <_dtoa_r+0x318>
 80080b4:	d022      	beq.n	80080fc <_dtoa_r+0x4b4>
 80080b6:	f1c8 0100 	rsb	r1, r8, #0
 80080ba:	4a68      	ldr	r2, [pc, #416]	@ (800825c <_dtoa_r+0x614>)
 80080bc:	f001 000f 	and.w	r0, r1, #15
 80080c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80080c4:	ed92 7b00 	vldr	d7, [r2]
 80080c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80080cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080d0:	4863      	ldr	r0, [pc, #396]	@ (8008260 <_dtoa_r+0x618>)
 80080d2:	1109      	asrs	r1, r1, #4
 80080d4:	2400      	movs	r4, #0
 80080d6:	2202      	movs	r2, #2
 80080d8:	b929      	cbnz	r1, 80080e6 <_dtoa_r+0x49e>
 80080da:	2c00      	cmp	r4, #0
 80080dc:	f43f af49 	beq.w	8007f72 <_dtoa_r+0x32a>
 80080e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080e4:	e745      	b.n	8007f72 <_dtoa_r+0x32a>
 80080e6:	07ce      	lsls	r6, r1, #31
 80080e8:	d505      	bpl.n	80080f6 <_dtoa_r+0x4ae>
 80080ea:	ed90 6b00 	vldr	d6, [r0]
 80080ee:	3201      	adds	r2, #1
 80080f0:	2401      	movs	r4, #1
 80080f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080f6:	1049      	asrs	r1, r1, #1
 80080f8:	3008      	adds	r0, #8
 80080fa:	e7ed      	b.n	80080d8 <_dtoa_r+0x490>
 80080fc:	2202      	movs	r2, #2
 80080fe:	e738      	b.n	8007f72 <_dtoa_r+0x32a>
 8008100:	f8cd 8010 	str.w	r8, [sp, #16]
 8008104:	4654      	mov	r4, sl
 8008106:	e754      	b.n	8007fb2 <_dtoa_r+0x36a>
 8008108:	4a54      	ldr	r2, [pc, #336]	@ (800825c <_dtoa_r+0x614>)
 800810a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800810e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008112:	9a08      	ldr	r2, [sp, #32]
 8008114:	ec41 0b17 	vmov	d7, r0, r1
 8008118:	443c      	add	r4, r7
 800811a:	b34a      	cbz	r2, 8008170 <_dtoa_r+0x528>
 800811c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008120:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008124:	463e      	mov	r6, r7
 8008126:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800812a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800812e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008132:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008136:	ee14 2a90 	vmov	r2, s9
 800813a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800813e:	3230      	adds	r2, #48	@ 0x30
 8008140:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008144:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814c:	f806 2b01 	strb.w	r2, [r6], #1
 8008150:	d438      	bmi.n	80081c4 <_dtoa_r+0x57c>
 8008152:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008156:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	d462      	bmi.n	8008226 <_dtoa_r+0x5de>
 8008160:	42a6      	cmp	r6, r4
 8008162:	f43f af4d 	beq.w	8008000 <_dtoa_r+0x3b8>
 8008166:	ee27 7b03 	vmul.f64	d7, d7, d3
 800816a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800816e:	e7e0      	b.n	8008132 <_dtoa_r+0x4ea>
 8008170:	4621      	mov	r1, r4
 8008172:	463e      	mov	r6, r7
 8008174:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008178:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800817c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008180:	ee14 2a90 	vmov	r2, s9
 8008184:	3230      	adds	r2, #48	@ 0x30
 8008186:	f806 2b01 	strb.w	r2, [r6], #1
 800818a:	42a6      	cmp	r6, r4
 800818c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008190:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008194:	d119      	bne.n	80081ca <_dtoa_r+0x582>
 8008196:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800819a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800819e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80081a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a6:	dc3e      	bgt.n	8008226 <_dtoa_r+0x5de>
 80081a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80081ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80081b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b4:	f57f af24 	bpl.w	8008000 <_dtoa_r+0x3b8>
 80081b8:	460e      	mov	r6, r1
 80081ba:	3901      	subs	r1, #1
 80081bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081c0:	2b30      	cmp	r3, #48	@ 0x30
 80081c2:	d0f9      	beq.n	80081b8 <_dtoa_r+0x570>
 80081c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80081c8:	e758      	b.n	800807c <_dtoa_r+0x434>
 80081ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081ce:	e7d5      	b.n	800817c <_dtoa_r+0x534>
 80081d0:	d10b      	bne.n	80081ea <_dtoa_r+0x5a2>
 80081d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80081d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80081da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e6:	f2c0 8161 	blt.w	80084ac <_dtoa_r+0x864>
 80081ea:	2400      	movs	r4, #0
 80081ec:	4625      	mov	r5, r4
 80081ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f0:	43db      	mvns	r3, r3
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	463e      	mov	r6, r7
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	4621      	mov	r1, r4
 80081fc:	4648      	mov	r0, r9
 80081fe:	f000 fd73 	bl	8008ce8 <_Bfree>
 8008202:	2d00      	cmp	r5, #0
 8008204:	d0de      	beq.n	80081c4 <_dtoa_r+0x57c>
 8008206:	f1b8 0f00 	cmp.w	r8, #0
 800820a:	d005      	beq.n	8008218 <_dtoa_r+0x5d0>
 800820c:	45a8      	cmp	r8, r5
 800820e:	d003      	beq.n	8008218 <_dtoa_r+0x5d0>
 8008210:	4641      	mov	r1, r8
 8008212:	4648      	mov	r0, r9
 8008214:	f000 fd68 	bl	8008ce8 <_Bfree>
 8008218:	4629      	mov	r1, r5
 800821a:	4648      	mov	r0, r9
 800821c:	f000 fd64 	bl	8008ce8 <_Bfree>
 8008220:	e7d0      	b.n	80081c4 <_dtoa_r+0x57c>
 8008222:	f8cd 8010 	str.w	r8, [sp, #16]
 8008226:	4633      	mov	r3, r6
 8008228:	461e      	mov	r6, r3
 800822a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800822e:	2a39      	cmp	r2, #57	@ 0x39
 8008230:	d106      	bne.n	8008240 <_dtoa_r+0x5f8>
 8008232:	429f      	cmp	r7, r3
 8008234:	d1f8      	bne.n	8008228 <_dtoa_r+0x5e0>
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	3201      	adds	r2, #1
 800823a:	9204      	str	r2, [sp, #16]
 800823c:	2230      	movs	r2, #48	@ 0x30
 800823e:	703a      	strb	r2, [r7, #0]
 8008240:	781a      	ldrb	r2, [r3, #0]
 8008242:	3201      	adds	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	e7bd      	b.n	80081c4 <_dtoa_r+0x57c>
 8008248:	ee27 7b04 	vmul.f64	d7, d7, d4
 800824c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008254:	f47f aeef 	bne.w	8008036 <_dtoa_r+0x3ee>
 8008258:	e710      	b.n	800807c <_dtoa_r+0x434>
 800825a:	bf00      	nop
 800825c:	08009df8 	.word	0x08009df8
 8008260:	08009dd0 	.word	0x08009dd0
 8008264:	9908      	ldr	r1, [sp, #32]
 8008266:	2900      	cmp	r1, #0
 8008268:	f000 80e3 	beq.w	8008432 <_dtoa_r+0x7ea>
 800826c:	9907      	ldr	r1, [sp, #28]
 800826e:	2901      	cmp	r1, #1
 8008270:	f300 80c8 	bgt.w	8008404 <_dtoa_r+0x7bc>
 8008274:	2d00      	cmp	r5, #0
 8008276:	f000 80c1 	beq.w	80083fc <_dtoa_r+0x7b4>
 800827a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800827e:	9e05      	ldr	r6, [sp, #20]
 8008280:	461c      	mov	r4, r3
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	9b05      	ldr	r3, [sp, #20]
 8008286:	4413      	add	r3, r2
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2101      	movs	r1, #1
 800828e:	4413      	add	r3, r2
 8008290:	4648      	mov	r0, r9
 8008292:	9306      	str	r3, [sp, #24]
 8008294:	f000 fddc 	bl	8008e50 <__i2b>
 8008298:	9b04      	ldr	r3, [sp, #16]
 800829a:	4605      	mov	r5, r0
 800829c:	b166      	cbz	r6, 80082b8 <_dtoa_r+0x670>
 800829e:	9a06      	ldr	r2, [sp, #24]
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	dd09      	ble.n	80082b8 <_dtoa_r+0x670>
 80082a4:	42b2      	cmp	r2, r6
 80082a6:	9905      	ldr	r1, [sp, #20]
 80082a8:	bfa8      	it	ge
 80082aa:	4632      	movge	r2, r6
 80082ac:	1a89      	subs	r1, r1, r2
 80082ae:	9105      	str	r1, [sp, #20]
 80082b0:	9906      	ldr	r1, [sp, #24]
 80082b2:	1ab6      	subs	r6, r6, r2
 80082b4:	1a8a      	subs	r2, r1, r2
 80082b6:	9206      	str	r2, [sp, #24]
 80082b8:	b1fb      	cbz	r3, 80082fa <_dtoa_r+0x6b2>
 80082ba:	9a08      	ldr	r2, [sp, #32]
 80082bc:	2a00      	cmp	r2, #0
 80082be:	f000 80bc 	beq.w	800843a <_dtoa_r+0x7f2>
 80082c2:	b19c      	cbz	r4, 80082ec <_dtoa_r+0x6a4>
 80082c4:	4629      	mov	r1, r5
 80082c6:	4622      	mov	r2, r4
 80082c8:	4648      	mov	r0, r9
 80082ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082cc:	f000 fe80 	bl	8008fd0 <__pow5mult>
 80082d0:	9a01      	ldr	r2, [sp, #4]
 80082d2:	4601      	mov	r1, r0
 80082d4:	4605      	mov	r5, r0
 80082d6:	4648      	mov	r0, r9
 80082d8:	f000 fdd0 	bl	8008e7c <__multiply>
 80082dc:	9901      	ldr	r1, [sp, #4]
 80082de:	9004      	str	r0, [sp, #16]
 80082e0:	4648      	mov	r0, r9
 80082e2:	f000 fd01 	bl	8008ce8 <_Bfree>
 80082e6:	9a04      	ldr	r2, [sp, #16]
 80082e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ea:	9201      	str	r2, [sp, #4]
 80082ec:	1b1a      	subs	r2, r3, r4
 80082ee:	d004      	beq.n	80082fa <_dtoa_r+0x6b2>
 80082f0:	9901      	ldr	r1, [sp, #4]
 80082f2:	4648      	mov	r0, r9
 80082f4:	f000 fe6c 	bl	8008fd0 <__pow5mult>
 80082f8:	9001      	str	r0, [sp, #4]
 80082fa:	2101      	movs	r1, #1
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 fda7 	bl	8008e50 <__i2b>
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	4604      	mov	r4, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 81d0 	beq.w	80086ac <_dtoa_r+0xa64>
 800830c:	461a      	mov	r2, r3
 800830e:	4601      	mov	r1, r0
 8008310:	4648      	mov	r0, r9
 8008312:	f000 fe5d 	bl	8008fd0 <__pow5mult>
 8008316:	9b07      	ldr	r3, [sp, #28]
 8008318:	2b01      	cmp	r3, #1
 800831a:	4604      	mov	r4, r0
 800831c:	f300 8095 	bgt.w	800844a <_dtoa_r+0x802>
 8008320:	9b02      	ldr	r3, [sp, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	f040 808b 	bne.w	800843e <_dtoa_r+0x7f6>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800832e:	2a00      	cmp	r2, #0
 8008330:	f040 8087 	bne.w	8008442 <_dtoa_r+0x7fa>
 8008334:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008338:	0d12      	lsrs	r2, r2, #20
 800833a:	0512      	lsls	r2, r2, #20
 800833c:	2a00      	cmp	r2, #0
 800833e:	f000 8082 	beq.w	8008446 <_dtoa_r+0x7fe>
 8008342:	9b05      	ldr	r3, [sp, #20]
 8008344:	3301      	adds	r3, #1
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	3301      	adds	r3, #1
 800834c:	9306      	str	r3, [sp, #24]
 800834e:	2301      	movs	r3, #1
 8008350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 81af 	beq.w	80086b8 <_dtoa_r+0xa70>
 800835a:	6922      	ldr	r2, [r4, #16]
 800835c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008360:	6910      	ldr	r0, [r2, #16]
 8008362:	f000 fd29 	bl	8008db8 <__hi0bits>
 8008366:	f1c0 0020 	rsb	r0, r0, #32
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	4418      	add	r0, r3
 800836e:	f010 001f 	ands.w	r0, r0, #31
 8008372:	d076      	beq.n	8008462 <_dtoa_r+0x81a>
 8008374:	f1c0 0220 	rsb	r2, r0, #32
 8008378:	2a04      	cmp	r2, #4
 800837a:	dd69      	ble.n	8008450 <_dtoa_r+0x808>
 800837c:	9b05      	ldr	r3, [sp, #20]
 800837e:	f1c0 001c 	rsb	r0, r0, #28
 8008382:	4403      	add	r3, r0
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	9b06      	ldr	r3, [sp, #24]
 8008388:	4406      	add	r6, r0
 800838a:	4403      	add	r3, r0
 800838c:	9306      	str	r3, [sp, #24]
 800838e:	9b05      	ldr	r3, [sp, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	dd05      	ble.n	80083a0 <_dtoa_r+0x758>
 8008394:	9901      	ldr	r1, [sp, #4]
 8008396:	461a      	mov	r2, r3
 8008398:	4648      	mov	r0, r9
 800839a:	f000 fe73 	bl	8009084 <__lshift>
 800839e:	9001      	str	r0, [sp, #4]
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dd05      	ble.n	80083b2 <_dtoa_r+0x76a>
 80083a6:	4621      	mov	r1, r4
 80083a8:	461a      	mov	r2, r3
 80083aa:	4648      	mov	r0, r9
 80083ac:	f000 fe6a 	bl	8009084 <__lshift>
 80083b0:	4604      	mov	r4, r0
 80083b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d056      	beq.n	8008466 <_dtoa_r+0x81e>
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	4621      	mov	r1, r4
 80083bc:	f000 fece 	bl	800915c <__mcmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	da50      	bge.n	8008466 <_dtoa_r+0x81e>
 80083c4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	9901      	ldr	r1, [sp, #4]
 80083cc:	2300      	movs	r3, #0
 80083ce:	220a      	movs	r2, #10
 80083d0:	4648      	mov	r0, r9
 80083d2:	f000 fcab 	bl	8008d2c <__multadd>
 80083d6:	9b08      	ldr	r3, [sp, #32]
 80083d8:	9001      	str	r0, [sp, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 816e 	beq.w	80086bc <_dtoa_r+0xa74>
 80083e0:	4629      	mov	r1, r5
 80083e2:	2300      	movs	r3, #0
 80083e4:	220a      	movs	r2, #10
 80083e6:	4648      	mov	r0, r9
 80083e8:	f000 fca0 	bl	8008d2c <__multadd>
 80083ec:	f1bb 0f00 	cmp.w	fp, #0
 80083f0:	4605      	mov	r5, r0
 80083f2:	dc64      	bgt.n	80084be <_dtoa_r+0x876>
 80083f4:	9b07      	ldr	r3, [sp, #28]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	dc3e      	bgt.n	8008478 <_dtoa_r+0x830>
 80083fa:	e060      	b.n	80084be <_dtoa_r+0x876>
 80083fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008402:	e73c      	b.n	800827e <_dtoa_r+0x636>
 8008404:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8008408:	42a3      	cmp	r3, r4
 800840a:	bfbf      	itttt	lt
 800840c:	1ae2      	sublt	r2, r4, r3
 800840e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008410:	189b      	addlt	r3, r3, r2
 8008412:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8008414:	bfae      	itee	ge
 8008416:	1b1c      	subge	r4, r3, r4
 8008418:	4623      	movlt	r3, r4
 800841a:	2400      	movlt	r4, #0
 800841c:	f1ba 0f00 	cmp.w	sl, #0
 8008420:	bfb5      	itete	lt
 8008422:	9a05      	ldrlt	r2, [sp, #20]
 8008424:	9e05      	ldrge	r6, [sp, #20]
 8008426:	eba2 060a 	sublt.w	r6, r2, sl
 800842a:	4652      	movge	r2, sl
 800842c:	bfb8      	it	lt
 800842e:	2200      	movlt	r2, #0
 8008430:	e727      	b.n	8008282 <_dtoa_r+0x63a>
 8008432:	9e05      	ldr	r6, [sp, #20]
 8008434:	9d08      	ldr	r5, [sp, #32]
 8008436:	461c      	mov	r4, r3
 8008438:	e730      	b.n	800829c <_dtoa_r+0x654>
 800843a:	461a      	mov	r2, r3
 800843c:	e758      	b.n	80082f0 <_dtoa_r+0x6a8>
 800843e:	2300      	movs	r3, #0
 8008440:	e786      	b.n	8008350 <_dtoa_r+0x708>
 8008442:	9b02      	ldr	r3, [sp, #8]
 8008444:	e784      	b.n	8008350 <_dtoa_r+0x708>
 8008446:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008448:	e783      	b.n	8008352 <_dtoa_r+0x70a>
 800844a:	2300      	movs	r3, #0
 800844c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800844e:	e784      	b.n	800835a <_dtoa_r+0x712>
 8008450:	d09d      	beq.n	800838e <_dtoa_r+0x746>
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	321c      	adds	r2, #28
 8008456:	4413      	add	r3, r2
 8008458:	9305      	str	r3, [sp, #20]
 800845a:	9b06      	ldr	r3, [sp, #24]
 800845c:	4416      	add	r6, r2
 800845e:	4413      	add	r3, r2
 8008460:	e794      	b.n	800838c <_dtoa_r+0x744>
 8008462:	4602      	mov	r2, r0
 8008464:	e7f5      	b.n	8008452 <_dtoa_r+0x80a>
 8008466:	f1ba 0f00 	cmp.w	sl, #0
 800846a:	f8cd 8010 	str.w	r8, [sp, #16]
 800846e:	46d3      	mov	fp, sl
 8008470:	dc21      	bgt.n	80084b6 <_dtoa_r+0x86e>
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	2b02      	cmp	r3, #2
 8008476:	dd1e      	ble.n	80084b6 <_dtoa_r+0x86e>
 8008478:	f1bb 0f00 	cmp.w	fp, #0
 800847c:	f47f aeb7 	bne.w	80081ee <_dtoa_r+0x5a6>
 8008480:	4621      	mov	r1, r4
 8008482:	465b      	mov	r3, fp
 8008484:	2205      	movs	r2, #5
 8008486:	4648      	mov	r0, r9
 8008488:	f000 fc50 	bl	8008d2c <__multadd>
 800848c:	4601      	mov	r1, r0
 800848e:	4604      	mov	r4, r0
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	f000 fe63 	bl	800915c <__mcmp>
 8008496:	2800      	cmp	r0, #0
 8008498:	f77f aea9 	ble.w	80081ee <_dtoa_r+0x5a6>
 800849c:	463e      	mov	r6, r7
 800849e:	2331      	movs	r3, #49	@ 0x31
 80084a0:	f806 3b01 	strb.w	r3, [r6], #1
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	3301      	adds	r3, #1
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	e6a4      	b.n	80081f6 <_dtoa_r+0x5ae>
 80084ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80084b0:	4654      	mov	r4, sl
 80084b2:	4625      	mov	r5, r4
 80084b4:	e7f2      	b.n	800849c <_dtoa_r+0x854>
 80084b6:	9b08      	ldr	r3, [sp, #32]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8103 	beq.w	80086c4 <_dtoa_r+0xa7c>
 80084be:	2e00      	cmp	r6, #0
 80084c0:	dd05      	ble.n	80084ce <_dtoa_r+0x886>
 80084c2:	4629      	mov	r1, r5
 80084c4:	4632      	mov	r2, r6
 80084c6:	4648      	mov	r0, r9
 80084c8:	f000 fddc 	bl	8009084 <__lshift>
 80084cc:	4605      	mov	r5, r0
 80084ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d058      	beq.n	8008586 <_dtoa_r+0x93e>
 80084d4:	6869      	ldr	r1, [r5, #4]
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 fbc6 	bl	8008c68 <_Balloc>
 80084dc:	4606      	mov	r6, r0
 80084de:	b928      	cbnz	r0, 80084ec <_dtoa_r+0x8a4>
 80084e0:	4b82      	ldr	r3, [pc, #520]	@ (80086ec <_dtoa_r+0xaa4>)
 80084e2:	4602      	mov	r2, r0
 80084e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80084e8:	f7ff bbc7 	b.w	8007c7a <_dtoa_r+0x32>
 80084ec:	692a      	ldr	r2, [r5, #16]
 80084ee:	3202      	adds	r2, #2
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	f105 010c 	add.w	r1, r5, #12
 80084f6:	300c      	adds	r0, #12
 80084f8:	f001 f81a 	bl	8009530 <memcpy>
 80084fc:	2201      	movs	r2, #1
 80084fe:	4631      	mov	r1, r6
 8008500:	4648      	mov	r0, r9
 8008502:	f000 fdbf 	bl	8009084 <__lshift>
 8008506:	1c7b      	adds	r3, r7, #1
 8008508:	9305      	str	r3, [sp, #20]
 800850a:	eb07 030b 	add.w	r3, r7, fp
 800850e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	46a8      	mov	r8, r5
 8008518:	9308      	str	r3, [sp, #32]
 800851a:	4605      	mov	r5, r0
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	9801      	ldr	r0, [sp, #4]
 8008520:	4621      	mov	r1, r4
 8008522:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008526:	f7ff fb06 	bl	8007b36 <quorem>
 800852a:	4641      	mov	r1, r8
 800852c:	9002      	str	r0, [sp, #8]
 800852e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008532:	9801      	ldr	r0, [sp, #4]
 8008534:	f000 fe12 	bl	800915c <__mcmp>
 8008538:	462a      	mov	r2, r5
 800853a:	9006      	str	r0, [sp, #24]
 800853c:	4621      	mov	r1, r4
 800853e:	4648      	mov	r0, r9
 8008540:	f000 fe28 	bl	8009194 <__mdiff>
 8008544:	68c2      	ldr	r2, [r0, #12]
 8008546:	4606      	mov	r6, r0
 8008548:	b9fa      	cbnz	r2, 800858a <_dtoa_r+0x942>
 800854a:	4601      	mov	r1, r0
 800854c:	9801      	ldr	r0, [sp, #4]
 800854e:	f000 fe05 	bl	800915c <__mcmp>
 8008552:	4602      	mov	r2, r0
 8008554:	4631      	mov	r1, r6
 8008556:	4648      	mov	r0, r9
 8008558:	920a      	str	r2, [sp, #40]	@ 0x28
 800855a:	f000 fbc5 	bl	8008ce8 <_Bfree>
 800855e:	9b07      	ldr	r3, [sp, #28]
 8008560:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008562:	9e05      	ldr	r6, [sp, #20]
 8008564:	ea43 0102 	orr.w	r1, r3, r2
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	4319      	orrs	r1, r3
 800856c:	d10f      	bne.n	800858e <_dtoa_r+0x946>
 800856e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008572:	d028      	beq.n	80085c6 <_dtoa_r+0x97e>
 8008574:	9b06      	ldr	r3, [sp, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd02      	ble.n	8008580 <_dtoa_r+0x938>
 800857a:	9b02      	ldr	r3, [sp, #8]
 800857c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008580:	f88b a000 	strb.w	sl, [fp]
 8008584:	e639      	b.n	80081fa <_dtoa_r+0x5b2>
 8008586:	4628      	mov	r0, r5
 8008588:	e7bd      	b.n	8008506 <_dtoa_r+0x8be>
 800858a:	2201      	movs	r2, #1
 800858c:	e7e2      	b.n	8008554 <_dtoa_r+0x90c>
 800858e:	9b06      	ldr	r3, [sp, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db04      	blt.n	800859e <_dtoa_r+0x956>
 8008594:	9907      	ldr	r1, [sp, #28]
 8008596:	430b      	orrs	r3, r1
 8008598:	9908      	ldr	r1, [sp, #32]
 800859a:	430b      	orrs	r3, r1
 800859c:	d120      	bne.n	80085e0 <_dtoa_r+0x998>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	ddee      	ble.n	8008580 <_dtoa_r+0x938>
 80085a2:	9901      	ldr	r1, [sp, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	4648      	mov	r0, r9
 80085a8:	f000 fd6c 	bl	8009084 <__lshift>
 80085ac:	4621      	mov	r1, r4
 80085ae:	9001      	str	r0, [sp, #4]
 80085b0:	f000 fdd4 	bl	800915c <__mcmp>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dc03      	bgt.n	80085c0 <_dtoa_r+0x978>
 80085b8:	d1e2      	bne.n	8008580 <_dtoa_r+0x938>
 80085ba:	f01a 0f01 	tst.w	sl, #1
 80085be:	d0df      	beq.n	8008580 <_dtoa_r+0x938>
 80085c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80085c4:	d1d9      	bne.n	800857a <_dtoa_r+0x932>
 80085c6:	2339      	movs	r3, #57	@ 0x39
 80085c8:	f88b 3000 	strb.w	r3, [fp]
 80085cc:	4633      	mov	r3, r6
 80085ce:	461e      	mov	r6, r3
 80085d0:	3b01      	subs	r3, #1
 80085d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085d6:	2a39      	cmp	r2, #57	@ 0x39
 80085d8:	d053      	beq.n	8008682 <_dtoa_r+0xa3a>
 80085da:	3201      	adds	r2, #1
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	e60c      	b.n	80081fa <_dtoa_r+0x5b2>
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	dd07      	ble.n	80085f4 <_dtoa_r+0x9ac>
 80085e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80085e8:	d0ed      	beq.n	80085c6 <_dtoa_r+0x97e>
 80085ea:	f10a 0301 	add.w	r3, sl, #1
 80085ee:	f88b 3000 	strb.w	r3, [fp]
 80085f2:	e602      	b.n	80081fa <_dtoa_r+0x5b2>
 80085f4:	9b05      	ldr	r3, [sp, #20]
 80085f6:	9a05      	ldr	r2, [sp, #20]
 80085f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80085fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fe:	4293      	cmp	r3, r2
 8008600:	d029      	beq.n	8008656 <_dtoa_r+0xa0e>
 8008602:	9901      	ldr	r1, [sp, #4]
 8008604:	2300      	movs	r3, #0
 8008606:	220a      	movs	r2, #10
 8008608:	4648      	mov	r0, r9
 800860a:	f000 fb8f 	bl	8008d2c <__multadd>
 800860e:	45a8      	cmp	r8, r5
 8008610:	9001      	str	r0, [sp, #4]
 8008612:	f04f 0300 	mov.w	r3, #0
 8008616:	f04f 020a 	mov.w	r2, #10
 800861a:	4641      	mov	r1, r8
 800861c:	4648      	mov	r0, r9
 800861e:	d107      	bne.n	8008630 <_dtoa_r+0x9e8>
 8008620:	f000 fb84 	bl	8008d2c <__multadd>
 8008624:	4680      	mov	r8, r0
 8008626:	4605      	mov	r5, r0
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	3301      	adds	r3, #1
 800862c:	9305      	str	r3, [sp, #20]
 800862e:	e775      	b.n	800851c <_dtoa_r+0x8d4>
 8008630:	f000 fb7c 	bl	8008d2c <__multadd>
 8008634:	4629      	mov	r1, r5
 8008636:	4680      	mov	r8, r0
 8008638:	2300      	movs	r3, #0
 800863a:	220a      	movs	r2, #10
 800863c:	4648      	mov	r0, r9
 800863e:	f000 fb75 	bl	8008d2c <__multadd>
 8008642:	4605      	mov	r5, r0
 8008644:	e7f0      	b.n	8008628 <_dtoa_r+0x9e0>
 8008646:	f1bb 0f00 	cmp.w	fp, #0
 800864a:	bfcc      	ite	gt
 800864c:	465e      	movgt	r6, fp
 800864e:	2601      	movle	r6, #1
 8008650:	443e      	add	r6, r7
 8008652:	f04f 0800 	mov.w	r8, #0
 8008656:	9901      	ldr	r1, [sp, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	4648      	mov	r0, r9
 800865c:	f000 fd12 	bl	8009084 <__lshift>
 8008660:	4621      	mov	r1, r4
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	f000 fd7a 	bl	800915c <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	dcaf      	bgt.n	80085cc <_dtoa_r+0x984>
 800866c:	d102      	bne.n	8008674 <_dtoa_r+0xa2c>
 800866e:	f01a 0f01 	tst.w	sl, #1
 8008672:	d1ab      	bne.n	80085cc <_dtoa_r+0x984>
 8008674:	4633      	mov	r3, r6
 8008676:	461e      	mov	r6, r3
 8008678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800867c:	2a30      	cmp	r2, #48	@ 0x30
 800867e:	d0fa      	beq.n	8008676 <_dtoa_r+0xa2e>
 8008680:	e5bb      	b.n	80081fa <_dtoa_r+0x5b2>
 8008682:	429f      	cmp	r7, r3
 8008684:	d1a3      	bne.n	80085ce <_dtoa_r+0x986>
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	3301      	adds	r3, #1
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	2331      	movs	r3, #49	@ 0x31
 800868e:	703b      	strb	r3, [r7, #0]
 8008690:	e5b3      	b.n	80081fa <_dtoa_r+0x5b2>
 8008692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008694:	4f16      	ldr	r7, [pc, #88]	@ (80086f0 <_dtoa_r+0xaa8>)
 8008696:	b11b      	cbz	r3, 80086a0 <_dtoa_r+0xa58>
 8008698:	f107 0308 	add.w	r3, r7, #8
 800869c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	4638      	mov	r0, r7
 80086a2:	b011      	add	sp, #68	@ 0x44
 80086a4:	ecbd 8b02 	vpop	{d8}
 80086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f77f ae36 	ble.w	8008320 <_dtoa_r+0x6d8>
 80086b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086b8:	2001      	movs	r0, #1
 80086ba:	e656      	b.n	800836a <_dtoa_r+0x722>
 80086bc:	f1bb 0f00 	cmp.w	fp, #0
 80086c0:	f77f aed7 	ble.w	8008472 <_dtoa_r+0x82a>
 80086c4:	463e      	mov	r6, r7
 80086c6:	9801      	ldr	r0, [sp, #4]
 80086c8:	4621      	mov	r1, r4
 80086ca:	f7ff fa34 	bl	8007b36 <quorem>
 80086ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80086d2:	f806 ab01 	strb.w	sl, [r6], #1
 80086d6:	1bf2      	subs	r2, r6, r7
 80086d8:	4593      	cmp	fp, r2
 80086da:	ddb4      	ble.n	8008646 <_dtoa_r+0x9fe>
 80086dc:	9901      	ldr	r1, [sp, #4]
 80086de:	2300      	movs	r3, #0
 80086e0:	220a      	movs	r2, #10
 80086e2:	4648      	mov	r0, r9
 80086e4:	f000 fb22 	bl	8008d2c <__multadd>
 80086e8:	9001      	str	r0, [sp, #4]
 80086ea:	e7ec      	b.n	80086c6 <_dtoa_r+0xa7e>
 80086ec:	08009d48 	.word	0x08009d48
 80086f0:	08009ccc 	.word	0x08009ccc

080086f4 <__ssputs_r>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	688e      	ldr	r6, [r1, #8]
 80086fa:	461f      	mov	r7, r3
 80086fc:	42be      	cmp	r6, r7
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	4682      	mov	sl, r0
 8008702:	460c      	mov	r4, r1
 8008704:	4690      	mov	r8, r2
 8008706:	d82d      	bhi.n	8008764 <__ssputs_r+0x70>
 8008708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800870c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008710:	d026      	beq.n	8008760 <__ssputs_r+0x6c>
 8008712:	6965      	ldr	r5, [r4, #20]
 8008714:	6909      	ldr	r1, [r1, #16]
 8008716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800871a:	eba3 0901 	sub.w	r9, r3, r1
 800871e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008722:	1c7b      	adds	r3, r7, #1
 8008724:	444b      	add	r3, r9
 8008726:	106d      	asrs	r5, r5, #1
 8008728:	429d      	cmp	r5, r3
 800872a:	bf38      	it	cc
 800872c:	461d      	movcc	r5, r3
 800872e:	0553      	lsls	r3, r2, #21
 8008730:	d527      	bpl.n	8008782 <__ssputs_r+0x8e>
 8008732:	4629      	mov	r1, r5
 8008734:	f000 f960 	bl	80089f8 <_malloc_r>
 8008738:	4606      	mov	r6, r0
 800873a:	b360      	cbz	r0, 8008796 <__ssputs_r+0xa2>
 800873c:	6921      	ldr	r1, [r4, #16]
 800873e:	464a      	mov	r2, r9
 8008740:	f000 fef6 	bl	8009530 <memcpy>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800874a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	6126      	str	r6, [r4, #16]
 8008752:	6165      	str	r5, [r4, #20]
 8008754:	444e      	add	r6, r9
 8008756:	eba5 0509 	sub.w	r5, r5, r9
 800875a:	6026      	str	r6, [r4, #0]
 800875c:	60a5      	str	r5, [r4, #8]
 800875e:	463e      	mov	r6, r7
 8008760:	42be      	cmp	r6, r7
 8008762:	d900      	bls.n	8008766 <__ssputs_r+0x72>
 8008764:	463e      	mov	r6, r7
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	4632      	mov	r2, r6
 800876a:	4641      	mov	r1, r8
 800876c:	f000 fe6f 	bl	800944e <memmove>
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	1b9b      	subs	r3, r3, r6
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	4433      	add	r3, r6
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	462a      	mov	r2, r5
 8008784:	f000 fe35 	bl	80093f2 <_realloc_r>
 8008788:	4606      	mov	r6, r0
 800878a:	2800      	cmp	r0, #0
 800878c:	d1e0      	bne.n	8008750 <__ssputs_r+0x5c>
 800878e:	6921      	ldr	r1, [r4, #16]
 8008790:	4650      	mov	r0, sl
 8008792:	f000 ff0d 	bl	80095b0 <_free_r>
 8008796:	230c      	movs	r3, #12
 8008798:	f8ca 3000 	str.w	r3, [sl]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087a8:	e7e9      	b.n	800877e <__ssputs_r+0x8a>
	...

080087ac <_svfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4698      	mov	r8, r3
 80087b2:	898b      	ldrh	r3, [r1, #12]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	b09d      	sub	sp, #116	@ 0x74
 80087b8:	4607      	mov	r7, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	d510      	bpl.n	80087e2 <_svfiprintf_r+0x36>
 80087c0:	690b      	ldr	r3, [r1, #16]
 80087c2:	b973      	cbnz	r3, 80087e2 <_svfiprintf_r+0x36>
 80087c4:	2140      	movs	r1, #64	@ 0x40
 80087c6:	f000 f917 	bl	80089f8 <_malloc_r>
 80087ca:	6028      	str	r0, [r5, #0]
 80087cc:	6128      	str	r0, [r5, #16]
 80087ce:	b930      	cbnz	r0, 80087de <_svfiprintf_r+0x32>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087d8:	b01d      	add	sp, #116	@ 0x74
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	2340      	movs	r3, #64	@ 0x40
 80087e0:	616b      	str	r3, [r5, #20]
 80087e2:	2300      	movs	r3, #0
 80087e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e6:	2320      	movs	r3, #32
 80087e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f0:	2330      	movs	r3, #48	@ 0x30
 80087f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008990 <_svfiprintf_r+0x1e4>
 80087f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087fa:	f04f 0901 	mov.w	r9, #1
 80087fe:	4623      	mov	r3, r4
 8008800:	469a      	mov	sl, r3
 8008802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008806:	b10a      	cbz	r2, 800880c <_svfiprintf_r+0x60>
 8008808:	2a25      	cmp	r2, #37	@ 0x25
 800880a:	d1f9      	bne.n	8008800 <_svfiprintf_r+0x54>
 800880c:	ebba 0b04 	subs.w	fp, sl, r4
 8008810:	d00b      	beq.n	800882a <_svfiprintf_r+0x7e>
 8008812:	465b      	mov	r3, fp
 8008814:	4622      	mov	r2, r4
 8008816:	4629      	mov	r1, r5
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ff6b 	bl	80086f4 <__ssputs_r>
 800881e:	3001      	adds	r0, #1
 8008820:	f000 80a7 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008826:	445a      	add	r2, fp
 8008828:	9209      	str	r2, [sp, #36]	@ 0x24
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 809f 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008834:	2300      	movs	r3, #0
 8008836:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800883a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883e:	f10a 0a01 	add.w	sl, sl, #1
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884a:	931a      	str	r3, [sp, #104]	@ 0x68
 800884c:	4654      	mov	r4, sl
 800884e:	2205      	movs	r2, #5
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	484e      	ldr	r0, [pc, #312]	@ (8008990 <_svfiprintf_r+0x1e4>)
 8008856:	f7f7 fcf3 	bl	8000240 <memchr>
 800885a:	9a04      	ldr	r2, [sp, #16]
 800885c:	b9d8      	cbnz	r0, 8008896 <_svfiprintf_r+0xea>
 800885e:	06d0      	lsls	r0, r2, #27
 8008860:	bf44      	itt	mi
 8008862:	2320      	movmi	r3, #32
 8008864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008868:	0711      	lsls	r1, r2, #28
 800886a:	bf44      	itt	mi
 800886c:	232b      	movmi	r3, #43	@ 0x2b
 800886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b2a      	cmp	r3, #42	@ 0x2a
 8008878:	d015      	beq.n	80088a6 <_svfiprintf_r+0xfa>
 800887a:	9a07      	ldr	r2, [sp, #28]
 800887c:	4654      	mov	r4, sl
 800887e:	2000      	movs	r0, #0
 8008880:	f04f 0c0a 	mov.w	ip, #10
 8008884:	4621      	mov	r1, r4
 8008886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	2b09      	cmp	r3, #9
 800888e:	d94b      	bls.n	8008928 <_svfiprintf_r+0x17c>
 8008890:	b1b0      	cbz	r0, 80088c0 <_svfiprintf_r+0x114>
 8008892:	9207      	str	r2, [sp, #28]
 8008894:	e014      	b.n	80088c0 <_svfiprintf_r+0x114>
 8008896:	eba0 0308 	sub.w	r3, r0, r8
 800889a:	fa09 f303 	lsl.w	r3, r9, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	46a2      	mov	sl, r4
 80088a4:	e7d2      	b.n	800884c <_svfiprintf_r+0xa0>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9103      	str	r1, [sp, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfbb      	ittet	lt
 80088b2:	425b      	neglt	r3, r3
 80088b4:	f042 0202 	orrlt.w	r2, r2, #2
 80088b8:	9307      	strge	r3, [sp, #28]
 80088ba:	9307      	strlt	r3, [sp, #28]
 80088bc:	bfb8      	it	lt
 80088be:	9204      	strlt	r2, [sp, #16]
 80088c0:	7823      	ldrb	r3, [r4, #0]
 80088c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c4:	d10a      	bne.n	80088dc <_svfiprintf_r+0x130>
 80088c6:	7863      	ldrb	r3, [r4, #1]
 80088c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ca:	d132      	bne.n	8008932 <_svfiprintf_r+0x186>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1d1a      	adds	r2, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9203      	str	r2, [sp, #12]
 80088d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d8:	3402      	adds	r4, #2
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089a0 <_svfiprintf_r+0x1f4>
 80088e0:	7821      	ldrb	r1, [r4, #0]
 80088e2:	2203      	movs	r2, #3
 80088e4:	4650      	mov	r0, sl
 80088e6:	f7f7 fcab 	bl	8000240 <memchr>
 80088ea:	b138      	cbz	r0, 80088fc <_svfiprintf_r+0x150>
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	eba0 000a 	sub.w	r0, r0, sl
 80088f2:	2240      	movs	r2, #64	@ 0x40
 80088f4:	4082      	lsls	r2, r0
 80088f6:	4313      	orrs	r3, r2
 80088f8:	3401      	adds	r4, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008900:	4824      	ldr	r0, [pc, #144]	@ (8008994 <_svfiprintf_r+0x1e8>)
 8008902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008906:	2206      	movs	r2, #6
 8008908:	f7f7 fc9a 	bl	8000240 <memchr>
 800890c:	2800      	cmp	r0, #0
 800890e:	d036      	beq.n	800897e <_svfiprintf_r+0x1d2>
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <_svfiprintf_r+0x1ec>)
 8008912:	bb1b      	cbnz	r3, 800895c <_svfiprintf_r+0x1b0>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	3307      	adds	r3, #7
 8008918:	f023 0307 	bic.w	r3, r3, #7
 800891c:	3308      	adds	r3, #8
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	4433      	add	r3, r6
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	e76a      	b.n	80087fe <_svfiprintf_r+0x52>
 8008928:	fb0c 3202 	mla	r2, ip, r2, r3
 800892c:	460c      	mov	r4, r1
 800892e:	2001      	movs	r0, #1
 8008930:	e7a8      	b.n	8008884 <_svfiprintf_r+0xd8>
 8008932:	2300      	movs	r3, #0
 8008934:	3401      	adds	r4, #1
 8008936:	9305      	str	r3, [sp, #20]
 8008938:	4619      	mov	r1, r3
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4620      	mov	r0, r4
 8008940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008944:	3a30      	subs	r2, #48	@ 0x30
 8008946:	2a09      	cmp	r2, #9
 8008948:	d903      	bls.n	8008952 <_svfiprintf_r+0x1a6>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c6      	beq.n	80088dc <_svfiprintf_r+0x130>
 800894e:	9105      	str	r1, [sp, #20]
 8008950:	e7c4      	b.n	80088dc <_svfiprintf_r+0x130>
 8008952:	fb0c 2101 	mla	r1, ip, r1, r2
 8008956:	4604      	mov	r4, r0
 8008958:	2301      	movs	r3, #1
 800895a:	e7f0      	b.n	800893e <_svfiprintf_r+0x192>
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4b0e      	ldr	r3, [pc, #56]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	4638      	mov	r0, r7
 8008968:	f7fe fc22 	bl	80071b0 <_printf_float>
 800896c:	1c42      	adds	r2, r0, #1
 800896e:	4606      	mov	r6, r0
 8008970:	d1d6      	bne.n	8008920 <_svfiprintf_r+0x174>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	065b      	lsls	r3, r3, #25
 8008976:	f53f af2d 	bmi.w	80087d4 <_svfiprintf_r+0x28>
 800897a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800897c:	e72c      	b.n	80087d8 <_svfiprintf_r+0x2c>
 800897e:	ab03      	add	r3, sp, #12
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	462a      	mov	r2, r5
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	4638      	mov	r0, r7
 800898a:	f7fe fe99 	bl	80076c0 <_printf_i>
 800898e:	e7ed      	b.n	800896c <_svfiprintf_r+0x1c0>
 8008990:	08009d59 	.word	0x08009d59
 8008994:	08009d63 	.word	0x08009d63
 8008998:	080071b1 	.word	0x080071b1
 800899c:	080086f5 	.word	0x080086f5
 80089a0:	08009d5f 	.word	0x08009d5f

080089a4 <malloc>:
 80089a4:	4b02      	ldr	r3, [pc, #8]	@ (80089b0 <malloc+0xc>)
 80089a6:	4601      	mov	r1, r0
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f000 b825 	b.w	80089f8 <_malloc_r>
 80089ae:	bf00      	nop
 80089b0:	20000030 	.word	0x20000030

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0f      	ldr	r6, [pc, #60]	@ (80089f4 <sbrk_aligned+0x40>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	4605      	mov	r5, r0
 80089be:	b911      	cbnz	r1, 80089c6 <sbrk_aligned+0x12>
 80089c0:	f000 fd94 	bl	80094ec <_sbrk_r>
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 fd8f 	bl	80094ec <_sbrk_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d103      	bne.n	80089da <sbrk_aligned+0x26>
 80089d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80089d6:	4620      	mov	r0, r4
 80089d8:	bd70      	pop	{r4, r5, r6, pc}
 80089da:	1cc4      	adds	r4, r0, #3
 80089dc:	f024 0403 	bic.w	r4, r4, #3
 80089e0:	42a0      	cmp	r0, r4
 80089e2:	d0f8      	beq.n	80089d6 <sbrk_aligned+0x22>
 80089e4:	1a21      	subs	r1, r4, r0
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 fd80 	bl	80094ec <_sbrk_r>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d1f2      	bne.n	80089d6 <sbrk_aligned+0x22>
 80089f0:	e7ef      	b.n	80089d2 <sbrk_aligned+0x1e>
 80089f2:	bf00      	nop
 80089f4:	20000c64 	.word	0x20000c64

080089f8 <_malloc_r>:
 80089f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089fc:	1ccd      	adds	r5, r1, #3
 80089fe:	f025 0503 	bic.w	r5, r5, #3
 8008a02:	3508      	adds	r5, #8
 8008a04:	2d0c      	cmp	r5, #12
 8008a06:	bf38      	it	cc
 8008a08:	250c      	movcc	r5, #12
 8008a0a:	2d00      	cmp	r5, #0
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	db01      	blt.n	8008a14 <_malloc_r+0x1c>
 8008a10:	42a9      	cmp	r1, r5
 8008a12:	d904      	bls.n	8008a1e <_malloc_r+0x26>
 8008a14:	230c      	movs	r3, #12
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	2000      	movs	r0, #0
 8008a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008af4 <_malloc_r+0xfc>
 8008a22:	f000 f915 	bl	8008c50 <__malloc_lock>
 8008a26:	f8d8 3000 	ldr.w	r3, [r8]
 8008a2a:	461c      	mov	r4, r3
 8008a2c:	bb44      	cbnz	r4, 8008a80 <_malloc_r+0x88>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7ff ffbf 	bl	80089b4 <sbrk_aligned>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	4604      	mov	r4, r0
 8008a3a:	d158      	bne.n	8008aee <_malloc_r+0xf6>
 8008a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a40:	4627      	mov	r7, r4
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	d143      	bne.n	8008ace <_malloc_r+0xd6>
 8008a46:	2c00      	cmp	r4, #0
 8008a48:	d04b      	beq.n	8008ae2 <_malloc_r+0xea>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	eb04 0903 	add.w	r9, r4, r3
 8008a54:	f000 fd4a 	bl	80094ec <_sbrk_r>
 8008a58:	4581      	cmp	r9, r0
 8008a5a:	d142      	bne.n	8008ae2 <_malloc_r+0xea>
 8008a5c:	6821      	ldr	r1, [r4, #0]
 8008a5e:	1a6d      	subs	r5, r5, r1
 8008a60:	4629      	mov	r1, r5
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7ff ffa6 	bl	80089b4 <sbrk_aligned>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d03a      	beq.n	8008ae2 <_malloc_r+0xea>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	442b      	add	r3, r5
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	f8d8 3000 	ldr.w	r3, [r8]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	bb62      	cbnz	r2, 8008ad4 <_malloc_r+0xdc>
 8008a7a:	f8c8 7000 	str.w	r7, [r8]
 8008a7e:	e00f      	b.n	8008aa0 <_malloc_r+0xa8>
 8008a80:	6822      	ldr	r2, [r4, #0]
 8008a82:	1b52      	subs	r2, r2, r5
 8008a84:	d420      	bmi.n	8008ac8 <_malloc_r+0xd0>
 8008a86:	2a0b      	cmp	r2, #11
 8008a88:	d917      	bls.n	8008aba <_malloc_r+0xc2>
 8008a8a:	1961      	adds	r1, r4, r5
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	6025      	str	r5, [r4, #0]
 8008a90:	bf18      	it	ne
 8008a92:	6059      	strne	r1, [r3, #4]
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	bf08      	it	eq
 8008a98:	f8c8 1000 	streq.w	r1, [r8]
 8008a9c:	5162      	str	r2, [r4, r5]
 8008a9e:	604b      	str	r3, [r1, #4]
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f000 f8db 	bl	8008c5c <__malloc_unlock>
 8008aa6:	f104 000b 	add.w	r0, r4, #11
 8008aaa:	1d23      	adds	r3, r4, #4
 8008aac:	f020 0007 	bic.w	r0, r0, #7
 8008ab0:	1ac2      	subs	r2, r0, r3
 8008ab2:	bf1c      	itt	ne
 8008ab4:	1a1b      	subne	r3, r3, r0
 8008ab6:	50a3      	strne	r3, [r4, r2]
 8008ab8:	e7af      	b.n	8008a1a <_malloc_r+0x22>
 8008aba:	6862      	ldr	r2, [r4, #4]
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	bf0c      	ite	eq
 8008ac0:	f8c8 2000 	streq.w	r2, [r8]
 8008ac4:	605a      	strne	r2, [r3, #4]
 8008ac6:	e7eb      	b.n	8008aa0 <_malloc_r+0xa8>
 8008ac8:	4623      	mov	r3, r4
 8008aca:	6864      	ldr	r4, [r4, #4]
 8008acc:	e7ae      	b.n	8008a2c <_malloc_r+0x34>
 8008ace:	463c      	mov	r4, r7
 8008ad0:	687f      	ldr	r7, [r7, #4]
 8008ad2:	e7b6      	b.n	8008a42 <_malloc_r+0x4a>
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d1fb      	bne.n	8008ad4 <_malloc_r+0xdc>
 8008adc:	2300      	movs	r3, #0
 8008ade:	6053      	str	r3, [r2, #4]
 8008ae0:	e7de      	b.n	8008aa0 <_malloc_r+0xa8>
 8008ae2:	230c      	movs	r3, #12
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f000 f8b8 	bl	8008c5c <__malloc_unlock>
 8008aec:	e794      	b.n	8008a18 <_malloc_r+0x20>
 8008aee:	6005      	str	r5, [r0, #0]
 8008af0:	e7d6      	b.n	8008aa0 <_malloc_r+0xa8>
 8008af2:	bf00      	nop
 8008af4:	20000c68 	.word	0x20000c68

08008af8 <__sflush_r>:
 8008af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	0716      	lsls	r6, r2, #28
 8008b02:	4605      	mov	r5, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	d454      	bmi.n	8008bb2 <__sflush_r+0xba>
 8008b08:	684b      	ldr	r3, [r1, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	dc02      	bgt.n	8008b14 <__sflush_r+0x1c>
 8008b0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd48      	ble.n	8008ba6 <__sflush_r+0xae>
 8008b14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b16:	2e00      	cmp	r6, #0
 8008b18:	d045      	beq.n	8008ba6 <__sflush_r+0xae>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b20:	682f      	ldr	r7, [r5, #0]
 8008b22:	6a21      	ldr	r1, [r4, #32]
 8008b24:	602b      	str	r3, [r5, #0]
 8008b26:	d030      	beq.n	8008b8a <__sflush_r+0x92>
 8008b28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	0759      	lsls	r1, r3, #29
 8008b2e:	d505      	bpl.n	8008b3c <__sflush_r+0x44>
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	1ad2      	subs	r2, r2, r3
 8008b34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b36:	b10b      	cbz	r3, 8008b3c <__sflush_r+0x44>
 8008b38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b3a:	1ad2      	subs	r2, r2, r3
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b40:	6a21      	ldr	r1, [r4, #32]
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b0      	blx	r6
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	89a3      	ldrh	r3, [r4, #12]
 8008b4a:	d106      	bne.n	8008b5a <__sflush_r+0x62>
 8008b4c:	6829      	ldr	r1, [r5, #0]
 8008b4e:	291d      	cmp	r1, #29
 8008b50:	d82b      	bhi.n	8008baa <__sflush_r+0xb2>
 8008b52:	4a2a      	ldr	r2, [pc, #168]	@ (8008bfc <__sflush_r+0x104>)
 8008b54:	410a      	asrs	r2, r1
 8008b56:	07d6      	lsls	r6, r2, #31
 8008b58:	d427      	bmi.n	8008baa <__sflush_r+0xb2>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	6062      	str	r2, [r4, #4]
 8008b5e:	04d9      	lsls	r1, r3, #19
 8008b60:	6922      	ldr	r2, [r4, #16]
 8008b62:	6022      	str	r2, [r4, #0]
 8008b64:	d504      	bpl.n	8008b70 <__sflush_r+0x78>
 8008b66:	1c42      	adds	r2, r0, #1
 8008b68:	d101      	bne.n	8008b6e <__sflush_r+0x76>
 8008b6a:	682b      	ldr	r3, [r5, #0]
 8008b6c:	b903      	cbnz	r3, 8008b70 <__sflush_r+0x78>
 8008b6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b72:	602f      	str	r7, [r5, #0]
 8008b74:	b1b9      	cbz	r1, 8008ba6 <__sflush_r+0xae>
 8008b76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b7a:	4299      	cmp	r1, r3
 8008b7c:	d002      	beq.n	8008b84 <__sflush_r+0x8c>
 8008b7e:	4628      	mov	r0, r5
 8008b80:	f000 fd16 	bl	80095b0 <_free_r>
 8008b84:	2300      	movs	r3, #0
 8008b86:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b88:	e00d      	b.n	8008ba6 <__sflush_r+0xae>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b0      	blx	r6
 8008b90:	4602      	mov	r2, r0
 8008b92:	1c50      	adds	r0, r2, #1
 8008b94:	d1c9      	bne.n	8008b2a <__sflush_r+0x32>
 8008b96:	682b      	ldr	r3, [r5, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0c6      	beq.n	8008b2a <__sflush_r+0x32>
 8008b9c:	2b1d      	cmp	r3, #29
 8008b9e:	d001      	beq.n	8008ba4 <__sflush_r+0xac>
 8008ba0:	2b16      	cmp	r3, #22
 8008ba2:	d11e      	bne.n	8008be2 <__sflush_r+0xea>
 8008ba4:	602f      	str	r7, [r5, #0]
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e022      	b.n	8008bf0 <__sflush_r+0xf8>
 8008baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bae:	b21b      	sxth	r3, r3
 8008bb0:	e01b      	b.n	8008bea <__sflush_r+0xf2>
 8008bb2:	690f      	ldr	r7, [r1, #16]
 8008bb4:	2f00      	cmp	r7, #0
 8008bb6:	d0f6      	beq.n	8008ba6 <__sflush_r+0xae>
 8008bb8:	0793      	lsls	r3, r2, #30
 8008bba:	680e      	ldr	r6, [r1, #0]
 8008bbc:	bf08      	it	eq
 8008bbe:	694b      	ldreq	r3, [r1, #20]
 8008bc0:	600f      	str	r7, [r1, #0]
 8008bc2:	bf18      	it	ne
 8008bc4:	2300      	movne	r3, #0
 8008bc6:	eba6 0807 	sub.w	r8, r6, r7
 8008bca:	608b      	str	r3, [r1, #8]
 8008bcc:	f1b8 0f00 	cmp.w	r8, #0
 8008bd0:	dde9      	ble.n	8008ba6 <__sflush_r+0xae>
 8008bd2:	6a21      	ldr	r1, [r4, #32]
 8008bd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bd6:	4643      	mov	r3, r8
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4628      	mov	r0, r5
 8008bdc:	47b0      	blx	r6
 8008bde:	2800      	cmp	r0, #0
 8008be0:	dc08      	bgt.n	8008bf4 <__sflush_r+0xfc>
 8008be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bea:	81a3      	strh	r3, [r4, #12]
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf4:	4407      	add	r7, r0
 8008bf6:	eba8 0800 	sub.w	r8, r8, r0
 8008bfa:	e7e7      	b.n	8008bcc <__sflush_r+0xd4>
 8008bfc:	dfbffffe 	.word	0xdfbffffe

08008c00 <_fflush_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	690b      	ldr	r3, [r1, #16]
 8008c04:	4605      	mov	r5, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b913      	cbnz	r3, 8008c10 <_fflush_r+0x10>
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	bd38      	pop	{r3, r4, r5, pc}
 8008c10:	b118      	cbz	r0, 8008c1a <_fflush_r+0x1a>
 8008c12:	6a03      	ldr	r3, [r0, #32]
 8008c14:	b90b      	cbnz	r3, 8008c1a <_fflush_r+0x1a>
 8008c16:	f7fe ff1f 	bl	8007a58 <__sinit>
 8008c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f3      	beq.n	8008c0a <_fflush_r+0xa>
 8008c22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c24:	07d0      	lsls	r0, r2, #31
 8008c26:	d404      	bmi.n	8008c32 <_fflush_r+0x32>
 8008c28:	0599      	lsls	r1, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_fflush_r+0x32>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2e:	f7fe ff80 	bl	8007b32 <__retarget_lock_acquire_recursive>
 8008c32:	4628      	mov	r0, r5
 8008c34:	4621      	mov	r1, r4
 8008c36:	f7ff ff5f 	bl	8008af8 <__sflush_r>
 8008c3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c3c:	07da      	lsls	r2, r3, #31
 8008c3e:	4605      	mov	r5, r0
 8008c40:	d4e4      	bmi.n	8008c0c <_fflush_r+0xc>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	059b      	lsls	r3, r3, #22
 8008c46:	d4e1      	bmi.n	8008c0c <_fflush_r+0xc>
 8008c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c4a:	f7fe ff73 	bl	8007b34 <__retarget_lock_release_recursive>
 8008c4e:	e7dd      	b.n	8008c0c <_fflush_r+0xc>

08008c50 <__malloc_lock>:
 8008c50:	4801      	ldr	r0, [pc, #4]	@ (8008c58 <__malloc_lock+0x8>)
 8008c52:	f7fe bf6e 	b.w	8007b32 <__retarget_lock_acquire_recursive>
 8008c56:	bf00      	nop
 8008c58:	20000c60 	.word	0x20000c60

08008c5c <__malloc_unlock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	@ (8008c64 <__malloc_unlock+0x8>)
 8008c5e:	f7fe bf69 	b.w	8007b34 <__retarget_lock_release_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000c60 	.word	0x20000c60

08008c68 <_Balloc>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	69c6      	ldr	r6, [r0, #28]
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	460d      	mov	r5, r1
 8008c70:	b976      	cbnz	r6, 8008c90 <_Balloc+0x28>
 8008c72:	2010      	movs	r0, #16
 8008c74:	f7ff fe96 	bl	80089a4 <malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	61e0      	str	r0, [r4, #28]
 8008c7c:	b920      	cbnz	r0, 8008c88 <_Balloc+0x20>
 8008c7e:	4b18      	ldr	r3, [pc, #96]	@ (8008ce0 <_Balloc+0x78>)
 8008c80:	4818      	ldr	r0, [pc, #96]	@ (8008ce4 <_Balloc+0x7c>)
 8008c82:	216b      	movs	r1, #107	@ 0x6b
 8008c84:	f000 fc62 	bl	800954c <__assert_func>
 8008c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c8c:	6006      	str	r6, [r0, #0]
 8008c8e:	60c6      	str	r6, [r0, #12]
 8008c90:	69e6      	ldr	r6, [r4, #28]
 8008c92:	68f3      	ldr	r3, [r6, #12]
 8008c94:	b183      	cbz	r3, 8008cb8 <_Balloc+0x50>
 8008c96:	69e3      	ldr	r3, [r4, #28]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c9e:	b9b8      	cbnz	r0, 8008cd0 <_Balloc+0x68>
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	fa01 f605 	lsl.w	r6, r1, r5
 8008ca6:	1d72      	adds	r2, r6, #5
 8008ca8:	0092      	lsls	r2, r2, #2
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 fc6c 	bl	8009588 <_calloc_r>
 8008cb0:	b160      	cbz	r0, 8008ccc <_Balloc+0x64>
 8008cb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cb6:	e00e      	b.n	8008cd6 <_Balloc+0x6e>
 8008cb8:	2221      	movs	r2, #33	@ 0x21
 8008cba:	2104      	movs	r1, #4
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 fc63 	bl	8009588 <_calloc_r>
 8008cc2:	69e3      	ldr	r3, [r4, #28]
 8008cc4:	60f0      	str	r0, [r6, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e4      	bne.n	8008c96 <_Balloc+0x2e>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
 8008cd0:	6802      	ldr	r2, [r0, #0]
 8008cd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cdc:	e7f7      	b.n	8008cce <_Balloc+0x66>
 8008cde:	bf00      	nop
 8008ce0:	08009cd9 	.word	0x08009cd9
 8008ce4:	08009d6a 	.word	0x08009d6a

08008ce8 <_Bfree>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	69c6      	ldr	r6, [r0, #28]
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b976      	cbnz	r6, 8008d10 <_Bfree+0x28>
 8008cf2:	2010      	movs	r0, #16
 8008cf4:	f7ff fe56 	bl	80089a4 <malloc>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	61e8      	str	r0, [r5, #28]
 8008cfc:	b920      	cbnz	r0, 8008d08 <_Bfree+0x20>
 8008cfe:	4b09      	ldr	r3, [pc, #36]	@ (8008d24 <_Bfree+0x3c>)
 8008d00:	4809      	ldr	r0, [pc, #36]	@ (8008d28 <_Bfree+0x40>)
 8008d02:	218f      	movs	r1, #143	@ 0x8f
 8008d04:	f000 fc22 	bl	800954c <__assert_func>
 8008d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d0c:	6006      	str	r6, [r0, #0]
 8008d0e:	60c6      	str	r6, [r0, #12]
 8008d10:	b13c      	cbz	r4, 8008d22 <_Bfree+0x3a>
 8008d12:	69eb      	ldr	r3, [r5, #28]
 8008d14:	6862      	ldr	r2, [r4, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d1c:	6021      	str	r1, [r4, #0]
 8008d1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	08009cd9 	.word	0x08009cd9
 8008d28:	08009d6a 	.word	0x08009d6a

08008d2c <__multadd>:
 8008d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	690d      	ldr	r5, [r1, #16]
 8008d32:	4607      	mov	r7, r0
 8008d34:	460c      	mov	r4, r1
 8008d36:	461e      	mov	r6, r3
 8008d38:	f101 0c14 	add.w	ip, r1, #20
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d42:	b299      	uxth	r1, r3
 8008d44:	fb02 6101 	mla	r1, r2, r1, r6
 8008d48:	0c1e      	lsrs	r6, r3, #16
 8008d4a:	0c0b      	lsrs	r3, r1, #16
 8008d4c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d50:	b289      	uxth	r1, r1
 8008d52:	3001      	adds	r0, #1
 8008d54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d58:	4285      	cmp	r5, r0
 8008d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d62:	dcec      	bgt.n	8008d3e <__multadd+0x12>
 8008d64:	b30e      	cbz	r6, 8008daa <__multadd+0x7e>
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	42ab      	cmp	r3, r5
 8008d6a:	dc19      	bgt.n	8008da0 <__multadd+0x74>
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4638      	mov	r0, r7
 8008d70:	3101      	adds	r1, #1
 8008d72:	f7ff ff79 	bl	8008c68 <_Balloc>
 8008d76:	4680      	mov	r8, r0
 8008d78:	b928      	cbnz	r0, 8008d86 <__multadd+0x5a>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008db0 <__multadd+0x84>)
 8008d7e:	480d      	ldr	r0, [pc, #52]	@ (8008db4 <__multadd+0x88>)
 8008d80:	21ba      	movs	r1, #186	@ 0xba
 8008d82:	f000 fbe3 	bl	800954c <__assert_func>
 8008d86:	6922      	ldr	r2, [r4, #16]
 8008d88:	3202      	adds	r2, #2
 8008d8a:	f104 010c 	add.w	r1, r4, #12
 8008d8e:	0092      	lsls	r2, r2, #2
 8008d90:	300c      	adds	r0, #12
 8008d92:	f000 fbcd 	bl	8009530 <memcpy>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ffa5 	bl	8008ce8 <_Bfree>
 8008d9e:	4644      	mov	r4, r8
 8008da0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008da4:	3501      	adds	r5, #1
 8008da6:	615e      	str	r6, [r3, #20]
 8008da8:	6125      	str	r5, [r4, #16]
 8008daa:	4620      	mov	r0, r4
 8008dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db0:	08009d48 	.word	0x08009d48
 8008db4:	08009d6a 	.word	0x08009d6a

08008db8 <__hi0bits>:
 8008db8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	bf36      	itet	cc
 8008dc0:	0403      	lslcc	r3, r0, #16
 8008dc2:	2000      	movcs	r0, #0
 8008dc4:	2010      	movcc	r0, #16
 8008dc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dca:	bf3c      	itt	cc
 8008dcc:	021b      	lslcc	r3, r3, #8
 8008dce:	3008      	addcc	r0, #8
 8008dd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dd4:	bf3c      	itt	cc
 8008dd6:	011b      	lslcc	r3, r3, #4
 8008dd8:	3004      	addcc	r0, #4
 8008dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dde:	bf3c      	itt	cc
 8008de0:	009b      	lslcc	r3, r3, #2
 8008de2:	3002      	addcc	r0, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	db05      	blt.n	8008df4 <__hi0bits+0x3c>
 8008de8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dec:	f100 0001 	add.w	r0, r0, #1
 8008df0:	bf08      	it	eq
 8008df2:	2020      	moveq	r0, #32
 8008df4:	4770      	bx	lr

08008df6 <__lo0bits>:
 8008df6:	6803      	ldr	r3, [r0, #0]
 8008df8:	4602      	mov	r2, r0
 8008dfa:	f013 0007 	ands.w	r0, r3, #7
 8008dfe:	d00b      	beq.n	8008e18 <__lo0bits+0x22>
 8008e00:	07d9      	lsls	r1, r3, #31
 8008e02:	d421      	bmi.n	8008e48 <__lo0bits+0x52>
 8008e04:	0798      	lsls	r0, r3, #30
 8008e06:	bf49      	itett	mi
 8008e08:	085b      	lsrmi	r3, r3, #1
 8008e0a:	089b      	lsrpl	r3, r3, #2
 8008e0c:	2001      	movmi	r0, #1
 8008e0e:	6013      	strmi	r3, [r2, #0]
 8008e10:	bf5c      	itt	pl
 8008e12:	6013      	strpl	r3, [r2, #0]
 8008e14:	2002      	movpl	r0, #2
 8008e16:	4770      	bx	lr
 8008e18:	b299      	uxth	r1, r3
 8008e1a:	b909      	cbnz	r1, 8008e20 <__lo0bits+0x2a>
 8008e1c:	0c1b      	lsrs	r3, r3, #16
 8008e1e:	2010      	movs	r0, #16
 8008e20:	b2d9      	uxtb	r1, r3
 8008e22:	b909      	cbnz	r1, 8008e28 <__lo0bits+0x32>
 8008e24:	3008      	adds	r0, #8
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	bf04      	itt	eq
 8008e2c:	091b      	lsreq	r3, r3, #4
 8008e2e:	3004      	addeq	r0, #4
 8008e30:	0799      	lsls	r1, r3, #30
 8008e32:	bf04      	itt	eq
 8008e34:	089b      	lsreq	r3, r3, #2
 8008e36:	3002      	addeq	r0, #2
 8008e38:	07d9      	lsls	r1, r3, #31
 8008e3a:	d403      	bmi.n	8008e44 <__lo0bits+0x4e>
 8008e3c:	085b      	lsrs	r3, r3, #1
 8008e3e:	f100 0001 	add.w	r0, r0, #1
 8008e42:	d003      	beq.n	8008e4c <__lo0bits+0x56>
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	4770      	bx	lr
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4770      	bx	lr
 8008e4c:	2020      	movs	r0, #32
 8008e4e:	4770      	bx	lr

08008e50 <__i2b>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	460c      	mov	r4, r1
 8008e54:	2101      	movs	r1, #1
 8008e56:	f7ff ff07 	bl	8008c68 <_Balloc>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	b928      	cbnz	r0, 8008e6a <__i2b+0x1a>
 8008e5e:	4b05      	ldr	r3, [pc, #20]	@ (8008e74 <__i2b+0x24>)
 8008e60:	4805      	ldr	r0, [pc, #20]	@ (8008e78 <__i2b+0x28>)
 8008e62:	f240 1145 	movw	r1, #325	@ 0x145
 8008e66:	f000 fb71 	bl	800954c <__assert_func>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	6144      	str	r4, [r0, #20]
 8008e6e:	6103      	str	r3, [r0, #16]
 8008e70:	bd10      	pop	{r4, pc}
 8008e72:	bf00      	nop
 8008e74:	08009d48 	.word	0x08009d48
 8008e78:	08009d6a 	.word	0x08009d6a

08008e7c <__multiply>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	4614      	mov	r4, r2
 8008e82:	690a      	ldr	r2, [r1, #16]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	bfa8      	it	ge
 8008e8a:	4623      	movge	r3, r4
 8008e8c:	460f      	mov	r7, r1
 8008e8e:	bfa4      	itt	ge
 8008e90:	460c      	movge	r4, r1
 8008e92:	461f      	movge	r7, r3
 8008e94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e9c:	68a3      	ldr	r3, [r4, #8]
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	eb0a 0609 	add.w	r6, sl, r9
 8008ea4:	42b3      	cmp	r3, r6
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	bfb8      	it	lt
 8008eaa:	3101      	addlt	r1, #1
 8008eac:	f7ff fedc 	bl	8008c68 <_Balloc>
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__multiply+0x44>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b44      	ldr	r3, [pc, #272]	@ (8008fc8 <__multiply+0x14c>)
 8008eb6:	4845      	ldr	r0, [pc, #276]	@ (8008fcc <__multiply+0x150>)
 8008eb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ebc:	f000 fb46 	bl	800954c <__assert_func>
 8008ec0:	f100 0514 	add.w	r5, r0, #20
 8008ec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ec8:	462b      	mov	r3, r5
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4543      	cmp	r3, r8
 8008ece:	d321      	bcc.n	8008f14 <__multiply+0x98>
 8008ed0:	f107 0114 	add.w	r1, r7, #20
 8008ed4:	f104 0214 	add.w	r2, r4, #20
 8008ed8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008edc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	1b13      	subs	r3, r2, r4
 8008ee4:	3b15      	subs	r3, #21
 8008ee6:	f023 0303 	bic.w	r3, r3, #3
 8008eea:	3304      	adds	r3, #4
 8008eec:	f104 0715 	add.w	r7, r4, #21
 8008ef0:	42ba      	cmp	r2, r7
 8008ef2:	bf38      	it	cc
 8008ef4:	2304      	movcc	r3, #4
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	9103      	str	r1, [sp, #12]
 8008efc:	428b      	cmp	r3, r1
 8008efe:	d80c      	bhi.n	8008f1a <__multiply+0x9e>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	dd03      	ble.n	8008f0c <__multiply+0x90>
 8008f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d05b      	beq.n	8008fc4 <__multiply+0x148>
 8008f0c:	6106      	str	r6, [r0, #16]
 8008f0e:	b005      	add	sp, #20
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	f843 2b04 	str.w	r2, [r3], #4
 8008f18:	e7d8      	b.n	8008ecc <__multiply+0x50>
 8008f1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f1e:	f1ba 0f00 	cmp.w	sl, #0
 8008f22:	d024      	beq.n	8008f6e <__multiply+0xf2>
 8008f24:	f104 0e14 	add.w	lr, r4, #20
 8008f28:	46a9      	mov	r9, r5
 8008f2a:	f04f 0c00 	mov.w	ip, #0
 8008f2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f32:	f8d9 3000 	ldr.w	r3, [r9]
 8008f36:	fa1f fb87 	uxth.w	fp, r7
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f44:	f8d9 7000 	ldr.w	r7, [r9]
 8008f48:	4463      	add	r3, ip
 8008f4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f5c:	4572      	cmp	r2, lr
 8008f5e:	f849 3b04 	str.w	r3, [r9], #4
 8008f62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f66:	d8e2      	bhi.n	8008f2e <__multiply+0xb2>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	f845 c003 	str.w	ip, [r5, r3]
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f74:	3104      	adds	r1, #4
 8008f76:	f1b9 0f00 	cmp.w	r9, #0
 8008f7a:	d021      	beq.n	8008fc0 <__multiply+0x144>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	f104 0c14 	add.w	ip, r4, #20
 8008f82:	46ae      	mov	lr, r5
 8008f84:	f04f 0a00 	mov.w	sl, #0
 8008f88:	f8bc b000 	ldrh.w	fp, [ip]
 8008f8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f90:	fb09 770b 	mla	r7, r9, fp, r7
 8008f94:	4457      	add	r7, sl
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f9c:	f84e 3b04 	str.w	r3, [lr], #4
 8008fa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa8:	f8be 3000 	ldrh.w	r3, [lr]
 8008fac:	fb09 330a 	mla	r3, r9, sl, r3
 8008fb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008fb4:	4562      	cmp	r2, ip
 8008fb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fba:	d8e5      	bhi.n	8008f88 <__multiply+0x10c>
 8008fbc:	9f01      	ldr	r7, [sp, #4]
 8008fbe:	51eb      	str	r3, [r5, r7]
 8008fc0:	3504      	adds	r5, #4
 8008fc2:	e799      	b.n	8008ef8 <__multiply+0x7c>
 8008fc4:	3e01      	subs	r6, #1
 8008fc6:	e79b      	b.n	8008f00 <__multiply+0x84>
 8008fc8:	08009d48 	.word	0x08009d48
 8008fcc:	08009d6a 	.word	0x08009d6a

08008fd0 <__pow5mult>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	f012 0203 	ands.w	r2, r2, #3
 8008fda:	4607      	mov	r7, r0
 8008fdc:	460e      	mov	r6, r1
 8008fde:	d007      	beq.n	8008ff0 <__pow5mult+0x20>
 8008fe0:	4c25      	ldr	r4, [pc, #148]	@ (8009078 <__pow5mult+0xa8>)
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fea:	f7ff fe9f 	bl	8008d2c <__multadd>
 8008fee:	4606      	mov	r6, r0
 8008ff0:	10ad      	asrs	r5, r5, #2
 8008ff2:	d03d      	beq.n	8009070 <__pow5mult+0xa0>
 8008ff4:	69fc      	ldr	r4, [r7, #28]
 8008ff6:	b97c      	cbnz	r4, 8009018 <__pow5mult+0x48>
 8008ff8:	2010      	movs	r0, #16
 8008ffa:	f7ff fcd3 	bl	80089a4 <malloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	61f8      	str	r0, [r7, #28]
 8009002:	b928      	cbnz	r0, 8009010 <__pow5mult+0x40>
 8009004:	4b1d      	ldr	r3, [pc, #116]	@ (800907c <__pow5mult+0xac>)
 8009006:	481e      	ldr	r0, [pc, #120]	@ (8009080 <__pow5mult+0xb0>)
 8009008:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800900c:	f000 fa9e 	bl	800954c <__assert_func>
 8009010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009014:	6004      	str	r4, [r0, #0]
 8009016:	60c4      	str	r4, [r0, #12]
 8009018:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800901c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009020:	b94c      	cbnz	r4, 8009036 <__pow5mult+0x66>
 8009022:	f240 2171 	movw	r1, #625	@ 0x271
 8009026:	4638      	mov	r0, r7
 8009028:	f7ff ff12 	bl	8008e50 <__i2b>
 800902c:	2300      	movs	r3, #0
 800902e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009032:	4604      	mov	r4, r0
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 0900 	mov.w	r9, #0
 800903a:	07eb      	lsls	r3, r5, #31
 800903c:	d50a      	bpl.n	8009054 <__pow5mult+0x84>
 800903e:	4631      	mov	r1, r6
 8009040:	4622      	mov	r2, r4
 8009042:	4638      	mov	r0, r7
 8009044:	f7ff ff1a 	bl	8008e7c <__multiply>
 8009048:	4631      	mov	r1, r6
 800904a:	4680      	mov	r8, r0
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fe4b 	bl	8008ce8 <_Bfree>
 8009052:	4646      	mov	r6, r8
 8009054:	106d      	asrs	r5, r5, #1
 8009056:	d00b      	beq.n	8009070 <__pow5mult+0xa0>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	b938      	cbnz	r0, 800906c <__pow5mult+0x9c>
 800905c:	4622      	mov	r2, r4
 800905e:	4621      	mov	r1, r4
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ff0b 	bl	8008e7c <__multiply>
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f8c0 9000 	str.w	r9, [r0]
 800906c:	4604      	mov	r4, r0
 800906e:	e7e4      	b.n	800903a <__pow5mult+0x6a>
 8009070:	4630      	mov	r0, r6
 8009072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009076:	bf00      	nop
 8009078:	08009dc4 	.word	0x08009dc4
 800907c:	08009cd9 	.word	0x08009cd9
 8009080:	08009d6a 	.word	0x08009d6a

08009084 <__lshift>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	6849      	ldr	r1, [r1, #4]
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	4607      	mov	r7, r0
 8009096:	4691      	mov	r9, r2
 8009098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800909c:	f108 0601 	add.w	r6, r8, #1
 80090a0:	42b3      	cmp	r3, r6
 80090a2:	db0b      	blt.n	80090bc <__lshift+0x38>
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff fddf 	bl	8008c68 <_Balloc>
 80090aa:	4605      	mov	r5, r0
 80090ac:	b948      	cbnz	r0, 80090c2 <__lshift+0x3e>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b28      	ldr	r3, [pc, #160]	@ (8009154 <__lshift+0xd0>)
 80090b2:	4829      	ldr	r0, [pc, #164]	@ (8009158 <__lshift+0xd4>)
 80090b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80090b8:	f000 fa48 	bl	800954c <__assert_func>
 80090bc:	3101      	adds	r1, #1
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	e7ee      	b.n	80090a0 <__lshift+0x1c>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f100 0114 	add.w	r1, r0, #20
 80090c8:	f100 0210 	add.w	r2, r0, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	4553      	cmp	r3, sl
 80090d0:	db33      	blt.n	800913a <__lshift+0xb6>
 80090d2:	6920      	ldr	r0, [r4, #16]
 80090d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d8:	f104 0314 	add.w	r3, r4, #20
 80090dc:	f019 091f 	ands.w	r9, r9, #31
 80090e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e8:	d02b      	beq.n	8009142 <__lshift+0xbe>
 80090ea:	f1c9 0e20 	rsb	lr, r9, #32
 80090ee:	468a      	mov	sl, r1
 80090f0:	2200      	movs	r2, #0
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	fa00 f009 	lsl.w	r0, r0, r9
 80090f8:	4310      	orrs	r0, r2
 80090fa:	f84a 0b04 	str.w	r0, [sl], #4
 80090fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009102:	459c      	cmp	ip, r3
 8009104:	fa22 f20e 	lsr.w	r2, r2, lr
 8009108:	d8f3      	bhi.n	80090f2 <__lshift+0x6e>
 800910a:	ebac 0304 	sub.w	r3, ip, r4
 800910e:	3b15      	subs	r3, #21
 8009110:	f023 0303 	bic.w	r3, r3, #3
 8009114:	3304      	adds	r3, #4
 8009116:	f104 0015 	add.w	r0, r4, #21
 800911a:	4584      	cmp	ip, r0
 800911c:	bf38      	it	cc
 800911e:	2304      	movcc	r3, #4
 8009120:	50ca      	str	r2, [r1, r3]
 8009122:	b10a      	cbz	r2, 8009128 <__lshift+0xa4>
 8009124:	f108 0602 	add.w	r6, r8, #2
 8009128:	3e01      	subs	r6, #1
 800912a:	4638      	mov	r0, r7
 800912c:	612e      	str	r6, [r5, #16]
 800912e:	4621      	mov	r1, r4
 8009130:	f7ff fdda 	bl	8008ce8 <_Bfree>
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913a:	f842 0f04 	str.w	r0, [r2, #4]!
 800913e:	3301      	adds	r3, #1
 8009140:	e7c5      	b.n	80090ce <__lshift+0x4a>
 8009142:	3904      	subs	r1, #4
 8009144:	f853 2b04 	ldr.w	r2, [r3], #4
 8009148:	f841 2f04 	str.w	r2, [r1, #4]!
 800914c:	459c      	cmp	ip, r3
 800914e:	d8f9      	bhi.n	8009144 <__lshift+0xc0>
 8009150:	e7ea      	b.n	8009128 <__lshift+0xa4>
 8009152:	bf00      	nop
 8009154:	08009d48 	.word	0x08009d48
 8009158:	08009d6a 	.word	0x08009d6a

0800915c <__mcmp>:
 800915c:	690a      	ldr	r2, [r1, #16]
 800915e:	4603      	mov	r3, r0
 8009160:	6900      	ldr	r0, [r0, #16]
 8009162:	1a80      	subs	r0, r0, r2
 8009164:	b530      	push	{r4, r5, lr}
 8009166:	d10e      	bne.n	8009186 <__mcmp+0x2a>
 8009168:	3314      	adds	r3, #20
 800916a:	3114      	adds	r1, #20
 800916c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009174:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009178:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800917c:	4295      	cmp	r5, r2
 800917e:	d003      	beq.n	8009188 <__mcmp+0x2c>
 8009180:	d205      	bcs.n	800918e <__mcmp+0x32>
 8009182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	42a3      	cmp	r3, r4
 800918a:	d3f3      	bcc.n	8009174 <__mcmp+0x18>
 800918c:	e7fb      	b.n	8009186 <__mcmp+0x2a>
 800918e:	2001      	movs	r0, #1
 8009190:	e7f9      	b.n	8009186 <__mcmp+0x2a>
	...

08009194 <__mdiff>:
 8009194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	4689      	mov	r9, r1
 800919a:	4606      	mov	r6, r0
 800919c:	4611      	mov	r1, r2
 800919e:	4648      	mov	r0, r9
 80091a0:	4614      	mov	r4, r2
 80091a2:	f7ff ffdb 	bl	800915c <__mcmp>
 80091a6:	1e05      	subs	r5, r0, #0
 80091a8:	d112      	bne.n	80091d0 <__mdiff+0x3c>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff fd5b 	bl	8008c68 <_Balloc>
 80091b2:	4602      	mov	r2, r0
 80091b4:	b928      	cbnz	r0, 80091c2 <__mdiff+0x2e>
 80091b6:	4b3f      	ldr	r3, [pc, #252]	@ (80092b4 <__mdiff+0x120>)
 80091b8:	f240 2137 	movw	r1, #567	@ 0x237
 80091bc:	483e      	ldr	r0, [pc, #248]	@ (80092b8 <__mdiff+0x124>)
 80091be:	f000 f9c5 	bl	800954c <__assert_func>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c8:	4610      	mov	r0, r2
 80091ca:	b003      	add	sp, #12
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	bfbc      	itt	lt
 80091d2:	464b      	movlt	r3, r9
 80091d4:	46a1      	movlt	r9, r4
 80091d6:	4630      	mov	r0, r6
 80091d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091dc:	bfba      	itte	lt
 80091de:	461c      	movlt	r4, r3
 80091e0:	2501      	movlt	r5, #1
 80091e2:	2500      	movge	r5, #0
 80091e4:	f7ff fd40 	bl	8008c68 <_Balloc>
 80091e8:	4602      	mov	r2, r0
 80091ea:	b918      	cbnz	r0, 80091f4 <__mdiff+0x60>
 80091ec:	4b31      	ldr	r3, [pc, #196]	@ (80092b4 <__mdiff+0x120>)
 80091ee:	f240 2145 	movw	r1, #581	@ 0x245
 80091f2:	e7e3      	b.n	80091bc <__mdiff+0x28>
 80091f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091f8:	6926      	ldr	r6, [r4, #16]
 80091fa:	60c5      	str	r5, [r0, #12]
 80091fc:	f109 0310 	add.w	r3, r9, #16
 8009200:	f109 0514 	add.w	r5, r9, #20
 8009204:	f104 0e14 	add.w	lr, r4, #20
 8009208:	f100 0b14 	add.w	fp, r0, #20
 800920c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009210:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	46d9      	mov	r9, fp
 8009218:	f04f 0c00 	mov.w	ip, #0
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009222:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	fa1f f38a 	uxth.w	r3, sl
 800922c:	4619      	mov	r1, r3
 800922e:	b283      	uxth	r3, r0
 8009230:	1acb      	subs	r3, r1, r3
 8009232:	0c00      	lsrs	r0, r0, #16
 8009234:	4463      	add	r3, ip
 8009236:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800923a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800923e:	b29b      	uxth	r3, r3
 8009240:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009244:	4576      	cmp	r6, lr
 8009246:	f849 3b04 	str.w	r3, [r9], #4
 800924a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800924e:	d8e5      	bhi.n	800921c <__mdiff+0x88>
 8009250:	1b33      	subs	r3, r6, r4
 8009252:	3b15      	subs	r3, #21
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	3415      	adds	r4, #21
 800925a:	3304      	adds	r3, #4
 800925c:	42a6      	cmp	r6, r4
 800925e:	bf38      	it	cc
 8009260:	2304      	movcc	r3, #4
 8009262:	441d      	add	r5, r3
 8009264:	445b      	add	r3, fp
 8009266:	461e      	mov	r6, r3
 8009268:	462c      	mov	r4, r5
 800926a:	4544      	cmp	r4, r8
 800926c:	d30e      	bcc.n	800928c <__mdiff+0xf8>
 800926e:	f108 0103 	add.w	r1, r8, #3
 8009272:	1b49      	subs	r1, r1, r5
 8009274:	f021 0103 	bic.w	r1, r1, #3
 8009278:	3d03      	subs	r5, #3
 800927a:	45a8      	cmp	r8, r5
 800927c:	bf38      	it	cc
 800927e:	2100      	movcc	r1, #0
 8009280:	440b      	add	r3, r1
 8009282:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009286:	b191      	cbz	r1, 80092ae <__mdiff+0x11a>
 8009288:	6117      	str	r7, [r2, #16]
 800928a:	e79d      	b.n	80091c8 <__mdiff+0x34>
 800928c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009290:	46e6      	mov	lr, ip
 8009292:	0c08      	lsrs	r0, r1, #16
 8009294:	fa1c fc81 	uxtah	ip, ip, r1
 8009298:	4471      	add	r1, lr
 800929a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800929e:	b289      	uxth	r1, r1
 80092a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80092a4:	f846 1b04 	str.w	r1, [r6], #4
 80092a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092ac:	e7dd      	b.n	800926a <__mdiff+0xd6>
 80092ae:	3f01      	subs	r7, #1
 80092b0:	e7e7      	b.n	8009282 <__mdiff+0xee>
 80092b2:	bf00      	nop
 80092b4:	08009d48 	.word	0x08009d48
 80092b8:	08009d6a 	.word	0x08009d6a

080092bc <__d2b>:
 80092bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092c0:	460f      	mov	r7, r1
 80092c2:	2101      	movs	r1, #1
 80092c4:	ec59 8b10 	vmov	r8, r9, d0
 80092c8:	4616      	mov	r6, r2
 80092ca:	f7ff fccd 	bl	8008c68 <_Balloc>
 80092ce:	4604      	mov	r4, r0
 80092d0:	b930      	cbnz	r0, 80092e0 <__d2b+0x24>
 80092d2:	4602      	mov	r2, r0
 80092d4:	4b23      	ldr	r3, [pc, #140]	@ (8009364 <__d2b+0xa8>)
 80092d6:	4824      	ldr	r0, [pc, #144]	@ (8009368 <__d2b+0xac>)
 80092d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80092dc:	f000 f936 	bl	800954c <__assert_func>
 80092e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092e8:	b10d      	cbz	r5, 80092ee <__d2b+0x32>
 80092ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	f1b8 0300 	subs.w	r3, r8, #0
 80092f4:	d023      	beq.n	800933e <__d2b+0x82>
 80092f6:	4668      	mov	r0, sp
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	f7ff fd7c 	bl	8008df6 <__lo0bits>
 80092fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009302:	b1d0      	cbz	r0, 800933a <__d2b+0x7e>
 8009304:	f1c0 0320 	rsb	r3, r0, #32
 8009308:	fa02 f303 	lsl.w	r3, r2, r3
 800930c:	430b      	orrs	r3, r1
 800930e:	40c2      	lsrs	r2, r0
 8009310:	6163      	str	r3, [r4, #20]
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9b01      	ldr	r3, [sp, #4]
 8009316:	61a3      	str	r3, [r4, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	bf0c      	ite	eq
 800931c:	2201      	moveq	r2, #1
 800931e:	2202      	movne	r2, #2
 8009320:	6122      	str	r2, [r4, #16]
 8009322:	b1a5      	cbz	r5, 800934e <__d2b+0x92>
 8009324:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009328:	4405      	add	r5, r0
 800932a:	603d      	str	r5, [r7, #0]
 800932c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009330:	6030      	str	r0, [r6, #0]
 8009332:	4620      	mov	r0, r4
 8009334:	b003      	add	sp, #12
 8009336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800933a:	6161      	str	r1, [r4, #20]
 800933c:	e7ea      	b.n	8009314 <__d2b+0x58>
 800933e:	a801      	add	r0, sp, #4
 8009340:	f7ff fd59 	bl	8008df6 <__lo0bits>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	6163      	str	r3, [r4, #20]
 8009348:	3020      	adds	r0, #32
 800934a:	2201      	movs	r2, #1
 800934c:	e7e8      	b.n	8009320 <__d2b+0x64>
 800934e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009352:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009356:	6038      	str	r0, [r7, #0]
 8009358:	6918      	ldr	r0, [r3, #16]
 800935a:	f7ff fd2d 	bl	8008db8 <__hi0bits>
 800935e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009362:	e7e5      	b.n	8009330 <__d2b+0x74>
 8009364:	08009d48 	.word	0x08009d48
 8009368:	08009d6a 	.word	0x08009d6a

0800936c <__sread>:
 800936c:	b510      	push	{r4, lr}
 800936e:	460c      	mov	r4, r1
 8009370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009374:	f000 f8a8 	bl	80094c8 <_read_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	bfab      	itete	ge
 800937c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800937e:	89a3      	ldrhlt	r3, [r4, #12]
 8009380:	181b      	addge	r3, r3, r0
 8009382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009386:	bfac      	ite	ge
 8009388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800938a:	81a3      	strhlt	r3, [r4, #12]
 800938c:	bd10      	pop	{r4, pc}

0800938e <__swrite>:
 800938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	461f      	mov	r7, r3
 8009394:	898b      	ldrh	r3, [r1, #12]
 8009396:	05db      	lsls	r3, r3, #23
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
 800939c:	4616      	mov	r6, r2
 800939e:	d505      	bpl.n	80093ac <__swrite+0x1e>
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	2302      	movs	r3, #2
 80093a6:	2200      	movs	r2, #0
 80093a8:	f000 f87c 	bl	80094a4 <_lseek_r>
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	4632      	mov	r2, r6
 80093ba:	463b      	mov	r3, r7
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	f000 b8a3 	b.w	800950c <_write_r>

080093c6 <__sseek>:
 80093c6:	b510      	push	{r4, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ce:	f000 f869 	bl	80094a4 <_lseek_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	bf15      	itete	ne
 80093d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093e2:	81a3      	strheq	r3, [r4, #12]
 80093e4:	bf18      	it	ne
 80093e6:	81a3      	strhne	r3, [r4, #12]
 80093e8:	bd10      	pop	{r4, pc}

080093ea <__sclose>:
 80093ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ee:	f000 b849 	b.w	8009484 <_close_r>

080093f2 <_realloc_r>:
 80093f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	4680      	mov	r8, r0
 80093f8:	4615      	mov	r5, r2
 80093fa:	460c      	mov	r4, r1
 80093fc:	b921      	cbnz	r1, 8009408 <_realloc_r+0x16>
 80093fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	4611      	mov	r1, r2
 8009404:	f7ff baf8 	b.w	80089f8 <_malloc_r>
 8009408:	b92a      	cbnz	r2, 8009416 <_realloc_r+0x24>
 800940a:	f000 f8d1 	bl	80095b0 <_free_r>
 800940e:	2400      	movs	r4, #0
 8009410:	4620      	mov	r0, r4
 8009412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009416:	f000 f927 	bl	8009668 <_malloc_usable_size_r>
 800941a:	4285      	cmp	r5, r0
 800941c:	4606      	mov	r6, r0
 800941e:	d802      	bhi.n	8009426 <_realloc_r+0x34>
 8009420:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009424:	d8f4      	bhi.n	8009410 <_realloc_r+0x1e>
 8009426:	4629      	mov	r1, r5
 8009428:	4640      	mov	r0, r8
 800942a:	f7ff fae5 	bl	80089f8 <_malloc_r>
 800942e:	4607      	mov	r7, r0
 8009430:	2800      	cmp	r0, #0
 8009432:	d0ec      	beq.n	800940e <_realloc_r+0x1c>
 8009434:	42b5      	cmp	r5, r6
 8009436:	462a      	mov	r2, r5
 8009438:	4621      	mov	r1, r4
 800943a:	bf28      	it	cs
 800943c:	4632      	movcs	r2, r6
 800943e:	f000 f877 	bl	8009530 <memcpy>
 8009442:	4621      	mov	r1, r4
 8009444:	4640      	mov	r0, r8
 8009446:	f000 f8b3 	bl	80095b0 <_free_r>
 800944a:	463c      	mov	r4, r7
 800944c:	e7e0      	b.n	8009410 <_realloc_r+0x1e>

0800944e <memmove>:
 800944e:	4288      	cmp	r0, r1
 8009450:	b510      	push	{r4, lr}
 8009452:	eb01 0402 	add.w	r4, r1, r2
 8009456:	d902      	bls.n	800945e <memmove+0x10>
 8009458:	4284      	cmp	r4, r0
 800945a:	4623      	mov	r3, r4
 800945c:	d807      	bhi.n	800946e <memmove+0x20>
 800945e:	1e43      	subs	r3, r0, #1
 8009460:	42a1      	cmp	r1, r4
 8009462:	d008      	beq.n	8009476 <memmove+0x28>
 8009464:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009468:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946c:	e7f8      	b.n	8009460 <memmove+0x12>
 800946e:	4402      	add	r2, r0
 8009470:	4601      	mov	r1, r0
 8009472:	428a      	cmp	r2, r1
 8009474:	d100      	bne.n	8009478 <memmove+0x2a>
 8009476:	bd10      	pop	{r4, pc}
 8009478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009480:	e7f7      	b.n	8009472 <memmove+0x24>
	...

08009484 <_close_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	@ (80094a0 <_close_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7f8 f9c0 	bl	8001814 <_close>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_close_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_close_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20000c6c 	.word	0x20000c6c

080094a4 <_lseek_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	@ (80094c4 <_lseek_r+0x20>)
 80094a8:	4604      	mov	r4, r0
 80094aa:	4608      	mov	r0, r1
 80094ac:	4611      	mov	r1, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	602a      	str	r2, [r5, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f7f8 f9d5 	bl	8001862 <_lseek>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_lseek_r+0x1e>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_lseek_r+0x1e>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20000c6c 	.word	0x20000c6c

080094c8 <_read_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4d07      	ldr	r5, [pc, #28]	@ (80094e8 <_read_r+0x20>)
 80094cc:	4604      	mov	r4, r0
 80094ce:	4608      	mov	r0, r1
 80094d0:	4611      	mov	r1, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7f8 f963 	bl	80017a2 <_read>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_read_r+0x1e>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_read_r+0x1e>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000c6c 	.word	0x20000c6c

080094ec <_sbrk_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	@ (8009508 <_sbrk_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f8 f9c0 	bl	800187c <_sbrk>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_sbrk_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_sbrk_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20000c6c 	.word	0x20000c6c

0800950c <_write_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	@ (800952c <_write_r+0x20>)
 8009510:	4604      	mov	r4, r0
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	2200      	movs	r2, #0
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f7f8 f95e 	bl	80017dc <_write>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_write_r+0x1e>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_write_r+0x1e>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20000c6c 	.word	0x20000c6c

08009530 <memcpy>:
 8009530:	440a      	add	r2, r1
 8009532:	4291      	cmp	r1, r2
 8009534:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009538:	d100      	bne.n	800953c <memcpy+0xc>
 800953a:	4770      	bx	lr
 800953c:	b510      	push	{r4, lr}
 800953e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009546:	4291      	cmp	r1, r2
 8009548:	d1f9      	bne.n	800953e <memcpy+0xe>
 800954a:	bd10      	pop	{r4, pc}

0800954c <__assert_func>:
 800954c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800954e:	4614      	mov	r4, r2
 8009550:	461a      	mov	r2, r3
 8009552:	4b09      	ldr	r3, [pc, #36]	@ (8009578 <__assert_func+0x2c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4605      	mov	r5, r0
 8009558:	68d8      	ldr	r0, [r3, #12]
 800955a:	b954      	cbnz	r4, 8009572 <__assert_func+0x26>
 800955c:	4b07      	ldr	r3, [pc, #28]	@ (800957c <__assert_func+0x30>)
 800955e:	461c      	mov	r4, r3
 8009560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009564:	9100      	str	r1, [sp, #0]
 8009566:	462b      	mov	r3, r5
 8009568:	4905      	ldr	r1, [pc, #20]	@ (8009580 <__assert_func+0x34>)
 800956a:	f000 f885 	bl	8009678 <fiprintf>
 800956e:	f000 f8a2 	bl	80096b6 <abort>
 8009572:	4b04      	ldr	r3, [pc, #16]	@ (8009584 <__assert_func+0x38>)
 8009574:	e7f4      	b.n	8009560 <__assert_func+0x14>
 8009576:	bf00      	nop
 8009578:	20000030 	.word	0x20000030
 800957c:	0800a006 	.word	0x0800a006
 8009580:	08009fd8 	.word	0x08009fd8
 8009584:	08009fcb 	.word	0x08009fcb

08009588 <_calloc_r>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	fba1 5402 	umull	r5, r4, r1, r2
 800958e:	b93c      	cbnz	r4, 80095a0 <_calloc_r+0x18>
 8009590:	4629      	mov	r1, r5
 8009592:	f7ff fa31 	bl	80089f8 <_malloc_r>
 8009596:	4606      	mov	r6, r0
 8009598:	b928      	cbnz	r0, 80095a6 <_calloc_r+0x1e>
 800959a:	2600      	movs	r6, #0
 800959c:	4630      	mov	r0, r6
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	220c      	movs	r2, #12
 80095a2:	6002      	str	r2, [r0, #0]
 80095a4:	e7f9      	b.n	800959a <_calloc_r+0x12>
 80095a6:	462a      	mov	r2, r5
 80095a8:	4621      	mov	r1, r4
 80095aa:	f7fe fa8b 	bl	8007ac4 <memset>
 80095ae:	e7f5      	b.n	800959c <_calloc_r+0x14>

080095b0 <_free_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4605      	mov	r5, r0
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d041      	beq.n	800963c <_free_r+0x8c>
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f0c      	subs	r4, r1, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	18e4      	addlt	r4, r4, r3
 80095c4:	f7ff fb44 	bl	8008c50 <__malloc_lock>
 80095c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009640 <_free_r+0x90>)
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	b933      	cbnz	r3, 80095dc <_free_r+0x2c>
 80095ce:	6063      	str	r3, [r4, #4]
 80095d0:	6014      	str	r4, [r2, #0]
 80095d2:	4628      	mov	r0, r5
 80095d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d8:	f7ff bb40 	b.w	8008c5c <__malloc_unlock>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d908      	bls.n	80095f2 <_free_r+0x42>
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	1821      	adds	r1, r4, r0
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf01      	itttt	eq
 80095e8:	6819      	ldreq	r1, [r3, #0]
 80095ea:	685b      	ldreq	r3, [r3, #4]
 80095ec:	1809      	addeq	r1, r1, r0
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	e7ed      	b.n	80095ce <_free_r+0x1e>
 80095f2:	461a      	mov	r2, r3
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b10b      	cbz	r3, 80095fc <_free_r+0x4c>
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d9fa      	bls.n	80095f2 <_free_r+0x42>
 80095fc:	6811      	ldr	r1, [r2, #0]
 80095fe:	1850      	adds	r0, r2, r1
 8009600:	42a0      	cmp	r0, r4
 8009602:	d10b      	bne.n	800961c <_free_r+0x6c>
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	4401      	add	r1, r0
 8009608:	1850      	adds	r0, r2, r1
 800960a:	4283      	cmp	r3, r0
 800960c:	6011      	str	r1, [r2, #0]
 800960e:	d1e0      	bne.n	80095d2 <_free_r+0x22>
 8009610:	6818      	ldr	r0, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	6053      	str	r3, [r2, #4]
 8009616:	4408      	add	r0, r1
 8009618:	6010      	str	r0, [r2, #0]
 800961a:	e7da      	b.n	80095d2 <_free_r+0x22>
 800961c:	d902      	bls.n	8009624 <_free_r+0x74>
 800961e:	230c      	movs	r3, #12
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	e7d6      	b.n	80095d2 <_free_r+0x22>
 8009624:	6820      	ldr	r0, [r4, #0]
 8009626:	1821      	adds	r1, r4, r0
 8009628:	428b      	cmp	r3, r1
 800962a:	bf04      	itt	eq
 800962c:	6819      	ldreq	r1, [r3, #0]
 800962e:	685b      	ldreq	r3, [r3, #4]
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	bf04      	itt	eq
 8009634:	1809      	addeq	r1, r1, r0
 8009636:	6021      	streq	r1, [r4, #0]
 8009638:	6054      	str	r4, [r2, #4]
 800963a:	e7ca      	b.n	80095d2 <_free_r+0x22>
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	20000c68 	.word	0x20000c68

08009644 <__ascii_mbtowc>:
 8009644:	b082      	sub	sp, #8
 8009646:	b901      	cbnz	r1, 800964a <__ascii_mbtowc+0x6>
 8009648:	a901      	add	r1, sp, #4
 800964a:	b142      	cbz	r2, 800965e <__ascii_mbtowc+0x1a>
 800964c:	b14b      	cbz	r3, 8009662 <__ascii_mbtowc+0x1e>
 800964e:	7813      	ldrb	r3, [r2, #0]
 8009650:	600b      	str	r3, [r1, #0]
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	1e10      	subs	r0, r2, #0
 8009656:	bf18      	it	ne
 8009658:	2001      	movne	r0, #1
 800965a:	b002      	add	sp, #8
 800965c:	4770      	bx	lr
 800965e:	4610      	mov	r0, r2
 8009660:	e7fb      	b.n	800965a <__ascii_mbtowc+0x16>
 8009662:	f06f 0001 	mvn.w	r0, #1
 8009666:	e7f8      	b.n	800965a <__ascii_mbtowc+0x16>

08009668 <_malloc_usable_size_r>:
 8009668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966c:	1f18      	subs	r0, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	bfbc      	itt	lt
 8009672:	580b      	ldrlt	r3, [r1, r0]
 8009674:	18c0      	addlt	r0, r0, r3
 8009676:	4770      	bx	lr

08009678 <fiprintf>:
 8009678:	b40e      	push	{r1, r2, r3}
 800967a:	b503      	push	{r0, r1, lr}
 800967c:	4601      	mov	r1, r0
 800967e:	ab03      	add	r3, sp, #12
 8009680:	4805      	ldr	r0, [pc, #20]	@ (8009698 <fiprintf+0x20>)
 8009682:	f853 2b04 	ldr.w	r2, [r3], #4
 8009686:	6800      	ldr	r0, [r0, #0]
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	f000 f845 	bl	8009718 <_vfiprintf_r>
 800968e:	b002      	add	sp, #8
 8009690:	f85d eb04 	ldr.w	lr, [sp], #4
 8009694:	b003      	add	sp, #12
 8009696:	4770      	bx	lr
 8009698:	20000030 	.word	0x20000030

0800969c <__ascii_wctomb>:
 800969c:	4603      	mov	r3, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	b141      	cbz	r1, 80096b4 <__ascii_wctomb+0x18>
 80096a2:	2aff      	cmp	r2, #255	@ 0xff
 80096a4:	d904      	bls.n	80096b0 <__ascii_wctomb+0x14>
 80096a6:	228a      	movs	r2, #138	@ 0x8a
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096ae:	4770      	bx	lr
 80096b0:	700a      	strb	r2, [r1, #0]
 80096b2:	2001      	movs	r0, #1
 80096b4:	4770      	bx	lr

080096b6 <abort>:
 80096b6:	b508      	push	{r3, lr}
 80096b8:	2006      	movs	r0, #6
 80096ba:	f000 fa85 	bl	8009bc8 <raise>
 80096be:	2001      	movs	r0, #1
 80096c0:	f7f8 f864 	bl	800178c <_exit>

080096c4 <__sfputc_r>:
 80096c4:	6893      	ldr	r3, [r2, #8]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	b410      	push	{r4}
 80096cc:	6093      	str	r3, [r2, #8]
 80096ce:	da08      	bge.n	80096e2 <__sfputc_r+0x1e>
 80096d0:	6994      	ldr	r4, [r2, #24]
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	db01      	blt.n	80096da <__sfputc_r+0x16>
 80096d6:	290a      	cmp	r1, #10
 80096d8:	d103      	bne.n	80096e2 <__sfputc_r+0x1e>
 80096da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096de:	f000 b933 	b.w	8009948 <__swbuf_r>
 80096e2:	6813      	ldr	r3, [r2, #0]
 80096e4:	1c58      	adds	r0, r3, #1
 80096e6:	6010      	str	r0, [r2, #0]
 80096e8:	7019      	strb	r1, [r3, #0]
 80096ea:	4608      	mov	r0, r1
 80096ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <__sfputs_r>:
 80096f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	4614      	mov	r4, r2
 80096fa:	18d5      	adds	r5, r2, r3
 80096fc:	42ac      	cmp	r4, r5
 80096fe:	d101      	bne.n	8009704 <__sfputs_r+0x12>
 8009700:	2000      	movs	r0, #0
 8009702:	e007      	b.n	8009714 <__sfputs_r+0x22>
 8009704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009708:	463a      	mov	r2, r7
 800970a:	4630      	mov	r0, r6
 800970c:	f7ff ffda 	bl	80096c4 <__sfputc_r>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d1f3      	bne.n	80096fc <__sfputs_r+0xa>
 8009714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009718 <_vfiprintf_r>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	460d      	mov	r5, r1
 800971e:	b09d      	sub	sp, #116	@ 0x74
 8009720:	4614      	mov	r4, r2
 8009722:	4698      	mov	r8, r3
 8009724:	4606      	mov	r6, r0
 8009726:	b118      	cbz	r0, 8009730 <_vfiprintf_r+0x18>
 8009728:	6a03      	ldr	r3, [r0, #32]
 800972a:	b90b      	cbnz	r3, 8009730 <_vfiprintf_r+0x18>
 800972c:	f7fe f994 	bl	8007a58 <__sinit>
 8009730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009732:	07d9      	lsls	r1, r3, #31
 8009734:	d405      	bmi.n	8009742 <_vfiprintf_r+0x2a>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d402      	bmi.n	8009742 <_vfiprintf_r+0x2a>
 800973c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800973e:	f7fe f9f8 	bl	8007b32 <__retarget_lock_acquire_recursive>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	071b      	lsls	r3, r3, #28
 8009746:	d501      	bpl.n	800974c <_vfiprintf_r+0x34>
 8009748:	692b      	ldr	r3, [r5, #16]
 800974a:	b99b      	cbnz	r3, 8009774 <_vfiprintf_r+0x5c>
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f000 f938 	bl	80099c4 <__swsetup_r>
 8009754:	b170      	cbz	r0, 8009774 <_vfiprintf_r+0x5c>
 8009756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009758:	07dc      	lsls	r4, r3, #31
 800975a:	d504      	bpl.n	8009766 <_vfiprintf_r+0x4e>
 800975c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009760:	b01d      	add	sp, #116	@ 0x74
 8009762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009766:	89ab      	ldrh	r3, [r5, #12]
 8009768:	0598      	lsls	r0, r3, #22
 800976a:	d4f7      	bmi.n	800975c <_vfiprintf_r+0x44>
 800976c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800976e:	f7fe f9e1 	bl	8007b34 <__retarget_lock_release_recursive>
 8009772:	e7f3      	b.n	800975c <_vfiprintf_r+0x44>
 8009774:	2300      	movs	r3, #0
 8009776:	9309      	str	r3, [sp, #36]	@ 0x24
 8009778:	2320      	movs	r3, #32
 800977a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800977e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009782:	2330      	movs	r3, #48	@ 0x30
 8009784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009934 <_vfiprintf_r+0x21c>
 8009788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800978c:	f04f 0901 	mov.w	r9, #1
 8009790:	4623      	mov	r3, r4
 8009792:	469a      	mov	sl, r3
 8009794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009798:	b10a      	cbz	r2, 800979e <_vfiprintf_r+0x86>
 800979a:	2a25      	cmp	r2, #37	@ 0x25
 800979c:	d1f9      	bne.n	8009792 <_vfiprintf_r+0x7a>
 800979e:	ebba 0b04 	subs.w	fp, sl, r4
 80097a2:	d00b      	beq.n	80097bc <_vfiprintf_r+0xa4>
 80097a4:	465b      	mov	r3, fp
 80097a6:	4622      	mov	r2, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	4630      	mov	r0, r6
 80097ac:	f7ff ffa1 	bl	80096f2 <__sfputs_r>
 80097b0:	3001      	adds	r0, #1
 80097b2:	f000 80a7 	beq.w	8009904 <_vfiprintf_r+0x1ec>
 80097b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097b8:	445a      	add	r2, fp
 80097ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80097bc:	f89a 3000 	ldrb.w	r3, [sl]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 809f 	beq.w	8009904 <_vfiprintf_r+0x1ec>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d0:	f10a 0a01 	add.w	sl, sl, #1
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	9307      	str	r3, [sp, #28]
 80097d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80097de:	4654      	mov	r4, sl
 80097e0:	2205      	movs	r2, #5
 80097e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e6:	4853      	ldr	r0, [pc, #332]	@ (8009934 <_vfiprintf_r+0x21c>)
 80097e8:	f7f6 fd2a 	bl	8000240 <memchr>
 80097ec:	9a04      	ldr	r2, [sp, #16]
 80097ee:	b9d8      	cbnz	r0, 8009828 <_vfiprintf_r+0x110>
 80097f0:	06d1      	lsls	r1, r2, #27
 80097f2:	bf44      	itt	mi
 80097f4:	2320      	movmi	r3, #32
 80097f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097fa:	0713      	lsls	r3, r2, #28
 80097fc:	bf44      	itt	mi
 80097fe:	232b      	movmi	r3, #43	@ 0x2b
 8009800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009804:	f89a 3000 	ldrb.w	r3, [sl]
 8009808:	2b2a      	cmp	r3, #42	@ 0x2a
 800980a:	d015      	beq.n	8009838 <_vfiprintf_r+0x120>
 800980c:	9a07      	ldr	r2, [sp, #28]
 800980e:	4654      	mov	r4, sl
 8009810:	2000      	movs	r0, #0
 8009812:	f04f 0c0a 	mov.w	ip, #10
 8009816:	4621      	mov	r1, r4
 8009818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800981c:	3b30      	subs	r3, #48	@ 0x30
 800981e:	2b09      	cmp	r3, #9
 8009820:	d94b      	bls.n	80098ba <_vfiprintf_r+0x1a2>
 8009822:	b1b0      	cbz	r0, 8009852 <_vfiprintf_r+0x13a>
 8009824:	9207      	str	r2, [sp, #28]
 8009826:	e014      	b.n	8009852 <_vfiprintf_r+0x13a>
 8009828:	eba0 0308 	sub.w	r3, r0, r8
 800982c:	fa09 f303 	lsl.w	r3, r9, r3
 8009830:	4313      	orrs	r3, r2
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	46a2      	mov	sl, r4
 8009836:	e7d2      	b.n	80097de <_vfiprintf_r+0xc6>
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	1d19      	adds	r1, r3, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	9103      	str	r1, [sp, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bfbb      	ittet	lt
 8009844:	425b      	neglt	r3, r3
 8009846:	f042 0202 	orrlt.w	r2, r2, #2
 800984a:	9307      	strge	r3, [sp, #28]
 800984c:	9307      	strlt	r3, [sp, #28]
 800984e:	bfb8      	it	lt
 8009850:	9204      	strlt	r2, [sp, #16]
 8009852:	7823      	ldrb	r3, [r4, #0]
 8009854:	2b2e      	cmp	r3, #46	@ 0x2e
 8009856:	d10a      	bne.n	800986e <_vfiprintf_r+0x156>
 8009858:	7863      	ldrb	r3, [r4, #1]
 800985a:	2b2a      	cmp	r3, #42	@ 0x2a
 800985c:	d132      	bne.n	80098c4 <_vfiprintf_r+0x1ac>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	1d1a      	adds	r2, r3, #4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	9203      	str	r2, [sp, #12]
 8009866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800986a:	3402      	adds	r4, #2
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009944 <_vfiprintf_r+0x22c>
 8009872:	7821      	ldrb	r1, [r4, #0]
 8009874:	2203      	movs	r2, #3
 8009876:	4650      	mov	r0, sl
 8009878:	f7f6 fce2 	bl	8000240 <memchr>
 800987c:	b138      	cbz	r0, 800988e <_vfiprintf_r+0x176>
 800987e:	9b04      	ldr	r3, [sp, #16]
 8009880:	eba0 000a 	sub.w	r0, r0, sl
 8009884:	2240      	movs	r2, #64	@ 0x40
 8009886:	4082      	lsls	r2, r0
 8009888:	4313      	orrs	r3, r2
 800988a:	3401      	adds	r4, #1
 800988c:	9304      	str	r3, [sp, #16]
 800988e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009892:	4829      	ldr	r0, [pc, #164]	@ (8009938 <_vfiprintf_r+0x220>)
 8009894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009898:	2206      	movs	r2, #6
 800989a:	f7f6 fcd1 	bl	8000240 <memchr>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d03f      	beq.n	8009922 <_vfiprintf_r+0x20a>
 80098a2:	4b26      	ldr	r3, [pc, #152]	@ (800993c <_vfiprintf_r+0x224>)
 80098a4:	bb1b      	cbnz	r3, 80098ee <_vfiprintf_r+0x1d6>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	3307      	adds	r3, #7
 80098aa:	f023 0307 	bic.w	r3, r3, #7
 80098ae:	3308      	adds	r3, #8
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b4:	443b      	add	r3, r7
 80098b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b8:	e76a      	b.n	8009790 <_vfiprintf_r+0x78>
 80098ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80098be:	460c      	mov	r4, r1
 80098c0:	2001      	movs	r0, #1
 80098c2:	e7a8      	b.n	8009816 <_vfiprintf_r+0xfe>
 80098c4:	2300      	movs	r3, #0
 80098c6:	3401      	adds	r4, #1
 80098c8:	9305      	str	r3, [sp, #20]
 80098ca:	4619      	mov	r1, r3
 80098cc:	f04f 0c0a 	mov.w	ip, #10
 80098d0:	4620      	mov	r0, r4
 80098d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d6:	3a30      	subs	r2, #48	@ 0x30
 80098d8:	2a09      	cmp	r2, #9
 80098da:	d903      	bls.n	80098e4 <_vfiprintf_r+0x1cc>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0c6      	beq.n	800986e <_vfiprintf_r+0x156>
 80098e0:	9105      	str	r1, [sp, #20]
 80098e2:	e7c4      	b.n	800986e <_vfiprintf_r+0x156>
 80098e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e8:	4604      	mov	r4, r0
 80098ea:	2301      	movs	r3, #1
 80098ec:	e7f0      	b.n	80098d0 <_vfiprintf_r+0x1b8>
 80098ee:	ab03      	add	r3, sp, #12
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	462a      	mov	r2, r5
 80098f4:	4b12      	ldr	r3, [pc, #72]	@ (8009940 <_vfiprintf_r+0x228>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7fd fc59 	bl	80071b0 <_printf_float>
 80098fe:	4607      	mov	r7, r0
 8009900:	1c78      	adds	r0, r7, #1
 8009902:	d1d6      	bne.n	80098b2 <_vfiprintf_r+0x19a>
 8009904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009906:	07d9      	lsls	r1, r3, #31
 8009908:	d405      	bmi.n	8009916 <_vfiprintf_r+0x1fe>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	059a      	lsls	r2, r3, #22
 800990e:	d402      	bmi.n	8009916 <_vfiprintf_r+0x1fe>
 8009910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009912:	f7fe f90f 	bl	8007b34 <__retarget_lock_release_recursive>
 8009916:	89ab      	ldrh	r3, [r5, #12]
 8009918:	065b      	lsls	r3, r3, #25
 800991a:	f53f af1f 	bmi.w	800975c <_vfiprintf_r+0x44>
 800991e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009920:	e71e      	b.n	8009760 <_vfiprintf_r+0x48>
 8009922:	ab03      	add	r3, sp, #12
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	462a      	mov	r2, r5
 8009928:	4b05      	ldr	r3, [pc, #20]	@ (8009940 <_vfiprintf_r+0x228>)
 800992a:	a904      	add	r1, sp, #16
 800992c:	4630      	mov	r0, r6
 800992e:	f7fd fec7 	bl	80076c0 <_printf_i>
 8009932:	e7e4      	b.n	80098fe <_vfiprintf_r+0x1e6>
 8009934:	08009d59 	.word	0x08009d59
 8009938:	08009d63 	.word	0x08009d63
 800993c:	080071b1 	.word	0x080071b1
 8009940:	080096f3 	.word	0x080096f3
 8009944:	08009d5f 	.word	0x08009d5f

08009948 <__swbuf_r>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	460e      	mov	r6, r1
 800994c:	4614      	mov	r4, r2
 800994e:	4605      	mov	r5, r0
 8009950:	b118      	cbz	r0, 800995a <__swbuf_r+0x12>
 8009952:	6a03      	ldr	r3, [r0, #32]
 8009954:	b90b      	cbnz	r3, 800995a <__swbuf_r+0x12>
 8009956:	f7fe f87f 	bl	8007a58 <__sinit>
 800995a:	69a3      	ldr	r3, [r4, #24]
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	071a      	lsls	r2, r3, #28
 8009962:	d501      	bpl.n	8009968 <__swbuf_r+0x20>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	b943      	cbnz	r3, 800997a <__swbuf_r+0x32>
 8009968:	4621      	mov	r1, r4
 800996a:	4628      	mov	r0, r5
 800996c:	f000 f82a 	bl	80099c4 <__swsetup_r>
 8009970:	b118      	cbz	r0, 800997a <__swbuf_r+0x32>
 8009972:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009976:	4638      	mov	r0, r7
 8009978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	1a98      	subs	r0, r3, r2
 8009980:	6963      	ldr	r3, [r4, #20]
 8009982:	b2f6      	uxtb	r6, r6
 8009984:	4283      	cmp	r3, r0
 8009986:	4637      	mov	r7, r6
 8009988:	dc05      	bgt.n	8009996 <__swbuf_r+0x4e>
 800998a:	4621      	mov	r1, r4
 800998c:	4628      	mov	r0, r5
 800998e:	f7ff f937 	bl	8008c00 <_fflush_r>
 8009992:	2800      	cmp	r0, #0
 8009994:	d1ed      	bne.n	8009972 <__swbuf_r+0x2a>
 8009996:	68a3      	ldr	r3, [r4, #8]
 8009998:	3b01      	subs	r3, #1
 800999a:	60a3      	str	r3, [r4, #8]
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	6022      	str	r2, [r4, #0]
 80099a2:	701e      	strb	r6, [r3, #0]
 80099a4:	6962      	ldr	r2, [r4, #20]
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d004      	beq.n	80099b6 <__swbuf_r+0x6e>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	07db      	lsls	r3, r3, #31
 80099b0:	d5e1      	bpl.n	8009976 <__swbuf_r+0x2e>
 80099b2:	2e0a      	cmp	r6, #10
 80099b4:	d1df      	bne.n	8009976 <__swbuf_r+0x2e>
 80099b6:	4621      	mov	r1, r4
 80099b8:	4628      	mov	r0, r5
 80099ba:	f7ff f921 	bl	8008c00 <_fflush_r>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0d9      	beq.n	8009976 <__swbuf_r+0x2e>
 80099c2:	e7d6      	b.n	8009972 <__swbuf_r+0x2a>

080099c4 <__swsetup_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4b29      	ldr	r3, [pc, #164]	@ (8009a6c <__swsetup_r+0xa8>)
 80099c8:	4605      	mov	r5, r0
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	460c      	mov	r4, r1
 80099ce:	b118      	cbz	r0, 80099d8 <__swsetup_r+0x14>
 80099d0:	6a03      	ldr	r3, [r0, #32]
 80099d2:	b90b      	cbnz	r3, 80099d8 <__swsetup_r+0x14>
 80099d4:	f7fe f840 	bl	8007a58 <__sinit>
 80099d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099dc:	0719      	lsls	r1, r3, #28
 80099de:	d422      	bmi.n	8009a26 <__swsetup_r+0x62>
 80099e0:	06da      	lsls	r2, r3, #27
 80099e2:	d407      	bmi.n	80099f4 <__swsetup_r+0x30>
 80099e4:	2209      	movs	r2, #9
 80099e6:	602a      	str	r2, [r5, #0]
 80099e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099f2:	e033      	b.n	8009a5c <__swsetup_r+0x98>
 80099f4:	0758      	lsls	r0, r3, #29
 80099f6:	d512      	bpl.n	8009a1e <__swsetup_r+0x5a>
 80099f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099fa:	b141      	cbz	r1, 8009a0e <__swsetup_r+0x4a>
 80099fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a00:	4299      	cmp	r1, r3
 8009a02:	d002      	beq.n	8009a0a <__swsetup_r+0x46>
 8009a04:	4628      	mov	r0, r5
 8009a06:	f7ff fdd3 	bl	80095b0 <_free_r>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	2300      	movs	r3, #0
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f043 0308 	orr.w	r3, r3, #8
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	b94b      	cbnz	r3, 8009a3e <__swsetup_r+0x7a>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a34:	d003      	beq.n	8009a3e <__swsetup_r+0x7a>
 8009a36:	4621      	mov	r1, r4
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f000 f83f 	bl	8009abc <__smakebuf_r>
 8009a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a42:	f013 0201 	ands.w	r2, r3, #1
 8009a46:	d00a      	beq.n	8009a5e <__swsetup_r+0x9a>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	60a2      	str	r2, [r4, #8]
 8009a4c:	6962      	ldr	r2, [r4, #20]
 8009a4e:	4252      	negs	r2, r2
 8009a50:	61a2      	str	r2, [r4, #24]
 8009a52:	6922      	ldr	r2, [r4, #16]
 8009a54:	b942      	cbnz	r2, 8009a68 <__swsetup_r+0xa4>
 8009a56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a5a:	d1c5      	bne.n	80099e8 <__swsetup_r+0x24>
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
 8009a5e:	0799      	lsls	r1, r3, #30
 8009a60:	bf58      	it	pl
 8009a62:	6962      	ldrpl	r2, [r4, #20]
 8009a64:	60a2      	str	r2, [r4, #8]
 8009a66:	e7f4      	b.n	8009a52 <__swsetup_r+0x8e>
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7f7      	b.n	8009a5c <__swsetup_r+0x98>
 8009a6c:	20000030 	.word	0x20000030

08009a70 <__swhatbuf_r>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	b096      	sub	sp, #88	@ 0x58
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	461e      	mov	r6, r3
 8009a80:	da0d      	bge.n	8009a9e <__swhatbuf_r+0x2e>
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a88:	f04f 0100 	mov.w	r1, #0
 8009a8c:	bf14      	ite	ne
 8009a8e:	2340      	movne	r3, #64	@ 0x40
 8009a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a94:	2000      	movs	r0, #0
 8009a96:	6031      	str	r1, [r6, #0]
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	b016      	add	sp, #88	@ 0x58
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	466a      	mov	r2, sp
 8009aa0:	f000 f848 	bl	8009b34 <_fstat_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	dbec      	blt.n	8009a82 <__swhatbuf_r+0x12>
 8009aa8:	9901      	ldr	r1, [sp, #4]
 8009aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ab2:	4259      	negs	r1, r3
 8009ab4:	4159      	adcs	r1, r3
 8009ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aba:	e7eb      	b.n	8009a94 <__swhatbuf_r+0x24>

08009abc <__smakebuf_r>:
 8009abc:	898b      	ldrh	r3, [r1, #12]
 8009abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ac0:	079d      	lsls	r5, r3, #30
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	d507      	bpl.n	8009ad8 <__smakebuf_r+0x1c>
 8009ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6163      	str	r3, [r4, #20]
 8009ad4:	b003      	add	sp, #12
 8009ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad8:	ab01      	add	r3, sp, #4
 8009ada:	466a      	mov	r2, sp
 8009adc:	f7ff ffc8 	bl	8009a70 <__swhatbuf_r>
 8009ae0:	9f00      	ldr	r7, [sp, #0]
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f7fe ff86 	bl	80089f8 <_malloc_r>
 8009aec:	b948      	cbnz	r0, 8009b02 <__smakebuf_r+0x46>
 8009aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af2:	059a      	lsls	r2, r3, #22
 8009af4:	d4ee      	bmi.n	8009ad4 <__smakebuf_r+0x18>
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	f043 0302 	orr.w	r3, r3, #2
 8009afe:	81a3      	strh	r3, [r4, #12]
 8009b00:	e7e2      	b.n	8009ac8 <__smakebuf_r+0xc>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	6020      	str	r0, [r4, #0]
 8009b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b12:	b15b      	cbz	r3, 8009b2c <__smakebuf_r+0x70>
 8009b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 f81d 	bl	8009b58 <_isatty_r>
 8009b1e:	b128      	cbz	r0, 8009b2c <__smakebuf_r+0x70>
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	f023 0303 	bic.w	r3, r3, #3
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	431d      	orrs	r5, r3
 8009b30:	81a5      	strh	r5, [r4, #12]
 8009b32:	e7cf      	b.n	8009ad4 <__smakebuf_r+0x18>

08009b34 <_fstat_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	4d07      	ldr	r5, [pc, #28]	@ (8009b54 <_fstat_r+0x20>)
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	4611      	mov	r1, r2
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	f7f7 fe73 	bl	800182c <_fstat>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d102      	bne.n	8009b50 <_fstat_r+0x1c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	b103      	cbz	r3, 8009b50 <_fstat_r+0x1c>
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	bd38      	pop	{r3, r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	20000c6c 	.word	0x20000c6c

08009b58 <_isatty_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d06      	ldr	r5, [pc, #24]	@ (8009b74 <_isatty_r+0x1c>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f7 fe72 	bl	800184c <_isatty>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_isatty_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_isatty_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	20000c6c 	.word	0x20000c6c

08009b78 <_raise_r>:
 8009b78:	291f      	cmp	r1, #31
 8009b7a:	b538      	push	{r3, r4, r5, lr}
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	d904      	bls.n	8009b8c <_raise_r+0x14>
 8009b82:	2316      	movs	r3, #22
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009b8e:	b112      	cbz	r2, 8009b96 <_raise_r+0x1e>
 8009b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b94:	b94b      	cbnz	r3, 8009baa <_raise_r+0x32>
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 f830 	bl	8009bfc <_getpid_r>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba6:	f000 b817 	b.w	8009bd8 <_kill_r>
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d00a      	beq.n	8009bc4 <_raise_r+0x4c>
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	d103      	bne.n	8009bba <_raise_r+0x42>
 8009bb2:	2316      	movs	r3, #22
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e7e7      	b.n	8009b8a <_raise_r+0x12>
 8009bba:	2100      	movs	r1, #0
 8009bbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4798      	blx	r3
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7e0      	b.n	8009b8a <_raise_r+0x12>

08009bc8 <raise>:
 8009bc8:	4b02      	ldr	r3, [pc, #8]	@ (8009bd4 <raise+0xc>)
 8009bca:	4601      	mov	r1, r0
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	f7ff bfd3 	b.w	8009b78 <_raise_r>
 8009bd2:	bf00      	nop
 8009bd4:	20000030 	.word	0x20000030

08009bd8 <_kill_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	@ (8009bf8 <_kill_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f7 fdc1 	bl	800176c <_kill>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_kill_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_kill_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000c6c 	.word	0x20000c6c

08009bfc <_getpid_r>:
 8009bfc:	f7f7 bdae 	b.w	800175c <_getpid>

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
