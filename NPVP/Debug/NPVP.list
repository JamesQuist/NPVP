
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dc8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08008fc8  08008fc8  00009fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b8  080093b8  0000b31c  2**0
                  CONTENTS
  4 .ARM          00000008  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c0  080093c0  0000b31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080093c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  080095a4  0000b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  08009644  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008e8  2000031c  080096e4  0000b31c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c04  080096e4  0000bc04  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000197fa  00000000  00000000  0000b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003211  00000000  00000000  00024b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001580  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010bd  00000000  00000000  000292d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b3e2  00000000  00000000  0002a395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019270  00000000  00000000  00055777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b4d0  00000000  00000000  0006e9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00179eb7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006afc  00000000  00000000  00179efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  001809f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000031c 	.word	0x2000031c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008fb0 	.word	0x08008fb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000320 	.word	0x20000320
 800023c:	08008fb0 	.word	0x08008fb0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <func_clear_values>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Clear variable values
void func_clear_values(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
//	float *volt_value_ptr = &measured_voltage_value;
//	float *adc_value_ptr = &adc_value;

	raw_adc_value = 0.0;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <func_clear_values+0x20>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	measured_voltage_value = 0.0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <func_clear_values+0x24>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]

}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000a28 	.word	0x20000a28
 8000604:	20000a34 	.word	0x20000a34

08000608 <func_init_sensor_connection_status>:

// Initial sensor connection status
void func_init_sensor_connection_status(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
//	int *sensor_status_ptr = &sensor_status;
	func_clear_values();
 800060c:	f7ff ffe8 	bl	80005e0 <func_clear_values>

	HAL_ADC_Stop(&hadc1);
 8000610:	481b      	ldr	r0, [pc, #108]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000612:	f001 fa03 	bl	8001a1c <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000618:	f001 f932 	bl	8001880 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800061c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000620:	4817      	ldr	r0, [pc, #92]	@ (8000680 <func_init_sensor_connection_status+0x78>)
 8000622:	f001 fa2f 	bl	8001a84 <HAL_ADC_PollForConversion>

	//Get new measurements
	func_get_adc_value(); // Does not need to be an average
 8000626:	f000 f8b7 	bl	8000798 <func_get_adc_value>
	func_adc_to_voltage();
 800062a:	f000 f8d9 	bl	80007e0 <func_adc_to_voltage>

//	if(measured_voltage_value < 0.1)
	if(measured_voltage_value < 0.1){
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <func_init_sensor_connection_status+0x7c>)
 8000630:	edd3 7a00 	vldr	s15, [r3]
 8000634:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000638:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8000678 <func_init_sensor_connection_status+0x70>
 800063c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000644:	d513      	bpl.n	800066e <func_init_sensor_connection_status+0x66>
		sprintf(output_message, "+++ SENSOR DISCONNECTED +++\r\n");
 8000646:	4910      	ldr	r1, [pc, #64]	@ (8000688 <func_init_sensor_connection_status+0x80>)
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <func_init_sensor_connection_status+0x84>)
 800064a:	f006 fb31 	bl	8006cb0 <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 800064e:	480f      	ldr	r0, [pc, #60]	@ (800068c <func_init_sensor_connection_status+0x84>)
 8000650:	f7ff fe46 	bl	80002e0 <strlen>
 8000654:	4603      	mov	r3, r0
 8000656:	b29a      	uxth	r2, r3
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800065c:	490b      	ldr	r1, [pc, #44]	@ (800068c <func_init_sensor_connection_status+0x84>)
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <func_init_sensor_connection_status+0x88>)
 8000660:	f004 fba2 	bl	8004da8 <HAL_UART_Transmit>
		HAL_Delay(500);
 8000664:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000668:	f001 f8a2 	bl	80017b0 <HAL_Delay>
	} else {
		sensor_status = 0;
	}
}
 800066c:	e002      	b.n	8000674 <func_init_sensor_connection_status+0x6c>
		sensor_status = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <func_init_sensor_connection_status+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	9999999a 	.word	0x9999999a
 800067c:	3fb99999 	.word	0x3fb99999
 8000680:	20000370 	.word	0x20000370
 8000684:	20000a34 	.word	0x20000a34
 8000688:	08008fc8 	.word	0x08008fc8
 800068c:	20000a44 	.word	0x20000a44
 8000690:	200004b4 	.word	0x200004b4
 8000694:	20000000 	.word	0x20000000

08000698 <func_monitor_sensor_status>:

// Sensor connection monitoring
void func_monitor_sensor_status(void){
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	if(measured_voltage_value < 0.1){
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <func_monitor_sensor_status+0x38>)
 800069e:	edd3 7a00 	vldr	s15, [r3]
 80006a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006a6:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 80006c8 <func_monitor_sensor_status+0x30>
 80006aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80006ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b2:	d400      	bmi.n	80006b6 <func_monitor_sensor_status+0x1e>
		sensor_status = 1;
	}
}
 80006b4:	e002      	b.n	80006bc <func_monitor_sensor_status+0x24>
		sensor_status = 1;
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <func_monitor_sensor_status+0x3c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	9999999a 	.word	0x9999999a
 80006cc:	3fb99999 	.word	0x3fb99999
 80006d0:	20000a34 	.word	0x20000a34
 80006d4:	20000000 	.word	0x20000000

080006d8 <func_calibrate_sensor>:

// Calibrate sensor
void func_calibrate_sensor(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	// Take initial measurements
	func_average_adc_measurement();
 80006dc:	f000 f816 	bl	800070c <func_average_adc_measurement>

	// Set auto-zero value
	func_auto_zero();
 80006e0:	f000 f86c 	bl	80007bc <func_auto_zero>
	calibration_status = 0;
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <func_calibrate_sensor+0x18>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000004 	.word	0x20000004

080006f4 <func_adc_conversion>:

// Get measurement values
void func_adc_conversion(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	func_adc_to_voltage();
 80006f8:	f000 f872 	bl	80007e0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 80006fc:	f000 f8cc 	bl	8000898 <func_voltage_to_kpa>
	func_kpa_to_cmh2o();
 8000700:	f000 f902 	bl	8000908 <func_kpa_to_cmh2o>
	func_kpa_to_inh2o();
 8000704:	f000 f920 	bl	8000948 <func_kpa_to_inh2o>

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <func_average_adc_measurement>:

// Average measurement
void func_average_adc_measurement(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    // Initialize accumulation variables
    adc_sum = 0.0;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <func_average_adc_measurement+0x68>)
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
    sample_count = 0.0;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <func_average_adc_measurement+0x6c>)
 800071a:	f04f 0200 	mov.w	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
    sampling_done = 0;
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <func_average_adc_measurement+0x70>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000726:	4816      	ldr	r0, [pc, #88]	@ (8000780 <func_average_adc_measurement+0x74>)
 8000728:	f003 fe5e 	bl	80043e8 <HAL_TIM_Base_Start_IT>

    // Wait for 1000ms
    HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000730:	f001 f83e 	bl	80017b0 <HAL_Delay>

    // Stop the timer
    HAL_TIM_Base_Stop_IT(&htim2);
 8000734:	4812      	ldr	r0, [pc, #72]	@ (8000780 <func_average_adc_measurement+0x74>)
 8000736:	f003 fecf 	bl	80044d8 <HAL_TIM_Base_Stop_IT>

    // Calculate average
    if (sample_count > 0) {
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <func_average_adc_measurement+0x6c>)
 800073c:	edd3 7a00 	vldr	s15, [r3]
 8000740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	dd0b      	ble.n	8000762 <func_average_adc_measurement+0x56>
    	avg_adc_value = adc_sum / sample_count; // Average ADC value stored
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <func_average_adc_measurement+0x68>)
 800074c:	edd3 6a00 	vldr	s13, [r3]
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <func_average_adc_measurement+0x6c>)
 8000752:	ed93 7a00 	vldr	s14, [r3]
 8000756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <func_average_adc_measurement+0x78>)
 800075c:	edc3 7a00 	vstr	s15, [r3]
 8000760:	e003      	b.n	800076a <func_average_adc_measurement+0x5e>
    } else {
    	avg_adc_value = 0.0; // Default value if no samples were taken
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <func_average_adc_measurement+0x78>)
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
    }

    // Mark sampling as done
    sampling_done = 1;
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <func_average_adc_measurement+0x70>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000a1c 	.word	0x20000a1c
 8000778:	20000a20 	.word	0x20000a20
 800077c:	20000a24 	.word	0x20000a24
 8000780:	20000468 	.word	0x20000468
 8000784:	20000a2c 	.word	0x20000a2c

08000788 <new_measurement>:

// New measurement
void new_measurement(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	func_get_adc_value();
 800078c:	f000 f804 	bl	8000798 <func_get_adc_value>
	func_adc_conversion();
 8000790:	f7ff ffb0 	bl	80006f4 <func_adc_conversion>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <func_get_adc_value>:

// Get ADC value
void func_get_adc_value(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
//	float *adc_ptr = &adc_value;
	raw_adc_value = HAL_ADC_GetValue(&hadc1);
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <func_get_adc_value+0x1c>)
 800079e:	f001 f9fc 	bl	8001b9a <HAL_ADC_GetValue>
 80007a2:	ee07 0a90 	vmov	s15, r0
 80007a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007aa:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <func_get_adc_value+0x20>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000370 	.word	0x20000370
 80007b8:	20000a28 	.word	0x20000a28

080007bc <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	func_adc_to_voltage();
 80007c0:	f000 f80e 	bl	80007e0 <func_adc_to_voltage>
	func_voltage_to_kpa();
 80007c4:	f000 f868 	bl	8000898 <func_voltage_to_kpa>
	auto_zero_pressure_value =  measured_kpa_pressure - KNOWN_REF_PRESSURE;
 80007c8:	4b02      	ldr	r3, [pc, #8]	@ (80007d4 <func_auto_zero+0x18>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a02      	ldr	r2, [pc, #8]	@ (80007d8 <func_auto_zero+0x1c>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000a30 	.word	0x20000a30
 80007d8:	20000a38 	.word	0x20000a38
 80007dc:	00000000 	.word	0x00000000

080007e0 <func_adc_to_voltage>:

// ADC to voltage
void func_adc_to_voltage(void){
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	if(sensor_status){
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <func_adc_to_voltage+0xa0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d012      	beq.n	8000812 <func_adc_to_voltage+0x32>
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <func_adc_to_voltage+0xa4>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007f6:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8000870 <func_adc_to_voltage+0x90>
 80007fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007fe:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000878 <func_adc_to_voltage+0x98>
 8000802:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000806:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <func_adc_to_voltage+0xa8>)
 800080c:	edc3 7a00 	vstr	s15, [r3]
	} else if(calibration_status){
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
	} else {
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
	}
}
 8000810:	e028      	b.n	8000864 <func_adc_to_voltage+0x84>
	} else if(calibration_status){
 8000812:	4b1e      	ldr	r3, [pc, #120]	@ (800088c <func_adc_to_voltage+0xac>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d012      	beq.n	8000840 <func_adc_to_voltage+0x60>
		measured_voltage_value = (avg_adc_value * 3.3) / 4095;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <func_adc_to_voltage+0xb0>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000824:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8000870 <func_adc_to_voltage+0x90>
 8000828:	ee27 6b06 	vmul.f64	d6, d7, d6
 800082c:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000878 <func_adc_to_voltage+0x98>
 8000830:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <func_adc_to_voltage+0xa8>)
 800083a:	edc3 7a00 	vstr	s15, [r3]
}
 800083e:	e011      	b.n	8000864 <func_adc_to_voltage+0x84>
		measured_voltage_value = (raw_adc_value * 3.3) / 4095;
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <func_adc_to_voltage+0xa4>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000870 <func_adc_to_voltage+0x90>
 800084e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000852:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 8000878 <func_adc_to_voltage+0x98>
 8000856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <func_adc_to_voltage+0xa8>)
 8000860:	edc3 7a00 	vstr	s15, [r3]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	66666666 	.word	0x66666666
 8000874:	400a6666 	.word	0x400a6666
 8000878:	00000000 	.word	0x00000000
 800087c:	40affe00 	.word	0x40affe00
 8000880:	20000000 	.word	0x20000000
 8000884:	20000a28 	.word	0x20000a28
 8000888:	20000a34 	.word	0x20000a34
 800088c:	20000004 	.word	0x20000004
 8000890:	20000a2c 	.word	0x20000a2c
 8000894:	00000000 	.word	0x00000000

08000898 <func_voltage_to_kpa>:

// Voltage to Pa
void func_voltage_to_kpa(void){
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	measured_kpa_pressure = ((measured_voltage_value / OUTPUT_VOLTAGE_MAX) - 0.5) / 0.057;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <func_voltage_to_kpa+0x60>)
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80008a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008ae:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80008b2:	ee37 6b46 	vsub.f64	d6, d7, d6
 80008b6:	ed9f 5b0e 	vldr	d5, [pc, #56]	@ 80008f0 <func_voltage_to_kpa+0x58>
 80008ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008c4:	edc3 7a00 	vstr	s15, [r3]
	if(!calibration_status){
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <func_voltage_to_kpa+0x68>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d10a      	bne.n	80008e6 <func_voltage_to_kpa+0x4e>
		measured_kpa_pressure = measured_kpa_pressure - auto_zero_pressure_value;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008d2:	ed93 7a00 	vldr	s14, [r3]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <func_voltage_to_kpa+0x6c>)
 80008d8:	edd3 7a00 	vldr	s15, [r3]
 80008dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <func_voltage_to_kpa+0x64>)
 80008e2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	9fbe76c9 	.word	0x9fbe76c9
 80008f4:	3fad2f1a 	.word	0x3fad2f1a
 80008f8:	20000a34 	.word	0x20000a34
 80008fc:	20000a30 	.word	0x20000a30
 8000900:	20000004 	.word	0x20000004
 8000904:	20000a38 	.word	0x20000a38

08000908 <func_kpa_to_cmh2o>:

// psi to cmh2o
void func_kpa_to_cmh2o(void){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	measured_cmh2o_pressure = measured_kpa_pressure * 10.1971621298;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <func_kpa_to_cmh2o+0x38>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000916:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000938 <func_kpa_to_cmh2o+0x30>
 800091a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <func_kpa_to_cmh2o+0x3c>)
 8000924:	edc3 7a00 	vstr	s15, [r3]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	f3af 8000 	nop.w
 8000938:	6f47005d 	.word	0x6f47005d
 800093c:	402464f2 	.word	0x402464f2
 8000940:	20000a30 	.word	0x20000a30
 8000944:	20000a3c 	.word	0x20000a3c

08000948 <func_kpa_to_inh2o>:

// psi to inh2o
void func_kpa_to_inh2o(void){
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	measured_inh2o_pressure = measured_kpa_pressure * 4.01463;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <func_kpa_to_inh2o+0x38>)
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000956:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8000978 <func_kpa_to_inh2o+0x30>
 800095a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800095e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000962:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <func_kpa_to_inh2o+0x3c>)
 8000964:	edc3 7a00 	vstr	s15, [r3]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	2aae2974 	.word	0x2aae2974
 800097c:	40100efb 	.word	0x40100efb
 8000980:	20000a30 	.word	0x20000a30
 8000984:	20000a40 	.word	0x20000a40

08000988 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000998:	d11a      	bne.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x48>
        if (!sampling_done) {
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d116      	bne.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x48>
        	func_get_adc_value();
 80009a2:	f7ff fef9 	bl	8000798 <func_get_adc_value>
            adc_sum += raw_adc_value;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009a8:	ed93 7a00 	vldr	s14, [r3]
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80009b8:	edc3 7a00 	vstr	s15, [r3]
            sample_count++;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009be:	edd3 7a00 	vldr	s15, [r3]
 80009c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80009cc:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000a24 	.word	0x20000a24
 80009dc:	20000a1c 	.word	0x20000a1c
 80009e0:	20000a28 	.word	0x20000a28
 80009e4:	20000a20 	.word	0x20000a20

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f000 fe82 	bl	80016f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f87b 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 fa37 	bl	8000e68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009fa:	f000 f9d7 	bl	8000dac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fe:	f000 fa05 	bl	8000e0c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a02:	f000 f8e5 	bl	8000bd0 <MX_ADC1_Init>
  MX_ETH_Init();
 8000a06:	f000 f935 	bl	8000c74 <MX_ETH_Init>
  MX_TIM2_Init();
 8000a0a:	f000 f981 	bl	8000d10 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Turn alarm on when program starts
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	482b      	ldr	r0, [pc, #172]	@ (8000ac0 <main+0xd8>)
 8000a14:	f002 f9bc 	bl	8002d90 <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 8000a18:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a1c:	f000 fec8 	bl	80017b0 <HAL_Delay>
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2180      	movs	r1, #128	@ 0x80
 8000a24:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <main+0xd8>)
 8000a26:	f002 f9b3 	bl	8002d90 <HAL_GPIO_WritePin>

  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 8000a2a:	4826      	ldr	r0, [pc, #152]	@ (8000ac4 <main+0xdc>)
 8000a2c:	f000 ff28 	bl	8001880 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a34:	4823      	ldr	r0, [pc, #140]	@ (8000ac4 <main+0xdc>)
 8000a36:	f001 f825 	bl	8001a84 <HAL_ADC_PollForConversion>

	  // Check initial sensor connection.
	  while(sensor_status){
 8000a3a:	e001      	b.n	8000a40 <main+0x58>
		  func_init_sensor_connection_status();
 8000a3c:	f7ff fde4 	bl	8000608 <func_init_sensor_connection_status>
	  while(sensor_status){
 8000a40:	4b21      	ldr	r3, [pc, #132]	@ (8000ac8 <main+0xe0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f9      	bne.n	8000a3c <main+0x54>
	  }

	  // Ongoing sensor connection status
	  func_monitor_sensor_status();
 8000a48:	f7ff fe26 	bl	8000698 <func_monitor_sensor_status>

	  //Sensor calibration
	  while(calibration_status){
 8000a4c:	e001      	b.n	8000a52 <main+0x6a>
		  func_calibrate_sensor();
 8000a4e:	f7ff fe43 	bl	80006d8 <func_calibrate_sensor>
	  while(calibration_status){
 8000a52:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <main+0xe4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f9      	bne.n	8000a4e <main+0x66>
	  }

	  // Take and convert measurement
	  new_measurement();
 8000a5a:	f7ff fe95 	bl	8000788 <new_measurement>

	  // Output to terminal
	  sprintf(output_message, "Raw ADC Value: %.2f, Voltage: %.2fV, kpa: %.1fkpa, inh2o: %.1finh2o\r\n", raw_adc_value, measured_voltage_value, measured_kpa_pressure, measured_inh2o_pressure);
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <main+0xe8>)
 8000a60:	edd3 7a00 	vldr	s15, [r3]
 8000a64:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000a68:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad4 <main+0xec>)
 8000a6a:	edd3 7a00 	vldr	s15, [r3]
 8000a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <main+0xf0>)
 8000a74:	edd3 6a00 	vldr	s13, [r3]
 8000a78:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <main+0xf4>)
 8000a7e:	edd3 5a00 	vldr	s11, [r3]
 8000a82:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000a86:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000a8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a8e:	ed8d 7b00 	vstr	d7, [sp]
 8000a92:	ec53 2b14 	vmov	r2, r3, d4
 8000a96:	4912      	ldr	r1, [pc, #72]	@ (8000ae0 <main+0xf8>)
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <main+0xfc>)
 8000a9a:	f006 f909 	bl	8006cb0 <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000a9e:	4811      	ldr	r0, [pc, #68]	@ (8000ae4 <main+0xfc>)
 8000aa0:	f7ff fc1e 	bl	80002e0 <strlen>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aac:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <main+0xfc>)
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <main+0x100>)
 8000ab0:	f004 f97a 	bl	8004da8 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab8:	f000 fe7a 	bl	80017b0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000abc:	e7b5      	b.n	8000a2a <main+0x42>
 8000abe:	bf00      	nop
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	20000370 	.word	0x20000370
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000a28 	.word	0x20000a28
 8000ad4:	20000a34 	.word	0x20000a34
 8000ad8:	20000a30 	.word	0x20000a30
 8000adc:	20000a40 	.word	0x20000a40
 8000ae0:	08008fe8 	.word	0x08008fe8
 8000ae4:	20000a44 	.word	0x20000a44
 8000ae8:	200004b4 	.word	0x200004b4

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	@ 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2234      	movs	r2, #52	@ 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f006 f9ba 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b10:	f002 fab6 	bl	8003080 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <SystemClock_Config+0xdc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b2c:	4b27      	ldr	r3, [pc, #156]	@ (8000bcc <SystemClock_Config+0xe0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b34:	4a25      	ldr	r2, [pc, #148]	@ (8000bcc <SystemClock_Config+0xe0>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <SystemClock_Config+0xe0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b60:	2360      	movs	r3, #96	@ 0x60
 8000b62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fae3 	bl	8003140 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b80:	f000 fa44 	bl	800100c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b84:	f002 fa8c 	bl	80030a0 <HAL_PWREx_EnableOverDrive>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b8e:	f000 fa3d 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	2103      	movs	r1, #3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fd74 	bl	800369c <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bba:	f000 fa27 	bl	800100c <Error_Handler>
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	3750      	adds	r7, #80	@ 0x50
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40007000 	.word	0x40007000

08000bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000be4:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <MX_ADC1_Init+0x9c>)
 8000be6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000bea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <MX_ADC1_Init+0xa0>)
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c30:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c32:	f000 fde1 	bl	80017f8 <HAL_ADC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c3c:	f000 f9e6 	bl	800100c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000c40:	230d      	movs	r3, #13
 8000c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_ADC1_Init+0x98>)
 8000c52:	f000 ffaf 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c5c:	f000 f9d6 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000370 	.word	0x20000370
 8000c6c:	40012000 	.word	0x40012000
 8000c70:	0f000001 	.word	0x0f000001

08000c74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000c7a:	4a20      	ldr	r2, [pc, #128]	@ (8000cfc <MX_ETH_Init+0x88>)
 8000c7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c8c:	22e1      	movs	r2, #225	@ 0xe1
 8000c8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000ca4:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <MX_ETH_Init+0x8c>)
 8000ca6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000caa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <MX_ETH_Init+0x90>)
 8000cb4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000cb8:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <MX_ETH_Init+0x94>)
 8000cba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000cbe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000cc2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <MX_ETH_Init+0x84>)
 8000cc6:	f001 fb69 	bl	800239c <HAL_ETH_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000cd0:	f000 f99c 	bl	800100c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000cd4:	2238      	movs	r2, #56	@ 0x38
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <MX_ETH_Init+0x98>)
 8000cda:	f006 f8cb 	bl	8006e74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_ETH_Init+0x98>)
 8000ce0:	2221      	movs	r2, #33	@ 0x21
 8000ce2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_ETH_Init+0x98>)
 8000ce6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000cea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cec:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <MX_ETH_Init+0x98>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200003b8 	.word	0x200003b8
 8000cfc:	40028000 	.word	0x40028000
 8000d00:	20000aa8 	.word	0x20000aa8
 8000d04:	2000027c 	.word	0x2000027c
 8000d08:	200001dc 	.word	0x200001dc
 8000d0c:	20000338 	.word	0x20000338

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d38:	225f      	movs	r2, #95	@ 0x5f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d56:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d58:	f003 faee 	bl	8004338 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d62:	f000 f953 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d74:	f003 fce6 	bl	8004744 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7e:	f000 f945 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	@ (8000da8 <MX_TIM2_Init+0x98>)
 8000d90:	f003 ff10 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d9a:	f000 f937 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000468 	.word	0x20000468

08000dac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <MX_USART3_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART3_UART_Init+0x58>)
 8000df0:	f003 ff8c 	bl	8004d0c <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f907 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200004b4 	.word	0x200004b4
 8000e08:	40004800 	.word	0x40004800

08000e0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e50:	f001 ffdb 	bl	8002e0a <HAL_PCD_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e5a:	f000 f8d7 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000053c 	.word	0x2000053c

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a5d      	ldr	r2, [pc, #372]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	4b58      	ldr	r3, [pc, #352]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a57      	ldr	r2, [pc, #348]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b55      	ldr	r3, [pc, #340]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b52      	ldr	r3, [pc, #328]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a51      	ldr	r2, [pc, #324]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b49      	ldr	r3, [pc, #292]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a45      	ldr	r2, [pc, #276]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef6:	4b40      	ldr	r3, [pc, #256]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a3f      	ldr	r2, [pc, #252]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <MX_GPIO_Init+0x190>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	483a      	ldr	r0, [pc, #232]	@ (8000ffc <MX_GPIO_Init+0x194>)
 8000f14:	f001 ff3c 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f1e:	4838      	ldr	r0, [pc, #224]	@ (8001000 <MX_GPIO_Init+0x198>)
 8000f20:	f001 ff36 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	@ 0x40
 8000f28:	4836      	ldr	r0, [pc, #216]	@ (8001004 <MX_GPIO_Init+0x19c>)
 8000f2a:	f001 ff31 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	4835      	ldr	r0, [pc, #212]	@ (8001008 <MX_GPIO_Init+0x1a0>)
 8000f34:	f001 ff2c 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482b      	ldr	r0, [pc, #172]	@ (8000ffc <MX_GPIO_Init+0x194>)
 8000f50:	f001 fd72 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4824      	ldr	r0, [pc, #144]	@ (8000ffc <MX_GPIO_Init+0x194>)
 8000f6c:	f001 fd64 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f70:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	481d      	ldr	r0, [pc, #116]	@ (8001000 <MX_GPIO_Init+0x198>)
 8000f8a:	f001 fd55 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f8e:	2340      	movs	r3, #64	@ 0x40
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4817      	ldr	r0, [pc, #92]	@ (8001004 <MX_GPIO_Init+0x19c>)
 8000fa6:	f001 fd47 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_GPIO_Init+0x19c>)
 8000fbe:	f001 fd3b 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARM_Pin */
  GPIO_InitStruct.Pin = ALARM_Pin;
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ALARM_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <MX_GPIO_Init+0x1a0>)
 8000fda:	f001 fd2d 	bl	8002a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2028      	movs	r0, #40	@ 0x28
 8000fe4:	f001 f911 	bl	800220a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fe8:	2028      	movs	r0, #40	@ 0x28
 8000fea:	f001 f92a 	bl	8002242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	@ 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020400 	.word	0x40020400
 8001004:	40021800 	.word	0x40021800
 8001008:	40020c00 	.word	0x40020c00

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <HAL_MspInit+0x44>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a0e      	ldr	r2, [pc, #56]	@ (800105c <HAL_MspInit+0x44>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <HAL_MspInit+0x44>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x44>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x44>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x44>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <HAL_ADC_MspInit+0x74>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d123      	bne.n	80010ca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_ADC_MspInit+0x78>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 80010b2:	2308      	movs	r3, #8
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_ADC_MspInit+0x7c>)
 80010c6:	f001 fcb7 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012000 	.word	0x40012000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800

080010e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	@ 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001238 <HAL_ETH_MspInit+0x158>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	f040 8096 	bne.w	8001230 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001104:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	4a4c      	ldr	r2, [pc, #304]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800110a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800110e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001110:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001118:	623b      	str	r3, [r7, #32]
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	4b47      	ldr	r3, [pc, #284]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	4a46      	ldr	r2, [pc, #280]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001122:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001126:	6313      	str	r3, [r2, #48]	@ 0x30
 8001128:	4b44      	ldr	r3, [pc, #272]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4b41      	ldr	r3, [pc, #260]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001138:	4a40      	ldr	r2, [pc, #256]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800113a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800113e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001140:	4b3e      	ldr	r3, [pc, #248]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001150:	4a3a      	ldr	r2, [pc, #232]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6313      	str	r3, [r2, #48]	@ 0x30
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b35      	ldr	r3, [pc, #212]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a34      	ldr	r2, [pc, #208]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b32      	ldr	r3, [pc, #200]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b2f      	ldr	r3, [pc, #188]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001180:	4a2e      	ldr	r2, [pc, #184]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	6313      	str	r3, [r2, #48]	@ 0x30
 8001188:	4b2c      	ldr	r3, [pc, #176]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a28      	ldr	r2, [pc, #160]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <HAL_ETH_MspInit+0x15c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011ac:	2332      	movs	r3, #50	@ 0x32
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011bc:	230b      	movs	r3, #11
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	481e      	ldr	r0, [pc, #120]	@ (8001240 <HAL_ETH_MspInit+0x160>)
 80011c8:	f001 fc36 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011cc:	2386      	movs	r3, #134	@ 0x86
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011dc:	230b      	movs	r3, #11
 80011de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4817      	ldr	r0, [pc, #92]	@ (8001244 <HAL_ETH_MspInit+0x164>)
 80011e8:	f001 fc26 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fe:	230b      	movs	r3, #11
 8001200:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	480f      	ldr	r0, [pc, #60]	@ (8001248 <HAL_ETH_MspInit+0x168>)
 800120a:	f001 fc15 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800120e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001220:	230b      	movs	r3, #11
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4808      	ldr	r0, [pc, #32]	@ (800124c <HAL_ETH_MspInit+0x16c>)
 800122c:	f001 fc04 	bl	8002a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3738      	adds	r7, #56	@ 0x38
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40028000 	.word	0x40028000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020800 	.word	0x40020800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40021800 	.word	0x40021800

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001260:	d113      	bne.n	800128a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_TIM_Base_MspInit+0x44>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_TIM_Base_MspInit+0x44>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_TIM_Base_MspInit+0x44>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	201c      	movs	r0, #28
 8001280:	f000 ffc3 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001284:	201c      	movs	r0, #28
 8001286:	f000 ffdc 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ae      	sub	sp, #184	@ 0xb8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2290      	movs	r2, #144	@ 0x90
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 fddb 	bl	8006e74 <memset>
  if(huart->Instance==USART3)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a26      	ldr	r2, [pc, #152]	@ (800135c <HAL_UART_MspInit+0xc4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d144      	bne.n	8001352 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fc06 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012e2:	f7ff fe93 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a17      	ldr	r2, [pc, #92]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_UART_MspInit+0xc8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001316:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800131a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001330:	2307      	movs	r3, #7
 8001332:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800133a:	4619      	mov	r1, r3
 800133c:	4809      	ldr	r0, [pc, #36]	@ (8001364 <HAL_UART_MspInit+0xcc>)
 800133e:	f001 fb7b 	bl	8002a38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2027      	movs	r0, #39	@ 0x27
 8001348:	f000 ff5f 	bl	800220a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800134c:	2027      	movs	r0, #39	@ 0x27
 800134e:	f000 ff78 	bl	8002242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	37b8      	adds	r7, #184	@ 0xb8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40004800 	.word	0x40004800
 8001360:	40023800 	.word	0x40023800
 8001364:	40020c00 	.word	0x40020c00

08001368 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0ae      	sub	sp, #184	@ 0xb8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2290      	movs	r2, #144	@ 0x90
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f005 fd73 	bl	8006e74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001396:	d159      	bne.n	800144c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001398:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800139c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fb9d 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013b4:	f7ff fe2a 	bl	800100c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	4a25      	ldr	r2, [pc, #148]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c4:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013d0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80013d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013ea:	230a      	movs	r3, #10
 80013ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4818      	ldr	r0, [pc, #96]	@ (8001458 <HAL_PCD_MspInit+0xf0>)
 80013f8:	f001 fb1e 	bl	8002a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001414:	4619      	mov	r1, r3
 8001416:	4810      	ldr	r0, [pc, #64]	@ (8001458 <HAL_PCD_MspInit+0xf0>)
 8001418:	f001 fb0e 	bl	8002a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 800141e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001420:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 8001422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001426:	6353      	str	r3, [r2, #52]	@ 0x34
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 8001436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 800143a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <HAL_PCD_MspInit+0xec>)
 8001442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800144c:	bf00      	nop
 800144e:	37b8      	adds	r7, #184	@ 0xb8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f95d 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <TIM2_IRQHandler+0x10>)
 80014c2:	f003 f838 	bl	8004536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000468 	.word	0x20000468

080014d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <USART3_IRQHandler+0x10>)
 80014d6:	f003 fcf1 	bl	8004ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200004b4 	.word	0x200004b4

080014e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80014e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014ec:	f001 fc6a 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return 1;
 80014f8:	2301      	movs	r3, #1
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_kill>:

int _kill(int pid, int sig)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150e:	f005 fcbd 	bl	8006e8c <__errno>
 8001512:	4603      	mov	r3, r0
 8001514:	2216      	movs	r2, #22
 8001516:	601a      	str	r2, [r3, #0]
  return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_exit>:

void _exit (int status)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800152c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffe7 	bl	8001504 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001536:	bf00      	nop
 8001538:	e7fd      	b.n	8001536 <_exit+0x12>

0800153a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e00a      	b.n	8001562 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800154c:	f3af 8000 	nop.w
 8001550:	4601      	mov	r1, r0
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3301      	adds	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	dbf0      	blt.n	800154c <_read+0x12>
  }

  return len;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e009      	b.n	800159a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf1      	blt.n	8001586 <_write+0x12>
  }
  return len;
 80015a2:	687b      	ldr	r3, [r7, #4]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_close>:

int _close(int file)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d4:	605a      	str	r2, [r3, #4]
  return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_isatty>:

int _isatty(int file)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800161c:	4a14      	ldr	r2, [pc, #80]	@ (8001670 <_sbrk+0x5c>)
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <_sbrk+0x60>)
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <_sbrk+0x64>)
 8001632:	4a12      	ldr	r2, [pc, #72]	@ (800167c <_sbrk+0x68>)
 8001634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	429a      	cmp	r2, r3
 8001642:	d207      	bcs.n	8001654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001644:	f005 fc22 	bl	8006e8c <__errno>
 8001648:	4603      	mov	r3, r0
 800164a:	220c      	movs	r2, #12
 800164c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001652:	e009      	b.n	8001668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a05      	ldr	r2, [pc, #20]	@ (8001678 <_sbrk+0x64>)
 8001664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20080000 	.word	0x20080000
 8001674:	00000400 	.word	0x00000400
 8001678:	20000ab0 	.word	0x20000ab0
 800167c:	20000c08 	.word	0x20000c08

08001680 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480d      	ldr	r0, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016aa:	490e      	ldr	r1, [pc, #56]	@ (80016e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ac:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c0:	4c0b      	ldr	r4, [pc, #44]	@ (80016f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ce:	f7ff ffd7 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f005 fbe1 	bl	8006e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff f987 	bl	80009e8 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016e8:	080093c8 	.word	0x080093c8
  ldr r2, =_sbss
 80016ec:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 80016f0:	20000c04 	.word	0x20000c04

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>

080016f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fa:	2003      	movs	r0, #3
 80016fc:	f000 fd7a 	bl	80021f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001700:	2000      	movs	r0, #0
 8001702:	f000 f805 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001706:	f7ff fc87 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fd95 	bl	800225e <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800174c:	f000 fd5d 	bl	800220a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000008 	.word	0x20000008
 8001768:	20000010 	.word	0x20000010
 800176c:	2000000c 	.word	0x2000000c

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000010 	.word	0x20000010
 8001794:	20000ab4 	.word	0x20000ab4

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000ab4 	.word	0x20000ab4

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000010 	.word	0x20000010

080017f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e031      	b.n	8001872 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fc22 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_ADC_Init+0x84>)
 800183c:	4013      	ands	r3, r2
 800183e:	f043 0202 	orr.w	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fb0a 	bl	8001e60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f023 0303 	bic.w	r3, r3, #3
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
 8001862:	e001      	b.n	8001868 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	ffffeefd 	.word	0xffffeefd

08001880 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_ADC_Start+0x1a>
 8001896:	2302      	movs	r3, #2
 8001898:	e0ad      	b.n	80019f6 <HAL_ADC_Start+0x176>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d018      	beq.n	80018e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0201 	orr.w	r2, r2, #1
 80018be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018c0:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_ADC_Start+0x184>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a50      	ldr	r2, [pc, #320]	@ (8001a08 <HAL_ADC_Start+0x188>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0c9a      	lsrs	r2, r3, #18
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018d4:	e002      	b.n	80018dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f9      	bne.n	80018d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d175      	bne.n	80019dc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f4:	4b45      	ldr	r3, [pc, #276]	@ (8001a0c <HAL_ADC_Start+0x18c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001916:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800192a:	d106      	bne.n	800193a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f023 0206 	bic.w	r2, r3, #6
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44
 8001938:	e002      	b.n	8001940 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001950:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001952:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <HAL_ADC_Start+0x190>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d143      	bne.n	80019f4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	e03a      	b.n	80019f4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <HAL_ADC_Start+0x194>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d10e      	bne.n	80019a6 <HAL_ADC_Start+0x126>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019a4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_ADC_Start+0x190>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d120      	bne.n	80019f4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a18      	ldr	r2, [pc, #96]	@ (8001a18 <HAL_ADC_Start+0x198>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11b      	bne.n	80019f4 <HAL_ADC_Start+0x174>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d114      	bne.n	80019f4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e00b      	b.n	80019f4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	431bde83 	.word	0x431bde83
 8001a0c:	fffff8fe 	.word	0xfffff8fe
 8001a10:	40012300 	.word	0x40012300
 8001a14:	40012000 	.word	0x40012000
 8001a18:	40012200 	.word	0x40012200

08001a1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Stop+0x16>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e01f      	b.n	8001a72 <HAL_ADC_Stop+0x56>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0201 	bic.w	r2, r2, #1
 8001a48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_ADC_Stop+0x64>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	ffffeefe 	.word	0xffffeefe

08001a84 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa0:	d113      	bne.n	8001aca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab0:	d10b      	bne.n	8001aca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f043 0220 	orr.w	r2, r3, #32
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e063      	b.n	8001b92 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001aca:	f7ff fe65 	bl	8001798 <HAL_GetTick>
 8001ace:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad0:	e021      	b.n	8001b16 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ad8:	d01d      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_ADC_PollForConversion+0x6c>
 8001ae0:	f7ff fe5a 	bl	8001798 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d212      	bcs.n	8001b16 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d00b      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e03d      	b.n	8001b92 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d1d6      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0212 	mvn.w	r2, #18
 8001b2c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d123      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d11f      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1c>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e136      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x28a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d93a      	bls.n	8001c56 <HAL_ADC_ConfigChannel+0xa2>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001be8:	d035      	beq.n	8001c56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b1e      	subs	r3, #30
 8001c00:	2207      	movs	r2, #7
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a8d      	ldr	r2, [pc, #564]	@ (8001e4c <HAL_ADC_ConfigChannel+0x298>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68d9      	ldr	r1, [r3, #12]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	061a      	lsls	r2, r3, #24
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2e:	e035      	b.n	8001c9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68d9      	ldr	r1, [r3, #12]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	4603      	mov	r3, r0
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4403      	add	r3, r0
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c54:	e022      	b.n	8001c9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6919      	ldr	r1, [r3, #16]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6919      	ldr	r1, [r3, #16]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4403      	add	r3, r0
 8001c92:	409a      	lsls	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d824      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b05      	subs	r3, #5
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b05      	subs	r3, #5
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cec:	e04c      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d824      	bhi.n	8001d40 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	3b23      	subs	r3, #35	@ 0x23
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	@ 0x23
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d3e:	e023      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b41      	subs	r3, #65	@ 0x41
 8001d52:	221f      	movs	r2, #31
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	400a      	ands	r2, r1
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	3b41      	subs	r3, #65	@ 0x41
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a30      	ldr	r2, [pc, #192]	@ (8001e50 <HAL_ADC_ConfigChannel+0x29c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1f4>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001da6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a28      	ldr	r2, [pc, #160]	@ (8001e50 <HAL_ADC_ConfigChannel+0x29c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10f      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x21e>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d10b      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a25      	ldr	r2, [pc, #148]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dc4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dd0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e50 <HAL_ADC_ConfigChannel+0x29c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d12b      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x280>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e4c <HAL_ADC_ConfigChannel+0x298>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d003      	beq.n	8001dee <HAL_ADC_ConfigChannel+0x23a>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b11      	cmp	r3, #17
 8001dec:	d122      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4a18      	ldr	r2, [pc, #96]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001df4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001df8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dfa:	4b16      	ldr	r3, [pc, #88]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e04:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <HAL_ADC_ConfigChannel+0x298>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_ADC_ConfigChannel+0x2a8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9a      	lsrs	r2, r3, #18
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e26:	e002      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f9      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	10000012 	.word	0x10000012
 8001e50:	40012000 	.word	0x40012000
 8001e54:	40012300 	.word	0x40012300
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	431bde83 	.word	0x431bde83

08001e60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e68:	4b78      	ldr	r3, [pc, #480]	@ (800204c <ADC_Init+0x1ec>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a77      	ldr	r2, [pc, #476]	@ (800204c <ADC_Init+0x1ec>)
 8001e6e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001e72:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e74:	4b75      	ldr	r3, [pc, #468]	@ (800204c <ADC_Init+0x1ec>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4973      	ldr	r1, [pc, #460]	@ (800204c <ADC_Init+0x1ec>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	021a      	lsls	r2, r3, #8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	4a58      	ldr	r2, [pc, #352]	@ (8002050 <ADC_Init+0x1f0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d022      	beq.n	8001f3a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6899      	ldr	r1, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e00f      	b.n	8001f5a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0202 	bic.w	r2, r2, #2
 8001f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6899      	ldr	r1, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	005a      	lsls	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	035a      	lsls	r2, r3, #13
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	e007      	b.n	8001fd0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	051a      	lsls	r2, r3, #20
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6899      	ldr	r1, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002012:	025a      	lsls	r2, r3, #9
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6899      	ldr	r1, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	029a      	lsls	r2, r3, #10
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	0f000001 	.word	0x0f000001

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	@ (8002094 <__NVIC_SetPriorityGrouping+0x40>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	05fa0000 	.word	0x05fa0000

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db0b      	blt.n	80020e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	f003 021f 	and.w	r2, r3, #31
 80020d0:	4907      	ldr	r1, [pc, #28]	@ (80020f0 <__NVIC_EnableIRQ+0x38>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2001      	movs	r0, #1
 80020da:	fa00 f202 	lsl.w	r2, r0, r2
 80020de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100

080020f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	db0a      	blt.n	800211e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	490c      	ldr	r1, [pc, #48]	@ (8002140 <__NVIC_SetPriority+0x4c>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	440b      	add	r3, r1
 8002118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800211c:	e00a      	b.n	8002134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4908      	ldr	r1, [pc, #32]	@ (8002144 <__NVIC_SetPriority+0x50>)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3b04      	subs	r3, #4
 800212c:	0112      	lsls	r2, r2, #4
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	440b      	add	r3, r1
 8002132:	761a      	strb	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f1c3 0307 	rsb	r3, r3, #7
 8002162:	2b04      	cmp	r3, #4
 8002164:	bf28      	it	cs
 8002166:	2304      	movcs	r3, #4
 8002168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3304      	adds	r3, #4
 800216e:	2b06      	cmp	r3, #6
 8002170:	d902      	bls.n	8002178 <NVIC_EncodePriority+0x30>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3b03      	subs	r3, #3
 8002176:	e000      	b.n	800217a <NVIC_EncodePriority+0x32>
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	401a      	ands	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002190:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43d9      	mvns	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	4313      	orrs	r3, r2
         );
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3724      	adds	r7, #36	@ 0x24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c0:	d301      	bcc.n	80021c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00f      	b.n	80021e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <SysTick_Config+0x40>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ce:	210f      	movs	r1, #15
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021d4:	f7ff ff8e 	bl	80020f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <SysTick_Config+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <SysTick_Config+0x40>)
 80021e0:	2207      	movs	r2, #7
 80021e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	e000e010 	.word	0xe000e010

080021f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff29 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800221c:	f7ff ff3e 	bl	800209c <__NVIC_GetPriorityGrouping>
 8002220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68b9      	ldr	r1, [r7, #8]
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f7ff ff8e 	bl	8002148 <NVIC_EncodePriority>
 800222c:	4602      	mov	r2, r0
 800222e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <__NVIC_SetPriority>
}
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff31 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ffa2 	bl	80021b0 <SysTick_Config>
 800226c:	4603      	mov	r3, r0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff fa88 	bl	8001798 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d008      	beq.n	80022a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2280      	movs	r2, #128	@ 0x80
 800229a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e052      	b.n	800234e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0216 	bic.w	r2, r2, #22
 80022b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695a      	ldr	r2, [r3, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d103      	bne.n	80022d8 <HAL_DMA_Abort+0x62>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0208 	bic.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f8:	e013      	b.n	8002322 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022fa:	f7ff fa4d 	bl	8001798 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b05      	cmp	r3, #5
 8002306:	d90c      	bls.n	8002322 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2203      	movs	r2, #3
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e015      	b.n	800234e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e4      	bne.n	80022fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	223f      	movs	r2, #63	@ 0x3f
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d004      	beq.n	8002374 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2280      	movs	r2, #128	@ 0x80
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e00c      	b.n	800238e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2205      	movs	r2, #5
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e086      	b.n	80024bc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2223      	movs	r2, #35	@ 0x23
 80023bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fe8d 	bl	80010e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <HAL_ETH_Init+0x128>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	4a3e      	ldr	r2, [pc, #248]	@ (80024c4 <HAL_ETH_Init+0x128>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d2:	4b3c      	ldr	r3, [pc, #240]	@ (80024c4 <HAL_ETH_Init+0x128>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80023de:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_ETH_Init+0x12c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a39      	ldr	r2, [pc, #228]	@ (80024c8 <HAL_ETH_Init+0x12c>)
 80023e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_ETH_Init+0x12c>)
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4935      	ldr	r1, [pc, #212]	@ (80024c8 <HAL_ETH_Init+0x12c>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80023f8:	4b33      	ldr	r3, [pc, #204]	@ (80024c8 <HAL_ETH_Init+0x12c>)
 80023fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002414:	f7ff f9c0 	bl	8001798 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800241a:	e011      	b.n	8002440 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800241c:	f7ff f9bc 	bl	8001798 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800242a:	d909      	bls.n	8002440 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2204      	movs	r2, #4
 8002430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	22e0      	movs	r2, #224	@ 0xe0
 8002438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e03d      	b.n	80024bc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1e4      	bne.n	800241c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f97a 	bl	800274c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa25 	bl	80028a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa7b 	bl	800295a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	461a      	mov	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9e3 	bl	8002838 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_ETH_Init+0x130>)
 8002490:	430b      	orrs	r3, r1
 8002492:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80024a6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2210      	movs	r2, #16
 80024b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	00020060 	.word	0x00020060

080024d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4b53      	ldr	r3, [pc, #332]	@ (8002634 <ETH_SetMACConfig+0x164>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7b9b      	ldrb	r3, [r3, #14]
 80024ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	7c12      	ldrb	r2, [r2, #16]
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	d102      	bne.n	80024fe <ETH_SetMACConfig+0x2e>
 80024f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024fc:	e000      	b.n	8002500 <ETH_SetMACConfig+0x30>
 80024fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002500:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	7c52      	ldrb	r2, [r2, #17]
 8002506:	2a00      	cmp	r2, #0
 8002508:	d102      	bne.n	8002510 <ETH_SetMACConfig+0x40>
 800250a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800250e:	e000      	b.n	8002512 <ETH_SetMACConfig+0x42>
 8002510:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002512:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002518:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	7fdb      	ldrb	r3, [r3, #31]
 800251e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002520:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	7f92      	ldrb	r2, [r2, #30]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0x66>
 8002530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0x68>
 8002536:	2200      	movs	r2, #0
                        macconf->Speed |
 8002538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	7f1b      	ldrb	r3, [r3, #28]
 800253e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002540:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	791b      	ldrb	r3, [r3, #4]
 800254c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800254e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002556:	2a00      	cmp	r2, #0
 8002558:	d102      	bne.n	8002560 <ETH_SetMACConfig+0x90>
 800255a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800255e:	e000      	b.n	8002562 <ETH_SetMACConfig+0x92>
 8002560:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002562:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7bdb      	ldrb	r3, [r3, #15]
 8002568:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800256a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002578:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800257a:	4313      	orrs	r3, r2
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002592:	2001      	movs	r0, #1
 8002594:	f7ff f90c 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80025ae:	4013      	ands	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025be:	2a00      	cmp	r2, #0
 80025c0:	d101      	bne.n	80025c6 <ETH_SetMACConfig+0xf6>
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	e000      	b.n	80025c8 <ETH_SetMACConfig+0xf8>
 80025c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80025d6:	2a01      	cmp	r2, #1
 80025d8:	d101      	bne.n	80025de <ETH_SetMACConfig+0x10e>
 80025da:	2208      	movs	r2, #8
 80025dc:	e000      	b.n	80025e0 <ETH_SetMACConfig+0x110>
 80025de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80025e8:	2a01      	cmp	r2, #1
 80025ea:	d101      	bne.n	80025f0 <ETH_SetMACConfig+0x120>
 80025ec:	2204      	movs	r2, #4
 80025ee:	e000      	b.n	80025f2 <ETH_SetMACConfig+0x122>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80025fa:	2a01      	cmp	r2, #1
 80025fc:	d101      	bne.n	8002602 <ETH_SetMACConfig+0x132>
 80025fe:	2202      	movs	r2, #2
 8002600:	e000      	b.n	8002604 <ETH_SetMACConfig+0x134>
 8002602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002604:	4313      	orrs	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff f8c7 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	619a      	str	r2, [r3, #24]
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	fd20810f 	.word	0xfd20810f

08002638 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <ETH_SetDMAConfig+0x110>)
 8002652:	4013      	ands	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7b1b      	ldrb	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <ETH_SetDMAConfig+0x2c>
 800265e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002662:	e000      	b.n	8002666 <ETH_SetDMAConfig+0x2e>
 8002664:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	7b5b      	ldrb	r3, [r3, #13]
 800266a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800266c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	7f52      	ldrb	r2, [r2, #29]
 8002672:	2a00      	cmp	r2, #0
 8002674:	d102      	bne.n	800267c <ETH_SetDMAConfig+0x44>
 8002676:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800267a:	e000      	b.n	800267e <ETH_SetDMAConfig+0x46>
 800267c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800267e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	7b9b      	ldrb	r3, [r3, #14]
 8002684:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002686:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800268c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002694:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7f9b      	ldrb	r3, [r3, #30]
 800269a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800269c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026bc:	461a      	mov	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff f86e 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026dc:	461a      	mov	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80026f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002700:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002702:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800270a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002710:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800271a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800271e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff f83f 	bl	80017b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	f8de3f23 	.word	0xf8de3f23

0800274c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0a6      	sub	sp, #152	@ 0x98
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800278e:	2300      	movs	r3, #0
 8002790:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002798:	2300      	movs	r3, #0
 800279a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fe7f 	bl	80024d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027fe:	2301      	movs	r3, #1
 8002800:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002802:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002806:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002808:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800280c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800280e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002812:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800281a:	2300      	movs	r3, #0
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff05 	bl	8002638 <ETH_SetDMAConfig>
}
 800282e:	bf00      	nop
 8002830:	3798      	adds	r7, #152	@ 0x98
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3305      	adds	r3, #5
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	3204      	adds	r2, #4
 8002850:	7812      	ldrb	r2, [r2, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <ETH_MACAddressConfig+0x68>)
 800285a:	4413      	add	r3, r2
 800285c:	461a      	mov	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3303      	adds	r3, #3
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	061a      	lsls	r2, r3, #24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3302      	adds	r3, #2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3301      	adds	r3, #1
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4313      	orrs	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <ETH_MACAddressConfig+0x6c>)
 800288a:	4413      	add	r3, r2
 800288c:	461a      	mov	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40028040 	.word	0x40028040
 80028a4:	40028044 	.word	0x40028044

080028a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e03e      	b.n	8002934 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68d9      	ldr	r1, [r3, #12]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	3206      	adds	r2, #6
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d80c      	bhi.n	8002918 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	e004      	b.n	8002922 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d9bd      	bls.n	80028b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800294c:	611a      	str	r2, [r3, #16]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800295a:	b480      	push	{r7}
 800295c:	b085      	sub	sp, #20
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e048      	b.n	80029fa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2200      	movs	r2, #0
 8002996:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	3212      	adds	r2, #18
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d80c      	bhi.n	80029ea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6919      	ldr	r1, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e004      	b.n	80029f4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d9b3      	bls.n	8002968 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2a:	60da      	str	r2, [r3, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	@ 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e175      	b.n	8002d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8164 	bne.w	8002d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <HAL_GPIO_Init+0x56>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d130      	bne.n	8002af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80be 	beq.w	8002d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b66      	ldr	r3, [pc, #408]	@ (8002d5c <HAL_GPIO_Init+0x324>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a65      	ldr	r2, [pc, #404]	@ (8002d5c <HAL_GPIO_Init+0x324>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b63      	ldr	r3, [pc, #396]	@ (8002d5c <HAL_GPIO_Init+0x324>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bda:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <HAL_GPIO_Init+0x328>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a58      	ldr	r2, [pc, #352]	@ (8002d64 <HAL_GPIO_Init+0x32c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d037      	beq.n	8002c76 <HAL_GPIO_Init+0x23e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a57      	ldr	r2, [pc, #348]	@ (8002d68 <HAL_GPIO_Init+0x330>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_GPIO_Init+0x23a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_GPIO_Init+0x334>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d02b      	beq.n	8002c6e <HAL_GPIO_Init+0x236>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a55      	ldr	r2, [pc, #340]	@ (8002d70 <HAL_GPIO_Init+0x338>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d025      	beq.n	8002c6a <HAL_GPIO_Init+0x232>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a54      	ldr	r2, [pc, #336]	@ (8002d74 <HAL_GPIO_Init+0x33c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_GPIO_Init+0x22e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a53      	ldr	r2, [pc, #332]	@ (8002d78 <HAL_GPIO_Init+0x340>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x22a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a52      	ldr	r2, [pc, #328]	@ (8002d7c <HAL_GPIO_Init+0x344>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x226>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a51      	ldr	r2, [pc, #324]	@ (8002d80 <HAL_GPIO_Init+0x348>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x222>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a50      	ldr	r2, [pc, #320]	@ (8002d84 <HAL_GPIO_Init+0x34c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x21e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4f      	ldr	r2, [pc, #316]	@ (8002d88 <HAL_GPIO_Init+0x350>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x21a>
 8002c4e:	2309      	movs	r3, #9
 8002c50:	e012      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c52:	230a      	movs	r3, #10
 8002c54:	e010      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c56:	2308      	movs	r3, #8
 8002c58:	e00e      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00c      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c5e:	2306      	movs	r3, #6
 8002c60:	e00a      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c62:	2305      	movs	r3, #5
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c88:	4935      	ldr	r1, [pc, #212]	@ (8002d60 <HAL_GPIO_Init+0x328>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b3d      	ldr	r3, [pc, #244]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a34      	ldr	r2, [pc, #208]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b32      	ldr	r3, [pc, #200]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a29      	ldr	r2, [pc, #164]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cea:	4b28      	ldr	r3, [pc, #160]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d38:	4a14      	ldr	r2, [pc, #80]	@ (8002d8c <HAL_GPIO_Init+0x354>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f ae86 	bls.w	8002a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40021400 	.word	0x40021400
 8002d7c:	40021800 	.word	0x40021800
 8002d80:	40021c00 	.word	0x40021c00
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40022400 	.word	0x40022400
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dda:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f806 	bl	8002df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013c00 	.word	0x40013c00

08002df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e108      	b.n	800302e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fa96 	bl	8001368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4a:	d102      	bne.n	8002e52 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 f85c 	bl	8005f14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7c1a      	ldrb	r2, [r3, #16]
 8002e64:	f88d 2000 	strb.w	r2, [sp]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6c:	f002 fff8 	bl	8005e60 <USB_CoreInit>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0d5      	b.n	800302e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f003 f854 	bl	8005f36 <USB_SetCurrentMode>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0c6      	b.n	800302e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e04a      	b.n	8002f3c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3315      	adds	r3, #21
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3314      	adds	r3, #20
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	b298      	uxth	r0, r3
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	332e      	adds	r3, #46	@ 0x2e
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	331c      	adds	r3, #28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3320      	adds	r3, #32
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3324      	adds	r3, #36	@ 0x24
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d3af      	bcc.n	8002ea6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e044      	b.n	8002fd6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	791b      	ldrb	r3, [r3, #4]
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3b5      	bcc.n	8002f4c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7c1a      	ldrb	r2, [r3, #16]
 8002fe8:	f88d 2000 	strb.w	r2, [sp]
 8002fec:	3304      	adds	r3, #4
 8002fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff0:	f002 ffee 	bl	8005fd0 <USB_DevInit>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e013      	b.n	800302e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7b1b      	ldrb	r3, [r3, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f80b 	bl	8003038 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f9a9 	bl	800637e <USB_DevDisconnect>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_PCDEx_ActivateLPM+0x44>)
 8003068:	4313      	orrs	r3, r2
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	10000003 	.word	0x10000003

08003080 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40007000 	.word	0x40007000

080030a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x98>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	4a22      	ldr	r2, [pc, #136]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_PWREx_EnableOverDrive+0x98>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ce:	f7fe fb63 	bl	8001798 <HAL_GetTick>
 80030d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d4:	e009      	b.n	80030ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d6:	f7fe fb5f 	bl	8001798 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030e4:	d901      	bls.n	80030ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e022      	b.n	8003130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ea:	4b14      	ldr	r3, [pc, #80]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f6:	d1ee      	bne.n	80030d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030f8:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003102:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003104:	f7fe fb48 	bl	8001798 <HAL_GetTick>
 8003108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800310a:	e009      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800310c:	f7fe fb44 	bl	8001798 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800311a:	d901      	bls.n	8003120 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e007      	b.n	8003130 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800312c:	d1ee      	bne.n	800310c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000

08003140 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e29b      	b.n	800368e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8087 	beq.w	8003272 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003164:	4b96      	ldr	r3, [pc, #600]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00c      	beq.n	800318a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003170:	4b93      	ldr	r3, [pc, #588]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_OscConfig+0x62>
 800317c:	4b90      	ldr	r3, [pc, #576]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003184:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003188:	d10b      	bne.n	80031a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318a:	4b8d      	ldr	r3, [pc, #564]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06c      	beq.n	8003270 <HAL_RCC_OscConfig+0x130>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d168      	bne.n	8003270 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e275      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x7a>
 80031ac:	4b84      	ldr	r3, [pc, #528]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a83      	ldr	r2, [pc, #524]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e02e      	b.n	8003218 <HAL_RCC_OscConfig+0xd8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x9c>
 80031c2:	4b7f      	ldr	r3, [pc, #508]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7e      	ldr	r2, [pc, #504]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b7c      	ldr	r3, [pc, #496]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7b      	ldr	r2, [pc, #492]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xd8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0xc0>
 80031e6:	4b76      	ldr	r3, [pc, #472]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a75      	ldr	r2, [pc, #468]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b73      	ldr	r3, [pc, #460]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a72      	ldr	r2, [pc, #456]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xd8>
 8003200:	4b6f      	ldr	r3, [pc, #444]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b6c      	ldr	r3, [pc, #432]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6b      	ldr	r2, [pc, #428]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe faba 	bl	8001798 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe fab6 	bl	8001798 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e229      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b61      	ldr	r3, [pc, #388]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xe8>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe faa6 	bl	8001798 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe faa2 	bl	8001798 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e215      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x110>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d069      	beq.n	8003352 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327e:	4b50      	ldr	r3, [pc, #320]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328a:	4b4d      	ldr	r3, [pc, #308]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x190>
 8003296:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x17a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e1e9      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	493d      	ldr	r1, [pc, #244]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	e040      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d8:	4b39      	ldr	r3, [pc, #228]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a38      	ldr	r2, [pc, #224]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fa58 	bl	8001798 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fa54 	bl	8001798 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1c7      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fe:	4b30      	ldr	r3, [pc, #192]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330a:	4b2d      	ldr	r3, [pc, #180]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4929      	ldr	r1, [pc, #164]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
 800331e:	e018      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003320:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a26      	ldr	r2, [pc, #152]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fa34 	bl	8001798 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fa30 	bl	8001798 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1a3      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d038      	beq.n	80033d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336a:	4a15      	ldr	r2, [pc, #84]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fe fa11 	bl	8001798 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7fe fa0d 	bl	8001798 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e180      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x23a>
 8003398:	e01a      	b.n	80033d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339e:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <HAL_RCC_OscConfig+0x280>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe f9f7 	bl	8001798 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe f9f3 	bl	8001798 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d903      	bls.n	80033c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e166      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
 80033c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c4:	4b92      	ldr	r3, [pc, #584]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a4 	beq.w	8003526 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b8c      	ldr	r3, [pc, #560]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b89      	ldr	r3, [pc, #548]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	4a88      	ldr	r2, [pc, #544]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f6:	4b86      	ldr	r3, [pc, #536]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003402:	2301      	movs	r3, #1
 8003404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	4b83      	ldr	r3, [pc, #524]	@ (8003614 <HAL_RCC_OscConfig+0x4d4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340e:	2b00      	cmp	r3, #0
 8003410:	d118      	bne.n	8003444 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003412:	4b80      	ldr	r3, [pc, #512]	@ (8003614 <HAL_RCC_OscConfig+0x4d4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7f      	ldr	r2, [pc, #508]	@ (8003614 <HAL_RCC_OscConfig+0x4d4>)
 8003418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341e:	f7fe f9bb 	bl	8001798 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7fe f9b7 	bl	8001798 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b64      	cmp	r3, #100	@ 0x64
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e12a      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003438:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <HAL_RCC_OscConfig+0x4d4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x31a>
 800344c:	4b70      	ldr	r3, [pc, #448]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a6f      	ldr	r2, [pc, #444]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
 8003458:	e02d      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x33c>
 8003462:	4b6b      	ldr	r3, [pc, #428]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003466:	4a6a      	ldr	r2, [pc, #424]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	@ 0x70
 800346e:	4b68      	ldr	r3, [pc, #416]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003472:	4a67      	ldr	r2, [pc, #412]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	@ 0x70
 800347a:	e01c      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b05      	cmp	r3, #5
 8003482:	d10c      	bne.n	800349e <HAL_RCC_OscConfig+0x35e>
 8003484:	4b62      	ldr	r3, [pc, #392]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	4a61      	ldr	r2, [pc, #388]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003490:	4b5f      	ldr	r3, [pc, #380]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003494:	4a5e      	ldr	r2, [pc, #376]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	@ 0x70
 800349c:	e00b      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
 800349e:	4b5c      	ldr	r3, [pc, #368]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034aa:	4b59      	ldr	r3, [pc, #356]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	4a58      	ldr	r2, [pc, #352]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d015      	beq.n	80034ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034be:	f7fe f96b 	bl	8001798 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fe f967 	bl	8001798 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0d8      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ee      	beq.n	80034c6 <HAL_RCC_OscConfig+0x386>
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fe f955 	bl	8001798 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe f951 	bl	8001798 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0c2      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003508:	4b41      	ldr	r3, [pc, #260]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ee      	bne.n	80034f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4b3d      	ldr	r3, [pc, #244]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	4a3c      	ldr	r2, [pc, #240]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80ae 	beq.w	800368c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003530:	4b37      	ldr	r3, [pc, #220]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d06d      	beq.n	8003618 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d14b      	bne.n	80035dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	4b32      	ldr	r3, [pc, #200]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a31      	ldr	r2, [pc, #196]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe f922 	bl	8001798 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe f91e 	bl	8001798 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e091      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	041b      	lsls	r3, r3, #16
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	491b      	ldr	r1, [pc, #108]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	4b19      	ldr	r3, [pc, #100]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe f8f0 	bl	8001798 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe f8ec 	bl	8001798 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e05f      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b10      	ldr	r3, [pc, #64]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x47c>
 80035da:	e057      	b.n	800368c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f8d6 	bl	8001798 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe f8d2 	bl	8001798 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e045      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x4b0>
 800360e:	e03d      	b.n	800368c <HAL_RCC_OscConfig+0x54c>
 8003610:	40023800 	.word	0x40023800
 8003614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003618:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_RCC_OscConfig+0x558>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d030      	beq.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d129      	bne.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d122      	bne.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800364e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d119      	bne.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d10f      	bne.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d001      	beq.n	800368c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800

0800369c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d0      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d910      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b67      	ldr	r3, [pc, #412]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 020f 	bic.w	r2, r3, #15
 80036ca:	4965      	ldr	r1, [pc, #404]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d2:	4b63      	ldr	r3, [pc, #396]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d001      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0b8      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036fc:	4b59      	ldr	r3, [pc, #356]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a58      	ldr	r2, [pc, #352]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003714:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	4a52      	ldr	r2, [pc, #328]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800371e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003720:	4b50      	ldr	r3, [pc, #320]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	494d      	ldr	r1, [pc, #308]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d040      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07f      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b41      	ldr	r3, [pc, #260]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e073      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4936      	ldr	r1, [pc, #216]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7fe f802 	bl	8001798 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fd fffe 	bl	8001798 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e053      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d210      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 020f 	bic.w	r2, r3, #15
 80037d6:	4922      	ldr	r1, [pc, #136]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e032      	b.n	8003856 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4916      	ldr	r1, [pc, #88]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800381a:	4b12      	ldr	r3, [pc, #72]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	490e      	ldr	r1, [pc, #56]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800382e:	f000 f821 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003832:	4602      	mov	r2, r0
 8003834:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	490a      	ldr	r1, [pc, #40]	@ (8003868 <HAL_RCC_ClockConfig+0x1cc>)
 8003840:	5ccb      	ldrb	r3, [r1, r3]
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <HAL_RCC_ClockConfig+0x1d0>)
 8003848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1d4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd ff5e 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023c00 	.word	0x40023c00
 8003864:	40023800 	.word	0x40023800
 8003868:	08009030 	.word	0x08009030
 800386c:	20000008 	.word	0x20000008
 8003870:	2000000c 	.word	0x2000000c

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003878:	b094      	sub	sp, #80	@ 0x50
 800387a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003880:	2300      	movs	r3, #0
 8003882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003884:	2300      	movs	r3, #0
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800388c:	4b79      	ldr	r3, [pc, #484]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d00d      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003898:	2b08      	cmp	r3, #8
 800389a:	f200 80e1 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x34>
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x3a>
 80038a6:	e0db      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 80038aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ac:	e0db      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ae:	4b73      	ldr	r3, [pc, #460]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0x208>)
 80038b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038b2:	e0d8      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d063      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	2200      	movs	r2, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	2300      	movs	r3, #0
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4621      	mov	r1, r4
 8003900:	1a51      	subs	r1, r2, r1
 8003902:	6139      	str	r1, [r7, #16]
 8003904:	4629      	mov	r1, r5
 8003906:	eb63 0301 	sbc.w	r3, r3, r1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003918:	4659      	mov	r1, fp
 800391a:	018b      	lsls	r3, r1, #6
 800391c:	4651      	mov	r1, sl
 800391e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003922:	4651      	mov	r1, sl
 8003924:	018a      	lsls	r2, r1, #6
 8003926:	4651      	mov	r1, sl
 8003928:	ebb2 0801 	subs.w	r8, r2, r1
 800392c:	4659      	mov	r1, fp
 800392e:	eb63 0901 	sbc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	462b      	mov	r3, r5
 8003954:	eb49 0303 	adc.w	r3, r9, r3
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003966:	4629      	mov	r1, r5
 8003968:	024b      	lsls	r3, r1, #9
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003970:	4621      	mov	r1, r4
 8003972:	024a      	lsls	r2, r1, #9
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800397a:	2200      	movs	r2, #0
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800397e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003984:	f7fc fcb4 	bl	80002f0 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4613      	mov	r3, r2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003990:	e058      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	099b      	lsrs	r3, r3, #6
 8003998:	2200      	movs	r2, #0
 800399a:	4618      	mov	r0, r3
 800399c:	4611      	mov	r1, r2
 800399e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	f04f 0000 	mov.w	r0, #0
 80039b4:	f04f 0100 	mov.w	r1, #0
 80039b8:	0159      	lsls	r1, r3, #5
 80039ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039be:	0150      	lsls	r0, r2, #5
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4641      	mov	r1, r8
 80039c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039e4:	ebb2 040a 	subs.w	r4, r2, sl
 80039e8:	eb63 050b 	sbc.w	r5, r3, fp
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	464b      	mov	r3, r9
 8003a08:	eb45 0303 	adc.w	r3, r5, r3
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	028b      	lsls	r3, r1, #10
 8003a1e:	4621      	mov	r1, r4
 8003a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a24:	4621      	mov	r1, r4
 8003a26:	028a      	lsls	r2, r1, #10
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	61fa      	str	r2, [r7, #28]
 8003a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a38:	f7fc fc5a 	bl	80002f0 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3750      	adds	r7, #80	@ 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200

08003a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	@ (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000008 	.word	0x20000008

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	08009040 	.word	0x08009040

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffdc 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	08009040 	.word	0x08009040

08003ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d012      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b10:	4b69      	ldr	r3, [pc, #420]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a68      	ldr	r2, [pc, #416]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b1a:	6093      	str	r3, [r2, #8]
 8003b1c:	4b66      	ldr	r3, [pc, #408]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b24:	4964      	ldr	r1, [pc, #400]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d017      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b42:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	4959      	ldr	r1, [pc, #356]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b60:	d101      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b62:	2301      	movs	r3, #1
 8003b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d017      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	494a      	ldr	r1, [pc, #296]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 808b 	beq.w	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	4a39      	ldr	r2, [pc, #228]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003be4:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a34      	ldr	r2, [pc, #208]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fdd2 	bl	8001798 <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fd fdce 	bl	8001798 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e38f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c16:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d035      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d02e      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c34:	4b20      	ldr	r3, [pc, #128]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c48:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c56:	4a18      	ldr	r2, [pc, #96]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d114      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fd96 	bl	8001798 <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fd fd92 	bl	8001798 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e351      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9e:	d111      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cac:	4b04      	ldr	r3, [pc, #16]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cae:	400b      	ands	r3, r1
 8003cb0:	4901      	ldr	r1, [pc, #4]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	0ffffcff 	.word	0x0ffffcff
 8003cc4:	4bac      	ldr	r3, [pc, #688]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4aab      	ldr	r2, [pc, #684]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cce:	6093      	str	r3, [r2, #8]
 8003cd0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	49a6      	ldr	r1, [pc, #664]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cee:	4ba2      	ldr	r3, [pc, #648]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf4:	4aa0      	ldr	r2, [pc, #640]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d00:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	499b      	ldr	r1, [pc, #620]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d1c:	4b96      	ldr	r3, [pc, #600]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d2a:	4993      	ldr	r1, [pc, #588]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4c:	498a      	ldr	r1, [pc, #552]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d60:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d6e:	4982      	ldr	r1, [pc, #520]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d82:	4b7d      	ldr	r3, [pc, #500]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d90:	4979      	ldr	r1, [pc, #484]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da4:	4b74      	ldr	r3, [pc, #464]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db2:	4971      	ldr	r1, [pc, #452]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	f023 020c 	bic.w	r2, r3, #12
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd4:	4968      	ldr	r1, [pc, #416]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de8:	4b63      	ldr	r3, [pc, #396]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	4960      	ldr	r1, [pc, #384]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e18:	4957      	ldr	r1, [pc, #348]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e2c:	4b52      	ldr	r3, [pc, #328]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	494f      	ldr	r1, [pc, #316]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e54:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	4946      	ldr	r1, [pc, #280]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e70:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e76:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7e:	493e      	ldr	r1, [pc, #248]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e92:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea0:	4935      	ldr	r1, [pc, #212]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eb4:	4b30      	ldr	r3, [pc, #192]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ec2:	492d      	ldr	r1, [pc, #180]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d011      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ed6:	4b28      	ldr	r3, [pc, #160]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ee4:	4924      	ldr	r1, [pc, #144]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ef4:	d101      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f16:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f24:	4914      	ldr	r1, [pc, #80]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f38:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f48:	490b      	ldr	r1, [pc, #44]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f6c:	4902      	ldr	r1, [pc, #8]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f88:	4b8a      	ldr	r3, [pc, #552]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f8e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f98:	4986      	ldr	r1, [pc, #536]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003fac:	4b81      	ldr	r3, [pc, #516]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fb2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fbc:	497d      	ldr	r1, [pc, #500]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d006      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80d6 	beq.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd8:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a75      	ldr	r2, [pc, #468]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe4:	f7fd fbd8 	bl	8001798 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fec:	f7fd fbd4 	bl	8001798 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	@ 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e195      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11d      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800401e:	4b65      	ldr	r3, [pc, #404]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800402c:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	019a      	lsls	r2, r3, #6
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	061b      	lsls	r3, r3, #24
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	4958      	ldr	r1, [pc, #352]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004078:	2b00      	cmp	r3, #0
 800407a:	d02e      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004084:	d129      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004086:	4b4b      	ldr	r3, [pc, #300]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004094:	4b47      	ldr	r3, [pc, #284]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800409a:	0f1b      	lsrs	r3, r3, #28
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	019a      	lsls	r2, r3, #6
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	061b      	lsls	r3, r3, #24
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	493e      	ldr	r1, [pc, #248]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040c2:	4b3c      	ldr	r3, [pc, #240]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c8:	f023 021f 	bic.w	r2, r3, #31
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	3b01      	subs	r3, #1
 80040d2:	4938      	ldr	r1, [pc, #224]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01d      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e6:	4b33      	ldr	r3, [pc, #204]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f4:	4b2f      	ldr	r3, [pc, #188]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fa:	0f1b      	lsrs	r3, r3, #28
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	019a      	lsls	r2, r3, #6
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	4926      	ldr	r1, [pc, #152]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d011      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	019a      	lsls	r2, r3, #6
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	491a      	ldr	r1, [pc, #104]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004158:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800415c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415e:	f7fd fb1b 	bl	8001798 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004166:	f7fd fb17 	bl	8001798 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	@ 0x64
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0d8      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004178:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b01      	cmp	r3, #1
 8004188:	f040 80ce 	bne.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800418c:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004198:	f7fd fafe 	bl	8001798 <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a0:	f7fd fafa 	bl	8001798 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d904      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0bb      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041c4:	d0ec      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d02e      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d12a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ee:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004202:	0f1b      	lsrs	r3, r3, #28
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	019a      	lsls	r2, r3, #6
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	061b      	lsls	r3, r3, #24
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	071b      	lsls	r3, r3, #28
 8004222:	4944      	ldr	r1, [pc, #272]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800422a:	4b42      	ldr	r3, [pc, #264]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004230:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	493d      	ldr	r1, [pc, #244]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d022      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004254:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004258:	d11d      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800425a:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	0e1b      	lsrs	r3, r3, #24
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004268:	4b32      	ldr	r3, [pc, #200]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426e:	0f1b      	lsrs	r3, r3, #28
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	019a      	lsls	r2, r3, #6
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	061b      	lsls	r3, r3, #24
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	4929      	ldr	r1, [pc, #164]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d028      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042a2:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042b0:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	0c1b      	lsrs	r3, r3, #16
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	041b      	lsls	r3, r3, #16
 80042c8:	431a      	orrs	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	071b      	lsls	r3, r3, #28
 80042d6:	4917      	ldr	r1, [pc, #92]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042de:	4b15      	ldr	r3, [pc, #84]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4911      	ldr	r1, [pc, #68]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004300:	f7fd fa4a 	bl	8001798 <HAL_GetTick>
 8004304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004308:	f7fd fa46 	bl	8001798 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e007      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800431a:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004326:	d1ef      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800

08004338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e049      	b.n	80043de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc ff76 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 fad6 	bl	8004928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e054      	b.n	80044aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d01d      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_TIM_Base_Start_IT+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d015      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d011      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e008      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <HAL_TIM_Base_Stop_IT+0x48>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	f240 4344 	movw	r3, #1092	@ 0x444
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <HAL_TIM_Base_Stop_IT+0x48>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01b      	beq.n	800459a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f06f 0202 	mvn.w	r2, #2
 800456a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f9b3 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 8004586:	e005      	b.n	8004594 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f9a5 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9b6 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d01b      	beq.n	80045e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0204 	mvn.w	r2, #4
 80045b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f98d 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 80045d2:	e005      	b.n	80045e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f97f 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f990 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01b      	beq.n	8004632 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0208 	mvn.w	r2, #8
 8004602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2204      	movs	r2, #4
 8004608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f967 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 800461e:	e005      	b.n	800462c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f959 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f96a 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01b      	beq.n	800467e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0210 	mvn.w	r2, #16
 800464e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2208      	movs	r2, #8
 8004654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f941 	bl	80048ec <HAL_TIM_IC_CaptureCallback>
 800466a:	e005      	b.n	8004678 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f933 	bl	80048d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f944 	bl	8004900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00c      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0201 	mvn.w	r2, #1
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc f973 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fb0a 	bl	8004ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fb02 	bl	8004cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00c      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8fe 	bl	8004914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0220 	mvn.w	r2, #32
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 faca 	bl	8004cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIM_ConfigClockSource+0x1c>
 800475c:	2302      	movs	r3, #2
 800475e:	e0b4      	b.n	80048ca <HAL_TIM_ConfigClockSource+0x186>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	4b56      	ldr	r3, [pc, #344]	@ (80048d4 <HAL_TIM_ConfigClockSource+0x190>)
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004798:	d03e      	beq.n	8004818 <HAL_TIM_ConfigClockSource+0xd4>
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479e:	f200 8087 	bhi.w	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a6:	f000 8086 	beq.w	80048b6 <HAL_TIM_ConfigClockSource+0x172>
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ae:	d87f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d01a      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0xa6>
 80047b4:	2b70      	cmp	r3, #112	@ 0x70
 80047b6:	d87b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d050      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x11a>
 80047bc:	2b60      	cmp	r3, #96	@ 0x60
 80047be:	d877      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d03c      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xfa>
 80047c4:	2b50      	cmp	r3, #80	@ 0x50
 80047c6:	d873      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d058      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x13a>
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d86f      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d064      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	2b30      	cmp	r3, #48	@ 0x30
 80047d6:	d86b      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d060      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d867      	bhi.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d05a      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x15a>
 80047e8:	e062      	b.n	80048b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047fa:	f000 f9bb 	bl	8004b74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800480c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	609a      	str	r2, [r3, #8]
      break;
 8004816:	e04f      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004828:	f000 f9a4 	bl	8004b74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e03c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	461a      	mov	r2, r3
 800484c:	f000 f918 	bl	8004a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2150      	movs	r1, #80	@ 0x50
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f971 	bl	8004b3e <TIM_ITRx_SetConfig>
      break;
 800485c:	e02c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	461a      	mov	r2, r3
 800486c:	f000 f937 	bl	8004ade <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2160      	movs	r1, #96	@ 0x60
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f961 	bl	8004b3e <TIM_ITRx_SetConfig>
      break;
 800487c:	e01c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f8f8 	bl	8004a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2140      	movs	r1, #64	@ 0x40
 8004896:	4618      	mov	r0, r3
 8004898:	f000 f951 	bl	8004b3e <TIM_ITRx_SetConfig>
      break;
 800489c:	e00c      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f948 	bl	8004b3e <TIM_ITRx_SetConfig>
      break;
 80048ae:	e003      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e000      	b.n	80048b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	fffeff88 	.word	0xfffeff88

080048d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a46      	ldr	r2, [pc, #280]	@ (8004a54 <TIM_Base_SetConfig+0x12c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a43      	ldr	r2, [pc, #268]	@ (8004a58 <TIM_Base_SetConfig+0x130>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a42      	ldr	r2, [pc, #264]	@ (8004a5c <TIM_Base_SetConfig+0x134>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a41      	ldr	r2, [pc, #260]	@ (8004a60 <TIM_Base_SetConfig+0x138>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a40      	ldr	r2, [pc, #256]	@ (8004a64 <TIM_Base_SetConfig+0x13c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a35      	ldr	r2, [pc, #212]	@ (8004a54 <TIM_Base_SetConfig+0x12c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d02b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d027      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a32      	ldr	r2, [pc, #200]	@ (8004a58 <TIM_Base_SetConfig+0x130>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d023      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a31      	ldr	r2, [pc, #196]	@ (8004a5c <TIM_Base_SetConfig+0x134>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <TIM_Base_SetConfig+0x138>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <TIM_Base_SetConfig+0x13c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d017      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004a68 <TIM_Base_SetConfig+0x140>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a6c <TIM_Base_SetConfig+0x144>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00f      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <TIM_Base_SetConfig+0x148>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00b      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004a74 <TIM_Base_SetConfig+0x14c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <TIM_Base_SetConfig+0x150>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d003      	beq.n	80049da <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a29      	ldr	r2, [pc, #164]	@ (8004a7c <TIM_Base_SetConfig+0x154>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d108      	bne.n	80049ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a10      	ldr	r2, [pc, #64]	@ (8004a54 <TIM_Base_SetConfig+0x12c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_Base_SetConfig+0xf8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <TIM_Base_SetConfig+0x13c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d105      	bne.n	8004a46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	611a      	str	r2, [r3, #16]
  }
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40010000 	.word	0x40010000
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800
 8004a60:	40000c00 	.word	0x40000c00
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	40001800 	.word	0x40001800
 8004a78:	40001c00 	.word	0x40001c00
 8004a7c:	40002000 	.word	0x40002000

08004a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f023 0201 	bic.w	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f023 030a 	bic.w	r3, r3, #10
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 0210 	bic.w	r2, r3, #16
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	031b      	lsls	r3, r3, #12
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f043 0307 	orr.w	r3, r3, #7
 8004b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	609a      	str	r2, [r3, #8]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	021a      	lsls	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	609a      	str	r2, [r3, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e06d      	b.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d108      	bne.n	8004c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a20      	ldr	r2, [pc, #128]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d022      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d01d      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1d      	ldr	r2, [pc, #116]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a16      	ldr	r2, [pc, #88]	@ (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a15      	ldr	r2, [pc, #84]	@ (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10c      	bne.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40010400 	.word	0x40010400
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40001800 	.word	0x40001800

08004cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e040      	b.n	8004da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fab2 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	@ 0x24
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fe28 	bl	80059a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fbc1 	bl	80054e0 <UART_SetConfig>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01b      	b.n	8004da0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fea7 	bl	8005aec <UART_CheckIdleState>
 8004d9e:	4603      	mov	r3, r0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d177      	bne.n	8004eb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <HAL_UART_Transmit+0x24>
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e070      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2221      	movs	r2, #33	@ 0x21
 8004ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dde:	f7fc fcdb 	bl	8001798 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfc:	d108      	bne.n	8004e10 <HAL_UART_Transmit+0x68>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e18:	e02f      	b.n	8004e7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2180      	movs	r1, #128	@ 0x80
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 ff09 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e03b      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	3302      	adds	r3, #2
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e007      	b.n	8004e68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c9      	bne.n	8004e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2140      	movs	r1, #64	@ 0x40
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 fed3 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e005      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b0ba      	sub	sp, #232	@ 0xe8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ee2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004ee6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004eea:	4013      	ands	r3, r2
 8004eec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ef0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d115      	bne.n	8004f24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00f      	beq.n	8004f24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d009      	beq.n	8004f24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 82ac 	beq.w	8005472 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      }
      return;
 8004f22:	e2a6      	b.n	8005472 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8117 	beq.w	800515c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f3e:	4b85      	ldr	r3, [pc, #532]	@ (8005154 <HAL_UART_IRQHandler+0x298>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 810a 	beq.w	800515c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_UART_IRQHandler+0xbc>
 8004f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00b      	beq.n	8004f78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2201      	movs	r2, #1
 8004f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xec>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2202      	movs	r2, #2
 8004f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9e:	f043 0204 	orr.w	r2, r3, #4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x11c>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d105      	bne.n	8004ffc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2208      	movs	r2, #8
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500a:	f043 0208 	orr.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <HAL_UART_IRQHandler+0x18a>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005024:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8212 	beq.w	8005476 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00d      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005080:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508e:	2b40      	cmp	r3, #64	@ 0x40
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005096:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04f      	beq.n	800513e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fe39 	bl	8005d16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b40      	cmp	r3, #64	@ 0x40
 80050b0:	d141      	bne.n	8005136 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3308      	adds	r3, #8
 80050b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80050c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80050de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	4a13      	ldr	r2, [pc, #76]	@ (8005158 <HAL_UART_IRQHandler+0x29c>)
 800510c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd f91f 	bl	8002356 <HAL_DMA_Abort_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e00f      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9b6 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00b      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9b2 	bl	80054a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e007      	b.n	800514e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9ae 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800514c:	e193      	b.n	8005476 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514e:	bf00      	nop
    return;
 8005150:	e191      	b.n	8005476 <HAL_UART_IRQHandler+0x5ba>
 8005152:	bf00      	nop
 8005154:	04000120 	.word	0x04000120
 8005158:	08005ddf 	.word	0x08005ddf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 814c 	bne.w	80053fe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8145 	beq.w	80053fe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 813e 	beq.w	80053fe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005194:	2b40      	cmp	r3, #64	@ 0x40
 8005196:	f040 80b6 	bne.w	8005306 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8165 	beq.w	800547a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f080 815d 	bcs.w	800547a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d4:	f000 8086 	beq.w	80052e4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005206:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800520e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800521a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1da      	bne.n	80051d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3308      	adds	r3, #8
 8005242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005246:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800524a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800524e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e1      	bne.n	8005222 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800526e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005282:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005284:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005288:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e3      	bne.n	800525e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e4      	bne.n	80052a4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fc ffc9 	bl	8002276 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8d8 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005304:	e0b9      	b.n	800547a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005312:	b29b      	uxth	r3, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80ab 	beq.w	800547e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80a6 	beq.w	800547e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005354:	647b      	str	r3, [r7, #68]	@ 0x44
 8005356:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	623b      	str	r3, [r7, #32]
   return(result);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800538c:	633a      	str	r2, [r7, #48]	@ 0x30
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e3      	bne.n	8005368 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0310 	bic.w	r3, r3, #16
 80053c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69b9      	ldr	r1, [r7, #24]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	617b      	str	r3, [r7, #20]
   return(result);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e4      	bne.n	80053b4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f85c 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053fc:	e03f      	b.n	800547e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <HAL_UART_IRQHandler+0x56c>
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800540e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800541e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f853 	bl	80054cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005426:	e02d      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00e      	beq.n	8005452 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01c      	beq.n	8005482 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4798      	blx	r3
    }
    return;
 8005450:	e017      	b.n	8005482 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d012      	beq.n	8005484 <HAL_UART_IRQHandler+0x5c8>
 800545e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fccd 	bl	8005e0a <UART_EndTransmit_IT>
    return;
 8005470:	e008      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005472:	bf00      	nop
 8005474:	e006      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005476:	bf00      	nop
 8005478:	e004      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
      return;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
      return;
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005482:	bf00      	nop
  }

}
 8005484:	37e8      	adds	r7, #232	@ 0xe8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop

0800548c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4ba6      	ldr	r3, [pc, #664]	@ (80057a4 <UART_SetConfig+0x2c4>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	6979      	ldr	r1, [r7, #20]
 8005514:	430b      	orrs	r3, r1
 8005516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	430a      	orrs	r2, r1
 8005550:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a94      	ldr	r2, [pc, #592]	@ (80057a8 <UART_SetConfig+0x2c8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d120      	bne.n	800559e <UART_SetConfig+0xbe>
 800555c:	4b93      	ldr	r3, [pc, #588]	@ (80057ac <UART_SetConfig+0x2cc>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b03      	cmp	r3, #3
 8005568:	d816      	bhi.n	8005598 <UART_SetConfig+0xb8>
 800556a:	a201      	add	r2, pc, #4	@ (adr r2, 8005570 <UART_SetConfig+0x90>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005581 	.word	0x08005581
 8005574:	0800558d 	.word	0x0800558d
 8005578:	08005587 	.word	0x08005587
 800557c:	08005593 	.word	0x08005593
 8005580:	2301      	movs	r3, #1
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e150      	b.n	8005828 <UART_SetConfig+0x348>
 8005586:	2302      	movs	r3, #2
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e14d      	b.n	8005828 <UART_SetConfig+0x348>
 800558c:	2304      	movs	r3, #4
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e14a      	b.n	8005828 <UART_SetConfig+0x348>
 8005592:	2308      	movs	r3, #8
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e147      	b.n	8005828 <UART_SetConfig+0x348>
 8005598:	2310      	movs	r3, #16
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e144      	b.n	8005828 <UART_SetConfig+0x348>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a83      	ldr	r2, [pc, #524]	@ (80057b0 <UART_SetConfig+0x2d0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d132      	bne.n	800560e <UART_SetConfig+0x12e>
 80055a8:	4b80      	ldr	r3, [pc, #512]	@ (80057ac <UART_SetConfig+0x2cc>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d828      	bhi.n	8005608 <UART_SetConfig+0x128>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <UART_SetConfig+0xdc>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	08005609 	.word	0x08005609
 80055c4:	08005609 	.word	0x08005609
 80055c8:	08005609 	.word	0x08005609
 80055cc:	080055fd 	.word	0x080055fd
 80055d0:	08005609 	.word	0x08005609
 80055d4:	08005609 	.word	0x08005609
 80055d8:	08005609 	.word	0x08005609
 80055dc:	080055f7 	.word	0x080055f7
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005609 	.word	0x08005609
 80055e8:	08005609 	.word	0x08005609
 80055ec:	08005603 	.word	0x08005603
 80055f0:	2300      	movs	r3, #0
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e118      	b.n	8005828 <UART_SetConfig+0x348>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e115      	b.n	8005828 <UART_SetConfig+0x348>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e112      	b.n	8005828 <UART_SetConfig+0x348>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e10f      	b.n	8005828 <UART_SetConfig+0x348>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e10c      	b.n	8005828 <UART_SetConfig+0x348>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a68      	ldr	r2, [pc, #416]	@ (80057b4 <UART_SetConfig+0x2d4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d120      	bne.n	800565a <UART_SetConfig+0x17a>
 8005618:	4b64      	ldr	r3, [pc, #400]	@ (80057ac <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005622:	2b30      	cmp	r3, #48	@ 0x30
 8005624:	d013      	beq.n	800564e <UART_SetConfig+0x16e>
 8005626:	2b30      	cmp	r3, #48	@ 0x30
 8005628:	d814      	bhi.n	8005654 <UART_SetConfig+0x174>
 800562a:	2b20      	cmp	r3, #32
 800562c:	d009      	beq.n	8005642 <UART_SetConfig+0x162>
 800562e:	2b20      	cmp	r3, #32
 8005630:	d810      	bhi.n	8005654 <UART_SetConfig+0x174>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <UART_SetConfig+0x15c>
 8005636:	2b10      	cmp	r3, #16
 8005638:	d006      	beq.n	8005648 <UART_SetConfig+0x168>
 800563a:	e00b      	b.n	8005654 <UART_SetConfig+0x174>
 800563c:	2300      	movs	r3, #0
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e0f2      	b.n	8005828 <UART_SetConfig+0x348>
 8005642:	2302      	movs	r3, #2
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e0ef      	b.n	8005828 <UART_SetConfig+0x348>
 8005648:	2304      	movs	r3, #4
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0ec      	b.n	8005828 <UART_SetConfig+0x348>
 800564e:	2308      	movs	r3, #8
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e0e9      	b.n	8005828 <UART_SetConfig+0x348>
 8005654:	2310      	movs	r3, #16
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e0e6      	b.n	8005828 <UART_SetConfig+0x348>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a56      	ldr	r2, [pc, #344]	@ (80057b8 <UART_SetConfig+0x2d8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d120      	bne.n	80056a6 <UART_SetConfig+0x1c6>
 8005664:	4b51      	ldr	r3, [pc, #324]	@ (80057ac <UART_SetConfig+0x2cc>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800566e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005670:	d013      	beq.n	800569a <UART_SetConfig+0x1ba>
 8005672:	2bc0      	cmp	r3, #192	@ 0xc0
 8005674:	d814      	bhi.n	80056a0 <UART_SetConfig+0x1c0>
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d009      	beq.n	800568e <UART_SetConfig+0x1ae>
 800567a:	2b80      	cmp	r3, #128	@ 0x80
 800567c:	d810      	bhi.n	80056a0 <UART_SetConfig+0x1c0>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <UART_SetConfig+0x1a8>
 8005682:	2b40      	cmp	r3, #64	@ 0x40
 8005684:	d006      	beq.n	8005694 <UART_SetConfig+0x1b4>
 8005686:	e00b      	b.n	80056a0 <UART_SetConfig+0x1c0>
 8005688:	2300      	movs	r3, #0
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e0cc      	b.n	8005828 <UART_SetConfig+0x348>
 800568e:	2302      	movs	r3, #2
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e0c9      	b.n	8005828 <UART_SetConfig+0x348>
 8005694:	2304      	movs	r3, #4
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e0c6      	b.n	8005828 <UART_SetConfig+0x348>
 800569a:	2308      	movs	r3, #8
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e0c3      	b.n	8005828 <UART_SetConfig+0x348>
 80056a0:	2310      	movs	r3, #16
 80056a2:	77fb      	strb	r3, [r7, #31]
 80056a4:	e0c0      	b.n	8005828 <UART_SetConfig+0x348>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a44      	ldr	r2, [pc, #272]	@ (80057bc <UART_SetConfig+0x2dc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d125      	bne.n	80056fc <UART_SetConfig+0x21c>
 80056b0:	4b3e      	ldr	r3, [pc, #248]	@ (80057ac <UART_SetConfig+0x2cc>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056be:	d017      	beq.n	80056f0 <UART_SetConfig+0x210>
 80056c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c4:	d817      	bhi.n	80056f6 <UART_SetConfig+0x216>
 80056c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ca:	d00b      	beq.n	80056e4 <UART_SetConfig+0x204>
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d0:	d811      	bhi.n	80056f6 <UART_SetConfig+0x216>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <UART_SetConfig+0x1fe>
 80056d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056da:	d006      	beq.n	80056ea <UART_SetConfig+0x20a>
 80056dc:	e00b      	b.n	80056f6 <UART_SetConfig+0x216>
 80056de:	2300      	movs	r3, #0
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e0a1      	b.n	8005828 <UART_SetConfig+0x348>
 80056e4:	2302      	movs	r3, #2
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e09e      	b.n	8005828 <UART_SetConfig+0x348>
 80056ea:	2304      	movs	r3, #4
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e09b      	b.n	8005828 <UART_SetConfig+0x348>
 80056f0:	2308      	movs	r3, #8
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e098      	b.n	8005828 <UART_SetConfig+0x348>
 80056f6:	2310      	movs	r3, #16
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e095      	b.n	8005828 <UART_SetConfig+0x348>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2f      	ldr	r2, [pc, #188]	@ (80057c0 <UART_SetConfig+0x2e0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d125      	bne.n	8005752 <UART_SetConfig+0x272>
 8005706:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <UART_SetConfig+0x2cc>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005710:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005714:	d017      	beq.n	8005746 <UART_SetConfig+0x266>
 8005716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800571a:	d817      	bhi.n	800574c <UART_SetConfig+0x26c>
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005720:	d00b      	beq.n	800573a <UART_SetConfig+0x25a>
 8005722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005726:	d811      	bhi.n	800574c <UART_SetConfig+0x26c>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <UART_SetConfig+0x254>
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005730:	d006      	beq.n	8005740 <UART_SetConfig+0x260>
 8005732:	e00b      	b.n	800574c <UART_SetConfig+0x26c>
 8005734:	2301      	movs	r3, #1
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e076      	b.n	8005828 <UART_SetConfig+0x348>
 800573a:	2302      	movs	r3, #2
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e073      	b.n	8005828 <UART_SetConfig+0x348>
 8005740:	2304      	movs	r3, #4
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e070      	b.n	8005828 <UART_SetConfig+0x348>
 8005746:	2308      	movs	r3, #8
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e06d      	b.n	8005828 <UART_SetConfig+0x348>
 800574c:	2310      	movs	r3, #16
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e06a      	b.n	8005828 <UART_SetConfig+0x348>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1b      	ldr	r2, [pc, #108]	@ (80057c4 <UART_SetConfig+0x2e4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d138      	bne.n	80057ce <UART_SetConfig+0x2ee>
 800575c:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <UART_SetConfig+0x2cc>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800576a:	d017      	beq.n	800579c <UART_SetConfig+0x2bc>
 800576c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005770:	d82a      	bhi.n	80057c8 <UART_SetConfig+0x2e8>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005776:	d00b      	beq.n	8005790 <UART_SetConfig+0x2b0>
 8005778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800577c:	d824      	bhi.n	80057c8 <UART_SetConfig+0x2e8>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <UART_SetConfig+0x2aa>
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	d006      	beq.n	8005796 <UART_SetConfig+0x2b6>
 8005788:	e01e      	b.n	80057c8 <UART_SetConfig+0x2e8>
 800578a:	2300      	movs	r3, #0
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e04b      	b.n	8005828 <UART_SetConfig+0x348>
 8005790:	2302      	movs	r3, #2
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e048      	b.n	8005828 <UART_SetConfig+0x348>
 8005796:	2304      	movs	r3, #4
 8005798:	77fb      	strb	r3, [r7, #31]
 800579a:	e045      	b.n	8005828 <UART_SetConfig+0x348>
 800579c:	2308      	movs	r3, #8
 800579e:	77fb      	strb	r3, [r7, #31]
 80057a0:	e042      	b.n	8005828 <UART_SetConfig+0x348>
 80057a2:	bf00      	nop
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40004400 	.word	0x40004400
 80057b4:	40004800 	.word	0x40004800
 80057b8:	40004c00 	.word	0x40004c00
 80057bc:	40005000 	.word	0x40005000
 80057c0:	40011400 	.word	0x40011400
 80057c4:	40007800 	.word	0x40007800
 80057c8:	2310      	movs	r3, #16
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e02c      	b.n	8005828 <UART_SetConfig+0x348>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a72      	ldr	r2, [pc, #456]	@ (800599c <UART_SetConfig+0x4bc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d125      	bne.n	8005824 <UART_SetConfig+0x344>
 80057d8:	4b71      	ldr	r3, [pc, #452]	@ (80059a0 <UART_SetConfig+0x4c0>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80057e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057e6:	d017      	beq.n	8005818 <UART_SetConfig+0x338>
 80057e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057ec:	d817      	bhi.n	800581e <UART_SetConfig+0x33e>
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f2:	d00b      	beq.n	800580c <UART_SetConfig+0x32c>
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f8:	d811      	bhi.n	800581e <UART_SetConfig+0x33e>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <UART_SetConfig+0x326>
 80057fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005802:	d006      	beq.n	8005812 <UART_SetConfig+0x332>
 8005804:	e00b      	b.n	800581e <UART_SetConfig+0x33e>
 8005806:	2300      	movs	r3, #0
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e00d      	b.n	8005828 <UART_SetConfig+0x348>
 800580c:	2302      	movs	r3, #2
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e00a      	b.n	8005828 <UART_SetConfig+0x348>
 8005812:	2304      	movs	r3, #4
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e007      	b.n	8005828 <UART_SetConfig+0x348>
 8005818:	2308      	movs	r3, #8
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e004      	b.n	8005828 <UART_SetConfig+0x348>
 800581e:	2310      	movs	r3, #16
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e001      	b.n	8005828 <UART_SetConfig+0x348>
 8005824:	2310      	movs	r3, #16
 8005826:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005830:	d15b      	bne.n	80058ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005832:	7ffb      	ldrb	r3, [r7, #31]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d828      	bhi.n	800588a <UART_SetConfig+0x3aa>
 8005838:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x360>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	0800588b 	.word	0x0800588b
 8005850:	0800587b 	.word	0x0800587b
 8005854:	0800588b 	.word	0x0800588b
 8005858:	0800588b 	.word	0x0800588b
 800585c:	0800588b 	.word	0x0800588b
 8005860:	08005883 	.word	0x08005883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005864:	f7fe f918 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8005868:	61b8      	str	r0, [r7, #24]
        break;
 800586a:	e013      	b.n	8005894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800586c:	f7fe f928 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005870:	61b8      	str	r0, [r7, #24]
        break;
 8005872:	e00f      	b.n	8005894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005874:	4b4b      	ldr	r3, [pc, #300]	@ (80059a4 <UART_SetConfig+0x4c4>)
 8005876:	61bb      	str	r3, [r7, #24]
        break;
 8005878:	e00c      	b.n	8005894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fd fffb 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 800587e:	61b8      	str	r0, [r7, #24]
        break;
 8005880:	e008      	b.n	8005894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005886:	61bb      	str	r3, [r7, #24]
        break;
 8005888:	e004      	b.n	8005894 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	77bb      	strb	r3, [r7, #30]
        break;
 8005892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d074      	beq.n	8005984 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	005a      	lsls	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d916      	bls.n	80058e4 <UART_SetConfig+0x404>
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058bc:	d212      	bcs.n	80058e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	89fb      	ldrh	r3, [r7, #14]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	89fa      	ldrh	r2, [r7, #14]
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e04f      	b.n	8005984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	77bb      	strb	r3, [r7, #30]
 80058e8:	e04c      	b.n	8005984 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d828      	bhi.n	8005942 <UART_SetConfig+0x462>
 80058f0:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <UART_SetConfig+0x418>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	08005943 	.word	0x08005943
 8005908:	08005933 	.word	0x08005933
 800590c:	08005943 	.word	0x08005943
 8005910:	08005943 	.word	0x08005943
 8005914:	08005943 	.word	0x08005943
 8005918:	0800593b 	.word	0x0800593b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fe f8bc 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8005920:	61b8      	str	r0, [r7, #24]
        break;
 8005922:	e013      	b.n	800594c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005924:	f7fe f8cc 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8005928:	61b8      	str	r0, [r7, #24]
        break;
 800592a:	e00f      	b.n	800594c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592c:	4b1d      	ldr	r3, [pc, #116]	@ (80059a4 <UART_SetConfig+0x4c4>)
 800592e:	61bb      	str	r3, [r7, #24]
        break;
 8005930:	e00c      	b.n	800594c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005932:	f7fd ff9f 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8005936:	61b8      	str	r0, [r7, #24]
        break;
 8005938:	e008      	b.n	800594c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593e:	61bb      	str	r3, [r7, #24]
        break;
 8005940:	e004      	b.n	800594c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	77bb      	strb	r3, [r7, #30]
        break;
 800594a:	bf00      	nop
    }

    if (pclk != 0U)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	085a      	lsrs	r2, r3, #1
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d909      	bls.n	8005980 <UART_SetConfig+0x4a0>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005972:	d205      	bcs.n	8005980 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e001      	b.n	8005984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005990:	7fbb      	ldrb	r3, [r7, #30]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40007c00 	.word	0x40007c00
 80059a0:	40023800 	.word	0x40023800
 80059a4:	00f42400 	.word	0x00f42400

080059a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01a      	beq.n	8005abe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aa6:	d10a      	bne.n	8005abe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	605a      	str	r2, [r3, #4]
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b098      	sub	sp, #96	@ 0x60
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005afc:	f7fb fe4c 	bl	8001798 <HAL_GetTick>
 8005b00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d12e      	bne.n	8005b6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f88c 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d021      	beq.n	8005b6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e6      	bne.n	8005b2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e062      	b.n	8005c34 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b04      	cmp	r3, #4
 8005b7a:	d149      	bne.n	8005c10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b84:	2200      	movs	r2, #0
 8005b86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f856 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03c      	beq.n	8005c10 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be8:	61fa      	str	r2, [r7, #28]
 8005bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e011      	b.n	8005c34 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3758      	adds	r7, #88	@ 0x58
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4c:	e04f      	b.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c54:	d04b      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c56:	f7fb fd9f 	bl	8001798 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d302      	bcc.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e04e      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0304 	and.w	r3, r3, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d037      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b80      	cmp	r3, #128	@ 0x80
 8005c82:	d034      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d031      	beq.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d110      	bne.n	8005cba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f838 	bl	8005d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e029      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cc8:	d111      	bne.n	8005cee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f81e 	bl	8005d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e00f      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d0a0      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b095      	sub	sp, #84	@ 0x54
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d118      	bne.n	8005dbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6979      	ldr	r1, [r7, #20]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	613b      	str	r3, [r7, #16]
   return(result);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dd2:	bf00      	nop
 8005dd4:	3754      	adds	r7, #84	@ 0x54
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fb4f 	bl	80054a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b088      	sub	sp, #32
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fb1b 	bl	800548c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e60:	b084      	sub	sp, #16
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	f107 001c 	add.w	r0, r7, #28
 8005e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d121      	bne.n	8005ebe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	4b21      	ldr	r3, [pc, #132]	@ (8005f10 <USB_CoreInit+0xb0>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d105      	bne.n	8005eb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa92 	bl	80063dc <USB_CoreReset>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	73fb      	strb	r3, [r7, #15]
 8005ebc:	e010      	b.n	8005ee0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa86 	bl	80063dc <USB_CoreReset>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ee0:	7fbb      	ldrb	r3, [r7, #30]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10b      	bne.n	8005efe <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f043 0206 	orr.w	r2, r3, #6
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f0a:	b004      	add	sp, #16
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	ffbdffbf 	.word	0xffbdffbf

08005f14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 0201 	bic.w	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d115      	bne.n	8005f84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f64:	200a      	movs	r0, #10
 8005f66:	f7fb fc23 	bl	80017b0 <HAL_Delay>
      ms += 10U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	330a      	adds	r3, #10
 8005f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa25 	bl	80063c0 <USB_GetMode>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d01e      	beq.n	8005fba <USB_SetCurrentMode+0x84>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f80:	d9f0      	bls.n	8005f64 <USB_SetCurrentMode+0x2e>
 8005f82:	e01a      	b.n	8005fba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d115      	bne.n	8005fb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f96:	200a      	movs	r0, #10
 8005f98:	f7fb fc0a 	bl	80017b0 <HAL_Delay>
      ms += 10U;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	330a      	adds	r3, #10
 8005fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa0c 	bl	80063c0 <USB_GetMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <USB_SetCurrentMode+0x84>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fb2:	d9f0      	bls.n	8005f96 <USB_SetCurrentMode+0x60>
 8005fb4:	e001      	b.n	8005fba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e005      	b.n	8005fc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fbe:	d101      	bne.n	8005fc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e009      	b.n	8006004 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3340      	adds	r3, #64	@ 0x40
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3301      	adds	r3, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b0e      	cmp	r3, #14
 8006008:	d9f2      	bls.n	8005ff0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800600a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800600e:	2b00      	cmp	r3, #0
 8006010:	d11c      	bne.n	800604c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006020:	f043 0302 	orr.w	r3, r3, #2
 8006024:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e005      	b.n	8006058 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800605e:	461a      	mov	r2, r3
 8006060:	2300      	movs	r3, #0
 8006062:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006064:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10d      	bne.n	8006088 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800606c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006074:	2100      	movs	r1, #0
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f968 	bl	800634c <USB_SetDevSpeed>
 800607c:	e008      	b.n	8006090 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800607e:	2101      	movs	r1, #1
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f963 	bl	800634c <USB_SetDevSpeed>
 8006086:	e003      	b.n	8006090 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006088:	2103      	movs	r1, #3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f95e 	bl	800634c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006090:	2110      	movs	r1, #16
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8fa 	bl	800628c <USB_FlushTxFifo>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f924 	bl	80062f0 <USB_FlushRxFifo>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b8:	461a      	mov	r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c4:	461a      	mov	r2, r3
 80060c6:	2300      	movs	r3, #0
 80060c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d0:	461a      	mov	r2, r3
 80060d2:	2300      	movs	r3, #0
 80060d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e043      	b.n	8006164 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060f2:	d118      	bne.n	8006126 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006106:	461a      	mov	r2, r3
 8006108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e013      	b.n	8006138 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e008      	b.n	8006138 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006132:	461a      	mov	r2, r3
 8006134:	2300      	movs	r3, #0
 8006136:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006156:	461a      	mov	r2, r3
 8006158:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800615c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3301      	adds	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006168:	461a      	mov	r2, r3
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4293      	cmp	r3, r2
 800616e:	d3b5      	bcc.n	80060dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e043      	b.n	80061fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800618c:	d118      	bne.n	80061c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a0:	461a      	mov	r2, r3
 80061a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e013      	b.n	80061d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b6:	461a      	mov	r2, r3
 80061b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	e008      	b.n	80061d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061cc:	461a      	mov	r2, r3
 80061ce:	2300      	movs	r3, #0
 80061d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061de:	461a      	mov	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f0:	461a      	mov	r2, r3
 80061f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	3301      	adds	r3, #1
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006202:	461a      	mov	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4293      	cmp	r3, r2
 8006208:	d3b5      	bcc.n	8006176 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800622a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800622c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <USB_DevInit+0x2b4>)
 8006246:	4313      	orrs	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800624c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f043 0208 	orr.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006260:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006264:	2b01      	cmp	r3, #1
 8006266:	d105      	bne.n	8006274 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <USB_DevInit+0x2b8>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006280:	b004      	add	sp, #16
 8006282:	4770      	bx	lr
 8006284:	803c3800 	.word	0x803c3800
 8006288:	40000004 	.word	0x40000004

0800628c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062a6:	d901      	bls.n	80062ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e01b      	b.n	80062e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	daf2      	bge.n	800629a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	019b      	lsls	r3, r3, #6
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062d0:	d901      	bls.n	80062d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e006      	b.n	80062e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d0f0      	beq.n	80062c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006308:	d901      	bls.n	800630e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e018      	b.n	8006340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	daf2      	bge.n	80062fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2210      	movs	r2, #16
 800631e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800632c:	d901      	bls.n	8006332 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e006      	b.n	8006340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b10      	cmp	r3, #16
 800633c:	d0f0      	beq.n	8006320 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800636c:	4313      	orrs	r3, r2
 800636e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006398:	f023 0303 	bic.w	r3, r3, #3
 800639c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ac:	f043 0302 	orr.w	r3, r3, #2
 80063b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0301 	and.w	r3, r3, #1
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f4:	d901      	bls.n	80063fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e01b      	b.n	8006432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	daf2      	bge.n	80063e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800641e:	d901      	bls.n	8006424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d0f0      	beq.n	8006412 <USB_CoreReset+0x36>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <__cvt>:
 800643e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006440:	ed2d 8b02 	vpush	{d8}
 8006444:	eeb0 8b40 	vmov.f64	d8, d0
 8006448:	b085      	sub	sp, #20
 800644a:	4617      	mov	r7, r2
 800644c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800644e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006450:	ee18 2a90 	vmov	r2, s17
 8006454:	f025 0520 	bic.w	r5, r5, #32
 8006458:	2a00      	cmp	r2, #0
 800645a:	bfb6      	itet	lt
 800645c:	222d      	movlt	r2, #45	@ 0x2d
 800645e:	2200      	movge	r2, #0
 8006460:	eeb1 8b40 	vneglt.f64	d8, d0
 8006464:	2d46      	cmp	r5, #70	@ 0x46
 8006466:	460c      	mov	r4, r1
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	d004      	beq.n	8006476 <__cvt+0x38>
 800646c:	2d45      	cmp	r5, #69	@ 0x45
 800646e:	d100      	bne.n	8006472 <__cvt+0x34>
 8006470:	3401      	adds	r4, #1
 8006472:	2102      	movs	r1, #2
 8006474:	e000      	b.n	8006478 <__cvt+0x3a>
 8006476:	2103      	movs	r1, #3
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	ab02      	add	r3, sp, #8
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4622      	mov	r2, r4
 8006482:	4633      	mov	r3, r6
 8006484:	eeb0 0b48 	vmov.f64	d0, d8
 8006488:	f000 fdb6 	bl	8006ff8 <_dtoa_r>
 800648c:	2d47      	cmp	r5, #71	@ 0x47
 800648e:	d114      	bne.n	80064ba <__cvt+0x7c>
 8006490:	07fb      	lsls	r3, r7, #31
 8006492:	d50a      	bpl.n	80064aa <__cvt+0x6c>
 8006494:	1902      	adds	r2, r0, r4
 8006496:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800649a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800649e:	bf08      	it	eq
 80064a0:	9203      	streq	r2, [sp, #12]
 80064a2:	2130      	movs	r1, #48	@ 0x30
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d319      	bcc.n	80064de <__cvt+0xa0>
 80064aa:	9b03      	ldr	r3, [sp, #12]
 80064ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ae:	1a1b      	subs	r3, r3, r0
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	b005      	add	sp, #20
 80064b4:	ecbd 8b02 	vpop	{d8}
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	2d46      	cmp	r5, #70	@ 0x46
 80064bc:	eb00 0204 	add.w	r2, r0, r4
 80064c0:	d1e9      	bne.n	8006496 <__cvt+0x58>
 80064c2:	7803      	ldrb	r3, [r0, #0]
 80064c4:	2b30      	cmp	r3, #48	@ 0x30
 80064c6:	d107      	bne.n	80064d8 <__cvt+0x9a>
 80064c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	bf1c      	itt	ne
 80064d2:	f1c4 0401 	rsbne	r4, r4, #1
 80064d6:	6034      	strne	r4, [r6, #0]
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	441a      	add	r2, r3
 80064dc:	e7db      	b.n	8006496 <__cvt+0x58>
 80064de:	1c5c      	adds	r4, r3, #1
 80064e0:	9403      	str	r4, [sp, #12]
 80064e2:	7019      	strb	r1, [r3, #0]
 80064e4:	e7de      	b.n	80064a4 <__cvt+0x66>

080064e6 <__exponent>:
 80064e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064e8:	2900      	cmp	r1, #0
 80064ea:	bfba      	itte	lt
 80064ec:	4249      	neglt	r1, r1
 80064ee:	232d      	movlt	r3, #45	@ 0x2d
 80064f0:	232b      	movge	r3, #43	@ 0x2b
 80064f2:	2909      	cmp	r1, #9
 80064f4:	7002      	strb	r2, [r0, #0]
 80064f6:	7043      	strb	r3, [r0, #1]
 80064f8:	dd29      	ble.n	800654e <__exponent+0x68>
 80064fa:	f10d 0307 	add.w	r3, sp, #7
 80064fe:	461d      	mov	r5, r3
 8006500:	270a      	movs	r7, #10
 8006502:	461a      	mov	r2, r3
 8006504:	fbb1 f6f7 	udiv	r6, r1, r7
 8006508:	fb07 1416 	mls	r4, r7, r6, r1
 800650c:	3430      	adds	r4, #48	@ 0x30
 800650e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006512:	460c      	mov	r4, r1
 8006514:	2c63      	cmp	r4, #99	@ 0x63
 8006516:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800651a:	4631      	mov	r1, r6
 800651c:	dcf1      	bgt.n	8006502 <__exponent+0x1c>
 800651e:	3130      	adds	r1, #48	@ 0x30
 8006520:	1e94      	subs	r4, r2, #2
 8006522:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006526:	1c41      	adds	r1, r0, #1
 8006528:	4623      	mov	r3, r4
 800652a:	42ab      	cmp	r3, r5
 800652c:	d30a      	bcc.n	8006544 <__exponent+0x5e>
 800652e:	f10d 0309 	add.w	r3, sp, #9
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	42ac      	cmp	r4, r5
 8006536:	bf88      	it	hi
 8006538:	2300      	movhi	r3, #0
 800653a:	3302      	adds	r3, #2
 800653c:	4403      	add	r3, r0
 800653e:	1a18      	subs	r0, r3, r0
 8006540:	b003      	add	sp, #12
 8006542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006544:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006548:	f801 6f01 	strb.w	r6, [r1, #1]!
 800654c:	e7ed      	b.n	800652a <__exponent+0x44>
 800654e:	2330      	movs	r3, #48	@ 0x30
 8006550:	3130      	adds	r1, #48	@ 0x30
 8006552:	7083      	strb	r3, [r0, #2]
 8006554:	70c1      	strb	r1, [r0, #3]
 8006556:	1d03      	adds	r3, r0, #4
 8006558:	e7f1      	b.n	800653e <__exponent+0x58>
 800655a:	0000      	movs	r0, r0
 800655c:	0000      	movs	r0, r0
	...

08006560 <_printf_float>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b08d      	sub	sp, #52	@ 0x34
 8006566:	460c      	mov	r4, r1
 8006568:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800656c:	4616      	mov	r6, r2
 800656e:	461f      	mov	r7, r3
 8006570:	4605      	mov	r5, r0
 8006572:	f000 fc87 	bl	8006e84 <_localeconv_r>
 8006576:	f8d0 b000 	ldr.w	fp, [r0]
 800657a:	4658      	mov	r0, fp
 800657c:	f7f9 feb0 	bl	80002e0 <strlen>
 8006580:	2300      	movs	r3, #0
 8006582:	930a      	str	r3, [sp, #40]	@ 0x28
 8006584:	f8d8 3000 	ldr.w	r3, [r8]
 8006588:	f894 9018 	ldrb.w	r9, [r4, #24]
 800658c:	6822      	ldr	r2, [r4, #0]
 800658e:	9005      	str	r0, [sp, #20]
 8006590:	3307      	adds	r3, #7
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	f103 0108 	add.w	r1, r3, #8
 800659a:	f8c8 1000 	str.w	r1, [r8]
 800659e:	ed93 0b00 	vldr	d0, [r3]
 80065a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006800 <_printf_float+0x2a0>
 80065a6:	eeb0 7bc0 	vabs.f64	d7, d0
 80065aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80065ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80065b6:	dd24      	ble.n	8006602 <_printf_float+0xa2>
 80065b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80065bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c0:	d502      	bpl.n	80065c8 <_printf_float+0x68>
 80065c2:	232d      	movs	r3, #45	@ 0x2d
 80065c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c8:	498f      	ldr	r1, [pc, #572]	@ (8006808 <_printf_float+0x2a8>)
 80065ca:	4b90      	ldr	r3, [pc, #576]	@ (800680c <_printf_float+0x2ac>)
 80065cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80065d0:	bf94      	ite	ls
 80065d2:	4688      	movls	r8, r1
 80065d4:	4698      	movhi	r8, r3
 80065d6:	f022 0204 	bic.w	r2, r2, #4
 80065da:	2303      	movs	r3, #3
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	6022      	str	r2, [r4, #0]
 80065e0:	f04f 0a00 	mov.w	sl, #0
 80065e4:	9700      	str	r7, [sp, #0]
 80065e6:	4633      	mov	r3, r6
 80065e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065ea:	4621      	mov	r1, r4
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f9d1 	bl	8006994 <_printf_common>
 80065f2:	3001      	adds	r0, #1
 80065f4:	f040 8089 	bne.w	800670a <_printf_float+0x1aa>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065fc:	b00d      	add	sp, #52	@ 0x34
 80065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006602:	eeb4 0b40 	vcmp.f64	d0, d0
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	d709      	bvc.n	8006620 <_printf_float+0xc0>
 800660c:	ee10 3a90 	vmov	r3, s1
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfbc      	itt	lt
 8006614:	232d      	movlt	r3, #45	@ 0x2d
 8006616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800661a:	497d      	ldr	r1, [pc, #500]	@ (8006810 <_printf_float+0x2b0>)
 800661c:	4b7d      	ldr	r3, [pc, #500]	@ (8006814 <_printf_float+0x2b4>)
 800661e:	e7d5      	b.n	80065cc <_printf_float+0x6c>
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006628:	d139      	bne.n	800669e <_printf_float+0x13e>
 800662a:	2306      	movs	r3, #6
 800662c:	6063      	str	r3, [r4, #4]
 800662e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006632:	2300      	movs	r3, #0
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	9303      	str	r3, [sp, #12]
 8006638:	ab0a      	add	r3, sp, #40	@ 0x28
 800663a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800663e:	ab09      	add	r3, sp, #36	@ 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6861      	ldr	r1, [r4, #4]
 8006644:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006648:	4628      	mov	r0, r5
 800664a:	f7ff fef8 	bl	800643e <__cvt>
 800664e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006654:	4680      	mov	r8, r0
 8006656:	d129      	bne.n	80066ac <_printf_float+0x14c>
 8006658:	1cc8      	adds	r0, r1, #3
 800665a:	db02      	blt.n	8006662 <_printf_float+0x102>
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	4299      	cmp	r1, r3
 8006660:	dd41      	ble.n	80066e6 <_printf_float+0x186>
 8006662:	f1a9 0902 	sub.w	r9, r9, #2
 8006666:	fa5f f989 	uxtb.w	r9, r9
 800666a:	3901      	subs	r1, #1
 800666c:	464a      	mov	r2, r9
 800666e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006672:	9109      	str	r1, [sp, #36]	@ 0x24
 8006674:	f7ff ff37 	bl	80064e6 <__exponent>
 8006678:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800667a:	1813      	adds	r3, r2, r0
 800667c:	2a01      	cmp	r2, #1
 800667e:	4682      	mov	sl, r0
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	dc02      	bgt.n	800668a <_printf_float+0x12a>
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	07d2      	lsls	r2, r2, #31
 8006688:	d501      	bpl.n	800668e <_printf_float+0x12e>
 800668a:	3301      	adds	r3, #1
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0a6      	beq.n	80065e4 <_printf_float+0x84>
 8006696:	232d      	movs	r3, #45	@ 0x2d
 8006698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800669c:	e7a2      	b.n	80065e4 <_printf_float+0x84>
 800669e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80066a2:	d1c4      	bne.n	800662e <_printf_float+0xce>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1c2      	bne.n	800662e <_printf_float+0xce>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e7bf      	b.n	800662c <_printf_float+0xcc>
 80066ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80066b0:	d9db      	bls.n	800666a <_printf_float+0x10a>
 80066b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80066b6:	d118      	bne.n	80066ea <_printf_float+0x18a>
 80066b8:	2900      	cmp	r1, #0
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	dd0b      	ble.n	80066d6 <_printf_float+0x176>
 80066be:	6121      	str	r1, [r4, #16]
 80066c0:	b913      	cbnz	r3, 80066c8 <_printf_float+0x168>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	07d0      	lsls	r0, r2, #31
 80066c6:	d502      	bpl.n	80066ce <_printf_float+0x16e>
 80066c8:	3301      	adds	r3, #1
 80066ca:	440b      	add	r3, r1
 80066cc:	6123      	str	r3, [r4, #16]
 80066ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066d0:	f04f 0a00 	mov.w	sl, #0
 80066d4:	e7db      	b.n	800668e <_printf_float+0x12e>
 80066d6:	b913      	cbnz	r3, 80066de <_printf_float+0x17e>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d2      	lsls	r2, r2, #31
 80066dc:	d501      	bpl.n	80066e2 <_printf_float+0x182>
 80066de:	3302      	adds	r3, #2
 80066e0:	e7f4      	b.n	80066cc <_printf_float+0x16c>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f2      	b.n	80066cc <_printf_float+0x16c>
 80066e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80066ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ec:	4299      	cmp	r1, r3
 80066ee:	db05      	blt.n	80066fc <_printf_float+0x19c>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	6121      	str	r1, [r4, #16]
 80066f4:	07d8      	lsls	r0, r3, #31
 80066f6:	d5ea      	bpl.n	80066ce <_printf_float+0x16e>
 80066f8:	1c4b      	adds	r3, r1, #1
 80066fa:	e7e7      	b.n	80066cc <_printf_float+0x16c>
 80066fc:	2900      	cmp	r1, #0
 80066fe:	bfd4      	ite	le
 8006700:	f1c1 0202 	rsble	r2, r1, #2
 8006704:	2201      	movgt	r2, #1
 8006706:	4413      	add	r3, r2
 8006708:	e7e0      	b.n	80066cc <_printf_float+0x16c>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	055a      	lsls	r2, r3, #21
 800670e:	d407      	bmi.n	8006720 <_printf_float+0x1c0>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	4642      	mov	r2, r8
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d12a      	bne.n	8006774 <_printf_float+0x214>
 800671e:	e76b      	b.n	80065f8 <_printf_float+0x98>
 8006720:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006724:	f240 80e0 	bls.w	80068e8 <_printf_float+0x388>
 8006728:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800672c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006734:	d133      	bne.n	800679e <_printf_float+0x23e>
 8006736:	4a38      	ldr	r2, [pc, #224]	@ (8006818 <_printf_float+0x2b8>)
 8006738:	2301      	movs	r3, #1
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f af59 	beq.w	80065f8 <_printf_float+0x98>
 8006746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800674a:	4543      	cmp	r3, r8
 800674c:	db02      	blt.n	8006754 <_printf_float+0x1f4>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	07d8      	lsls	r0, r3, #31
 8006752:	d50f      	bpl.n	8006774 <_printf_float+0x214>
 8006754:	9b05      	ldr	r3, [sp, #20]
 8006756:	465a      	mov	r2, fp
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af4a 	beq.w	80065f8 <_printf_float+0x98>
 8006764:	f04f 0900 	mov.w	r9, #0
 8006768:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800676c:	f104 0a1a 	add.w	sl, r4, #26
 8006770:	45c8      	cmp	r8, r9
 8006772:	dc09      	bgt.n	8006788 <_printf_float+0x228>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	079b      	lsls	r3, r3, #30
 8006778:	f100 8107 	bmi.w	800698a <_printf_float+0x42a>
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006780:	4298      	cmp	r0, r3
 8006782:	bfb8      	it	lt
 8006784:	4618      	movlt	r0, r3
 8006786:	e739      	b.n	80065fc <_printf_float+0x9c>
 8006788:	2301      	movs	r3, #1
 800678a:	4652      	mov	r2, sl
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	47b8      	blx	r7
 8006792:	3001      	adds	r0, #1
 8006794:	f43f af30 	beq.w	80065f8 <_printf_float+0x98>
 8006798:	f109 0901 	add.w	r9, r9, #1
 800679c:	e7e8      	b.n	8006770 <_printf_float+0x210>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dc3b      	bgt.n	800681c <_printf_float+0x2bc>
 80067a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006818 <_printf_float+0x2b8>)
 80067a6:	2301      	movs	r3, #1
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af22 	beq.w	80065f8 <_printf_float+0x98>
 80067b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067b8:	ea59 0303 	orrs.w	r3, r9, r3
 80067bc:	d102      	bne.n	80067c4 <_printf_float+0x264>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07d9      	lsls	r1, r3, #31
 80067c2:	d5d7      	bpl.n	8006774 <_printf_float+0x214>
 80067c4:	9b05      	ldr	r3, [sp, #20]
 80067c6:	465a      	mov	r2, fp
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af12 	beq.w	80065f8 <_printf_float+0x98>
 80067d4:	f04f 0a00 	mov.w	sl, #0
 80067d8:	f104 0b1a 	add.w	fp, r4, #26
 80067dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067de:	425b      	negs	r3, r3
 80067e0:	4553      	cmp	r3, sl
 80067e2:	dc01      	bgt.n	80067e8 <_printf_float+0x288>
 80067e4:	464b      	mov	r3, r9
 80067e6:	e794      	b.n	8006712 <_printf_float+0x1b2>
 80067e8:	2301      	movs	r3, #1
 80067ea:	465a      	mov	r2, fp
 80067ec:	4631      	mov	r1, r6
 80067ee:	4628      	mov	r0, r5
 80067f0:	47b8      	blx	r7
 80067f2:	3001      	adds	r0, #1
 80067f4:	f43f af00 	beq.w	80065f8 <_printf_float+0x98>
 80067f8:	f10a 0a01 	add.w	sl, sl, #1
 80067fc:	e7ee      	b.n	80067dc <_printf_float+0x27c>
 80067fe:	bf00      	nop
 8006800:	ffffffff 	.word	0xffffffff
 8006804:	7fefffff 	.word	0x7fefffff
 8006808:	08009048 	.word	0x08009048
 800680c:	0800904c 	.word	0x0800904c
 8006810:	08009050 	.word	0x08009050
 8006814:	08009054 	.word	0x08009054
 8006818:	08009058 	.word	0x08009058
 800681c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800681e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006822:	4553      	cmp	r3, sl
 8006824:	bfa8      	it	ge
 8006826:	4653      	movge	r3, sl
 8006828:	2b00      	cmp	r3, #0
 800682a:	4699      	mov	r9, r3
 800682c:	dc37      	bgt.n	800689e <_printf_float+0x33e>
 800682e:	2300      	movs	r3, #0
 8006830:	9307      	str	r3, [sp, #28]
 8006832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006836:	f104 021a 	add.w	r2, r4, #26
 800683a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800683c:	9907      	ldr	r1, [sp, #28]
 800683e:	9306      	str	r3, [sp, #24]
 8006840:	eba3 0309 	sub.w	r3, r3, r9
 8006844:	428b      	cmp	r3, r1
 8006846:	dc31      	bgt.n	80068ac <_printf_float+0x34c>
 8006848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684a:	459a      	cmp	sl, r3
 800684c:	dc3b      	bgt.n	80068c6 <_printf_float+0x366>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07da      	lsls	r2, r3, #31
 8006852:	d438      	bmi.n	80068c6 <_printf_float+0x366>
 8006854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006856:	ebaa 0903 	sub.w	r9, sl, r3
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	ebaa 0303 	sub.w	r3, sl, r3
 8006860:	4599      	cmp	r9, r3
 8006862:	bfa8      	it	ge
 8006864:	4699      	movge	r9, r3
 8006866:	f1b9 0f00 	cmp.w	r9, #0
 800686a:	dc34      	bgt.n	80068d6 <_printf_float+0x376>
 800686c:	f04f 0800 	mov.w	r8, #0
 8006870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006874:	f104 0b1a 	add.w	fp, r4, #26
 8006878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687a:	ebaa 0303 	sub.w	r3, sl, r3
 800687e:	eba3 0309 	sub.w	r3, r3, r9
 8006882:	4543      	cmp	r3, r8
 8006884:	f77f af76 	ble.w	8006774 <_printf_float+0x214>
 8006888:	2301      	movs	r3, #1
 800688a:	465a      	mov	r2, fp
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f aeb0 	beq.w	80065f8 <_printf_float+0x98>
 8006898:	f108 0801 	add.w	r8, r8, #1
 800689c:	e7ec      	b.n	8006878 <_printf_float+0x318>
 800689e:	4642      	mov	r2, r8
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	d1c1      	bne.n	800682e <_printf_float+0x2ce>
 80068aa:	e6a5      	b.n	80065f8 <_printf_float+0x98>
 80068ac:	2301      	movs	r3, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	9206      	str	r2, [sp, #24]
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f ae9e 	beq.w	80065f8 <_printf_float+0x98>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	9a06      	ldr	r2, [sp, #24]
 80068c0:	3301      	adds	r3, #1
 80068c2:	9307      	str	r3, [sp, #28]
 80068c4:	e7b9      	b.n	800683a <_printf_float+0x2da>
 80068c6:	9b05      	ldr	r3, [sp, #20]
 80068c8:	465a      	mov	r2, fp
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1bf      	bne.n	8006854 <_printf_float+0x2f4>
 80068d4:	e690      	b.n	80065f8 <_printf_float+0x98>
 80068d6:	9a06      	ldr	r2, [sp, #24]
 80068d8:	464b      	mov	r3, r9
 80068da:	4442      	add	r2, r8
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d1c2      	bne.n	800686c <_printf_float+0x30c>
 80068e6:	e687      	b.n	80065f8 <_printf_float+0x98>
 80068e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80068ec:	f1b9 0f01 	cmp.w	r9, #1
 80068f0:	dc01      	bgt.n	80068f6 <_printf_float+0x396>
 80068f2:	07db      	lsls	r3, r3, #31
 80068f4:	d536      	bpl.n	8006964 <_printf_float+0x404>
 80068f6:	2301      	movs	r3, #1
 80068f8:	4642      	mov	r2, r8
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b8      	blx	r7
 8006900:	3001      	adds	r0, #1
 8006902:	f43f ae79 	beq.w	80065f8 <_printf_float+0x98>
 8006906:	9b05      	ldr	r3, [sp, #20]
 8006908:	465a      	mov	r2, fp
 800690a:	4631      	mov	r1, r6
 800690c:	4628      	mov	r0, r5
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f ae71 	beq.w	80065f8 <_printf_float+0x98>
 8006916:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800691a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8006926:	d018      	beq.n	800695a <_printf_float+0x3fa>
 8006928:	464b      	mov	r3, r9
 800692a:	f108 0201 	add.w	r2, r8, #1
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d10c      	bne.n	8006952 <_printf_float+0x3f2>
 8006938:	e65e      	b.n	80065f8 <_printf_float+0x98>
 800693a:	2301      	movs	r3, #1
 800693c:	465a      	mov	r2, fp
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae57 	beq.w	80065f8 <_printf_float+0x98>
 800694a:	f108 0801 	add.w	r8, r8, #1
 800694e:	45c8      	cmp	r8, r9
 8006950:	dbf3      	blt.n	800693a <_printf_float+0x3da>
 8006952:	4653      	mov	r3, sl
 8006954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006958:	e6dc      	b.n	8006714 <_printf_float+0x1b4>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	f104 0b1a 	add.w	fp, r4, #26
 8006962:	e7f4      	b.n	800694e <_printf_float+0x3ee>
 8006964:	2301      	movs	r3, #1
 8006966:	4642      	mov	r2, r8
 8006968:	e7e1      	b.n	800692e <_printf_float+0x3ce>
 800696a:	2301      	movs	r3, #1
 800696c:	464a      	mov	r2, r9
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae3f 	beq.w	80065f8 <_printf_float+0x98>
 800697a:	f108 0801 	add.w	r8, r8, #1
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006982:	1a5b      	subs	r3, r3, r1
 8006984:	4543      	cmp	r3, r8
 8006986:	dcf0      	bgt.n	800696a <_printf_float+0x40a>
 8006988:	e6f8      	b.n	800677c <_printf_float+0x21c>
 800698a:	f04f 0800 	mov.w	r8, #0
 800698e:	f104 0919 	add.w	r9, r4, #25
 8006992:	e7f4      	b.n	800697e <_printf_float+0x41e>

08006994 <_printf_common>:
 8006994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	4616      	mov	r6, r2
 800699a:	4698      	mov	r8, r3
 800699c:	688a      	ldr	r2, [r1, #8]
 800699e:	690b      	ldr	r3, [r1, #16]
 80069a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069a4:	4293      	cmp	r3, r2
 80069a6:	bfb8      	it	lt
 80069a8:	4613      	movlt	r3, r2
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069b0:	4607      	mov	r7, r0
 80069b2:	460c      	mov	r4, r1
 80069b4:	b10a      	cbz	r2, 80069ba <_printf_common+0x26>
 80069b6:	3301      	adds	r3, #1
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	0699      	lsls	r1, r3, #26
 80069be:	bf42      	ittt	mi
 80069c0:	6833      	ldrmi	r3, [r6, #0]
 80069c2:	3302      	addmi	r3, #2
 80069c4:	6033      	strmi	r3, [r6, #0]
 80069c6:	6825      	ldr	r5, [r4, #0]
 80069c8:	f015 0506 	ands.w	r5, r5, #6
 80069cc:	d106      	bne.n	80069dc <_printf_common+0x48>
 80069ce:	f104 0a19 	add.w	sl, r4, #25
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	6832      	ldr	r2, [r6, #0]
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	42ab      	cmp	r3, r5
 80069da:	dc26      	bgt.n	8006a2a <_printf_common+0x96>
 80069dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069e0:	6822      	ldr	r2, [r4, #0]
 80069e2:	3b00      	subs	r3, #0
 80069e4:	bf18      	it	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	0692      	lsls	r2, r2, #26
 80069ea:	d42b      	bmi.n	8006a44 <_printf_common+0xb0>
 80069ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069f0:	4641      	mov	r1, r8
 80069f2:	4638      	mov	r0, r7
 80069f4:	47c8      	blx	r9
 80069f6:	3001      	adds	r0, #1
 80069f8:	d01e      	beq.n	8006a38 <_printf_common+0xa4>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	f003 0306 	and.w	r3, r3, #6
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	bf02      	ittt	eq
 8006a06:	68e5      	ldreq	r5, [r4, #12]
 8006a08:	6833      	ldreq	r3, [r6, #0]
 8006a0a:	1aed      	subeq	r5, r5, r3
 8006a0c:	68a3      	ldr	r3, [r4, #8]
 8006a0e:	bf0c      	ite	eq
 8006a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a14:	2500      	movne	r5, #0
 8006a16:	4293      	cmp	r3, r2
 8006a18:	bfc4      	itt	gt
 8006a1a:	1a9b      	subgt	r3, r3, r2
 8006a1c:	18ed      	addgt	r5, r5, r3
 8006a1e:	2600      	movs	r6, #0
 8006a20:	341a      	adds	r4, #26
 8006a22:	42b5      	cmp	r5, r6
 8006a24:	d11a      	bne.n	8006a5c <_printf_common+0xc8>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e008      	b.n	8006a3c <_printf_common+0xa8>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4652      	mov	r2, sl
 8006a2e:	4641      	mov	r1, r8
 8006a30:	4638      	mov	r0, r7
 8006a32:	47c8      	blx	r9
 8006a34:	3001      	adds	r0, #1
 8006a36:	d103      	bne.n	8006a40 <_printf_common+0xac>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a40:	3501      	adds	r5, #1
 8006a42:	e7c6      	b.n	80069d2 <_printf_common+0x3e>
 8006a44:	18e1      	adds	r1, r4, r3
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	2030      	movs	r0, #48	@ 0x30
 8006a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a4e:	4422      	add	r2, r4
 8006a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a58:	3302      	adds	r3, #2
 8006a5a:	e7c7      	b.n	80069ec <_printf_common+0x58>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4622      	mov	r2, r4
 8006a60:	4641      	mov	r1, r8
 8006a62:	4638      	mov	r0, r7
 8006a64:	47c8      	blx	r9
 8006a66:	3001      	adds	r0, #1
 8006a68:	d0e6      	beq.n	8006a38 <_printf_common+0xa4>
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7d9      	b.n	8006a22 <_printf_common+0x8e>
	...

08006a70 <_printf_i>:
 8006a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	7e0f      	ldrb	r7, [r1, #24]
 8006a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a78:	2f78      	cmp	r7, #120	@ 0x78
 8006a7a:	4691      	mov	r9, r2
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	469a      	mov	sl, r3
 8006a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a86:	d807      	bhi.n	8006a98 <_printf_i+0x28>
 8006a88:	2f62      	cmp	r7, #98	@ 0x62
 8006a8a:	d80a      	bhi.n	8006aa2 <_printf_i+0x32>
 8006a8c:	2f00      	cmp	r7, #0
 8006a8e:	f000 80d2 	beq.w	8006c36 <_printf_i+0x1c6>
 8006a92:	2f58      	cmp	r7, #88	@ 0x58
 8006a94:	f000 80b9 	beq.w	8006c0a <_printf_i+0x19a>
 8006a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006aa0:	e03a      	b.n	8006b18 <_printf_i+0xa8>
 8006aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aa6:	2b15      	cmp	r3, #21
 8006aa8:	d8f6      	bhi.n	8006a98 <_printf_i+0x28>
 8006aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8006ab0 <_printf_i+0x40>)
 8006aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab0:	08006b09 	.word	0x08006b09
 8006ab4:	08006b1d 	.word	0x08006b1d
 8006ab8:	08006a99 	.word	0x08006a99
 8006abc:	08006a99 	.word	0x08006a99
 8006ac0:	08006a99 	.word	0x08006a99
 8006ac4:	08006a99 	.word	0x08006a99
 8006ac8:	08006b1d 	.word	0x08006b1d
 8006acc:	08006a99 	.word	0x08006a99
 8006ad0:	08006a99 	.word	0x08006a99
 8006ad4:	08006a99 	.word	0x08006a99
 8006ad8:	08006a99 	.word	0x08006a99
 8006adc:	08006c1d 	.word	0x08006c1d
 8006ae0:	08006b47 	.word	0x08006b47
 8006ae4:	08006bd7 	.word	0x08006bd7
 8006ae8:	08006a99 	.word	0x08006a99
 8006aec:	08006a99 	.word	0x08006a99
 8006af0:	08006c3f 	.word	0x08006c3f
 8006af4:	08006a99 	.word	0x08006a99
 8006af8:	08006b47 	.word	0x08006b47
 8006afc:	08006a99 	.word	0x08006a99
 8006b00:	08006a99 	.word	0x08006a99
 8006b04:	08006bdf 	.word	0x08006bdf
 8006b08:	6833      	ldr	r3, [r6, #0]
 8006b0a:	1d1a      	adds	r2, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6032      	str	r2, [r6, #0]
 8006b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e09d      	b.n	8006c58 <_printf_i+0x1e8>
 8006b1c:	6833      	ldr	r3, [r6, #0]
 8006b1e:	6820      	ldr	r0, [r4, #0]
 8006b20:	1d19      	adds	r1, r3, #4
 8006b22:	6031      	str	r1, [r6, #0]
 8006b24:	0606      	lsls	r6, r0, #24
 8006b26:	d501      	bpl.n	8006b2c <_printf_i+0xbc>
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	e003      	b.n	8006b34 <_printf_i+0xc4>
 8006b2c:	0645      	lsls	r5, r0, #25
 8006b2e:	d5fb      	bpl.n	8006b28 <_printf_i+0xb8>
 8006b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	da03      	bge.n	8006b40 <_printf_i+0xd0>
 8006b38:	232d      	movs	r3, #45	@ 0x2d
 8006b3a:	426d      	negs	r5, r5
 8006b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b40:	4859      	ldr	r0, [pc, #356]	@ (8006ca8 <_printf_i+0x238>)
 8006b42:	230a      	movs	r3, #10
 8006b44:	e011      	b.n	8006b6a <_printf_i+0xfa>
 8006b46:	6821      	ldr	r1, [r4, #0]
 8006b48:	6833      	ldr	r3, [r6, #0]
 8006b4a:	0608      	lsls	r0, r1, #24
 8006b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b50:	d402      	bmi.n	8006b58 <_printf_i+0xe8>
 8006b52:	0649      	lsls	r1, r1, #25
 8006b54:	bf48      	it	mi
 8006b56:	b2ad      	uxthmi	r5, r5
 8006b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b5a:	4853      	ldr	r0, [pc, #332]	@ (8006ca8 <_printf_i+0x238>)
 8006b5c:	6033      	str	r3, [r6, #0]
 8006b5e:	bf14      	ite	ne
 8006b60:	230a      	movne	r3, #10
 8006b62:	2308      	moveq	r3, #8
 8006b64:	2100      	movs	r1, #0
 8006b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b6a:	6866      	ldr	r6, [r4, #4]
 8006b6c:	60a6      	str	r6, [r4, #8]
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	bfa2      	ittt	ge
 8006b72:	6821      	ldrge	r1, [r4, #0]
 8006b74:	f021 0104 	bicge.w	r1, r1, #4
 8006b78:	6021      	strge	r1, [r4, #0]
 8006b7a:	b90d      	cbnz	r5, 8006b80 <_printf_i+0x110>
 8006b7c:	2e00      	cmp	r6, #0
 8006b7e:	d04b      	beq.n	8006c18 <_printf_i+0x1a8>
 8006b80:	4616      	mov	r6, r2
 8006b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b86:	fb03 5711 	mls	r7, r3, r1, r5
 8006b8a:	5dc7      	ldrb	r7, [r0, r7]
 8006b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b90:	462f      	mov	r7, r5
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	460d      	mov	r5, r1
 8006b96:	d9f4      	bls.n	8006b82 <_printf_i+0x112>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d10b      	bne.n	8006bb4 <_printf_i+0x144>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	07df      	lsls	r7, r3, #31
 8006ba0:	d508      	bpl.n	8006bb4 <_printf_i+0x144>
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	6861      	ldr	r1, [r4, #4]
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	bfde      	ittt	le
 8006baa:	2330      	movle	r3, #48	@ 0x30
 8006bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bb0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006bb4:	1b92      	subs	r2, r2, r6
 8006bb6:	6122      	str	r2, [r4, #16]
 8006bb8:	f8cd a000 	str.w	sl, [sp]
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	aa03      	add	r2, sp, #12
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fee6 	bl	8006994 <_printf_common>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d14a      	bne.n	8006c62 <_printf_i+0x1f2>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd0:	b004      	add	sp, #16
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f043 0320 	orr.w	r3, r3, #32
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	4833      	ldr	r0, [pc, #204]	@ (8006cac <_printf_i+0x23c>)
 8006be0:	2778      	movs	r7, #120	@ 0x78
 8006be2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	6831      	ldr	r1, [r6, #0]
 8006bea:	061f      	lsls	r7, r3, #24
 8006bec:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bf0:	d402      	bmi.n	8006bf8 <_printf_i+0x188>
 8006bf2:	065f      	lsls	r7, r3, #25
 8006bf4:	bf48      	it	mi
 8006bf6:	b2ad      	uxthmi	r5, r5
 8006bf8:	6031      	str	r1, [r6, #0]
 8006bfa:	07d9      	lsls	r1, r3, #31
 8006bfc:	bf44      	itt	mi
 8006bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8006c02:	6023      	strmi	r3, [r4, #0]
 8006c04:	b11d      	cbz	r5, 8006c0e <_printf_i+0x19e>
 8006c06:	2310      	movs	r3, #16
 8006c08:	e7ac      	b.n	8006b64 <_printf_i+0xf4>
 8006c0a:	4827      	ldr	r0, [pc, #156]	@ (8006ca8 <_printf_i+0x238>)
 8006c0c:	e7e9      	b.n	8006be2 <_printf_i+0x172>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	f023 0320 	bic.w	r3, r3, #32
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	e7f6      	b.n	8006c06 <_printf_i+0x196>
 8006c18:	4616      	mov	r6, r2
 8006c1a:	e7bd      	b.n	8006b98 <_printf_i+0x128>
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	6825      	ldr	r5, [r4, #0]
 8006c20:	6961      	ldr	r1, [r4, #20]
 8006c22:	1d18      	adds	r0, r3, #4
 8006c24:	6030      	str	r0, [r6, #0]
 8006c26:	062e      	lsls	r6, r5, #24
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	d501      	bpl.n	8006c30 <_printf_i+0x1c0>
 8006c2c:	6019      	str	r1, [r3, #0]
 8006c2e:	e002      	b.n	8006c36 <_printf_i+0x1c6>
 8006c30:	0668      	lsls	r0, r5, #25
 8006c32:	d5fb      	bpl.n	8006c2c <_printf_i+0x1bc>
 8006c34:	8019      	strh	r1, [r3, #0]
 8006c36:	2300      	movs	r3, #0
 8006c38:	6123      	str	r3, [r4, #16]
 8006c3a:	4616      	mov	r6, r2
 8006c3c:	e7bc      	b.n	8006bb8 <_printf_i+0x148>
 8006c3e:	6833      	ldr	r3, [r6, #0]
 8006c40:	1d1a      	adds	r2, r3, #4
 8006c42:	6032      	str	r2, [r6, #0]
 8006c44:	681e      	ldr	r6, [r3, #0]
 8006c46:	6862      	ldr	r2, [r4, #4]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7f9 faf8 	bl	8000240 <memchr>
 8006c50:	b108      	cbz	r0, 8006c56 <_printf_i+0x1e6>
 8006c52:	1b80      	subs	r0, r0, r6
 8006c54:	6060      	str	r0, [r4, #4]
 8006c56:	6863      	ldr	r3, [r4, #4]
 8006c58:	6123      	str	r3, [r4, #16]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c60:	e7aa      	b.n	8006bb8 <_printf_i+0x148>
 8006c62:	6923      	ldr	r3, [r4, #16]
 8006c64:	4632      	mov	r2, r6
 8006c66:	4649      	mov	r1, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	47d0      	blx	sl
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d0ad      	beq.n	8006bcc <_printf_i+0x15c>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	079b      	lsls	r3, r3, #30
 8006c74:	d413      	bmi.n	8006c9e <_printf_i+0x22e>
 8006c76:	68e0      	ldr	r0, [r4, #12]
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	4298      	cmp	r0, r3
 8006c7c:	bfb8      	it	lt
 8006c7e:	4618      	movlt	r0, r3
 8006c80:	e7a6      	b.n	8006bd0 <_printf_i+0x160>
 8006c82:	2301      	movs	r3, #1
 8006c84:	4632      	mov	r2, r6
 8006c86:	4649      	mov	r1, r9
 8006c88:	4640      	mov	r0, r8
 8006c8a:	47d0      	blx	sl
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d09d      	beq.n	8006bcc <_printf_i+0x15c>
 8006c90:	3501      	adds	r5, #1
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	9903      	ldr	r1, [sp, #12]
 8006c96:	1a5b      	subs	r3, r3, r1
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	dcf2      	bgt.n	8006c82 <_printf_i+0x212>
 8006c9c:	e7eb      	b.n	8006c76 <_printf_i+0x206>
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	f104 0619 	add.w	r6, r4, #25
 8006ca4:	e7f5      	b.n	8006c92 <_printf_i+0x222>
 8006ca6:	bf00      	nop
 8006ca8:	0800905a 	.word	0x0800905a
 8006cac:	0800906b 	.word	0x0800906b

08006cb0 <siprintf>:
 8006cb0:	b40e      	push	{r1, r2, r3}
 8006cb2:	b500      	push	{lr}
 8006cb4:	b09c      	sub	sp, #112	@ 0x70
 8006cb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006cb8:	9002      	str	r0, [sp, #8]
 8006cba:	9006      	str	r0, [sp, #24]
 8006cbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cc0:	4809      	ldr	r0, [pc, #36]	@ (8006ce8 <siprintf+0x38>)
 8006cc2:	9107      	str	r1, [sp, #28]
 8006cc4:	9104      	str	r1, [sp, #16]
 8006cc6:	4909      	ldr	r1, [pc, #36]	@ (8006cec <siprintf+0x3c>)
 8006cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ccc:	9105      	str	r1, [sp, #20]
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	a902      	add	r1, sp, #8
 8006cd4:	f000 ff42 	bl	8007b5c <_svfiprintf_r>
 8006cd8:	9b02      	ldr	r3, [sp, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	b01c      	add	sp, #112	@ 0x70
 8006ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce4:	b003      	add	sp, #12
 8006ce6:	4770      	bx	lr
 8006ce8:	20000020 	.word	0x20000020
 8006cec:	ffff0208 	.word	0xffff0208

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	@ 0x5c
 8006d0e:	f000 f8b1 	bl	8006e74 <memset>
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <std+0x58>)
 8006d14:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d16:	4b0d      	ldr	r3, [pc, #52]	@ (8006d4c <std+0x5c>)
 8006d18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <std+0x60>)
 8006d1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <std+0x64>)
 8006d20:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <std+0x68>)
 8006d24:	6224      	str	r4, [r4, #32]
 8006d26:	429c      	cmp	r4, r3
 8006d28:	d006      	beq.n	8006d38 <std+0x48>
 8006d2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d2e:	4294      	cmp	r4, r2
 8006d30:	d002      	beq.n	8006d38 <std+0x48>
 8006d32:	33d0      	adds	r3, #208	@ 0xd0
 8006d34:	429c      	cmp	r4, r3
 8006d36:	d105      	bne.n	8006d44 <std+0x54>
 8006d38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d40:	f000 b8ce 	b.w	8006ee0 <__retarget_lock_init_recursive>
 8006d44:	bd10      	pop	{r4, pc}
 8006d46:	bf00      	nop
 8006d48:	0800871d 	.word	0x0800871d
 8006d4c:	0800873f 	.word	0x0800873f
 8006d50:	08008777 	.word	0x08008777
 8006d54:	0800879b 	.word	0x0800879b
 8006d58:	20000ab8 	.word	0x20000ab8

08006d5c <stdio_exit_handler>:
 8006d5c:	4a02      	ldr	r2, [pc, #8]	@ (8006d68 <stdio_exit_handler+0xc>)
 8006d5e:	4903      	ldr	r1, [pc, #12]	@ (8006d6c <stdio_exit_handler+0x10>)
 8006d60:	4803      	ldr	r0, [pc, #12]	@ (8006d70 <stdio_exit_handler+0x14>)
 8006d62:	f000 b869 	b.w	8006e38 <_fwalk_sglue>
 8006d66:	bf00      	nop
 8006d68:	20000014 	.word	0x20000014
 8006d6c:	08007fb1 	.word	0x08007fb1
 8006d70:	20000024 	.word	0x20000024

08006d74 <cleanup_stdio>:
 8006d74:	6841      	ldr	r1, [r0, #4]
 8006d76:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <cleanup_stdio+0x34>)
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	d001      	beq.n	8006d84 <cleanup_stdio+0x10>
 8006d80:	f001 f916 	bl	8007fb0 <_fflush_r>
 8006d84:	68a1      	ldr	r1, [r4, #8]
 8006d86:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <cleanup_stdio+0x38>)
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d002      	beq.n	8006d92 <cleanup_stdio+0x1e>
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f001 f90f 	bl	8007fb0 <_fflush_r>
 8006d92:	68e1      	ldr	r1, [r4, #12]
 8006d94:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <cleanup_stdio+0x3c>)
 8006d96:	4299      	cmp	r1, r3
 8006d98:	d004      	beq.n	8006da4 <cleanup_stdio+0x30>
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f001 b906 	b.w	8007fb0 <_fflush_r>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	bf00      	nop
 8006da8:	20000ab8 	.word	0x20000ab8
 8006dac:	20000b20 	.word	0x20000b20
 8006db0:	20000b88 	.word	0x20000b88

08006db4 <global_stdio_init.part.0>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <global_stdio_init.part.0+0x30>)
 8006db8:	4c0b      	ldr	r4, [pc, #44]	@ (8006de8 <global_stdio_init.part.0+0x34>)
 8006dba:	4a0c      	ldr	r2, [pc, #48]	@ (8006dec <global_stdio_init.part.0+0x38>)
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	f7ff ff94 	bl	8006cf0 <std>
 8006dc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2109      	movs	r1, #9
 8006dd0:	f7ff ff8e 	bl	8006cf0 <std>
 8006dd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dd8:	2202      	movs	r2, #2
 8006dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dde:	2112      	movs	r1, #18
 8006de0:	f7ff bf86 	b.w	8006cf0 <std>
 8006de4:	20000bf0 	.word	0x20000bf0
 8006de8:	20000ab8 	.word	0x20000ab8
 8006dec:	08006d5d 	.word	0x08006d5d

08006df0 <__sfp_lock_acquire>:
 8006df0:	4801      	ldr	r0, [pc, #4]	@ (8006df8 <__sfp_lock_acquire+0x8>)
 8006df2:	f000 b876 	b.w	8006ee2 <__retarget_lock_acquire_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000bf5 	.word	0x20000bf5

08006dfc <__sfp_lock_release>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	@ (8006e04 <__sfp_lock_release+0x8>)
 8006dfe:	f000 b871 	b.w	8006ee4 <__retarget_lock_release_recursive>
 8006e02:	bf00      	nop
 8006e04:	20000bf5 	.word	0x20000bf5

08006e08 <__sinit>:
 8006e08:	b510      	push	{r4, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f7ff fff0 	bl	8006df0 <__sfp_lock_acquire>
 8006e10:	6a23      	ldr	r3, [r4, #32]
 8006e12:	b11b      	cbz	r3, 8006e1c <__sinit+0x14>
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	f7ff bff0 	b.w	8006dfc <__sfp_lock_release>
 8006e1c:	4b04      	ldr	r3, [pc, #16]	@ (8006e30 <__sinit+0x28>)
 8006e1e:	6223      	str	r3, [r4, #32]
 8006e20:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <__sinit+0x2c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f5      	bne.n	8006e14 <__sinit+0xc>
 8006e28:	f7ff ffc4 	bl	8006db4 <global_stdio_init.part.0>
 8006e2c:	e7f2      	b.n	8006e14 <__sinit+0xc>
 8006e2e:	bf00      	nop
 8006e30:	08006d75 	.word	0x08006d75
 8006e34:	20000bf0 	.word	0x20000bf0

08006e38 <_fwalk_sglue>:
 8006e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	4688      	mov	r8, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	2600      	movs	r6, #0
 8006e44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e48:	f1b9 0901 	subs.w	r9, r9, #1
 8006e4c:	d505      	bpl.n	8006e5a <_fwalk_sglue+0x22>
 8006e4e:	6824      	ldr	r4, [r4, #0]
 8006e50:	2c00      	cmp	r4, #0
 8006e52:	d1f7      	bne.n	8006e44 <_fwalk_sglue+0xc>
 8006e54:	4630      	mov	r0, r6
 8006e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d907      	bls.n	8006e70 <_fwalk_sglue+0x38>
 8006e60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e64:	3301      	adds	r3, #1
 8006e66:	d003      	beq.n	8006e70 <_fwalk_sglue+0x38>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	47c0      	blx	r8
 8006e6e:	4306      	orrs	r6, r0
 8006e70:	3568      	adds	r5, #104	@ 0x68
 8006e72:	e7e9      	b.n	8006e48 <_fwalk_sglue+0x10>

08006e74 <memset>:
 8006e74:	4402      	add	r2, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <_localeconv_r>:
 8006e84:	4800      	ldr	r0, [pc, #0]	@ (8006e88 <_localeconv_r+0x4>)
 8006e86:	4770      	bx	lr
 8006e88:	20000160 	.word	0x20000160

08006e8c <__errno>:
 8006e8c:	4b01      	ldr	r3, [pc, #4]	@ (8006e94 <__errno+0x8>)
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000020 	.word	0x20000020

08006e98 <__libc_init_array>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ed0 <__libc_init_array+0x38>)
 8006e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ed4 <__libc_init_array+0x3c>)
 8006e9e:	1b64      	subs	r4, r4, r5
 8006ea0:	10a4      	asrs	r4, r4, #2
 8006ea2:	2600      	movs	r6, #0
 8006ea4:	42a6      	cmp	r6, r4
 8006ea6:	d109      	bne.n	8006ebc <__libc_init_array+0x24>
 8006ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed8 <__libc_init_array+0x40>)
 8006eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8006edc <__libc_init_array+0x44>)
 8006eac:	f002 f880 	bl	8008fb0 <_init>
 8006eb0:	1b64      	subs	r4, r4, r5
 8006eb2:	10a4      	asrs	r4, r4, #2
 8006eb4:	2600      	movs	r6, #0
 8006eb6:	42a6      	cmp	r6, r4
 8006eb8:	d105      	bne.n	8006ec6 <__libc_init_array+0x2e>
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec0:	4798      	blx	r3
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7ee      	b.n	8006ea4 <__libc_init_array+0xc>
 8006ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eca:	4798      	blx	r3
 8006ecc:	3601      	adds	r6, #1
 8006ece:	e7f2      	b.n	8006eb6 <__libc_init_array+0x1e>
 8006ed0:	080093c0 	.word	0x080093c0
 8006ed4:	080093c0 	.word	0x080093c0
 8006ed8:	080093c0 	.word	0x080093c0
 8006edc:	080093c4 	.word	0x080093c4

08006ee0 <__retarget_lock_init_recursive>:
 8006ee0:	4770      	bx	lr

08006ee2 <__retarget_lock_acquire_recursive>:
 8006ee2:	4770      	bx	lr

08006ee4 <__retarget_lock_release_recursive>:
 8006ee4:	4770      	bx	lr

08006ee6 <quorem>:
 8006ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eea:	6903      	ldr	r3, [r0, #16]
 8006eec:	690c      	ldr	r4, [r1, #16]
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	db7e      	blt.n	8006ff2 <quorem+0x10c>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	f101 0814 	add.w	r8, r1, #20
 8006efa:	00a3      	lsls	r3, r4, #2
 8006efc:	f100 0514 	add.w	r5, r0, #20
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f10:	3301      	adds	r3, #1
 8006f12:	429a      	cmp	r2, r3
 8006f14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f1c:	d32e      	bcc.n	8006f7c <quorem+0x96>
 8006f1e:	f04f 0a00 	mov.w	sl, #0
 8006f22:	46c4      	mov	ip, r8
 8006f24:	46ae      	mov	lr, r5
 8006f26:	46d3      	mov	fp, sl
 8006f28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f2c:	b298      	uxth	r0, r3
 8006f2e:	fb06 a000 	mla	r0, r6, r0, sl
 8006f32:	0c02      	lsrs	r2, r0, #16
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	fb06 2303 	mla	r3, r6, r3, r2
 8006f3a:	f8de 2000 	ldr.w	r2, [lr]
 8006f3e:	b280      	uxth	r0, r0
 8006f40:	b292      	uxth	r2, r2
 8006f42:	1a12      	subs	r2, r2, r0
 8006f44:	445a      	add	r2, fp
 8006f46:	f8de 0000 	ldr.w	r0, [lr]
 8006f4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f5e:	45e1      	cmp	r9, ip
 8006f60:	f84e 2b04 	str.w	r2, [lr], #4
 8006f64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f68:	d2de      	bcs.n	8006f28 <quorem+0x42>
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	58eb      	ldr	r3, [r5, r3]
 8006f6e:	b92b      	cbnz	r3, 8006f7c <quorem+0x96>
 8006f70:	9b01      	ldr	r3, [sp, #4]
 8006f72:	3b04      	subs	r3, #4
 8006f74:	429d      	cmp	r5, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	d32f      	bcc.n	8006fda <quorem+0xf4>
 8006f7a:	613c      	str	r4, [r7, #16]
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f001 fac5 	bl	800850c <__mcmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	db25      	blt.n	8006fd2 <quorem+0xec>
 8006f86:	4629      	mov	r1, r5
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f8e:	f8d1 c000 	ldr.w	ip, [r1]
 8006f92:	fa1f fe82 	uxth.w	lr, r2
 8006f96:	fa1f f38c 	uxth.w	r3, ip
 8006f9a:	eba3 030e 	sub.w	r3, r3, lr
 8006f9e:	4403      	add	r3, r0
 8006fa0:	0c12      	lsrs	r2, r2, #16
 8006fa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb0:	45c1      	cmp	r9, r8
 8006fb2:	f841 3b04 	str.w	r3, [r1], #4
 8006fb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fba:	d2e6      	bcs.n	8006f8a <quorem+0xa4>
 8006fbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fc4:	b922      	cbnz	r2, 8006fd0 <quorem+0xea>
 8006fc6:	3b04      	subs	r3, #4
 8006fc8:	429d      	cmp	r5, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	d30b      	bcc.n	8006fe6 <quorem+0x100>
 8006fce:	613c      	str	r4, [r7, #16]
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	b003      	add	sp, #12
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	6812      	ldr	r2, [r2, #0]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d1cb      	bne.n	8006f7a <quorem+0x94>
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	e7c6      	b.n	8006f74 <quorem+0x8e>
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	d1ef      	bne.n	8006fce <quorem+0xe8>
 8006fee:	3c01      	subs	r4, #1
 8006ff0:	e7ea      	b.n	8006fc8 <quorem+0xe2>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e7ee      	b.n	8006fd4 <quorem+0xee>
	...

08006ff8 <_dtoa_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b02 	vpush	{d8}
 8007000:	69c7      	ldr	r7, [r0, #28]
 8007002:	b091      	sub	sp, #68	@ 0x44
 8007004:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007008:	ec55 4b10 	vmov	r4, r5, d0
 800700c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800700e:	9107      	str	r1, [sp, #28]
 8007010:	4681      	mov	r9, r0
 8007012:	9209      	str	r2, [sp, #36]	@ 0x24
 8007014:	930d      	str	r3, [sp, #52]	@ 0x34
 8007016:	b97f      	cbnz	r7, 8007038 <_dtoa_r+0x40>
 8007018:	2010      	movs	r0, #16
 800701a:	f000 fe9b 	bl	8007d54 <malloc>
 800701e:	4602      	mov	r2, r0
 8007020:	f8c9 001c 	str.w	r0, [r9, #28]
 8007024:	b920      	cbnz	r0, 8007030 <_dtoa_r+0x38>
 8007026:	4ba0      	ldr	r3, [pc, #640]	@ (80072a8 <_dtoa_r+0x2b0>)
 8007028:	21ef      	movs	r1, #239	@ 0xef
 800702a:	48a0      	ldr	r0, [pc, #640]	@ (80072ac <_dtoa_r+0x2b4>)
 800702c:	f001 fc66 	bl	80088fc <__assert_func>
 8007030:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007034:	6007      	str	r7, [r0, #0]
 8007036:	60c7      	str	r7, [r0, #12]
 8007038:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800703c:	6819      	ldr	r1, [r3, #0]
 800703e:	b159      	cbz	r1, 8007058 <_dtoa_r+0x60>
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	604a      	str	r2, [r1, #4]
 8007044:	2301      	movs	r3, #1
 8007046:	4093      	lsls	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
 800704a:	4648      	mov	r0, r9
 800704c:	f001 f824 	bl	8008098 <_Bfree>
 8007050:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	1e2b      	subs	r3, r5, #0
 800705a:	bfbb      	ittet	lt
 800705c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007060:	9303      	strlt	r3, [sp, #12]
 8007062:	2300      	movge	r3, #0
 8007064:	2201      	movlt	r2, #1
 8007066:	bfac      	ite	ge
 8007068:	6033      	strge	r3, [r6, #0]
 800706a:	6032      	strlt	r2, [r6, #0]
 800706c:	4b90      	ldr	r3, [pc, #576]	@ (80072b0 <_dtoa_r+0x2b8>)
 800706e:	9e03      	ldr	r6, [sp, #12]
 8007070:	43b3      	bics	r3, r6
 8007072:	d110      	bne.n	8007096 <_dtoa_r+0x9e>
 8007074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007076:	f242 730f 	movw	r3, #9999	@ 0x270f
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007080:	4323      	orrs	r3, r4
 8007082:	f000 84de 	beq.w	8007a42 <_dtoa_r+0xa4a>
 8007086:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007088:	4f8a      	ldr	r7, [pc, #552]	@ (80072b4 <_dtoa_r+0x2bc>)
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 84e0 	beq.w	8007a50 <_dtoa_r+0xa58>
 8007090:	1cfb      	adds	r3, r7, #3
 8007092:	f000 bcdb 	b.w	8007a4c <_dtoa_r+0xa54>
 8007096:	ed9d 8b02 	vldr	d8, [sp, #8]
 800709a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a2:	d10a      	bne.n	80070ba <_dtoa_r+0xc2>
 80070a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070a6:	2301      	movs	r3, #1
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80070ac:	b113      	cbz	r3, 80070b4 <_dtoa_r+0xbc>
 80070ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80070b0:	4b81      	ldr	r3, [pc, #516]	@ (80072b8 <_dtoa_r+0x2c0>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	4f81      	ldr	r7, [pc, #516]	@ (80072bc <_dtoa_r+0x2c4>)
 80070b6:	f000 bccb 	b.w	8007a50 <_dtoa_r+0xa58>
 80070ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80070bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80070be:	4648      	mov	r0, r9
 80070c0:	eeb0 0b48 	vmov.f64	d0, d8
 80070c4:	f001 fad2 	bl	800866c <__d2b>
 80070c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80070cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070ce:	9001      	str	r0, [sp, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d045      	beq.n	8007160 <_dtoa_r+0x168>
 80070d4:	eeb0 7b48 	vmov.f64	d7, d8
 80070d8:	ee18 1a90 	vmov	r1, s17
 80070dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80070e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80070e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80070e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80070ec:	2500      	movs	r5, #0
 80070ee:	ee07 1a90 	vmov	s15, r1
 80070f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80070f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007290 <_dtoa_r+0x298>
 80070fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80070fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007298 <_dtoa_r+0x2a0>
 8007102:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007106:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80072a0 <_dtoa_r+0x2a8>
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007112:	eeb0 7b46 	vmov.f64	d7, d6
 8007116:	eea4 7b05 	vfma.f64	d7, d4, d5
 800711a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800711e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007126:	ee16 8a90 	vmov	r8, s13
 800712a:	d508      	bpl.n	800713e <_dtoa_r+0x146>
 800712c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007130:	eeb4 6b47 	vcmp.f64	d6, d7
 8007134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007138:	bf18      	it	ne
 800713a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800713e:	f1b8 0f16 	cmp.w	r8, #22
 8007142:	d82b      	bhi.n	800719c <_dtoa_r+0x1a4>
 8007144:	495e      	ldr	r1, [pc, #376]	@ (80072c0 <_dtoa_r+0x2c8>)
 8007146:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800714a:	ed91 7b00 	vldr	d7, [r1]
 800714e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007156:	d501      	bpl.n	800715c <_dtoa_r+0x164>
 8007158:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800715c:	2100      	movs	r1, #0
 800715e:	e01e      	b.n	800719e <_dtoa_r+0x1a6>
 8007160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007162:	4413      	add	r3, r2
 8007164:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007168:	2920      	cmp	r1, #32
 800716a:	bfc1      	itttt	gt
 800716c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007170:	408e      	lslgt	r6, r1
 8007172:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007176:	fa24 f101 	lsrgt.w	r1, r4, r1
 800717a:	bfd6      	itet	le
 800717c:	f1c1 0120 	rsble	r1, r1, #32
 8007180:	4331      	orrgt	r1, r6
 8007182:	fa04 f101 	lslle.w	r1, r4, r1
 8007186:	ee07 1a90 	vmov	s15, r1
 800718a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800718e:	3b01      	subs	r3, #1
 8007190:	ee17 1a90 	vmov	r1, s15
 8007194:	2501      	movs	r5, #1
 8007196:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800719a:	e7a8      	b.n	80070ee <_dtoa_r+0xf6>
 800719c:	2101      	movs	r1, #1
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	1e53      	subs	r3, r2, #1
 80071a2:	9306      	str	r3, [sp, #24]
 80071a4:	bf45      	ittet	mi
 80071a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80071aa:	9305      	strmi	r3, [sp, #20]
 80071ac:	2300      	movpl	r3, #0
 80071ae:	2300      	movmi	r3, #0
 80071b0:	bf4c      	ite	mi
 80071b2:	9306      	strmi	r3, [sp, #24]
 80071b4:	9305      	strpl	r3, [sp, #20]
 80071b6:	f1b8 0f00 	cmp.w	r8, #0
 80071ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80071bc:	db18      	blt.n	80071f0 <_dtoa_r+0x1f8>
 80071be:	9b06      	ldr	r3, [sp, #24]
 80071c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80071c4:	4443      	add	r3, r8
 80071c6:	9306      	str	r3, [sp, #24]
 80071c8:	2300      	movs	r3, #0
 80071ca:	9a07      	ldr	r2, [sp, #28]
 80071cc:	2a09      	cmp	r2, #9
 80071ce:	d849      	bhi.n	8007264 <_dtoa_r+0x26c>
 80071d0:	2a05      	cmp	r2, #5
 80071d2:	bfc4      	itt	gt
 80071d4:	3a04      	subgt	r2, #4
 80071d6:	9207      	strgt	r2, [sp, #28]
 80071d8:	9a07      	ldr	r2, [sp, #28]
 80071da:	f1a2 0202 	sub.w	r2, r2, #2
 80071de:	bfcc      	ite	gt
 80071e0:	2400      	movgt	r4, #0
 80071e2:	2401      	movle	r4, #1
 80071e4:	2a03      	cmp	r2, #3
 80071e6:	d848      	bhi.n	800727a <_dtoa_r+0x282>
 80071e8:	e8df f002 	tbb	[pc, r2]
 80071ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80071f0:	9b05      	ldr	r3, [sp, #20]
 80071f2:	2200      	movs	r2, #0
 80071f4:	eba3 0308 	sub.w	r3, r3, r8
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80071fc:	f1c8 0300 	rsb	r3, r8, #0
 8007200:	e7e3      	b.n	80071ca <_dtoa_r+0x1d2>
 8007202:	2200      	movs	r2, #0
 8007204:	9208      	str	r2, [sp, #32]
 8007206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007208:	2a00      	cmp	r2, #0
 800720a:	dc39      	bgt.n	8007280 <_dtoa_r+0x288>
 800720c:	f04f 0b01 	mov.w	fp, #1
 8007210:	46da      	mov	sl, fp
 8007212:	465a      	mov	r2, fp
 8007214:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007218:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800721c:	2100      	movs	r1, #0
 800721e:	2004      	movs	r0, #4
 8007220:	f100 0614 	add.w	r6, r0, #20
 8007224:	4296      	cmp	r6, r2
 8007226:	d930      	bls.n	800728a <_dtoa_r+0x292>
 8007228:	6079      	str	r1, [r7, #4]
 800722a:	4648      	mov	r0, r9
 800722c:	9304      	str	r3, [sp, #16]
 800722e:	f000 fef3 	bl	8008018 <_Balloc>
 8007232:	9b04      	ldr	r3, [sp, #16]
 8007234:	4607      	mov	r7, r0
 8007236:	2800      	cmp	r0, #0
 8007238:	d146      	bne.n	80072c8 <_dtoa_r+0x2d0>
 800723a:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <_dtoa_r+0x2cc>)
 800723c:	4602      	mov	r2, r0
 800723e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007242:	e6f2      	b.n	800702a <_dtoa_r+0x32>
 8007244:	2201      	movs	r2, #1
 8007246:	e7dd      	b.n	8007204 <_dtoa_r+0x20c>
 8007248:	2200      	movs	r2, #0
 800724a:	9208      	str	r2, [sp, #32]
 800724c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800724e:	eb08 0b02 	add.w	fp, r8, r2
 8007252:	f10b 0a01 	add.w	sl, fp, #1
 8007256:	4652      	mov	r2, sl
 8007258:	2a01      	cmp	r2, #1
 800725a:	bfb8      	it	lt
 800725c:	2201      	movlt	r2, #1
 800725e:	e7db      	b.n	8007218 <_dtoa_r+0x220>
 8007260:	2201      	movs	r2, #1
 8007262:	e7f2      	b.n	800724a <_dtoa_r+0x252>
 8007264:	2401      	movs	r4, #1
 8007266:	2200      	movs	r2, #0
 8007268:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800726c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8007270:	2100      	movs	r1, #0
 8007272:	46da      	mov	sl, fp
 8007274:	2212      	movs	r2, #18
 8007276:	9109      	str	r1, [sp, #36]	@ 0x24
 8007278:	e7ce      	b.n	8007218 <_dtoa_r+0x220>
 800727a:	2201      	movs	r2, #1
 800727c:	9208      	str	r2, [sp, #32]
 800727e:	e7f5      	b.n	800726c <_dtoa_r+0x274>
 8007280:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007284:	46da      	mov	sl, fp
 8007286:	465a      	mov	r2, fp
 8007288:	e7c6      	b.n	8007218 <_dtoa_r+0x220>
 800728a:	3101      	adds	r1, #1
 800728c:	0040      	lsls	r0, r0, #1
 800728e:	e7c7      	b.n	8007220 <_dtoa_r+0x228>
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	08009089 	.word	0x08009089
 80072ac:	080090a0 	.word	0x080090a0
 80072b0:	7ff00000 	.word	0x7ff00000
 80072b4:	08009085 	.word	0x08009085
 80072b8:	08009059 	.word	0x08009059
 80072bc:	08009058 	.word	0x08009058
 80072c0:	080091a8 	.word	0x080091a8
 80072c4:	080090f8 	.word	0x080090f8
 80072c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80072cc:	f1ba 0f0e 	cmp.w	sl, #14
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	d86f      	bhi.n	80073b4 <_dtoa_r+0x3bc>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	d06d      	beq.n	80073b4 <_dtoa_r+0x3bc>
 80072d8:	f1b8 0f00 	cmp.w	r8, #0
 80072dc:	f340 80c2 	ble.w	8007464 <_dtoa_r+0x46c>
 80072e0:	4aca      	ldr	r2, [pc, #808]	@ (800760c <_dtoa_r+0x614>)
 80072e2:	f008 010f 	and.w	r1, r8, #15
 80072e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80072ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80072ee:	ed92 7b00 	vldr	d7, [r2]
 80072f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80072f6:	f000 80a9 	beq.w	800744c <_dtoa_r+0x454>
 80072fa:	4ac5      	ldr	r2, [pc, #788]	@ (8007610 <_dtoa_r+0x618>)
 80072fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8007300:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007304:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007308:	f001 010f 	and.w	r1, r1, #15
 800730c:	2203      	movs	r2, #3
 800730e:	48c0      	ldr	r0, [pc, #768]	@ (8007610 <_dtoa_r+0x618>)
 8007310:	2900      	cmp	r1, #0
 8007312:	f040 809d 	bne.w	8007450 <_dtoa_r+0x458>
 8007316:	ed9d 6b02 	vldr	d6, [sp, #8]
 800731a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800731e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007322:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007324:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007328:	2900      	cmp	r1, #0
 800732a:	f000 80c1 	beq.w	80074b0 <_dtoa_r+0x4b8>
 800732e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007332:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733a:	f140 80b9 	bpl.w	80074b0 <_dtoa_r+0x4b8>
 800733e:	f1ba 0f00 	cmp.w	sl, #0
 8007342:	f000 80b5 	beq.w	80074b0 <_dtoa_r+0x4b8>
 8007346:	f1bb 0f00 	cmp.w	fp, #0
 800734a:	dd31      	ble.n	80073b0 <_dtoa_r+0x3b8>
 800734c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007350:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007354:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007358:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800735c:	9104      	str	r1, [sp, #16]
 800735e:	3201      	adds	r2, #1
 8007360:	465c      	mov	r4, fp
 8007362:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007366:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800736a:	ee07 2a90 	vmov	s15, r2
 800736e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007372:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007376:	ee15 2a90 	vmov	r2, s11
 800737a:	ec51 0b15 	vmov	r0, r1, d5
 800737e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007382:	2c00      	cmp	r4, #0
 8007384:	f040 8098 	bne.w	80074b8 <_dtoa_r+0x4c0>
 8007388:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800738c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007390:	ec41 0b17 	vmov	d7, r0, r1
 8007394:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	f300 8261 	bgt.w	8007862 <_dtoa_r+0x86a>
 80073a0:	eeb1 7b47 	vneg.f64	d7, d7
 80073a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	f100 80f5 	bmi.w	800759a <_dtoa_r+0x5a2>
 80073b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	f2c0 812c 	blt.w	8007614 <_dtoa_r+0x61c>
 80073bc:	f1b8 0f0e 	cmp.w	r8, #14
 80073c0:	f300 8128 	bgt.w	8007614 <_dtoa_r+0x61c>
 80073c4:	4b91      	ldr	r3, [pc, #580]	@ (800760c <_dtoa_r+0x614>)
 80073c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073ca:	ed93 6b00 	vldr	d6, [r3]
 80073ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da03      	bge.n	80073dc <_dtoa_r+0x3e4>
 80073d4:	f1ba 0f00 	cmp.w	sl, #0
 80073d8:	f340 80d2 	ble.w	8007580 <_dtoa_r+0x588>
 80073dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80073e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073e4:	463e      	mov	r6, r7
 80073e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80073ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80073ee:	ee15 3a10 	vmov	r3, s10
 80073f2:	3330      	adds	r3, #48	@ 0x30
 80073f4:	f806 3b01 	strb.w	r3, [r6], #1
 80073f8:	1bf3      	subs	r3, r6, r7
 80073fa:	459a      	cmp	sl, r3
 80073fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007400:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007404:	f040 80f8 	bne.w	80075f8 <_dtoa_r+0x600>
 8007408:	ee37 7b07 	vadd.f64	d7, d7, d7
 800740c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007414:	f300 80dd 	bgt.w	80075d2 <_dtoa_r+0x5da>
 8007418:	eeb4 7b46 	vcmp.f64	d7, d6
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	d104      	bne.n	800742c <_dtoa_r+0x434>
 8007422:	ee15 3a10 	vmov	r3, s10
 8007426:	07db      	lsls	r3, r3, #31
 8007428:	f100 80d3 	bmi.w	80075d2 <_dtoa_r+0x5da>
 800742c:	9901      	ldr	r1, [sp, #4]
 800742e:	4648      	mov	r0, r9
 8007430:	f000 fe32 	bl	8008098 <_Bfree>
 8007434:	2300      	movs	r3, #0
 8007436:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007438:	7033      	strb	r3, [r6, #0]
 800743a:	f108 0301 	add.w	r3, r8, #1
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8304 	beq.w	8007a50 <_dtoa_r+0xa58>
 8007448:	601e      	str	r6, [r3, #0]
 800744a:	e301      	b.n	8007a50 <_dtoa_r+0xa58>
 800744c:	2202      	movs	r2, #2
 800744e:	e75e      	b.n	800730e <_dtoa_r+0x316>
 8007450:	07cc      	lsls	r4, r1, #31
 8007452:	d504      	bpl.n	800745e <_dtoa_r+0x466>
 8007454:	ed90 6b00 	vldr	d6, [r0]
 8007458:	3201      	adds	r2, #1
 800745a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800745e:	1049      	asrs	r1, r1, #1
 8007460:	3008      	adds	r0, #8
 8007462:	e755      	b.n	8007310 <_dtoa_r+0x318>
 8007464:	d022      	beq.n	80074ac <_dtoa_r+0x4b4>
 8007466:	f1c8 0100 	rsb	r1, r8, #0
 800746a:	4a68      	ldr	r2, [pc, #416]	@ (800760c <_dtoa_r+0x614>)
 800746c:	f001 000f 	and.w	r0, r1, #15
 8007470:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007474:	ed92 7b00 	vldr	d7, [r2]
 8007478:	ee28 7b07 	vmul.f64	d7, d8, d7
 800747c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007480:	4863      	ldr	r0, [pc, #396]	@ (8007610 <_dtoa_r+0x618>)
 8007482:	1109      	asrs	r1, r1, #4
 8007484:	2400      	movs	r4, #0
 8007486:	2202      	movs	r2, #2
 8007488:	b929      	cbnz	r1, 8007496 <_dtoa_r+0x49e>
 800748a:	2c00      	cmp	r4, #0
 800748c:	f43f af49 	beq.w	8007322 <_dtoa_r+0x32a>
 8007490:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007494:	e745      	b.n	8007322 <_dtoa_r+0x32a>
 8007496:	07ce      	lsls	r6, r1, #31
 8007498:	d505      	bpl.n	80074a6 <_dtoa_r+0x4ae>
 800749a:	ed90 6b00 	vldr	d6, [r0]
 800749e:	3201      	adds	r2, #1
 80074a0:	2401      	movs	r4, #1
 80074a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074a6:	1049      	asrs	r1, r1, #1
 80074a8:	3008      	adds	r0, #8
 80074aa:	e7ed      	b.n	8007488 <_dtoa_r+0x490>
 80074ac:	2202      	movs	r2, #2
 80074ae:	e738      	b.n	8007322 <_dtoa_r+0x32a>
 80074b0:	f8cd 8010 	str.w	r8, [sp, #16]
 80074b4:	4654      	mov	r4, sl
 80074b6:	e754      	b.n	8007362 <_dtoa_r+0x36a>
 80074b8:	4a54      	ldr	r2, [pc, #336]	@ (800760c <_dtoa_r+0x614>)
 80074ba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80074be:	ed12 4b02 	vldr	d4, [r2, #-8]
 80074c2:	9a08      	ldr	r2, [sp, #32]
 80074c4:	ec41 0b17 	vmov	d7, r0, r1
 80074c8:	443c      	add	r4, r7
 80074ca:	b34a      	cbz	r2, 8007520 <_dtoa_r+0x528>
 80074cc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80074d0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80074d4:	463e      	mov	r6, r7
 80074d6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80074da:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80074de:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074e2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80074e6:	ee14 2a90 	vmov	r2, s9
 80074ea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80074ee:	3230      	adds	r2, #48	@ 0x30
 80074f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80074f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80074f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fc:	f806 2b01 	strb.w	r2, [r6], #1
 8007500:	d438      	bmi.n	8007574 <_dtoa_r+0x57c>
 8007502:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007506:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	d462      	bmi.n	80075d6 <_dtoa_r+0x5de>
 8007510:	42a6      	cmp	r6, r4
 8007512:	f43f af4d 	beq.w	80073b0 <_dtoa_r+0x3b8>
 8007516:	ee27 7b03 	vmul.f64	d7, d7, d3
 800751a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800751e:	e7e0      	b.n	80074e2 <_dtoa_r+0x4ea>
 8007520:	4621      	mov	r1, r4
 8007522:	463e      	mov	r6, r7
 8007524:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007528:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800752c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007530:	ee14 2a90 	vmov	r2, s9
 8007534:	3230      	adds	r2, #48	@ 0x30
 8007536:	f806 2b01 	strb.w	r2, [r6], #1
 800753a:	42a6      	cmp	r6, r4
 800753c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007540:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007544:	d119      	bne.n	800757a <_dtoa_r+0x582>
 8007546:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800754a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800754e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007556:	dc3e      	bgt.n	80075d6 <_dtoa_r+0x5de>
 8007558:	ee35 5b47 	vsub.f64	d5, d5, d7
 800755c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	f57f af24 	bpl.w	80073b0 <_dtoa_r+0x3b8>
 8007568:	460e      	mov	r6, r1
 800756a:	3901      	subs	r1, #1
 800756c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007570:	2b30      	cmp	r3, #48	@ 0x30
 8007572:	d0f9      	beq.n	8007568 <_dtoa_r+0x570>
 8007574:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007578:	e758      	b.n	800742c <_dtoa_r+0x434>
 800757a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800757e:	e7d5      	b.n	800752c <_dtoa_r+0x534>
 8007580:	d10b      	bne.n	800759a <_dtoa_r+0x5a2>
 8007582:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007586:	ee26 6b07 	vmul.f64	d6, d6, d7
 800758a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800758e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	f2c0 8161 	blt.w	800785c <_dtoa_r+0x864>
 800759a:	2400      	movs	r4, #0
 800759c:	4625      	mov	r5, r4
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	43db      	mvns	r3, r3
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	463e      	mov	r6, r7
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	4621      	mov	r1, r4
 80075ac:	4648      	mov	r0, r9
 80075ae:	f000 fd73 	bl	8008098 <_Bfree>
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	d0de      	beq.n	8007574 <_dtoa_r+0x57c>
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	d005      	beq.n	80075c8 <_dtoa_r+0x5d0>
 80075bc:	45a8      	cmp	r8, r5
 80075be:	d003      	beq.n	80075c8 <_dtoa_r+0x5d0>
 80075c0:	4641      	mov	r1, r8
 80075c2:	4648      	mov	r0, r9
 80075c4:	f000 fd68 	bl	8008098 <_Bfree>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4648      	mov	r0, r9
 80075cc:	f000 fd64 	bl	8008098 <_Bfree>
 80075d0:	e7d0      	b.n	8007574 <_dtoa_r+0x57c>
 80075d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80075d6:	4633      	mov	r3, r6
 80075d8:	461e      	mov	r6, r3
 80075da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075de:	2a39      	cmp	r2, #57	@ 0x39
 80075e0:	d106      	bne.n	80075f0 <_dtoa_r+0x5f8>
 80075e2:	429f      	cmp	r7, r3
 80075e4:	d1f8      	bne.n	80075d8 <_dtoa_r+0x5e0>
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	3201      	adds	r2, #1
 80075ea:	9204      	str	r2, [sp, #16]
 80075ec:	2230      	movs	r2, #48	@ 0x30
 80075ee:	703a      	strb	r2, [r7, #0]
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	3201      	adds	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e7bd      	b.n	8007574 <_dtoa_r+0x57c>
 80075f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007604:	f47f aeef 	bne.w	80073e6 <_dtoa_r+0x3ee>
 8007608:	e710      	b.n	800742c <_dtoa_r+0x434>
 800760a:	bf00      	nop
 800760c:	080091a8 	.word	0x080091a8
 8007610:	08009180 	.word	0x08009180
 8007614:	9908      	ldr	r1, [sp, #32]
 8007616:	2900      	cmp	r1, #0
 8007618:	f000 80e3 	beq.w	80077e2 <_dtoa_r+0x7ea>
 800761c:	9907      	ldr	r1, [sp, #28]
 800761e:	2901      	cmp	r1, #1
 8007620:	f300 80c8 	bgt.w	80077b4 <_dtoa_r+0x7bc>
 8007624:	2d00      	cmp	r5, #0
 8007626:	f000 80c1 	beq.w	80077ac <_dtoa_r+0x7b4>
 800762a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800762e:	9e05      	ldr	r6, [sp, #20]
 8007630:	461c      	mov	r4, r3
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	9b05      	ldr	r3, [sp, #20]
 8007636:	4413      	add	r3, r2
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	2101      	movs	r1, #1
 800763e:	4413      	add	r3, r2
 8007640:	4648      	mov	r0, r9
 8007642:	9306      	str	r3, [sp, #24]
 8007644:	f000 fddc 	bl	8008200 <__i2b>
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	4605      	mov	r5, r0
 800764c:	b166      	cbz	r6, 8007668 <_dtoa_r+0x670>
 800764e:	9a06      	ldr	r2, [sp, #24]
 8007650:	2a00      	cmp	r2, #0
 8007652:	dd09      	ble.n	8007668 <_dtoa_r+0x670>
 8007654:	42b2      	cmp	r2, r6
 8007656:	9905      	ldr	r1, [sp, #20]
 8007658:	bfa8      	it	ge
 800765a:	4632      	movge	r2, r6
 800765c:	1a89      	subs	r1, r1, r2
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	9906      	ldr	r1, [sp, #24]
 8007662:	1ab6      	subs	r6, r6, r2
 8007664:	1a8a      	subs	r2, r1, r2
 8007666:	9206      	str	r2, [sp, #24]
 8007668:	b1fb      	cbz	r3, 80076aa <_dtoa_r+0x6b2>
 800766a:	9a08      	ldr	r2, [sp, #32]
 800766c:	2a00      	cmp	r2, #0
 800766e:	f000 80bc 	beq.w	80077ea <_dtoa_r+0x7f2>
 8007672:	b19c      	cbz	r4, 800769c <_dtoa_r+0x6a4>
 8007674:	4629      	mov	r1, r5
 8007676:	4622      	mov	r2, r4
 8007678:	4648      	mov	r0, r9
 800767a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767c:	f000 fe80 	bl	8008380 <__pow5mult>
 8007680:	9a01      	ldr	r2, [sp, #4]
 8007682:	4601      	mov	r1, r0
 8007684:	4605      	mov	r5, r0
 8007686:	4648      	mov	r0, r9
 8007688:	f000 fdd0 	bl	800822c <__multiply>
 800768c:	9901      	ldr	r1, [sp, #4]
 800768e:	9004      	str	r0, [sp, #16]
 8007690:	4648      	mov	r0, r9
 8007692:	f000 fd01 	bl	8008098 <_Bfree>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	1b1a      	subs	r2, r3, r4
 800769e:	d004      	beq.n	80076aa <_dtoa_r+0x6b2>
 80076a0:	9901      	ldr	r1, [sp, #4]
 80076a2:	4648      	mov	r0, r9
 80076a4:	f000 fe6c 	bl	8008380 <__pow5mult>
 80076a8:	9001      	str	r0, [sp, #4]
 80076aa:	2101      	movs	r1, #1
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fda7 	bl	8008200 <__i2b>
 80076b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b4:	4604      	mov	r4, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 81d0 	beq.w	8007a5c <_dtoa_r+0xa64>
 80076bc:	461a      	mov	r2, r3
 80076be:	4601      	mov	r1, r0
 80076c0:	4648      	mov	r0, r9
 80076c2:	f000 fe5d 	bl	8008380 <__pow5mult>
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	4604      	mov	r4, r0
 80076cc:	f300 8095 	bgt.w	80077fa <_dtoa_r+0x802>
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f040 808b 	bne.w	80077ee <_dtoa_r+0x7f6>
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80076de:	2a00      	cmp	r2, #0
 80076e0:	f040 8087 	bne.w	80077f2 <_dtoa_r+0x7fa>
 80076e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80076e8:	0d12      	lsrs	r2, r2, #20
 80076ea:	0512      	lsls	r2, r2, #20
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	f000 8082 	beq.w	80077f6 <_dtoa_r+0x7fe>
 80076f2:	9b05      	ldr	r3, [sp, #20]
 80076f4:	3301      	adds	r3, #1
 80076f6:	9305      	str	r3, [sp, #20]
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	3301      	adds	r3, #1
 80076fc:	9306      	str	r3, [sp, #24]
 80076fe:	2301      	movs	r3, #1
 8007700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 81af 	beq.w	8007a68 <_dtoa_r+0xa70>
 800770a:	6922      	ldr	r2, [r4, #16]
 800770c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007710:	6910      	ldr	r0, [r2, #16]
 8007712:	f000 fd29 	bl	8008168 <__hi0bits>
 8007716:	f1c0 0020 	rsb	r0, r0, #32
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	4418      	add	r0, r3
 800771e:	f010 001f 	ands.w	r0, r0, #31
 8007722:	d076      	beq.n	8007812 <_dtoa_r+0x81a>
 8007724:	f1c0 0220 	rsb	r2, r0, #32
 8007728:	2a04      	cmp	r2, #4
 800772a:	dd69      	ble.n	8007800 <_dtoa_r+0x808>
 800772c:	9b05      	ldr	r3, [sp, #20]
 800772e:	f1c0 001c 	rsb	r0, r0, #28
 8007732:	4403      	add	r3, r0
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	9b06      	ldr	r3, [sp, #24]
 8007738:	4406      	add	r6, r0
 800773a:	4403      	add	r3, r0
 800773c:	9306      	str	r3, [sp, #24]
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	dd05      	ble.n	8007750 <_dtoa_r+0x758>
 8007744:	9901      	ldr	r1, [sp, #4]
 8007746:	461a      	mov	r2, r3
 8007748:	4648      	mov	r0, r9
 800774a:	f000 fe73 	bl	8008434 <__lshift>
 800774e:	9001      	str	r0, [sp, #4]
 8007750:	9b06      	ldr	r3, [sp, #24]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dd05      	ble.n	8007762 <_dtoa_r+0x76a>
 8007756:	4621      	mov	r1, r4
 8007758:	461a      	mov	r2, r3
 800775a:	4648      	mov	r0, r9
 800775c:	f000 fe6a 	bl	8008434 <__lshift>
 8007760:	4604      	mov	r4, r0
 8007762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d056      	beq.n	8007816 <_dtoa_r+0x81e>
 8007768:	9801      	ldr	r0, [sp, #4]
 800776a:	4621      	mov	r1, r4
 800776c:	f000 fece 	bl	800850c <__mcmp>
 8007770:	2800      	cmp	r0, #0
 8007772:	da50      	bge.n	8007816 <_dtoa_r+0x81e>
 8007774:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	9901      	ldr	r1, [sp, #4]
 800777c:	2300      	movs	r3, #0
 800777e:	220a      	movs	r2, #10
 8007780:	4648      	mov	r0, r9
 8007782:	f000 fcab 	bl	80080dc <__multadd>
 8007786:	9b08      	ldr	r3, [sp, #32]
 8007788:	9001      	str	r0, [sp, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 816e 	beq.w	8007a6c <_dtoa_r+0xa74>
 8007790:	4629      	mov	r1, r5
 8007792:	2300      	movs	r3, #0
 8007794:	220a      	movs	r2, #10
 8007796:	4648      	mov	r0, r9
 8007798:	f000 fca0 	bl	80080dc <__multadd>
 800779c:	f1bb 0f00 	cmp.w	fp, #0
 80077a0:	4605      	mov	r5, r0
 80077a2:	dc64      	bgt.n	800786e <_dtoa_r+0x876>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	dc3e      	bgt.n	8007828 <_dtoa_r+0x830>
 80077aa:	e060      	b.n	800786e <_dtoa_r+0x876>
 80077ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077b2:	e73c      	b.n	800762e <_dtoa_r+0x636>
 80077b4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	bfbf      	itttt	lt
 80077bc:	1ae2      	sublt	r2, r4, r3
 80077be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077c0:	189b      	addlt	r3, r3, r2
 80077c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80077c4:	bfae      	itee	ge
 80077c6:	1b1c      	subge	r4, r3, r4
 80077c8:	4623      	movlt	r3, r4
 80077ca:	2400      	movlt	r4, #0
 80077cc:	f1ba 0f00 	cmp.w	sl, #0
 80077d0:	bfb5      	itete	lt
 80077d2:	9a05      	ldrlt	r2, [sp, #20]
 80077d4:	9e05      	ldrge	r6, [sp, #20]
 80077d6:	eba2 060a 	sublt.w	r6, r2, sl
 80077da:	4652      	movge	r2, sl
 80077dc:	bfb8      	it	lt
 80077de:	2200      	movlt	r2, #0
 80077e0:	e727      	b.n	8007632 <_dtoa_r+0x63a>
 80077e2:	9e05      	ldr	r6, [sp, #20]
 80077e4:	9d08      	ldr	r5, [sp, #32]
 80077e6:	461c      	mov	r4, r3
 80077e8:	e730      	b.n	800764c <_dtoa_r+0x654>
 80077ea:	461a      	mov	r2, r3
 80077ec:	e758      	b.n	80076a0 <_dtoa_r+0x6a8>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e786      	b.n	8007700 <_dtoa_r+0x708>
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	e784      	b.n	8007700 <_dtoa_r+0x708>
 80077f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077f8:	e783      	b.n	8007702 <_dtoa_r+0x70a>
 80077fa:	2300      	movs	r3, #0
 80077fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077fe:	e784      	b.n	800770a <_dtoa_r+0x712>
 8007800:	d09d      	beq.n	800773e <_dtoa_r+0x746>
 8007802:	9b05      	ldr	r3, [sp, #20]
 8007804:	321c      	adds	r2, #28
 8007806:	4413      	add	r3, r2
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	9b06      	ldr	r3, [sp, #24]
 800780c:	4416      	add	r6, r2
 800780e:	4413      	add	r3, r2
 8007810:	e794      	b.n	800773c <_dtoa_r+0x744>
 8007812:	4602      	mov	r2, r0
 8007814:	e7f5      	b.n	8007802 <_dtoa_r+0x80a>
 8007816:	f1ba 0f00 	cmp.w	sl, #0
 800781a:	f8cd 8010 	str.w	r8, [sp, #16]
 800781e:	46d3      	mov	fp, sl
 8007820:	dc21      	bgt.n	8007866 <_dtoa_r+0x86e>
 8007822:	9b07      	ldr	r3, [sp, #28]
 8007824:	2b02      	cmp	r3, #2
 8007826:	dd1e      	ble.n	8007866 <_dtoa_r+0x86e>
 8007828:	f1bb 0f00 	cmp.w	fp, #0
 800782c:	f47f aeb7 	bne.w	800759e <_dtoa_r+0x5a6>
 8007830:	4621      	mov	r1, r4
 8007832:	465b      	mov	r3, fp
 8007834:	2205      	movs	r2, #5
 8007836:	4648      	mov	r0, r9
 8007838:	f000 fc50 	bl	80080dc <__multadd>
 800783c:	4601      	mov	r1, r0
 800783e:	4604      	mov	r4, r0
 8007840:	9801      	ldr	r0, [sp, #4]
 8007842:	f000 fe63 	bl	800850c <__mcmp>
 8007846:	2800      	cmp	r0, #0
 8007848:	f77f aea9 	ble.w	800759e <_dtoa_r+0x5a6>
 800784c:	463e      	mov	r6, r7
 800784e:	2331      	movs	r3, #49	@ 0x31
 8007850:	f806 3b01 	strb.w	r3, [r6], #1
 8007854:	9b04      	ldr	r3, [sp, #16]
 8007856:	3301      	adds	r3, #1
 8007858:	9304      	str	r3, [sp, #16]
 800785a:	e6a4      	b.n	80075a6 <_dtoa_r+0x5ae>
 800785c:	f8cd 8010 	str.w	r8, [sp, #16]
 8007860:	4654      	mov	r4, sl
 8007862:	4625      	mov	r5, r4
 8007864:	e7f2      	b.n	800784c <_dtoa_r+0x854>
 8007866:	9b08      	ldr	r3, [sp, #32]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8103 	beq.w	8007a74 <_dtoa_r+0xa7c>
 800786e:	2e00      	cmp	r6, #0
 8007870:	dd05      	ble.n	800787e <_dtoa_r+0x886>
 8007872:	4629      	mov	r1, r5
 8007874:	4632      	mov	r2, r6
 8007876:	4648      	mov	r0, r9
 8007878:	f000 fddc 	bl	8008434 <__lshift>
 800787c:	4605      	mov	r5, r0
 800787e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d058      	beq.n	8007936 <_dtoa_r+0x93e>
 8007884:	6869      	ldr	r1, [r5, #4]
 8007886:	4648      	mov	r0, r9
 8007888:	f000 fbc6 	bl	8008018 <_Balloc>
 800788c:	4606      	mov	r6, r0
 800788e:	b928      	cbnz	r0, 800789c <_dtoa_r+0x8a4>
 8007890:	4b82      	ldr	r3, [pc, #520]	@ (8007a9c <_dtoa_r+0xaa4>)
 8007892:	4602      	mov	r2, r0
 8007894:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007898:	f7ff bbc7 	b.w	800702a <_dtoa_r+0x32>
 800789c:	692a      	ldr	r2, [r5, #16]
 800789e:	3202      	adds	r2, #2
 80078a0:	0092      	lsls	r2, r2, #2
 80078a2:	f105 010c 	add.w	r1, r5, #12
 80078a6:	300c      	adds	r0, #12
 80078a8:	f001 f81a 	bl	80088e0 <memcpy>
 80078ac:	2201      	movs	r2, #1
 80078ae:	4631      	mov	r1, r6
 80078b0:	4648      	mov	r0, r9
 80078b2:	f000 fdbf 	bl	8008434 <__lshift>
 80078b6:	1c7b      	adds	r3, r7, #1
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	eb07 030b 	add.w	r3, r7, fp
 80078be:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	46a8      	mov	r8, r5
 80078c8:	9308      	str	r3, [sp, #32]
 80078ca:	4605      	mov	r5, r0
 80078cc:	9b05      	ldr	r3, [sp, #20]
 80078ce:	9801      	ldr	r0, [sp, #4]
 80078d0:	4621      	mov	r1, r4
 80078d2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80078d6:	f7ff fb06 	bl	8006ee6 <quorem>
 80078da:	4641      	mov	r1, r8
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80078e2:	9801      	ldr	r0, [sp, #4]
 80078e4:	f000 fe12 	bl	800850c <__mcmp>
 80078e8:	462a      	mov	r2, r5
 80078ea:	9006      	str	r0, [sp, #24]
 80078ec:	4621      	mov	r1, r4
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 fe28 	bl	8008544 <__mdiff>
 80078f4:	68c2      	ldr	r2, [r0, #12]
 80078f6:	4606      	mov	r6, r0
 80078f8:	b9fa      	cbnz	r2, 800793a <_dtoa_r+0x942>
 80078fa:	4601      	mov	r1, r0
 80078fc:	9801      	ldr	r0, [sp, #4]
 80078fe:	f000 fe05 	bl	800850c <__mcmp>
 8007902:	4602      	mov	r2, r0
 8007904:	4631      	mov	r1, r6
 8007906:	4648      	mov	r0, r9
 8007908:	920a      	str	r2, [sp, #40]	@ 0x28
 800790a:	f000 fbc5 	bl	8008098 <_Bfree>
 800790e:	9b07      	ldr	r3, [sp, #28]
 8007910:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007912:	9e05      	ldr	r6, [sp, #20]
 8007914:	ea43 0102 	orr.w	r1, r3, r2
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	4319      	orrs	r1, r3
 800791c:	d10f      	bne.n	800793e <_dtoa_r+0x946>
 800791e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007922:	d028      	beq.n	8007976 <_dtoa_r+0x97e>
 8007924:	9b06      	ldr	r3, [sp, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dd02      	ble.n	8007930 <_dtoa_r+0x938>
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007930:	f88b a000 	strb.w	sl, [fp]
 8007934:	e639      	b.n	80075aa <_dtoa_r+0x5b2>
 8007936:	4628      	mov	r0, r5
 8007938:	e7bd      	b.n	80078b6 <_dtoa_r+0x8be>
 800793a:	2201      	movs	r2, #1
 800793c:	e7e2      	b.n	8007904 <_dtoa_r+0x90c>
 800793e:	9b06      	ldr	r3, [sp, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db04      	blt.n	800794e <_dtoa_r+0x956>
 8007944:	9907      	ldr	r1, [sp, #28]
 8007946:	430b      	orrs	r3, r1
 8007948:	9908      	ldr	r1, [sp, #32]
 800794a:	430b      	orrs	r3, r1
 800794c:	d120      	bne.n	8007990 <_dtoa_r+0x998>
 800794e:	2a00      	cmp	r2, #0
 8007950:	ddee      	ble.n	8007930 <_dtoa_r+0x938>
 8007952:	9901      	ldr	r1, [sp, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	4648      	mov	r0, r9
 8007958:	f000 fd6c 	bl	8008434 <__lshift>
 800795c:	4621      	mov	r1, r4
 800795e:	9001      	str	r0, [sp, #4]
 8007960:	f000 fdd4 	bl	800850c <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	dc03      	bgt.n	8007970 <_dtoa_r+0x978>
 8007968:	d1e2      	bne.n	8007930 <_dtoa_r+0x938>
 800796a:	f01a 0f01 	tst.w	sl, #1
 800796e:	d0df      	beq.n	8007930 <_dtoa_r+0x938>
 8007970:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007974:	d1d9      	bne.n	800792a <_dtoa_r+0x932>
 8007976:	2339      	movs	r3, #57	@ 0x39
 8007978:	f88b 3000 	strb.w	r3, [fp]
 800797c:	4633      	mov	r3, r6
 800797e:	461e      	mov	r6, r3
 8007980:	3b01      	subs	r3, #1
 8007982:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007986:	2a39      	cmp	r2, #57	@ 0x39
 8007988:	d053      	beq.n	8007a32 <_dtoa_r+0xa3a>
 800798a:	3201      	adds	r2, #1
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	e60c      	b.n	80075aa <_dtoa_r+0x5b2>
 8007990:	2a00      	cmp	r2, #0
 8007992:	dd07      	ble.n	80079a4 <_dtoa_r+0x9ac>
 8007994:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007998:	d0ed      	beq.n	8007976 <_dtoa_r+0x97e>
 800799a:	f10a 0301 	add.w	r3, sl, #1
 800799e:	f88b 3000 	strb.w	r3, [fp]
 80079a2:	e602      	b.n	80075aa <_dtoa_r+0x5b2>
 80079a4:	9b05      	ldr	r3, [sp, #20]
 80079a6:	9a05      	ldr	r2, [sp, #20]
 80079a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80079ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d029      	beq.n	8007a06 <_dtoa_r+0xa0e>
 80079b2:	9901      	ldr	r1, [sp, #4]
 80079b4:	2300      	movs	r3, #0
 80079b6:	220a      	movs	r2, #10
 80079b8:	4648      	mov	r0, r9
 80079ba:	f000 fb8f 	bl	80080dc <__multadd>
 80079be:	45a8      	cmp	r8, r5
 80079c0:	9001      	str	r0, [sp, #4]
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f04f 020a 	mov.w	r2, #10
 80079ca:	4641      	mov	r1, r8
 80079cc:	4648      	mov	r0, r9
 80079ce:	d107      	bne.n	80079e0 <_dtoa_r+0x9e8>
 80079d0:	f000 fb84 	bl	80080dc <__multadd>
 80079d4:	4680      	mov	r8, r0
 80079d6:	4605      	mov	r5, r0
 80079d8:	9b05      	ldr	r3, [sp, #20]
 80079da:	3301      	adds	r3, #1
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	e775      	b.n	80078cc <_dtoa_r+0x8d4>
 80079e0:	f000 fb7c 	bl	80080dc <__multadd>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4680      	mov	r8, r0
 80079e8:	2300      	movs	r3, #0
 80079ea:	220a      	movs	r2, #10
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 fb75 	bl	80080dc <__multadd>
 80079f2:	4605      	mov	r5, r0
 80079f4:	e7f0      	b.n	80079d8 <_dtoa_r+0x9e0>
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	bfcc      	ite	gt
 80079fc:	465e      	movgt	r6, fp
 80079fe:	2601      	movle	r6, #1
 8007a00:	443e      	add	r6, r7
 8007a02:	f04f 0800 	mov.w	r8, #0
 8007a06:	9901      	ldr	r1, [sp, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f000 fd12 	bl	8008434 <__lshift>
 8007a10:	4621      	mov	r1, r4
 8007a12:	9001      	str	r0, [sp, #4]
 8007a14:	f000 fd7a 	bl	800850c <__mcmp>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dcaf      	bgt.n	800797c <_dtoa_r+0x984>
 8007a1c:	d102      	bne.n	8007a24 <_dtoa_r+0xa2c>
 8007a1e:	f01a 0f01 	tst.w	sl, #1
 8007a22:	d1ab      	bne.n	800797c <_dtoa_r+0x984>
 8007a24:	4633      	mov	r3, r6
 8007a26:	461e      	mov	r6, r3
 8007a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a2c:	2a30      	cmp	r2, #48	@ 0x30
 8007a2e:	d0fa      	beq.n	8007a26 <_dtoa_r+0xa2e>
 8007a30:	e5bb      	b.n	80075aa <_dtoa_r+0x5b2>
 8007a32:	429f      	cmp	r7, r3
 8007a34:	d1a3      	bne.n	800797e <_dtoa_r+0x986>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	2331      	movs	r3, #49	@ 0x31
 8007a3e:	703b      	strb	r3, [r7, #0]
 8007a40:	e5b3      	b.n	80075aa <_dtoa_r+0x5b2>
 8007a42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007a44:	4f16      	ldr	r7, [pc, #88]	@ (8007aa0 <_dtoa_r+0xaa8>)
 8007a46:	b11b      	cbz	r3, 8007a50 <_dtoa_r+0xa58>
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4638      	mov	r0, r7
 8007a52:	b011      	add	sp, #68	@ 0x44
 8007a54:	ecbd 8b02 	vpop	{d8}
 8007a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f77f ae36 	ble.w	80076d0 <_dtoa_r+0x6d8>
 8007a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a68:	2001      	movs	r0, #1
 8007a6a:	e656      	b.n	800771a <_dtoa_r+0x722>
 8007a6c:	f1bb 0f00 	cmp.w	fp, #0
 8007a70:	f77f aed7 	ble.w	8007822 <_dtoa_r+0x82a>
 8007a74:	463e      	mov	r6, r7
 8007a76:	9801      	ldr	r0, [sp, #4]
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7ff fa34 	bl	8006ee6 <quorem>
 8007a7e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007a82:	f806 ab01 	strb.w	sl, [r6], #1
 8007a86:	1bf2      	subs	r2, r6, r7
 8007a88:	4593      	cmp	fp, r2
 8007a8a:	ddb4      	ble.n	80079f6 <_dtoa_r+0x9fe>
 8007a8c:	9901      	ldr	r1, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	220a      	movs	r2, #10
 8007a92:	4648      	mov	r0, r9
 8007a94:	f000 fb22 	bl	80080dc <__multadd>
 8007a98:	9001      	str	r0, [sp, #4]
 8007a9a:	e7ec      	b.n	8007a76 <_dtoa_r+0xa7e>
 8007a9c:	080090f8 	.word	0x080090f8
 8007aa0:	0800907c 	.word	0x0800907c

08007aa4 <__ssputs_r>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	688e      	ldr	r6, [r1, #8]
 8007aaa:	461f      	mov	r7, r3
 8007aac:	42be      	cmp	r6, r7
 8007aae:	680b      	ldr	r3, [r1, #0]
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	4690      	mov	r8, r2
 8007ab6:	d82d      	bhi.n	8007b14 <__ssputs_r+0x70>
 8007ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007abc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ac0:	d026      	beq.n	8007b10 <__ssputs_r+0x6c>
 8007ac2:	6965      	ldr	r5, [r4, #20]
 8007ac4:	6909      	ldr	r1, [r1, #16]
 8007ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aca:	eba3 0901 	sub.w	r9, r3, r1
 8007ace:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad2:	1c7b      	adds	r3, r7, #1
 8007ad4:	444b      	add	r3, r9
 8007ad6:	106d      	asrs	r5, r5, #1
 8007ad8:	429d      	cmp	r5, r3
 8007ada:	bf38      	it	cc
 8007adc:	461d      	movcc	r5, r3
 8007ade:	0553      	lsls	r3, r2, #21
 8007ae0:	d527      	bpl.n	8007b32 <__ssputs_r+0x8e>
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	f000 f960 	bl	8007da8 <_malloc_r>
 8007ae8:	4606      	mov	r6, r0
 8007aea:	b360      	cbz	r0, 8007b46 <__ssputs_r+0xa2>
 8007aec:	6921      	ldr	r1, [r4, #16]
 8007aee:	464a      	mov	r2, r9
 8007af0:	f000 fef6 	bl	80088e0 <memcpy>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	6126      	str	r6, [r4, #16]
 8007b02:	6165      	str	r5, [r4, #20]
 8007b04:	444e      	add	r6, r9
 8007b06:	eba5 0509 	sub.w	r5, r5, r9
 8007b0a:	6026      	str	r6, [r4, #0]
 8007b0c:	60a5      	str	r5, [r4, #8]
 8007b0e:	463e      	mov	r6, r7
 8007b10:	42be      	cmp	r6, r7
 8007b12:	d900      	bls.n	8007b16 <__ssputs_r+0x72>
 8007b14:	463e      	mov	r6, r7
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	f000 fe6f 	bl	80087fe <memmove>
 8007b20:	68a3      	ldr	r3, [r4, #8]
 8007b22:	1b9b      	subs	r3, r3, r6
 8007b24:	60a3      	str	r3, [r4, #8]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	4433      	add	r3, r6
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	462a      	mov	r2, r5
 8007b34:	f000 fe35 	bl	80087a2 <_realloc_r>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d1e0      	bne.n	8007b00 <__ssputs_r+0x5c>
 8007b3e:	6921      	ldr	r1, [r4, #16]
 8007b40:	4650      	mov	r0, sl
 8007b42:	f000 ff0d 	bl	8008960 <_free_r>
 8007b46:	230c      	movs	r3, #12
 8007b48:	f8ca 3000 	str.w	r3, [sl]
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b58:	e7e9      	b.n	8007b2e <__ssputs_r+0x8a>
	...

08007b5c <_svfiprintf_r>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4698      	mov	r8, r3
 8007b62:	898b      	ldrh	r3, [r1, #12]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	b09d      	sub	sp, #116	@ 0x74
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	d510      	bpl.n	8007b92 <_svfiprintf_r+0x36>
 8007b70:	690b      	ldr	r3, [r1, #16]
 8007b72:	b973      	cbnz	r3, 8007b92 <_svfiprintf_r+0x36>
 8007b74:	2140      	movs	r1, #64	@ 0x40
 8007b76:	f000 f917 	bl	8007da8 <_malloc_r>
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	6128      	str	r0, [r5, #16]
 8007b7e:	b930      	cbnz	r0, 8007b8e <_svfiprintf_r+0x32>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b88:	b01d      	add	sp, #116	@ 0x74
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	2340      	movs	r3, #64	@ 0x40
 8007b90:	616b      	str	r3, [r5, #20]
 8007b92:	2300      	movs	r3, #0
 8007b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b96:	2320      	movs	r3, #32
 8007b98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba0:	2330      	movs	r3, #48	@ 0x30
 8007ba2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d40 <_svfiprintf_r+0x1e4>
 8007ba6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007baa:	f04f 0901 	mov.w	r9, #1
 8007bae:	4623      	mov	r3, r4
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb6:	b10a      	cbz	r2, 8007bbc <_svfiprintf_r+0x60>
 8007bb8:	2a25      	cmp	r2, #37	@ 0x25
 8007bba:	d1f9      	bne.n	8007bb0 <_svfiprintf_r+0x54>
 8007bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc0:	d00b      	beq.n	8007bda <_svfiprintf_r+0x7e>
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ff6b 	bl	8007aa4 <__ssputs_r>
 8007bce:	3001      	adds	r0, #1
 8007bd0:	f000 80a7 	beq.w	8007d22 <_svfiprintf_r+0x1c6>
 8007bd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bd6:	445a      	add	r2, fp
 8007bd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bda:	f89a 3000 	ldrb.w	r3, [sl]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 809f 	beq.w	8007d22 <_svfiprintf_r+0x1c6>
 8007be4:	2300      	movs	r3, #0
 8007be6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bee:	f10a 0a01 	add.w	sl, sl, #1
 8007bf2:	9304      	str	r3, [sp, #16]
 8007bf4:	9307      	str	r3, [sp, #28]
 8007bf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2205      	movs	r2, #5
 8007c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c04:	484e      	ldr	r0, [pc, #312]	@ (8007d40 <_svfiprintf_r+0x1e4>)
 8007c06:	f7f8 fb1b 	bl	8000240 <memchr>
 8007c0a:	9a04      	ldr	r2, [sp, #16]
 8007c0c:	b9d8      	cbnz	r0, 8007c46 <_svfiprintf_r+0xea>
 8007c0e:	06d0      	lsls	r0, r2, #27
 8007c10:	bf44      	itt	mi
 8007c12:	2320      	movmi	r3, #32
 8007c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c18:	0711      	lsls	r1, r2, #28
 8007c1a:	bf44      	itt	mi
 8007c1c:	232b      	movmi	r3, #43	@ 0x2b
 8007c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c22:	f89a 3000 	ldrb.w	r3, [sl]
 8007c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c28:	d015      	beq.n	8007c56 <_svfiprintf_r+0xfa>
 8007c2a:	9a07      	ldr	r2, [sp, #28]
 8007c2c:	4654      	mov	r4, sl
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f04f 0c0a 	mov.w	ip, #10
 8007c34:	4621      	mov	r1, r4
 8007c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c3a:	3b30      	subs	r3, #48	@ 0x30
 8007c3c:	2b09      	cmp	r3, #9
 8007c3e:	d94b      	bls.n	8007cd8 <_svfiprintf_r+0x17c>
 8007c40:	b1b0      	cbz	r0, 8007c70 <_svfiprintf_r+0x114>
 8007c42:	9207      	str	r2, [sp, #28]
 8007c44:	e014      	b.n	8007c70 <_svfiprintf_r+0x114>
 8007c46:	eba0 0308 	sub.w	r3, r0, r8
 8007c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	9304      	str	r3, [sp, #16]
 8007c52:	46a2      	mov	sl, r4
 8007c54:	e7d2      	b.n	8007bfc <_svfiprintf_r+0xa0>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	1d19      	adds	r1, r3, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	9103      	str	r1, [sp, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bfbb      	ittet	lt
 8007c62:	425b      	neglt	r3, r3
 8007c64:	f042 0202 	orrlt.w	r2, r2, #2
 8007c68:	9307      	strge	r3, [sp, #28]
 8007c6a:	9307      	strlt	r3, [sp, #28]
 8007c6c:	bfb8      	it	lt
 8007c6e:	9204      	strlt	r2, [sp, #16]
 8007c70:	7823      	ldrb	r3, [r4, #0]
 8007c72:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c74:	d10a      	bne.n	8007c8c <_svfiprintf_r+0x130>
 8007c76:	7863      	ldrb	r3, [r4, #1]
 8007c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7a:	d132      	bne.n	8007ce2 <_svfiprintf_r+0x186>
 8007c7c:	9b03      	ldr	r3, [sp, #12]
 8007c7e:	1d1a      	adds	r2, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	9203      	str	r2, [sp, #12]
 8007c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c88:	3402      	adds	r4, #2
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d50 <_svfiprintf_r+0x1f4>
 8007c90:	7821      	ldrb	r1, [r4, #0]
 8007c92:	2203      	movs	r2, #3
 8007c94:	4650      	mov	r0, sl
 8007c96:	f7f8 fad3 	bl	8000240 <memchr>
 8007c9a:	b138      	cbz	r0, 8007cac <_svfiprintf_r+0x150>
 8007c9c:	9b04      	ldr	r3, [sp, #16]
 8007c9e:	eba0 000a 	sub.w	r0, r0, sl
 8007ca2:	2240      	movs	r2, #64	@ 0x40
 8007ca4:	4082      	lsls	r2, r0
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	3401      	adds	r4, #1
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb0:	4824      	ldr	r0, [pc, #144]	@ (8007d44 <_svfiprintf_r+0x1e8>)
 8007cb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cb6:	2206      	movs	r2, #6
 8007cb8:	f7f8 fac2 	bl	8000240 <memchr>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d036      	beq.n	8007d2e <_svfiprintf_r+0x1d2>
 8007cc0:	4b21      	ldr	r3, [pc, #132]	@ (8007d48 <_svfiprintf_r+0x1ec>)
 8007cc2:	bb1b      	cbnz	r3, 8007d0c <_svfiprintf_r+0x1b0>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	3307      	adds	r3, #7
 8007cc8:	f023 0307 	bic.w	r3, r3, #7
 8007ccc:	3308      	adds	r3, #8
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd2:	4433      	add	r3, r6
 8007cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd6:	e76a      	b.n	8007bae <_svfiprintf_r+0x52>
 8007cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cdc:	460c      	mov	r4, r1
 8007cde:	2001      	movs	r0, #1
 8007ce0:	e7a8      	b.n	8007c34 <_svfiprintf_r+0xd8>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	3401      	adds	r4, #1
 8007ce6:	9305      	str	r3, [sp, #20]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f04f 0c0a 	mov.w	ip, #10
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf4:	3a30      	subs	r2, #48	@ 0x30
 8007cf6:	2a09      	cmp	r2, #9
 8007cf8:	d903      	bls.n	8007d02 <_svfiprintf_r+0x1a6>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0c6      	beq.n	8007c8c <_svfiprintf_r+0x130>
 8007cfe:	9105      	str	r1, [sp, #20]
 8007d00:	e7c4      	b.n	8007c8c <_svfiprintf_r+0x130>
 8007d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d06:	4604      	mov	r4, r0
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7f0      	b.n	8007cee <_svfiprintf_r+0x192>
 8007d0c:	ab03      	add	r3, sp, #12
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4b0e      	ldr	r3, [pc, #56]	@ (8007d4c <_svfiprintf_r+0x1f0>)
 8007d14:	a904      	add	r1, sp, #16
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7fe fc22 	bl	8006560 <_printf_float>
 8007d1c:	1c42      	adds	r2, r0, #1
 8007d1e:	4606      	mov	r6, r0
 8007d20:	d1d6      	bne.n	8007cd0 <_svfiprintf_r+0x174>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	065b      	lsls	r3, r3, #25
 8007d26:	f53f af2d 	bmi.w	8007b84 <_svfiprintf_r+0x28>
 8007d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d2c:	e72c      	b.n	8007b88 <_svfiprintf_r+0x2c>
 8007d2e:	ab03      	add	r3, sp, #12
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	462a      	mov	r2, r5
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <_svfiprintf_r+0x1f0>)
 8007d36:	a904      	add	r1, sp, #16
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7fe fe99 	bl	8006a70 <_printf_i>
 8007d3e:	e7ed      	b.n	8007d1c <_svfiprintf_r+0x1c0>
 8007d40:	08009109 	.word	0x08009109
 8007d44:	08009113 	.word	0x08009113
 8007d48:	08006561 	.word	0x08006561
 8007d4c:	08007aa5 	.word	0x08007aa5
 8007d50:	0800910f 	.word	0x0800910f

08007d54 <malloc>:
 8007d54:	4b02      	ldr	r3, [pc, #8]	@ (8007d60 <malloc+0xc>)
 8007d56:	4601      	mov	r1, r0
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	f000 b825 	b.w	8007da8 <_malloc_r>
 8007d5e:	bf00      	nop
 8007d60:	20000020 	.word	0x20000020

08007d64 <sbrk_aligned>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4e0f      	ldr	r6, [pc, #60]	@ (8007da4 <sbrk_aligned+0x40>)
 8007d68:	460c      	mov	r4, r1
 8007d6a:	6831      	ldr	r1, [r6, #0]
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	b911      	cbnz	r1, 8007d76 <sbrk_aligned+0x12>
 8007d70:	f000 fd94 	bl	800889c <_sbrk_r>
 8007d74:	6030      	str	r0, [r6, #0]
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 fd8f 	bl	800889c <_sbrk_r>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	d103      	bne.n	8007d8a <sbrk_aligned+0x26>
 8007d82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007d86:	4620      	mov	r0, r4
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	1cc4      	adds	r4, r0, #3
 8007d8c:	f024 0403 	bic.w	r4, r4, #3
 8007d90:	42a0      	cmp	r0, r4
 8007d92:	d0f8      	beq.n	8007d86 <sbrk_aligned+0x22>
 8007d94:	1a21      	subs	r1, r4, r0
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 fd80 	bl	800889c <_sbrk_r>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d1f2      	bne.n	8007d86 <sbrk_aligned+0x22>
 8007da0:	e7ef      	b.n	8007d82 <sbrk_aligned+0x1e>
 8007da2:	bf00      	nop
 8007da4:	20000bf8 	.word	0x20000bf8

08007da8 <_malloc_r>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	1ccd      	adds	r5, r1, #3
 8007dae:	f025 0503 	bic.w	r5, r5, #3
 8007db2:	3508      	adds	r5, #8
 8007db4:	2d0c      	cmp	r5, #12
 8007db6:	bf38      	it	cc
 8007db8:	250c      	movcc	r5, #12
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	db01      	blt.n	8007dc4 <_malloc_r+0x1c>
 8007dc0:	42a9      	cmp	r1, r5
 8007dc2:	d904      	bls.n	8007dce <_malloc_r+0x26>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	2000      	movs	r0, #0
 8007dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ea4 <_malloc_r+0xfc>
 8007dd2:	f000 f915 	bl	8008000 <__malloc_lock>
 8007dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dda:	461c      	mov	r4, r3
 8007ddc:	bb44      	cbnz	r4, 8007e30 <_malloc_r+0x88>
 8007dde:	4629      	mov	r1, r5
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff ffbf 	bl	8007d64 <sbrk_aligned>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	4604      	mov	r4, r0
 8007dea:	d158      	bne.n	8007e9e <_malloc_r+0xf6>
 8007dec:	f8d8 4000 	ldr.w	r4, [r8]
 8007df0:	4627      	mov	r7, r4
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	d143      	bne.n	8007e7e <_malloc_r+0xd6>
 8007df6:	2c00      	cmp	r4, #0
 8007df8:	d04b      	beq.n	8007e92 <_malloc_r+0xea>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4630      	mov	r0, r6
 8007e00:	eb04 0903 	add.w	r9, r4, r3
 8007e04:	f000 fd4a 	bl	800889c <_sbrk_r>
 8007e08:	4581      	cmp	r9, r0
 8007e0a:	d142      	bne.n	8007e92 <_malloc_r+0xea>
 8007e0c:	6821      	ldr	r1, [r4, #0]
 8007e0e:	1a6d      	subs	r5, r5, r1
 8007e10:	4629      	mov	r1, r5
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ffa6 	bl	8007d64 <sbrk_aligned>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d03a      	beq.n	8007e92 <_malloc_r+0xea>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	442b      	add	r3, r5
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	f8d8 3000 	ldr.w	r3, [r8]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	bb62      	cbnz	r2, 8007e84 <_malloc_r+0xdc>
 8007e2a:	f8c8 7000 	str.w	r7, [r8]
 8007e2e:	e00f      	b.n	8007e50 <_malloc_r+0xa8>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	1b52      	subs	r2, r2, r5
 8007e34:	d420      	bmi.n	8007e78 <_malloc_r+0xd0>
 8007e36:	2a0b      	cmp	r2, #11
 8007e38:	d917      	bls.n	8007e6a <_malloc_r+0xc2>
 8007e3a:	1961      	adds	r1, r4, r5
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	6025      	str	r5, [r4, #0]
 8007e40:	bf18      	it	ne
 8007e42:	6059      	strne	r1, [r3, #4]
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	bf08      	it	eq
 8007e48:	f8c8 1000 	streq.w	r1, [r8]
 8007e4c:	5162      	str	r2, [r4, r5]
 8007e4e:	604b      	str	r3, [r1, #4]
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f8db 	bl	800800c <__malloc_unlock>
 8007e56:	f104 000b 	add.w	r0, r4, #11
 8007e5a:	1d23      	adds	r3, r4, #4
 8007e5c:	f020 0007 	bic.w	r0, r0, #7
 8007e60:	1ac2      	subs	r2, r0, r3
 8007e62:	bf1c      	itt	ne
 8007e64:	1a1b      	subne	r3, r3, r0
 8007e66:	50a3      	strne	r3, [r4, r2]
 8007e68:	e7af      	b.n	8007dca <_malloc_r+0x22>
 8007e6a:	6862      	ldr	r2, [r4, #4]
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	bf0c      	ite	eq
 8007e70:	f8c8 2000 	streq.w	r2, [r8]
 8007e74:	605a      	strne	r2, [r3, #4]
 8007e76:	e7eb      	b.n	8007e50 <_malloc_r+0xa8>
 8007e78:	4623      	mov	r3, r4
 8007e7a:	6864      	ldr	r4, [r4, #4]
 8007e7c:	e7ae      	b.n	8007ddc <_malloc_r+0x34>
 8007e7e:	463c      	mov	r4, r7
 8007e80:	687f      	ldr	r7, [r7, #4]
 8007e82:	e7b6      	b.n	8007df2 <_malloc_r+0x4a>
 8007e84:	461a      	mov	r2, r3
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	42a3      	cmp	r3, r4
 8007e8a:	d1fb      	bne.n	8007e84 <_malloc_r+0xdc>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	6053      	str	r3, [r2, #4]
 8007e90:	e7de      	b.n	8007e50 <_malloc_r+0xa8>
 8007e92:	230c      	movs	r3, #12
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 f8b8 	bl	800800c <__malloc_unlock>
 8007e9c:	e794      	b.n	8007dc8 <_malloc_r+0x20>
 8007e9e:	6005      	str	r5, [r0, #0]
 8007ea0:	e7d6      	b.n	8007e50 <_malloc_r+0xa8>
 8007ea2:	bf00      	nop
 8007ea4:	20000bfc 	.word	0x20000bfc

08007ea8 <__sflush_r>:
 8007ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	0716      	lsls	r6, r2, #28
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	d454      	bmi.n	8007f62 <__sflush_r+0xba>
 8007eb8:	684b      	ldr	r3, [r1, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	dc02      	bgt.n	8007ec4 <__sflush_r+0x1c>
 8007ebe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dd48      	ble.n	8007f56 <__sflush_r+0xae>
 8007ec4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	d045      	beq.n	8007f56 <__sflush_r+0xae>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ed0:	682f      	ldr	r7, [r5, #0]
 8007ed2:	6a21      	ldr	r1, [r4, #32]
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	d030      	beq.n	8007f3a <__sflush_r+0x92>
 8007ed8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	0759      	lsls	r1, r3, #29
 8007ede:	d505      	bpl.n	8007eec <__sflush_r+0x44>
 8007ee0:	6863      	ldr	r3, [r4, #4]
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ee6:	b10b      	cbz	r3, 8007eec <__sflush_r+0x44>
 8007ee8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	2300      	movs	r3, #0
 8007eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ef0:	6a21      	ldr	r1, [r4, #32]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b0      	blx	r6
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	d106      	bne.n	8007f0a <__sflush_r+0x62>
 8007efc:	6829      	ldr	r1, [r5, #0]
 8007efe:	291d      	cmp	r1, #29
 8007f00:	d82b      	bhi.n	8007f5a <__sflush_r+0xb2>
 8007f02:	4a2a      	ldr	r2, [pc, #168]	@ (8007fac <__sflush_r+0x104>)
 8007f04:	410a      	asrs	r2, r1
 8007f06:	07d6      	lsls	r6, r2, #31
 8007f08:	d427      	bmi.n	8007f5a <__sflush_r+0xb2>
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	6062      	str	r2, [r4, #4]
 8007f0e:	04d9      	lsls	r1, r3, #19
 8007f10:	6922      	ldr	r2, [r4, #16]
 8007f12:	6022      	str	r2, [r4, #0]
 8007f14:	d504      	bpl.n	8007f20 <__sflush_r+0x78>
 8007f16:	1c42      	adds	r2, r0, #1
 8007f18:	d101      	bne.n	8007f1e <__sflush_r+0x76>
 8007f1a:	682b      	ldr	r3, [r5, #0]
 8007f1c:	b903      	cbnz	r3, 8007f20 <__sflush_r+0x78>
 8007f1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f22:	602f      	str	r7, [r5, #0]
 8007f24:	b1b9      	cbz	r1, 8007f56 <__sflush_r+0xae>
 8007f26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	d002      	beq.n	8007f34 <__sflush_r+0x8c>
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fd16 	bl	8008960 <_free_r>
 8007f34:	2300      	movs	r3, #0
 8007f36:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f38:	e00d      	b.n	8007f56 <__sflush_r+0xae>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b0      	blx	r6
 8007f40:	4602      	mov	r2, r0
 8007f42:	1c50      	adds	r0, r2, #1
 8007f44:	d1c9      	bne.n	8007eda <__sflush_r+0x32>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0c6      	beq.n	8007eda <__sflush_r+0x32>
 8007f4c:	2b1d      	cmp	r3, #29
 8007f4e:	d001      	beq.n	8007f54 <__sflush_r+0xac>
 8007f50:	2b16      	cmp	r3, #22
 8007f52:	d11e      	bne.n	8007f92 <__sflush_r+0xea>
 8007f54:	602f      	str	r7, [r5, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	e022      	b.n	8007fa0 <__sflush_r+0xf8>
 8007f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f5e:	b21b      	sxth	r3, r3
 8007f60:	e01b      	b.n	8007f9a <__sflush_r+0xf2>
 8007f62:	690f      	ldr	r7, [r1, #16]
 8007f64:	2f00      	cmp	r7, #0
 8007f66:	d0f6      	beq.n	8007f56 <__sflush_r+0xae>
 8007f68:	0793      	lsls	r3, r2, #30
 8007f6a:	680e      	ldr	r6, [r1, #0]
 8007f6c:	bf08      	it	eq
 8007f6e:	694b      	ldreq	r3, [r1, #20]
 8007f70:	600f      	str	r7, [r1, #0]
 8007f72:	bf18      	it	ne
 8007f74:	2300      	movne	r3, #0
 8007f76:	eba6 0807 	sub.w	r8, r6, r7
 8007f7a:	608b      	str	r3, [r1, #8]
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	dde9      	ble.n	8007f56 <__sflush_r+0xae>
 8007f82:	6a21      	ldr	r1, [r4, #32]
 8007f84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f86:	4643      	mov	r3, r8
 8007f88:	463a      	mov	r2, r7
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b0      	blx	r6
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	dc08      	bgt.n	8007fa4 <__sflush_r+0xfc>
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa4:	4407      	add	r7, r0
 8007fa6:	eba8 0800 	sub.w	r8, r8, r0
 8007faa:	e7e7      	b.n	8007f7c <__sflush_r+0xd4>
 8007fac:	dfbffffe 	.word	0xdfbffffe

08007fb0 <_fflush_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	690b      	ldr	r3, [r1, #16]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b913      	cbnz	r3, 8007fc0 <_fflush_r+0x10>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	b118      	cbz	r0, 8007fca <_fflush_r+0x1a>
 8007fc2:	6a03      	ldr	r3, [r0, #32]
 8007fc4:	b90b      	cbnz	r3, 8007fca <_fflush_r+0x1a>
 8007fc6:	f7fe ff1f 	bl	8006e08 <__sinit>
 8007fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f3      	beq.n	8007fba <_fflush_r+0xa>
 8007fd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007fd4:	07d0      	lsls	r0, r2, #31
 8007fd6:	d404      	bmi.n	8007fe2 <_fflush_r+0x32>
 8007fd8:	0599      	lsls	r1, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_fflush_r+0x32>
 8007fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fde:	f7fe ff80 	bl	8006ee2 <__retarget_lock_acquire_recursive>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f7ff ff5f 	bl	8007ea8 <__sflush_r>
 8007fea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fec:	07da      	lsls	r2, r3, #31
 8007fee:	4605      	mov	r5, r0
 8007ff0:	d4e4      	bmi.n	8007fbc <_fflush_r+0xc>
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	059b      	lsls	r3, r3, #22
 8007ff6:	d4e1      	bmi.n	8007fbc <_fflush_r+0xc>
 8007ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ffa:	f7fe ff73 	bl	8006ee4 <__retarget_lock_release_recursive>
 8007ffe:	e7dd      	b.n	8007fbc <_fflush_r+0xc>

08008000 <__malloc_lock>:
 8008000:	4801      	ldr	r0, [pc, #4]	@ (8008008 <__malloc_lock+0x8>)
 8008002:	f7fe bf6e 	b.w	8006ee2 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	20000bf4 	.word	0x20000bf4

0800800c <__malloc_unlock>:
 800800c:	4801      	ldr	r0, [pc, #4]	@ (8008014 <__malloc_unlock+0x8>)
 800800e:	f7fe bf69 	b.w	8006ee4 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	20000bf4 	.word	0x20000bf4

08008018 <_Balloc>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	69c6      	ldr	r6, [r0, #28]
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	b976      	cbnz	r6, 8008040 <_Balloc+0x28>
 8008022:	2010      	movs	r0, #16
 8008024:	f7ff fe96 	bl	8007d54 <malloc>
 8008028:	4602      	mov	r2, r0
 800802a:	61e0      	str	r0, [r4, #28]
 800802c:	b920      	cbnz	r0, 8008038 <_Balloc+0x20>
 800802e:	4b18      	ldr	r3, [pc, #96]	@ (8008090 <_Balloc+0x78>)
 8008030:	4818      	ldr	r0, [pc, #96]	@ (8008094 <_Balloc+0x7c>)
 8008032:	216b      	movs	r1, #107	@ 0x6b
 8008034:	f000 fc62 	bl	80088fc <__assert_func>
 8008038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800803c:	6006      	str	r6, [r0, #0]
 800803e:	60c6      	str	r6, [r0, #12]
 8008040:	69e6      	ldr	r6, [r4, #28]
 8008042:	68f3      	ldr	r3, [r6, #12]
 8008044:	b183      	cbz	r3, 8008068 <_Balloc+0x50>
 8008046:	69e3      	ldr	r3, [r4, #28]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800804e:	b9b8      	cbnz	r0, 8008080 <_Balloc+0x68>
 8008050:	2101      	movs	r1, #1
 8008052:	fa01 f605 	lsl.w	r6, r1, r5
 8008056:	1d72      	adds	r2, r6, #5
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fc6c 	bl	8008938 <_calloc_r>
 8008060:	b160      	cbz	r0, 800807c <_Balloc+0x64>
 8008062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008066:	e00e      	b.n	8008086 <_Balloc+0x6e>
 8008068:	2221      	movs	r2, #33	@ 0x21
 800806a:	2104      	movs	r1, #4
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fc63 	bl	8008938 <_calloc_r>
 8008072:	69e3      	ldr	r3, [r4, #28]
 8008074:	60f0      	str	r0, [r6, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e4      	bne.n	8008046 <_Balloc+0x2e>
 800807c:	2000      	movs	r0, #0
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	6802      	ldr	r2, [r0, #0]
 8008082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008086:	2300      	movs	r3, #0
 8008088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800808c:	e7f7      	b.n	800807e <_Balloc+0x66>
 800808e:	bf00      	nop
 8008090:	08009089 	.word	0x08009089
 8008094:	0800911a 	.word	0x0800911a

08008098 <_Bfree>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	69c6      	ldr	r6, [r0, #28]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Bfree+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff fe56 	bl	8007d54 <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	61e8      	str	r0, [r5, #28]
 80080ac:	b920      	cbnz	r0, 80080b8 <_Bfree+0x20>
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <_Bfree+0x3c>)
 80080b0:	4809      	ldr	r0, [pc, #36]	@ (80080d8 <_Bfree+0x40>)
 80080b2:	218f      	movs	r1, #143	@ 0x8f
 80080b4:	f000 fc22 	bl	80088fc <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	b13c      	cbz	r4, 80080d2 <_Bfree+0x3a>
 80080c2:	69eb      	ldr	r3, [r5, #28]
 80080c4:	6862      	ldr	r2, [r4, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080cc:	6021      	str	r1, [r4, #0]
 80080ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	08009089 	.word	0x08009089
 80080d8:	0800911a 	.word	0x0800911a

080080dc <__multadd>:
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	690d      	ldr	r5, [r1, #16]
 80080e2:	4607      	mov	r7, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	461e      	mov	r6, r3
 80080e8:	f101 0c14 	add.w	ip, r1, #20
 80080ec:	2000      	movs	r0, #0
 80080ee:	f8dc 3000 	ldr.w	r3, [ip]
 80080f2:	b299      	uxth	r1, r3
 80080f4:	fb02 6101 	mla	r1, r2, r1, r6
 80080f8:	0c1e      	lsrs	r6, r3, #16
 80080fa:	0c0b      	lsrs	r3, r1, #16
 80080fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008100:	b289      	uxth	r1, r1
 8008102:	3001      	adds	r0, #1
 8008104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008108:	4285      	cmp	r5, r0
 800810a:	f84c 1b04 	str.w	r1, [ip], #4
 800810e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008112:	dcec      	bgt.n	80080ee <__multadd+0x12>
 8008114:	b30e      	cbz	r6, 800815a <__multadd+0x7e>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc19      	bgt.n	8008150 <__multadd+0x74>
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	4638      	mov	r0, r7
 8008120:	3101      	adds	r1, #1
 8008122:	f7ff ff79 	bl	8008018 <_Balloc>
 8008126:	4680      	mov	r8, r0
 8008128:	b928      	cbnz	r0, 8008136 <__multadd+0x5a>
 800812a:	4602      	mov	r2, r0
 800812c:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <__multadd+0x84>)
 800812e:	480d      	ldr	r0, [pc, #52]	@ (8008164 <__multadd+0x88>)
 8008130:	21ba      	movs	r1, #186	@ 0xba
 8008132:	f000 fbe3 	bl	80088fc <__assert_func>
 8008136:	6922      	ldr	r2, [r4, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	f104 010c 	add.w	r1, r4, #12
 800813e:	0092      	lsls	r2, r2, #2
 8008140:	300c      	adds	r0, #12
 8008142:	f000 fbcd 	bl	80088e0 <memcpy>
 8008146:	4621      	mov	r1, r4
 8008148:	4638      	mov	r0, r7
 800814a:	f7ff ffa5 	bl	8008098 <_Bfree>
 800814e:	4644      	mov	r4, r8
 8008150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008154:	3501      	adds	r5, #1
 8008156:	615e      	str	r6, [r3, #20]
 8008158:	6125      	str	r5, [r4, #16]
 800815a:	4620      	mov	r0, r4
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008160:	080090f8 	.word	0x080090f8
 8008164:	0800911a 	.word	0x0800911a

08008168 <__hi0bits>:
 8008168:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800816c:	4603      	mov	r3, r0
 800816e:	bf36      	itet	cc
 8008170:	0403      	lslcc	r3, r0, #16
 8008172:	2000      	movcs	r0, #0
 8008174:	2010      	movcc	r0, #16
 8008176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800817a:	bf3c      	itt	cc
 800817c:	021b      	lslcc	r3, r3, #8
 800817e:	3008      	addcc	r0, #8
 8008180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008184:	bf3c      	itt	cc
 8008186:	011b      	lslcc	r3, r3, #4
 8008188:	3004      	addcc	r0, #4
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818e:	bf3c      	itt	cc
 8008190:	009b      	lslcc	r3, r3, #2
 8008192:	3002      	addcc	r0, #2
 8008194:	2b00      	cmp	r3, #0
 8008196:	db05      	blt.n	80081a4 <__hi0bits+0x3c>
 8008198:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800819c:	f100 0001 	add.w	r0, r0, #1
 80081a0:	bf08      	it	eq
 80081a2:	2020      	moveq	r0, #32
 80081a4:	4770      	bx	lr

080081a6 <__lo0bits>:
 80081a6:	6803      	ldr	r3, [r0, #0]
 80081a8:	4602      	mov	r2, r0
 80081aa:	f013 0007 	ands.w	r0, r3, #7
 80081ae:	d00b      	beq.n	80081c8 <__lo0bits+0x22>
 80081b0:	07d9      	lsls	r1, r3, #31
 80081b2:	d421      	bmi.n	80081f8 <__lo0bits+0x52>
 80081b4:	0798      	lsls	r0, r3, #30
 80081b6:	bf49      	itett	mi
 80081b8:	085b      	lsrmi	r3, r3, #1
 80081ba:	089b      	lsrpl	r3, r3, #2
 80081bc:	2001      	movmi	r0, #1
 80081be:	6013      	strmi	r3, [r2, #0]
 80081c0:	bf5c      	itt	pl
 80081c2:	6013      	strpl	r3, [r2, #0]
 80081c4:	2002      	movpl	r0, #2
 80081c6:	4770      	bx	lr
 80081c8:	b299      	uxth	r1, r3
 80081ca:	b909      	cbnz	r1, 80081d0 <__lo0bits+0x2a>
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	2010      	movs	r0, #16
 80081d0:	b2d9      	uxtb	r1, r3
 80081d2:	b909      	cbnz	r1, 80081d8 <__lo0bits+0x32>
 80081d4:	3008      	adds	r0, #8
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	0719      	lsls	r1, r3, #28
 80081da:	bf04      	itt	eq
 80081dc:	091b      	lsreq	r3, r3, #4
 80081de:	3004      	addeq	r0, #4
 80081e0:	0799      	lsls	r1, r3, #30
 80081e2:	bf04      	itt	eq
 80081e4:	089b      	lsreq	r3, r3, #2
 80081e6:	3002      	addeq	r0, #2
 80081e8:	07d9      	lsls	r1, r3, #31
 80081ea:	d403      	bmi.n	80081f4 <__lo0bits+0x4e>
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	f100 0001 	add.w	r0, r0, #1
 80081f2:	d003      	beq.n	80081fc <__lo0bits+0x56>
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4770      	bx	lr
 80081f8:	2000      	movs	r0, #0
 80081fa:	4770      	bx	lr
 80081fc:	2020      	movs	r0, #32
 80081fe:	4770      	bx	lr

08008200 <__i2b>:
 8008200:	b510      	push	{r4, lr}
 8008202:	460c      	mov	r4, r1
 8008204:	2101      	movs	r1, #1
 8008206:	f7ff ff07 	bl	8008018 <_Balloc>
 800820a:	4602      	mov	r2, r0
 800820c:	b928      	cbnz	r0, 800821a <__i2b+0x1a>
 800820e:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <__i2b+0x24>)
 8008210:	4805      	ldr	r0, [pc, #20]	@ (8008228 <__i2b+0x28>)
 8008212:	f240 1145 	movw	r1, #325	@ 0x145
 8008216:	f000 fb71 	bl	80088fc <__assert_func>
 800821a:	2301      	movs	r3, #1
 800821c:	6144      	str	r4, [r0, #20]
 800821e:	6103      	str	r3, [r0, #16]
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	080090f8 	.word	0x080090f8
 8008228:	0800911a 	.word	0x0800911a

0800822c <__multiply>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	4614      	mov	r4, r2
 8008232:	690a      	ldr	r2, [r1, #16]
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	429a      	cmp	r2, r3
 8008238:	bfa8      	it	ge
 800823a:	4623      	movge	r3, r4
 800823c:	460f      	mov	r7, r1
 800823e:	bfa4      	itt	ge
 8008240:	460c      	movge	r4, r1
 8008242:	461f      	movge	r7, r3
 8008244:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008248:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800824c:	68a3      	ldr	r3, [r4, #8]
 800824e:	6861      	ldr	r1, [r4, #4]
 8008250:	eb0a 0609 	add.w	r6, sl, r9
 8008254:	42b3      	cmp	r3, r6
 8008256:	b085      	sub	sp, #20
 8008258:	bfb8      	it	lt
 800825a:	3101      	addlt	r1, #1
 800825c:	f7ff fedc 	bl	8008018 <_Balloc>
 8008260:	b930      	cbnz	r0, 8008270 <__multiply+0x44>
 8008262:	4602      	mov	r2, r0
 8008264:	4b44      	ldr	r3, [pc, #272]	@ (8008378 <__multiply+0x14c>)
 8008266:	4845      	ldr	r0, [pc, #276]	@ (800837c <__multiply+0x150>)
 8008268:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800826c:	f000 fb46 	bl	80088fc <__assert_func>
 8008270:	f100 0514 	add.w	r5, r0, #20
 8008274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008278:	462b      	mov	r3, r5
 800827a:	2200      	movs	r2, #0
 800827c:	4543      	cmp	r3, r8
 800827e:	d321      	bcc.n	80082c4 <__multiply+0x98>
 8008280:	f107 0114 	add.w	r1, r7, #20
 8008284:	f104 0214 	add.w	r2, r4, #20
 8008288:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800828c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	1b13      	subs	r3, r2, r4
 8008294:	3b15      	subs	r3, #21
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	3304      	adds	r3, #4
 800829c:	f104 0715 	add.w	r7, r4, #21
 80082a0:	42ba      	cmp	r2, r7
 80082a2:	bf38      	it	cc
 80082a4:	2304      	movcc	r3, #4
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	9103      	str	r1, [sp, #12]
 80082ac:	428b      	cmp	r3, r1
 80082ae:	d80c      	bhi.n	80082ca <__multiply+0x9e>
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	dd03      	ble.n	80082bc <__multiply+0x90>
 80082b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05b      	beq.n	8008374 <__multiply+0x148>
 80082bc:	6106      	str	r6, [r0, #16]
 80082be:	b005      	add	sp, #20
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	f843 2b04 	str.w	r2, [r3], #4
 80082c8:	e7d8      	b.n	800827c <__multiply+0x50>
 80082ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80082ce:	f1ba 0f00 	cmp.w	sl, #0
 80082d2:	d024      	beq.n	800831e <__multiply+0xf2>
 80082d4:	f104 0e14 	add.w	lr, r4, #20
 80082d8:	46a9      	mov	r9, r5
 80082da:	f04f 0c00 	mov.w	ip, #0
 80082de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082e2:	f8d9 3000 	ldr.w	r3, [r9]
 80082e6:	fa1f fb87 	uxth.w	fp, r7
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80082f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082f4:	f8d9 7000 	ldr.w	r7, [r9]
 80082f8:	4463      	add	r3, ip
 80082fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082fe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008302:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008306:	b29b      	uxth	r3, r3
 8008308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800830c:	4572      	cmp	r2, lr
 800830e:	f849 3b04 	str.w	r3, [r9], #4
 8008312:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008316:	d8e2      	bhi.n	80082de <__multiply+0xb2>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	f845 c003 	str.w	ip, [r5, r3]
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008324:	3104      	adds	r1, #4
 8008326:	f1b9 0f00 	cmp.w	r9, #0
 800832a:	d021      	beq.n	8008370 <__multiply+0x144>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	f104 0c14 	add.w	ip, r4, #20
 8008332:	46ae      	mov	lr, r5
 8008334:	f04f 0a00 	mov.w	sl, #0
 8008338:	f8bc b000 	ldrh.w	fp, [ip]
 800833c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008340:	fb09 770b 	mla	r7, r9, fp, r7
 8008344:	4457      	add	r7, sl
 8008346:	b29b      	uxth	r3, r3
 8008348:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800834c:	f84e 3b04 	str.w	r3, [lr], #4
 8008350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008354:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008358:	f8be 3000 	ldrh.w	r3, [lr]
 800835c:	fb09 330a 	mla	r3, r9, sl, r3
 8008360:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008364:	4562      	cmp	r2, ip
 8008366:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800836a:	d8e5      	bhi.n	8008338 <__multiply+0x10c>
 800836c:	9f01      	ldr	r7, [sp, #4]
 800836e:	51eb      	str	r3, [r5, r7]
 8008370:	3504      	adds	r5, #4
 8008372:	e799      	b.n	80082a8 <__multiply+0x7c>
 8008374:	3e01      	subs	r6, #1
 8008376:	e79b      	b.n	80082b0 <__multiply+0x84>
 8008378:	080090f8 	.word	0x080090f8
 800837c:	0800911a 	.word	0x0800911a

08008380 <__pow5mult>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4615      	mov	r5, r2
 8008386:	f012 0203 	ands.w	r2, r2, #3
 800838a:	4607      	mov	r7, r0
 800838c:	460e      	mov	r6, r1
 800838e:	d007      	beq.n	80083a0 <__pow5mult+0x20>
 8008390:	4c25      	ldr	r4, [pc, #148]	@ (8008428 <__pow5mult+0xa8>)
 8008392:	3a01      	subs	r2, #1
 8008394:	2300      	movs	r3, #0
 8008396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800839a:	f7ff fe9f 	bl	80080dc <__multadd>
 800839e:	4606      	mov	r6, r0
 80083a0:	10ad      	asrs	r5, r5, #2
 80083a2:	d03d      	beq.n	8008420 <__pow5mult+0xa0>
 80083a4:	69fc      	ldr	r4, [r7, #28]
 80083a6:	b97c      	cbnz	r4, 80083c8 <__pow5mult+0x48>
 80083a8:	2010      	movs	r0, #16
 80083aa:	f7ff fcd3 	bl	8007d54 <malloc>
 80083ae:	4602      	mov	r2, r0
 80083b0:	61f8      	str	r0, [r7, #28]
 80083b2:	b928      	cbnz	r0, 80083c0 <__pow5mult+0x40>
 80083b4:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <__pow5mult+0xac>)
 80083b6:	481e      	ldr	r0, [pc, #120]	@ (8008430 <__pow5mult+0xb0>)
 80083b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083bc:	f000 fa9e 	bl	80088fc <__assert_func>
 80083c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083c4:	6004      	str	r4, [r0, #0]
 80083c6:	60c4      	str	r4, [r0, #12]
 80083c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083d0:	b94c      	cbnz	r4, 80083e6 <__pow5mult+0x66>
 80083d2:	f240 2171 	movw	r1, #625	@ 0x271
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ff12 	bl	8008200 <__i2b>
 80083dc:	2300      	movs	r3, #0
 80083de:	f8c8 0008 	str.w	r0, [r8, #8]
 80083e2:	4604      	mov	r4, r0
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	07eb      	lsls	r3, r5, #31
 80083ec:	d50a      	bpl.n	8008404 <__pow5mult+0x84>
 80083ee:	4631      	mov	r1, r6
 80083f0:	4622      	mov	r2, r4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7ff ff1a 	bl	800822c <__multiply>
 80083f8:	4631      	mov	r1, r6
 80083fa:	4680      	mov	r8, r0
 80083fc:	4638      	mov	r0, r7
 80083fe:	f7ff fe4b 	bl	8008098 <_Bfree>
 8008402:	4646      	mov	r6, r8
 8008404:	106d      	asrs	r5, r5, #1
 8008406:	d00b      	beq.n	8008420 <__pow5mult+0xa0>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	b938      	cbnz	r0, 800841c <__pow5mult+0x9c>
 800840c:	4622      	mov	r2, r4
 800840e:	4621      	mov	r1, r4
 8008410:	4638      	mov	r0, r7
 8008412:	f7ff ff0b 	bl	800822c <__multiply>
 8008416:	6020      	str	r0, [r4, #0]
 8008418:	f8c0 9000 	str.w	r9, [r0]
 800841c:	4604      	mov	r4, r0
 800841e:	e7e4      	b.n	80083ea <__pow5mult+0x6a>
 8008420:	4630      	mov	r0, r6
 8008422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008426:	bf00      	nop
 8008428:	08009174 	.word	0x08009174
 800842c:	08009089 	.word	0x08009089
 8008430:	0800911a 	.word	0x0800911a

08008434 <__lshift>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	460c      	mov	r4, r1
 800843a:	6849      	ldr	r1, [r1, #4]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008442:	68a3      	ldr	r3, [r4, #8]
 8008444:	4607      	mov	r7, r0
 8008446:	4691      	mov	r9, r2
 8008448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800844c:	f108 0601 	add.w	r6, r8, #1
 8008450:	42b3      	cmp	r3, r6
 8008452:	db0b      	blt.n	800846c <__lshift+0x38>
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff fddf 	bl	8008018 <_Balloc>
 800845a:	4605      	mov	r5, r0
 800845c:	b948      	cbnz	r0, 8008472 <__lshift+0x3e>
 800845e:	4602      	mov	r2, r0
 8008460:	4b28      	ldr	r3, [pc, #160]	@ (8008504 <__lshift+0xd0>)
 8008462:	4829      	ldr	r0, [pc, #164]	@ (8008508 <__lshift+0xd4>)
 8008464:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008468:	f000 fa48 	bl	80088fc <__assert_func>
 800846c:	3101      	adds	r1, #1
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	e7ee      	b.n	8008450 <__lshift+0x1c>
 8008472:	2300      	movs	r3, #0
 8008474:	f100 0114 	add.w	r1, r0, #20
 8008478:	f100 0210 	add.w	r2, r0, #16
 800847c:	4618      	mov	r0, r3
 800847e:	4553      	cmp	r3, sl
 8008480:	db33      	blt.n	80084ea <__lshift+0xb6>
 8008482:	6920      	ldr	r0, [r4, #16]
 8008484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008488:	f104 0314 	add.w	r3, r4, #20
 800848c:	f019 091f 	ands.w	r9, r9, #31
 8008490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008494:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008498:	d02b      	beq.n	80084f2 <__lshift+0xbe>
 800849a:	f1c9 0e20 	rsb	lr, r9, #32
 800849e:	468a      	mov	sl, r1
 80084a0:	2200      	movs	r2, #0
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	fa00 f009 	lsl.w	r0, r0, r9
 80084a8:	4310      	orrs	r0, r2
 80084aa:	f84a 0b04 	str.w	r0, [sl], #4
 80084ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b2:	459c      	cmp	ip, r3
 80084b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b8:	d8f3      	bhi.n	80084a2 <__lshift+0x6e>
 80084ba:	ebac 0304 	sub.w	r3, ip, r4
 80084be:	3b15      	subs	r3, #21
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	3304      	adds	r3, #4
 80084c6:	f104 0015 	add.w	r0, r4, #21
 80084ca:	4584      	cmp	ip, r0
 80084cc:	bf38      	it	cc
 80084ce:	2304      	movcc	r3, #4
 80084d0:	50ca      	str	r2, [r1, r3]
 80084d2:	b10a      	cbz	r2, 80084d8 <__lshift+0xa4>
 80084d4:	f108 0602 	add.w	r6, r8, #2
 80084d8:	3e01      	subs	r6, #1
 80084da:	4638      	mov	r0, r7
 80084dc:	612e      	str	r6, [r5, #16]
 80084de:	4621      	mov	r1, r4
 80084e0:	f7ff fdda 	bl	8008098 <_Bfree>
 80084e4:	4628      	mov	r0, r5
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ee:	3301      	adds	r3, #1
 80084f0:	e7c5      	b.n	800847e <__lshift+0x4a>
 80084f2:	3904      	subs	r1, #4
 80084f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80084fc:	459c      	cmp	ip, r3
 80084fe:	d8f9      	bhi.n	80084f4 <__lshift+0xc0>
 8008500:	e7ea      	b.n	80084d8 <__lshift+0xa4>
 8008502:	bf00      	nop
 8008504:	080090f8 	.word	0x080090f8
 8008508:	0800911a 	.word	0x0800911a

0800850c <__mcmp>:
 800850c:	690a      	ldr	r2, [r1, #16]
 800850e:	4603      	mov	r3, r0
 8008510:	6900      	ldr	r0, [r0, #16]
 8008512:	1a80      	subs	r0, r0, r2
 8008514:	b530      	push	{r4, r5, lr}
 8008516:	d10e      	bne.n	8008536 <__mcmp+0x2a>
 8008518:	3314      	adds	r3, #20
 800851a:	3114      	adds	r1, #20
 800851c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008520:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800852c:	4295      	cmp	r5, r2
 800852e:	d003      	beq.n	8008538 <__mcmp+0x2c>
 8008530:	d205      	bcs.n	800853e <__mcmp+0x32>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008536:	bd30      	pop	{r4, r5, pc}
 8008538:	42a3      	cmp	r3, r4
 800853a:	d3f3      	bcc.n	8008524 <__mcmp+0x18>
 800853c:	e7fb      	b.n	8008536 <__mcmp+0x2a>
 800853e:	2001      	movs	r0, #1
 8008540:	e7f9      	b.n	8008536 <__mcmp+0x2a>
	...

08008544 <__mdiff>:
 8008544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	4689      	mov	r9, r1
 800854a:	4606      	mov	r6, r0
 800854c:	4611      	mov	r1, r2
 800854e:	4648      	mov	r0, r9
 8008550:	4614      	mov	r4, r2
 8008552:	f7ff ffdb 	bl	800850c <__mcmp>
 8008556:	1e05      	subs	r5, r0, #0
 8008558:	d112      	bne.n	8008580 <__mdiff+0x3c>
 800855a:	4629      	mov	r1, r5
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff fd5b 	bl	8008018 <_Balloc>
 8008562:	4602      	mov	r2, r0
 8008564:	b928      	cbnz	r0, 8008572 <__mdiff+0x2e>
 8008566:	4b3f      	ldr	r3, [pc, #252]	@ (8008664 <__mdiff+0x120>)
 8008568:	f240 2137 	movw	r1, #567	@ 0x237
 800856c:	483e      	ldr	r0, [pc, #248]	@ (8008668 <__mdiff+0x124>)
 800856e:	f000 f9c5 	bl	80088fc <__assert_func>
 8008572:	2301      	movs	r3, #1
 8008574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008578:	4610      	mov	r0, r2
 800857a:	b003      	add	sp, #12
 800857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008580:	bfbc      	itt	lt
 8008582:	464b      	movlt	r3, r9
 8008584:	46a1      	movlt	r9, r4
 8008586:	4630      	mov	r0, r6
 8008588:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800858c:	bfba      	itte	lt
 800858e:	461c      	movlt	r4, r3
 8008590:	2501      	movlt	r5, #1
 8008592:	2500      	movge	r5, #0
 8008594:	f7ff fd40 	bl	8008018 <_Balloc>
 8008598:	4602      	mov	r2, r0
 800859a:	b918      	cbnz	r0, 80085a4 <__mdiff+0x60>
 800859c:	4b31      	ldr	r3, [pc, #196]	@ (8008664 <__mdiff+0x120>)
 800859e:	f240 2145 	movw	r1, #581	@ 0x245
 80085a2:	e7e3      	b.n	800856c <__mdiff+0x28>
 80085a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085a8:	6926      	ldr	r6, [r4, #16]
 80085aa:	60c5      	str	r5, [r0, #12]
 80085ac:	f109 0310 	add.w	r3, r9, #16
 80085b0:	f109 0514 	add.w	r5, r9, #20
 80085b4:	f104 0e14 	add.w	lr, r4, #20
 80085b8:	f100 0b14 	add.w	fp, r0, #20
 80085bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	46d9      	mov	r9, fp
 80085c8:	f04f 0c00 	mov.w	ip, #0
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	fa1f f38a 	uxth.w	r3, sl
 80085dc:	4619      	mov	r1, r3
 80085de:	b283      	uxth	r3, r0
 80085e0:	1acb      	subs	r3, r1, r3
 80085e2:	0c00      	lsrs	r0, r0, #16
 80085e4:	4463      	add	r3, ip
 80085e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085f4:	4576      	cmp	r6, lr
 80085f6:	f849 3b04 	str.w	r3, [r9], #4
 80085fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085fe:	d8e5      	bhi.n	80085cc <__mdiff+0x88>
 8008600:	1b33      	subs	r3, r6, r4
 8008602:	3b15      	subs	r3, #21
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	3415      	adds	r4, #21
 800860a:	3304      	adds	r3, #4
 800860c:	42a6      	cmp	r6, r4
 800860e:	bf38      	it	cc
 8008610:	2304      	movcc	r3, #4
 8008612:	441d      	add	r5, r3
 8008614:	445b      	add	r3, fp
 8008616:	461e      	mov	r6, r3
 8008618:	462c      	mov	r4, r5
 800861a:	4544      	cmp	r4, r8
 800861c:	d30e      	bcc.n	800863c <__mdiff+0xf8>
 800861e:	f108 0103 	add.w	r1, r8, #3
 8008622:	1b49      	subs	r1, r1, r5
 8008624:	f021 0103 	bic.w	r1, r1, #3
 8008628:	3d03      	subs	r5, #3
 800862a:	45a8      	cmp	r8, r5
 800862c:	bf38      	it	cc
 800862e:	2100      	movcc	r1, #0
 8008630:	440b      	add	r3, r1
 8008632:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008636:	b191      	cbz	r1, 800865e <__mdiff+0x11a>
 8008638:	6117      	str	r7, [r2, #16]
 800863a:	e79d      	b.n	8008578 <__mdiff+0x34>
 800863c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008640:	46e6      	mov	lr, ip
 8008642:	0c08      	lsrs	r0, r1, #16
 8008644:	fa1c fc81 	uxtah	ip, ip, r1
 8008648:	4471      	add	r1, lr
 800864a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800864e:	b289      	uxth	r1, r1
 8008650:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008654:	f846 1b04 	str.w	r1, [r6], #4
 8008658:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800865c:	e7dd      	b.n	800861a <__mdiff+0xd6>
 800865e:	3f01      	subs	r7, #1
 8008660:	e7e7      	b.n	8008632 <__mdiff+0xee>
 8008662:	bf00      	nop
 8008664:	080090f8 	.word	0x080090f8
 8008668:	0800911a 	.word	0x0800911a

0800866c <__d2b>:
 800866c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008670:	460f      	mov	r7, r1
 8008672:	2101      	movs	r1, #1
 8008674:	ec59 8b10 	vmov	r8, r9, d0
 8008678:	4616      	mov	r6, r2
 800867a:	f7ff fccd 	bl	8008018 <_Balloc>
 800867e:	4604      	mov	r4, r0
 8008680:	b930      	cbnz	r0, 8008690 <__d2b+0x24>
 8008682:	4602      	mov	r2, r0
 8008684:	4b23      	ldr	r3, [pc, #140]	@ (8008714 <__d2b+0xa8>)
 8008686:	4824      	ldr	r0, [pc, #144]	@ (8008718 <__d2b+0xac>)
 8008688:	f240 310f 	movw	r1, #783	@ 0x30f
 800868c:	f000 f936 	bl	80088fc <__assert_func>
 8008690:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008698:	b10d      	cbz	r5, 800869e <__d2b+0x32>
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	f1b8 0300 	subs.w	r3, r8, #0
 80086a4:	d023      	beq.n	80086ee <__d2b+0x82>
 80086a6:	4668      	mov	r0, sp
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	f7ff fd7c 	bl	80081a6 <__lo0bits>
 80086ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086b2:	b1d0      	cbz	r0, 80086ea <__d2b+0x7e>
 80086b4:	f1c0 0320 	rsb	r3, r0, #32
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	430b      	orrs	r3, r1
 80086be:	40c2      	lsrs	r2, r0
 80086c0:	6163      	str	r3, [r4, #20]
 80086c2:	9201      	str	r2, [sp, #4]
 80086c4:	9b01      	ldr	r3, [sp, #4]
 80086c6:	61a3      	str	r3, [r4, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bf0c      	ite	eq
 80086cc:	2201      	moveq	r2, #1
 80086ce:	2202      	movne	r2, #2
 80086d0:	6122      	str	r2, [r4, #16]
 80086d2:	b1a5      	cbz	r5, 80086fe <__d2b+0x92>
 80086d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086d8:	4405      	add	r5, r0
 80086da:	603d      	str	r5, [r7, #0]
 80086dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086e0:	6030      	str	r0, [r6, #0]
 80086e2:	4620      	mov	r0, r4
 80086e4:	b003      	add	sp, #12
 80086e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ea:	6161      	str	r1, [r4, #20]
 80086ec:	e7ea      	b.n	80086c4 <__d2b+0x58>
 80086ee:	a801      	add	r0, sp, #4
 80086f0:	f7ff fd59 	bl	80081a6 <__lo0bits>
 80086f4:	9b01      	ldr	r3, [sp, #4]
 80086f6:	6163      	str	r3, [r4, #20]
 80086f8:	3020      	adds	r0, #32
 80086fa:	2201      	movs	r2, #1
 80086fc:	e7e8      	b.n	80086d0 <__d2b+0x64>
 80086fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008702:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008706:	6038      	str	r0, [r7, #0]
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	f7ff fd2d 	bl	8008168 <__hi0bits>
 800870e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008712:	e7e5      	b.n	80086e0 <__d2b+0x74>
 8008714:	080090f8 	.word	0x080090f8
 8008718:	0800911a 	.word	0x0800911a

0800871c <__sread>:
 800871c:	b510      	push	{r4, lr}
 800871e:	460c      	mov	r4, r1
 8008720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008724:	f000 f8a8 	bl	8008878 <_read_r>
 8008728:	2800      	cmp	r0, #0
 800872a:	bfab      	itete	ge
 800872c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800872e:	89a3      	ldrhlt	r3, [r4, #12]
 8008730:	181b      	addge	r3, r3, r0
 8008732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008736:	bfac      	ite	ge
 8008738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800873a:	81a3      	strhlt	r3, [r4, #12]
 800873c:	bd10      	pop	{r4, pc}

0800873e <__swrite>:
 800873e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008742:	461f      	mov	r7, r3
 8008744:	898b      	ldrh	r3, [r1, #12]
 8008746:	05db      	lsls	r3, r3, #23
 8008748:	4605      	mov	r5, r0
 800874a:	460c      	mov	r4, r1
 800874c:	4616      	mov	r6, r2
 800874e:	d505      	bpl.n	800875c <__swrite+0x1e>
 8008750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008754:	2302      	movs	r3, #2
 8008756:	2200      	movs	r2, #0
 8008758:	f000 f87c 	bl	8008854 <_lseek_r>
 800875c:	89a3      	ldrh	r3, [r4, #12]
 800875e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008766:	81a3      	strh	r3, [r4, #12]
 8008768:	4632      	mov	r2, r6
 800876a:	463b      	mov	r3, r7
 800876c:	4628      	mov	r0, r5
 800876e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	f000 b8a3 	b.w	80088bc <_write_r>

08008776 <__sseek>:
 8008776:	b510      	push	{r4, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800877e:	f000 f869 	bl	8008854 <_lseek_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	bf15      	itete	ne
 8008788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800878a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800878e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008792:	81a3      	strheq	r3, [r4, #12]
 8008794:	bf18      	it	ne
 8008796:	81a3      	strhne	r3, [r4, #12]
 8008798:	bd10      	pop	{r4, pc}

0800879a <__sclose>:
 800879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879e:	f000 b849 	b.w	8008834 <_close_r>

080087a2 <_realloc_r>:
 80087a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a6:	4680      	mov	r8, r0
 80087a8:	4615      	mov	r5, r2
 80087aa:	460c      	mov	r4, r1
 80087ac:	b921      	cbnz	r1, 80087b8 <_realloc_r+0x16>
 80087ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b2:	4611      	mov	r1, r2
 80087b4:	f7ff baf8 	b.w	8007da8 <_malloc_r>
 80087b8:	b92a      	cbnz	r2, 80087c6 <_realloc_r+0x24>
 80087ba:	f000 f8d1 	bl	8008960 <_free_r>
 80087be:	2400      	movs	r4, #0
 80087c0:	4620      	mov	r0, r4
 80087c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c6:	f000 f927 	bl	8008a18 <_malloc_usable_size_r>
 80087ca:	4285      	cmp	r5, r0
 80087cc:	4606      	mov	r6, r0
 80087ce:	d802      	bhi.n	80087d6 <_realloc_r+0x34>
 80087d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80087d4:	d8f4      	bhi.n	80087c0 <_realloc_r+0x1e>
 80087d6:	4629      	mov	r1, r5
 80087d8:	4640      	mov	r0, r8
 80087da:	f7ff fae5 	bl	8007da8 <_malloc_r>
 80087de:	4607      	mov	r7, r0
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d0ec      	beq.n	80087be <_realloc_r+0x1c>
 80087e4:	42b5      	cmp	r5, r6
 80087e6:	462a      	mov	r2, r5
 80087e8:	4621      	mov	r1, r4
 80087ea:	bf28      	it	cs
 80087ec:	4632      	movcs	r2, r6
 80087ee:	f000 f877 	bl	80088e0 <memcpy>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4640      	mov	r0, r8
 80087f6:	f000 f8b3 	bl	8008960 <_free_r>
 80087fa:	463c      	mov	r4, r7
 80087fc:	e7e0      	b.n	80087c0 <_realloc_r+0x1e>

080087fe <memmove>:
 80087fe:	4288      	cmp	r0, r1
 8008800:	b510      	push	{r4, lr}
 8008802:	eb01 0402 	add.w	r4, r1, r2
 8008806:	d902      	bls.n	800880e <memmove+0x10>
 8008808:	4284      	cmp	r4, r0
 800880a:	4623      	mov	r3, r4
 800880c:	d807      	bhi.n	800881e <memmove+0x20>
 800880e:	1e43      	subs	r3, r0, #1
 8008810:	42a1      	cmp	r1, r4
 8008812:	d008      	beq.n	8008826 <memmove+0x28>
 8008814:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008818:	f803 2f01 	strb.w	r2, [r3, #1]!
 800881c:	e7f8      	b.n	8008810 <memmove+0x12>
 800881e:	4402      	add	r2, r0
 8008820:	4601      	mov	r1, r0
 8008822:	428a      	cmp	r2, r1
 8008824:	d100      	bne.n	8008828 <memmove+0x2a>
 8008826:	bd10      	pop	{r4, pc}
 8008828:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800882c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008830:	e7f7      	b.n	8008822 <memmove+0x24>
	...

08008834 <_close_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4d06      	ldr	r5, [pc, #24]	@ (8008850 <_close_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7f8 feb4 	bl	80015ac <_close>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_close_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_close_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20000c00 	.word	0x20000c00

08008854 <_lseek_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	@ (8008874 <_lseek_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7f8 fec9 	bl	80015fa <_lseek>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_lseek_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_lseek_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000c00 	.word	0x20000c00

08008878 <_read_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d07      	ldr	r5, [pc, #28]	@ (8008898 <_read_r+0x20>)
 800887c:	4604      	mov	r4, r0
 800887e:	4608      	mov	r0, r1
 8008880:	4611      	mov	r1, r2
 8008882:	2200      	movs	r2, #0
 8008884:	602a      	str	r2, [r5, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	f7f8 fe57 	bl	800153a <_read>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_read_r+0x1e>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_read_r+0x1e>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20000c00 	.word	0x20000c00

0800889c <_sbrk_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d06      	ldr	r5, [pc, #24]	@ (80088b8 <_sbrk_r+0x1c>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	602b      	str	r3, [r5, #0]
 80088a8:	f7f8 feb4 	bl	8001614 <_sbrk>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_sbrk_r+0x1a>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_sbrk_r+0x1a>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	20000c00 	.word	0x20000c00

080088bc <_write_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d07      	ldr	r5, [pc, #28]	@ (80088dc <_write_r+0x20>)
 80088c0:	4604      	mov	r4, r0
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	602a      	str	r2, [r5, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f7f8 fe52 	bl	8001574 <_write>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_write_r+0x1e>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_write_r+0x1e>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000c00 	.word	0x20000c00

080088e0 <memcpy>:
 80088e0:	440a      	add	r2, r1
 80088e2:	4291      	cmp	r1, r2
 80088e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80088e8:	d100      	bne.n	80088ec <memcpy+0xc>
 80088ea:	4770      	bx	lr
 80088ec:	b510      	push	{r4, lr}
 80088ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d1f9      	bne.n	80088ee <memcpy+0xe>
 80088fa:	bd10      	pop	{r4, pc}

080088fc <__assert_func>:
 80088fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088fe:	4614      	mov	r4, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <__assert_func+0x2c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4605      	mov	r5, r0
 8008908:	68d8      	ldr	r0, [r3, #12]
 800890a:	b954      	cbnz	r4, 8008922 <__assert_func+0x26>
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <__assert_func+0x30>)
 800890e:	461c      	mov	r4, r3
 8008910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008914:	9100      	str	r1, [sp, #0]
 8008916:	462b      	mov	r3, r5
 8008918:	4905      	ldr	r1, [pc, #20]	@ (8008930 <__assert_func+0x34>)
 800891a:	f000 f885 	bl	8008a28 <fiprintf>
 800891e:	f000 f8a2 	bl	8008a66 <abort>
 8008922:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <__assert_func+0x38>)
 8008924:	e7f4      	b.n	8008910 <__assert_func+0x14>
 8008926:	bf00      	nop
 8008928:	20000020 	.word	0x20000020
 800892c:	080093b6 	.word	0x080093b6
 8008930:	08009388 	.word	0x08009388
 8008934:	0800937b 	.word	0x0800937b

08008938 <_calloc_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	fba1 5402 	umull	r5, r4, r1, r2
 800893e:	b93c      	cbnz	r4, 8008950 <_calloc_r+0x18>
 8008940:	4629      	mov	r1, r5
 8008942:	f7ff fa31 	bl	8007da8 <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b928      	cbnz	r0, 8008956 <_calloc_r+0x1e>
 800894a:	2600      	movs	r6, #0
 800894c:	4630      	mov	r0, r6
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	220c      	movs	r2, #12
 8008952:	6002      	str	r2, [r0, #0]
 8008954:	e7f9      	b.n	800894a <_calloc_r+0x12>
 8008956:	462a      	mov	r2, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7fe fa8b 	bl	8006e74 <memset>
 800895e:	e7f5      	b.n	800894c <_calloc_r+0x14>

08008960 <_free_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4605      	mov	r5, r0
 8008964:	2900      	cmp	r1, #0
 8008966:	d041      	beq.n	80089ec <_free_r+0x8c>
 8008968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800896c:	1f0c      	subs	r4, r1, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfb8      	it	lt
 8008972:	18e4      	addlt	r4, r4, r3
 8008974:	f7ff fb44 	bl	8008000 <__malloc_lock>
 8008978:	4a1d      	ldr	r2, [pc, #116]	@ (80089f0 <_free_r+0x90>)
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	b933      	cbnz	r3, 800898c <_free_r+0x2c>
 800897e:	6063      	str	r3, [r4, #4]
 8008980:	6014      	str	r4, [r2, #0]
 8008982:	4628      	mov	r0, r5
 8008984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008988:	f7ff bb40 	b.w	800800c <__malloc_unlock>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d908      	bls.n	80089a2 <_free_r+0x42>
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	1821      	adds	r1, r4, r0
 8008994:	428b      	cmp	r3, r1
 8008996:	bf01      	itttt	eq
 8008998:	6819      	ldreq	r1, [r3, #0]
 800899a:	685b      	ldreq	r3, [r3, #4]
 800899c:	1809      	addeq	r1, r1, r0
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	e7ed      	b.n	800897e <_free_r+0x1e>
 80089a2:	461a      	mov	r2, r3
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	b10b      	cbz	r3, 80089ac <_free_r+0x4c>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d9fa      	bls.n	80089a2 <_free_r+0x42>
 80089ac:	6811      	ldr	r1, [r2, #0]
 80089ae:	1850      	adds	r0, r2, r1
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d10b      	bne.n	80089cc <_free_r+0x6c>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	4401      	add	r1, r0
 80089b8:	1850      	adds	r0, r2, r1
 80089ba:	4283      	cmp	r3, r0
 80089bc:	6011      	str	r1, [r2, #0]
 80089be:	d1e0      	bne.n	8008982 <_free_r+0x22>
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	6053      	str	r3, [r2, #4]
 80089c6:	4408      	add	r0, r1
 80089c8:	6010      	str	r0, [r2, #0]
 80089ca:	e7da      	b.n	8008982 <_free_r+0x22>
 80089cc:	d902      	bls.n	80089d4 <_free_r+0x74>
 80089ce:	230c      	movs	r3, #12
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	e7d6      	b.n	8008982 <_free_r+0x22>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	1821      	adds	r1, r4, r0
 80089d8:	428b      	cmp	r3, r1
 80089da:	bf04      	itt	eq
 80089dc:	6819      	ldreq	r1, [r3, #0]
 80089de:	685b      	ldreq	r3, [r3, #4]
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	bf04      	itt	eq
 80089e4:	1809      	addeq	r1, r1, r0
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	6054      	str	r4, [r2, #4]
 80089ea:	e7ca      	b.n	8008982 <_free_r+0x22>
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20000bfc 	.word	0x20000bfc

080089f4 <__ascii_mbtowc>:
 80089f4:	b082      	sub	sp, #8
 80089f6:	b901      	cbnz	r1, 80089fa <__ascii_mbtowc+0x6>
 80089f8:	a901      	add	r1, sp, #4
 80089fa:	b142      	cbz	r2, 8008a0e <__ascii_mbtowc+0x1a>
 80089fc:	b14b      	cbz	r3, 8008a12 <__ascii_mbtowc+0x1e>
 80089fe:	7813      	ldrb	r3, [r2, #0]
 8008a00:	600b      	str	r3, [r1, #0]
 8008a02:	7812      	ldrb	r2, [r2, #0]
 8008a04:	1e10      	subs	r0, r2, #0
 8008a06:	bf18      	it	ne
 8008a08:	2001      	movne	r0, #1
 8008a0a:	b002      	add	sp, #8
 8008a0c:	4770      	bx	lr
 8008a0e:	4610      	mov	r0, r2
 8008a10:	e7fb      	b.n	8008a0a <__ascii_mbtowc+0x16>
 8008a12:	f06f 0001 	mvn.w	r0, #1
 8008a16:	e7f8      	b.n	8008a0a <__ascii_mbtowc+0x16>

08008a18 <_malloc_usable_size_r>:
 8008a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1c:	1f18      	subs	r0, r3, #4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfbc      	itt	lt
 8008a22:	580b      	ldrlt	r3, [r1, r0]
 8008a24:	18c0      	addlt	r0, r0, r3
 8008a26:	4770      	bx	lr

08008a28 <fiprintf>:
 8008a28:	b40e      	push	{r1, r2, r3}
 8008a2a:	b503      	push	{r0, r1, lr}
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	ab03      	add	r3, sp, #12
 8008a30:	4805      	ldr	r0, [pc, #20]	@ (8008a48 <fiprintf+0x20>)
 8008a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a36:	6800      	ldr	r0, [r0, #0]
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f000 f845 	bl	8008ac8 <_vfiprintf_r>
 8008a3e:	b002      	add	sp, #8
 8008a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a44:	b003      	add	sp, #12
 8008a46:	4770      	bx	lr
 8008a48:	20000020 	.word	0x20000020

08008a4c <__ascii_wctomb>:
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	4608      	mov	r0, r1
 8008a50:	b141      	cbz	r1, 8008a64 <__ascii_wctomb+0x18>
 8008a52:	2aff      	cmp	r2, #255	@ 0xff
 8008a54:	d904      	bls.n	8008a60 <__ascii_wctomb+0x14>
 8008a56:	228a      	movs	r2, #138	@ 0x8a
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a5e:	4770      	bx	lr
 8008a60:	700a      	strb	r2, [r1, #0]
 8008a62:	2001      	movs	r0, #1
 8008a64:	4770      	bx	lr

08008a66 <abort>:
 8008a66:	b508      	push	{r3, lr}
 8008a68:	2006      	movs	r0, #6
 8008a6a:	f000 fa85 	bl	8008f78 <raise>
 8008a6e:	2001      	movs	r0, #1
 8008a70:	f7f8 fd58 	bl	8001524 <_exit>

08008a74 <__sfputc_r>:
 8008a74:	6893      	ldr	r3, [r2, #8]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	b410      	push	{r4}
 8008a7c:	6093      	str	r3, [r2, #8]
 8008a7e:	da08      	bge.n	8008a92 <__sfputc_r+0x1e>
 8008a80:	6994      	ldr	r4, [r2, #24]
 8008a82:	42a3      	cmp	r3, r4
 8008a84:	db01      	blt.n	8008a8a <__sfputc_r+0x16>
 8008a86:	290a      	cmp	r1, #10
 8008a88:	d103      	bne.n	8008a92 <__sfputc_r+0x1e>
 8008a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a8e:	f000 b933 	b.w	8008cf8 <__swbuf_r>
 8008a92:	6813      	ldr	r3, [r2, #0]
 8008a94:	1c58      	adds	r0, r3, #1
 8008a96:	6010      	str	r0, [r2, #0]
 8008a98:	7019      	strb	r1, [r3, #0]
 8008a9a:	4608      	mov	r0, r1
 8008a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <__sfputs_r>:
 8008aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	18d5      	adds	r5, r2, r3
 8008aac:	42ac      	cmp	r4, r5
 8008aae:	d101      	bne.n	8008ab4 <__sfputs_r+0x12>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e007      	b.n	8008ac4 <__sfputs_r+0x22>
 8008ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ab8:	463a      	mov	r2, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ffda 	bl	8008a74 <__sfputc_r>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d1f3      	bne.n	8008aac <__sfputs_r+0xa>
 8008ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ac8 <_vfiprintf_r>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	460d      	mov	r5, r1
 8008ace:	b09d      	sub	sp, #116	@ 0x74
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	4698      	mov	r8, r3
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	b118      	cbz	r0, 8008ae0 <_vfiprintf_r+0x18>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x18>
 8008adc:	f7fe f994 	bl	8006e08 <__sinit>
 8008ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_vfiprintf_r+0x2a>
 8008aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aee:	f7fe f9f8 	bl	8006ee2 <__retarget_lock_acquire_recursive>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	071b      	lsls	r3, r3, #28
 8008af6:	d501      	bpl.n	8008afc <_vfiprintf_r+0x34>
 8008af8:	692b      	ldr	r3, [r5, #16]
 8008afa:	b99b      	cbnz	r3, 8008b24 <_vfiprintf_r+0x5c>
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f938 	bl	8008d74 <__swsetup_r>
 8008b04:	b170      	cbz	r0, 8008b24 <_vfiprintf_r+0x5c>
 8008b06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b08:	07dc      	lsls	r4, r3, #31
 8008b0a:	d504      	bpl.n	8008b16 <_vfiprintf_r+0x4e>
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b10:	b01d      	add	sp, #116	@ 0x74
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	0598      	lsls	r0, r3, #22
 8008b1a:	d4f7      	bmi.n	8008b0c <_vfiprintf_r+0x44>
 8008b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b1e:	f7fe f9e1 	bl	8006ee4 <__retarget_lock_release_recursive>
 8008b22:	e7f3      	b.n	8008b0c <_vfiprintf_r+0x44>
 8008b24:	2300      	movs	r3, #0
 8008b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b28:	2320      	movs	r3, #32
 8008b2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b32:	2330      	movs	r3, #48	@ 0x30
 8008b34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ce4 <_vfiprintf_r+0x21c>
 8008b38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	4623      	mov	r3, r4
 8008b42:	469a      	mov	sl, r3
 8008b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b48:	b10a      	cbz	r2, 8008b4e <_vfiprintf_r+0x86>
 8008b4a:	2a25      	cmp	r2, #37	@ 0x25
 8008b4c:	d1f9      	bne.n	8008b42 <_vfiprintf_r+0x7a>
 8008b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b52:	d00b      	beq.n	8008b6c <_vfiprintf_r+0xa4>
 8008b54:	465b      	mov	r3, fp
 8008b56:	4622      	mov	r2, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ffa1 	bl	8008aa2 <__sfputs_r>
 8008b60:	3001      	adds	r0, #1
 8008b62:	f000 80a7 	beq.w	8008cb4 <_vfiprintf_r+0x1ec>
 8008b66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b68:	445a      	add	r2, fp
 8008b6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 809f 	beq.w	8008cb4 <_vfiprintf_r+0x1ec>
 8008b76:	2300      	movs	r3, #0
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b80:	f10a 0a01 	add.w	sl, sl, #1
 8008b84:	9304      	str	r3, [sp, #16]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b8e:	4654      	mov	r4, sl
 8008b90:	2205      	movs	r2, #5
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	4853      	ldr	r0, [pc, #332]	@ (8008ce4 <_vfiprintf_r+0x21c>)
 8008b98:	f7f7 fb52 	bl	8000240 <memchr>
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	b9d8      	cbnz	r0, 8008bd8 <_vfiprintf_r+0x110>
 8008ba0:	06d1      	lsls	r1, r2, #27
 8008ba2:	bf44      	itt	mi
 8008ba4:	2320      	movmi	r3, #32
 8008ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008baa:	0713      	lsls	r3, r2, #28
 8008bac:	bf44      	itt	mi
 8008bae:	232b      	movmi	r3, #43	@ 0x2b
 8008bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bba:	d015      	beq.n	8008be8 <_vfiprintf_r+0x120>
 8008bbc:	9a07      	ldr	r2, [sp, #28]
 8008bbe:	4654      	mov	r4, sl
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f04f 0c0a 	mov.w	ip, #10
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bcc:	3b30      	subs	r3, #48	@ 0x30
 8008bce:	2b09      	cmp	r3, #9
 8008bd0:	d94b      	bls.n	8008c6a <_vfiprintf_r+0x1a2>
 8008bd2:	b1b0      	cbz	r0, 8008c02 <_vfiprintf_r+0x13a>
 8008bd4:	9207      	str	r2, [sp, #28]
 8008bd6:	e014      	b.n	8008c02 <_vfiprintf_r+0x13a>
 8008bd8:	eba0 0308 	sub.w	r3, r0, r8
 8008bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8008be0:	4313      	orrs	r3, r2
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	46a2      	mov	sl, r4
 8008be6:	e7d2      	b.n	8008b8e <_vfiprintf_r+0xc6>
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	1d19      	adds	r1, r3, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	bfbb      	ittet	lt
 8008bf4:	425b      	neglt	r3, r3
 8008bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfa:	9307      	strge	r3, [sp, #28]
 8008bfc:	9307      	strlt	r3, [sp, #28]
 8008bfe:	bfb8      	it	lt
 8008c00:	9204      	strlt	r2, [sp, #16]
 8008c02:	7823      	ldrb	r3, [r4, #0]
 8008c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c06:	d10a      	bne.n	8008c1e <_vfiprintf_r+0x156>
 8008c08:	7863      	ldrb	r3, [r4, #1]
 8008c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c0c:	d132      	bne.n	8008c74 <_vfiprintf_r+0x1ac>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	1d1a      	adds	r2, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	9203      	str	r2, [sp, #12]
 8008c16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c1a:	3402      	adds	r4, #2
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cf4 <_vfiprintf_r+0x22c>
 8008c22:	7821      	ldrb	r1, [r4, #0]
 8008c24:	2203      	movs	r2, #3
 8008c26:	4650      	mov	r0, sl
 8008c28:	f7f7 fb0a 	bl	8000240 <memchr>
 8008c2c:	b138      	cbz	r0, 8008c3e <_vfiprintf_r+0x176>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	eba0 000a 	sub.w	r0, r0, sl
 8008c34:	2240      	movs	r2, #64	@ 0x40
 8008c36:	4082      	lsls	r2, r0
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	3401      	adds	r4, #1
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c42:	4829      	ldr	r0, [pc, #164]	@ (8008ce8 <_vfiprintf_r+0x220>)
 8008c44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c48:	2206      	movs	r2, #6
 8008c4a:	f7f7 faf9 	bl	8000240 <memchr>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d03f      	beq.n	8008cd2 <_vfiprintf_r+0x20a>
 8008c52:	4b26      	ldr	r3, [pc, #152]	@ (8008cec <_vfiprintf_r+0x224>)
 8008c54:	bb1b      	cbnz	r3, 8008c9e <_vfiprintf_r+0x1d6>
 8008c56:	9b03      	ldr	r3, [sp, #12]
 8008c58:	3307      	adds	r3, #7
 8008c5a:	f023 0307 	bic.w	r3, r3, #7
 8008c5e:	3308      	adds	r3, #8
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c64:	443b      	add	r3, r7
 8008c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c68:	e76a      	b.n	8008b40 <_vfiprintf_r+0x78>
 8008c6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2001      	movs	r0, #1
 8008c72:	e7a8      	b.n	8008bc6 <_vfiprintf_r+0xfe>
 8008c74:	2300      	movs	r3, #0
 8008c76:	3401      	adds	r4, #1
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f04f 0c0a 	mov.w	ip, #10
 8008c80:	4620      	mov	r0, r4
 8008c82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c86:	3a30      	subs	r2, #48	@ 0x30
 8008c88:	2a09      	cmp	r2, #9
 8008c8a:	d903      	bls.n	8008c94 <_vfiprintf_r+0x1cc>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0c6      	beq.n	8008c1e <_vfiprintf_r+0x156>
 8008c90:	9105      	str	r1, [sp, #20]
 8008c92:	e7c4      	b.n	8008c1e <_vfiprintf_r+0x156>
 8008c94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c98:	4604      	mov	r4, r0
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e7f0      	b.n	8008c80 <_vfiprintf_r+0x1b8>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4b12      	ldr	r3, [pc, #72]	@ (8008cf0 <_vfiprintf_r+0x228>)
 8008ca6:	a904      	add	r1, sp, #16
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7fd fc59 	bl	8006560 <_printf_float>
 8008cae:	4607      	mov	r7, r0
 8008cb0:	1c78      	adds	r0, r7, #1
 8008cb2:	d1d6      	bne.n	8008c62 <_vfiprintf_r+0x19a>
 8008cb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cb6:	07d9      	lsls	r1, r3, #31
 8008cb8:	d405      	bmi.n	8008cc6 <_vfiprintf_r+0x1fe>
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	059a      	lsls	r2, r3, #22
 8008cbe:	d402      	bmi.n	8008cc6 <_vfiprintf_r+0x1fe>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc2:	f7fe f90f 	bl	8006ee4 <__retarget_lock_release_recursive>
 8008cc6:	89ab      	ldrh	r3, [r5, #12]
 8008cc8:	065b      	lsls	r3, r3, #25
 8008cca:	f53f af1f 	bmi.w	8008b0c <_vfiprintf_r+0x44>
 8008cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cd0:	e71e      	b.n	8008b10 <_vfiprintf_r+0x48>
 8008cd2:	ab03      	add	r3, sp, #12
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4b05      	ldr	r3, [pc, #20]	@ (8008cf0 <_vfiprintf_r+0x228>)
 8008cda:	a904      	add	r1, sp, #16
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f7fd fec7 	bl	8006a70 <_printf_i>
 8008ce2:	e7e4      	b.n	8008cae <_vfiprintf_r+0x1e6>
 8008ce4:	08009109 	.word	0x08009109
 8008ce8:	08009113 	.word	0x08009113
 8008cec:	08006561 	.word	0x08006561
 8008cf0:	08008aa3 	.word	0x08008aa3
 8008cf4:	0800910f 	.word	0x0800910f

08008cf8 <__swbuf_r>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	460e      	mov	r6, r1
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b118      	cbz	r0, 8008d0a <__swbuf_r+0x12>
 8008d02:	6a03      	ldr	r3, [r0, #32]
 8008d04:	b90b      	cbnz	r3, 8008d0a <__swbuf_r+0x12>
 8008d06:	f7fe f87f 	bl	8006e08 <__sinit>
 8008d0a:	69a3      	ldr	r3, [r4, #24]
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	89a3      	ldrh	r3, [r4, #12]
 8008d10:	071a      	lsls	r2, r3, #28
 8008d12:	d501      	bpl.n	8008d18 <__swbuf_r+0x20>
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	b943      	cbnz	r3, 8008d2a <__swbuf_r+0x32>
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 f82a 	bl	8008d74 <__swsetup_r>
 8008d20:	b118      	cbz	r0, 8008d2a <__swbuf_r+0x32>
 8008d22:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d26:	4638      	mov	r0, r7
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	1a98      	subs	r0, r3, r2
 8008d30:	6963      	ldr	r3, [r4, #20]
 8008d32:	b2f6      	uxtb	r6, r6
 8008d34:	4283      	cmp	r3, r0
 8008d36:	4637      	mov	r7, r6
 8008d38:	dc05      	bgt.n	8008d46 <__swbuf_r+0x4e>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	f7ff f937 	bl	8007fb0 <_fflush_r>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d1ed      	bne.n	8008d22 <__swbuf_r+0x2a>
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	60a3      	str	r3, [r4, #8]
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	6022      	str	r2, [r4, #0]
 8008d52:	701e      	strb	r6, [r3, #0]
 8008d54:	6962      	ldr	r2, [r4, #20]
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d004      	beq.n	8008d66 <__swbuf_r+0x6e>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	07db      	lsls	r3, r3, #31
 8008d60:	d5e1      	bpl.n	8008d26 <__swbuf_r+0x2e>
 8008d62:	2e0a      	cmp	r6, #10
 8008d64:	d1df      	bne.n	8008d26 <__swbuf_r+0x2e>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f7ff f921 	bl	8007fb0 <_fflush_r>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d0d9      	beq.n	8008d26 <__swbuf_r+0x2e>
 8008d72:	e7d6      	b.n	8008d22 <__swbuf_r+0x2a>

08008d74 <__swsetup_r>:
 8008d74:	b538      	push	{r3, r4, r5, lr}
 8008d76:	4b29      	ldr	r3, [pc, #164]	@ (8008e1c <__swsetup_r+0xa8>)
 8008d78:	4605      	mov	r5, r0
 8008d7a:	6818      	ldr	r0, [r3, #0]
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	b118      	cbz	r0, 8008d88 <__swsetup_r+0x14>
 8008d80:	6a03      	ldr	r3, [r0, #32]
 8008d82:	b90b      	cbnz	r3, 8008d88 <__swsetup_r+0x14>
 8008d84:	f7fe f840 	bl	8006e08 <__sinit>
 8008d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d8c:	0719      	lsls	r1, r3, #28
 8008d8e:	d422      	bmi.n	8008dd6 <__swsetup_r+0x62>
 8008d90:	06da      	lsls	r2, r3, #27
 8008d92:	d407      	bmi.n	8008da4 <__swsetup_r+0x30>
 8008d94:	2209      	movs	r2, #9
 8008d96:	602a      	str	r2, [r5, #0]
 8008d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d9c:	81a3      	strh	r3, [r4, #12]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008da2:	e033      	b.n	8008e0c <__swsetup_r+0x98>
 8008da4:	0758      	lsls	r0, r3, #29
 8008da6:	d512      	bpl.n	8008dce <__swsetup_r+0x5a>
 8008da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008daa:	b141      	cbz	r1, 8008dbe <__swsetup_r+0x4a>
 8008dac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008db0:	4299      	cmp	r1, r3
 8008db2:	d002      	beq.n	8008dba <__swsetup_r+0x46>
 8008db4:	4628      	mov	r0, r5
 8008db6:	f7ff fdd3 	bl	8008960 <_free_r>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dc4:	81a3      	strh	r3, [r4, #12]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	f043 0308 	orr.w	r3, r3, #8
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	b94b      	cbnz	r3, 8008dee <__swsetup_r+0x7a>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de4:	d003      	beq.n	8008dee <__swsetup_r+0x7a>
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f83f 	bl	8008e6c <__smakebuf_r>
 8008dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008df2:	f013 0201 	ands.w	r2, r3, #1
 8008df6:	d00a      	beq.n	8008e0e <__swsetup_r+0x9a>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	60a2      	str	r2, [r4, #8]
 8008dfc:	6962      	ldr	r2, [r4, #20]
 8008dfe:	4252      	negs	r2, r2
 8008e00:	61a2      	str	r2, [r4, #24]
 8008e02:	6922      	ldr	r2, [r4, #16]
 8008e04:	b942      	cbnz	r2, 8008e18 <__swsetup_r+0xa4>
 8008e06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e0a:	d1c5      	bne.n	8008d98 <__swsetup_r+0x24>
 8008e0c:	bd38      	pop	{r3, r4, r5, pc}
 8008e0e:	0799      	lsls	r1, r3, #30
 8008e10:	bf58      	it	pl
 8008e12:	6962      	ldrpl	r2, [r4, #20]
 8008e14:	60a2      	str	r2, [r4, #8]
 8008e16:	e7f4      	b.n	8008e02 <__swsetup_r+0x8e>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e7f7      	b.n	8008e0c <__swsetup_r+0x98>
 8008e1c:	20000020 	.word	0x20000020

08008e20 <__swhatbuf_r>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	b096      	sub	sp, #88	@ 0x58
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	461e      	mov	r6, r3
 8008e30:	da0d      	bge.n	8008e4e <__swhatbuf_r+0x2e>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e38:	f04f 0100 	mov.w	r1, #0
 8008e3c:	bf14      	ite	ne
 8008e3e:	2340      	movne	r3, #64	@ 0x40
 8008e40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e44:	2000      	movs	r0, #0
 8008e46:	6031      	str	r1, [r6, #0]
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	b016      	add	sp, #88	@ 0x58
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f000 f848 	bl	8008ee4 <_fstat_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dbec      	blt.n	8008e32 <__swhatbuf_r+0x12>
 8008e58:	9901      	ldr	r1, [sp, #4]
 8008e5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e62:	4259      	negs	r1, r3
 8008e64:	4159      	adcs	r1, r3
 8008e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e6a:	e7eb      	b.n	8008e44 <__swhatbuf_r+0x24>

08008e6c <__smakebuf_r>:
 8008e6c:	898b      	ldrh	r3, [r1, #12]
 8008e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e70:	079d      	lsls	r5, r3, #30
 8008e72:	4606      	mov	r6, r0
 8008e74:	460c      	mov	r4, r1
 8008e76:	d507      	bpl.n	8008e88 <__smakebuf_r+0x1c>
 8008e78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	6123      	str	r3, [r4, #16]
 8008e80:	2301      	movs	r3, #1
 8008e82:	6163      	str	r3, [r4, #20]
 8008e84:	b003      	add	sp, #12
 8008e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e88:	ab01      	add	r3, sp, #4
 8008e8a:	466a      	mov	r2, sp
 8008e8c:	f7ff ffc8 	bl	8008e20 <__swhatbuf_r>
 8008e90:	9f00      	ldr	r7, [sp, #0]
 8008e92:	4605      	mov	r5, r0
 8008e94:	4639      	mov	r1, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7fe ff86 	bl	8007da8 <_malloc_r>
 8008e9c:	b948      	cbnz	r0, 8008eb2 <__smakebuf_r+0x46>
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	059a      	lsls	r2, r3, #22
 8008ea4:	d4ee      	bmi.n	8008e84 <__smakebuf_r+0x18>
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	e7e2      	b.n	8008e78 <__smakebuf_r+0xc>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	6020      	str	r0, [r4, #0]
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ec2:	b15b      	cbz	r3, 8008edc <__smakebuf_r+0x70>
 8008ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f81d 	bl	8008f08 <_isatty_r>
 8008ece:	b128      	cbz	r0, 8008edc <__smakebuf_r+0x70>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f023 0303 	bic.w	r3, r3, #3
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	431d      	orrs	r5, r3
 8008ee0:	81a5      	strh	r5, [r4, #12]
 8008ee2:	e7cf      	b.n	8008e84 <__smakebuf_r+0x18>

08008ee4 <_fstat_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4d07      	ldr	r5, [pc, #28]	@ (8008f04 <_fstat_r+0x20>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	4611      	mov	r1, r2
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	f7f8 fb67 	bl	80015c4 <_fstat>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d102      	bne.n	8008f00 <_fstat_r+0x1c>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b103      	cbz	r3, 8008f00 <_fstat_r+0x1c>
 8008efe:	6023      	str	r3, [r4, #0]
 8008f00:	bd38      	pop	{r3, r4, r5, pc}
 8008f02:	bf00      	nop
 8008f04:	20000c00 	.word	0x20000c00

08008f08 <_isatty_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d06      	ldr	r5, [pc, #24]	@ (8008f24 <_isatty_r+0x1c>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7f8 fb66 	bl	80015e4 <_isatty>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_isatty_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_isatty_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20000c00 	.word	0x20000c00

08008f28 <_raise_r>:
 8008f28:	291f      	cmp	r1, #31
 8008f2a:	b538      	push	{r3, r4, r5, lr}
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	d904      	bls.n	8008f3c <_raise_r+0x14>
 8008f32:	2316      	movs	r3, #22
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f3e:	b112      	cbz	r2, 8008f46 <_raise_r+0x1e>
 8008f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f44:	b94b      	cbnz	r3, 8008f5a <_raise_r+0x32>
 8008f46:	4628      	mov	r0, r5
 8008f48:	f000 f830 	bl	8008fac <_getpid_r>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	4601      	mov	r1, r0
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f56:	f000 b817 	b.w	8008f88 <_kill_r>
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d00a      	beq.n	8008f74 <_raise_r+0x4c>
 8008f5e:	1c59      	adds	r1, r3, #1
 8008f60:	d103      	bne.n	8008f6a <_raise_r+0x42>
 8008f62:	2316      	movs	r3, #22
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	2001      	movs	r0, #1
 8008f68:	e7e7      	b.n	8008f3a <_raise_r+0x12>
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f70:	4620      	mov	r0, r4
 8008f72:	4798      	blx	r3
 8008f74:	2000      	movs	r0, #0
 8008f76:	e7e0      	b.n	8008f3a <_raise_r+0x12>

08008f78 <raise>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	@ (8008f84 <raise+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f7ff bfd3 	b.w	8008f28 <_raise_r>
 8008f82:	bf00      	nop
 8008f84:	20000020 	.word	0x20000020

08008f88 <_kill_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	@ (8008fa8 <_kill_r+0x20>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	602b      	str	r3, [r5, #0]
 8008f96:	f7f8 fab5 	bl	8001504 <_kill>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d102      	bne.n	8008fa4 <_kill_r+0x1c>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	b103      	cbz	r3, 8008fa4 <_kill_r+0x1c>
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000c00 	.word	0x20000c00

08008fac <_getpid_r>:
 8008fac:	f7f8 baa2 	b.w	80014f4 <_getpid>

08008fb0 <_init>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr

08008fbc <_fini>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr
