
NPVP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080095c8  080095c8  000195c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ac  080099ac  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b4  080099b4  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08009b98  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  08009c38  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000970  2000031c  08009cd8  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c8c  08009cd8  00020c8c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002034a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00019663  00000000  00000000  0002038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000031b1  00000000  00000000  000399f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001590  00000000  00000000  0003cba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000010cb  00000000  00000000  0003e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b495  00000000  00000000  0003f203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018cd3  00000000  00000000  0006a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010bcd5  00000000  00000000  0008336b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006b44  00000000  00000000  0018f040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  00195b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000031c 	.word	0x2000031c
 800021c:	00000000 	.word	0x00000000
 8000220:	080095b0 	.word	0x080095b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000320 	.word	0x20000320
 800023c:	080095b0 	.word	0x080095b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <func_clear_values>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Clear variable values
void func_clear_values(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
//	float *volt_value_ptr = &measured_voltage_value;
//	float *adc_value_ptr = &adc_value;

	adc_value = 0.0;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <func_clear_values+0x20>)
 80005f2:	f04f 0200 	mov.w	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	measured_voltage_value = 0.0;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <func_clear_values+0x24>)
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]

}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000ab0 	.word	0x20000ab0
 8000610:	20000abc 	.word	0x20000abc
 8000614:	00000000 	.word	0x00000000

08000618 <func_init_sensor_connection_status>:

// Initial sensor connection status
void func_init_sensor_connection_status(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
//	int *sensor_status_ptr = &sensor_status;
	func_clear_values();
 800061c:	f7ff ffe6 	bl	80005ec <func_clear_values>

	HAL_ADC_Stop(&hadc1);
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <func_init_sensor_connection_status+0x70>)
 8000622:	f001 fa07 	bl	8001a34 <HAL_ADC_Stop>
	HAL_ADC_Start(&hadc1);
 8000626:	4818      	ldr	r0, [pc, #96]	; (8000688 <func_init_sensor_connection_status+0x70>)
 8000628:	f001 f936 	bl	8001898 <HAL_ADC_Start>

	//Get new measurements
	func_get_adc_value(); // Does not need to be an average
 800062c:	f000 f8b4 	bl	8000798 <func_get_adc_value>
	func_adc_to_voltage();
 8000630:	f000 f8c6 	bl	80007c0 <func_adc_to_voltage>

//	if(measured_voltage_value < 0.1)
	if(measured_voltage_value < 0.1){
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <func_init_sensor_connection_status+0x74>)
 8000636:	edd3 7a00 	vldr	s15, [r3]
 800063a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800063e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000680 <func_init_sensor_connection_status+0x68>
 8000642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d513      	bpl.n	8000674 <func_init_sensor_connection_status+0x5c>
		sprintf(output_message, "+++ SENSOR DISCONNECTED +++\r\n");
 800064c:	4910      	ldr	r1, [pc, #64]	; (8000690 <func_init_sensor_connection_status+0x78>)
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <func_init_sensor_connection_status+0x7c>)
 8000650:	f006 fe14 	bl	800727c <siprintf>
		HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000654:	480f      	ldr	r0, [pc, #60]	; (8000694 <func_init_sensor_connection_status+0x7c>)
 8000656:	f7ff fe43 	bl	80002e0 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000662:	490c      	ldr	r1, [pc, #48]	; (8000694 <func_init_sensor_connection_status+0x7c>)
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <func_init_sensor_connection_status+0x80>)
 8000666:	f004 fe87 	bl	8005378 <HAL_UART_Transmit>
		HAL_Delay(500);
 800066a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066e:	f001 f8ab 	bl	80017c8 <HAL_Delay>
	} else {
		sensor_status = 0;
	}
}
 8000672:	e002      	b.n	800067a <func_init_sensor_connection_status+0x62>
		sensor_status = 0;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <func_init_sensor_connection_status+0x84>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	9999999a 	.word	0x9999999a
 8000684:	3fb99999 	.word	0x3fb99999
 8000688:	20000370 	.word	0x20000370
 800068c:	20000abc 	.word	0x20000abc
 8000690:	080095c8 	.word	0x080095c8
 8000694:	20000acc 	.word	0x20000acc
 8000698:	20000514 	.word	0x20000514
 800069c:	20000000 	.word	0x20000000

080006a0 <func_monitor_sensor_status>:

// Sensor connection monitoring
void func_monitor_sensor_status(void){
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	if(measured_voltage_value < 0.1){
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <func_monitor_sensor_status+0x38>)
 80006a6:	edd3 7a00 	vldr	s15, [r3]
 80006aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ae:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80006d0 <func_monitor_sensor_status+0x30>
 80006b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	d400      	bmi.n	80006be <func_monitor_sensor_status+0x1e>
		sensor_status = 1;
	}
}
 80006bc:	e002      	b.n	80006c4 <func_monitor_sensor_status+0x24>
		sensor_status = 1;
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <func_monitor_sensor_status+0x3c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	9999999a 	.word	0x9999999a
 80006d4:	3fb99999 	.word	0x3fb99999
 80006d8:	20000abc 	.word	0x20000abc
 80006dc:	20000000 	.word	0x20000000

080006e0 <func_calibrate_sensor>:

// Calibrate sensor
void func_calibrate_sensor(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	while(start_up){
 80006e4:	e006      	b.n	80006f4 <func_calibrate_sensor+0x14>
		// Take initial measurement
		func_new_measurement();
 80006e6:	f000 f84d 	bl	8000784 <func_new_measurement>

		// Set auto-zero value
		func_auto_zero();
 80006ea:	f000 f8db 	bl	80008a4 <func_auto_zero>
		start_up = 0;
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <func_calibrate_sensor+0x24>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
	while(start_up){
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <func_calibrate_sensor+0x24>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f4      	bne.n	80006e6 <func_calibrate_sensor+0x6>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000004 	.word	0x20000004

08000708 <func_average_adc_measurement>:

// Average measurement
void func_average_adc_measurement(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    // Initialize accumulation variables
    adc_sum = 0.0;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <func_average_adc_measurement+0x68>)
 800070e:	f04f 0200 	mov.w	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
    sample_count = 0.0;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <func_average_adc_measurement+0x6c>)
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
    sampling_done = 0;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <func_average_adc_measurement+0x70>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]

    // Start the timer
    HAL_TIM_Base_Start_IT(&htim2);
 8000722:	4816      	ldr	r0, [pc, #88]	; (800077c <func_average_adc_measurement+0x74>)
 8000724:	f004 f93c 	bl	80049a0 <HAL_TIM_Base_Start_IT>

    // Wait for 1000ms
    HAL_Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f001 f84c 	bl	80017c8 <HAL_Delay>

    // Stop the timer
    HAL_TIM_Base_Stop_IT(&htim2);
 8000730:	4812      	ldr	r0, [pc, #72]	; (800077c <func_average_adc_measurement+0x74>)
 8000732:	f004 f9ad 	bl	8004a90 <HAL_TIM_Base_Stop_IT>

    // Calculate average
    if (sample_count > 0) {
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <func_average_adc_measurement+0x6c>)
 8000738:	edd3 7a00 	vldr	s15, [r3]
 800073c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	dd0b      	ble.n	800075e <func_average_adc_measurement+0x56>
    	avg_adc_value = adc_sum / sample_count; // Average ADC value stored
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <func_average_adc_measurement+0x68>)
 8000748:	edd3 6a00 	vldr	s13, [r3]
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <func_average_adc_measurement+0x6c>)
 800074e:	ed93 7a00 	vldr	s14, [r3]
 8000752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <func_average_adc_measurement+0x78>)
 8000758:	edc3 7a00 	vstr	s15, [r3]
 800075c:	e003      	b.n	8000766 <func_average_adc_measurement+0x5e>
    } else {
    	avg_adc_value = 0.0; // Default value if no samples were taken
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <func_average_adc_measurement+0x78>)
 8000760:	f04f 0200 	mov.w	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
    }

    // Mark sampling as done
    sampling_done = 1;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <func_average_adc_measurement+0x70>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000aa4 	.word	0x20000aa4
 8000774:	20000aa8 	.word	0x20000aa8
 8000778:	20000aac 	.word	0x20000aac
 800077c:	200004c8 	.word	0x200004c8
 8000780:	20000ab4 	.word	0x20000ab4

08000784 <func_new_measurement>:

// Get measurement values
void func_new_measurement(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	func_average_adc_measurement();
 8000788:	f7ff ffbe 	bl	8000708 <func_average_adc_measurement>
	func_adc_to_voltage();
 800078c:	f000 f818 	bl	80007c0 <func_adc_to_voltage>
	func_voltage_to_psi();
 8000790:	f000 f854 	bl	800083c <func_voltage_to_psi>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <func_get_adc_value>:
// Get ADC value
void func_get_adc_value(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
//	float *adc_ptr = &adc_value;
	adc_value = HAL_ADC_GetValue(&hadc1);
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <func_get_adc_value+0x1c>)
 800079e:	f001 fa08 	bl	8001bb2 <HAL_ADC_GetValue>
 80007a2:	ee07 0a90 	vmov	s15, r0
 80007a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <func_get_adc_value+0x20>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]


//	float current_adc_value = HAL_ADC_GetValue(&hadc1);
//	filtered_adc_value = apply_low_pass_filter(current_adc_value, filtered_adc_value);
//	adc_value = filtered_adc_value;
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000370 	.word	0x20000370
 80007b8:	20000ab0 	.word	0x20000ab0
 80007bc:	00000000 	.word	0x00000000

080007c0 <func_adc_to_voltage>:
//    return (FILTER_ALPHA * current_value) + ((1 - FILTER_ALPHA) * previous_filtered_value);
//}


// ADC to voltage
void func_adc_to_voltage(void){
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
//	float *voltage_ptr = &measured_voltage_value;
//	measured_voltage_value = (adc_value / 4095) * 3.3;
	if(sensor_status){
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <func_adc_to_voltage+0x68>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d012      	beq.n	80007f2 <func_adc_to_voltage+0x32>
		measured_voltage_value = (adc_value / 4095) * 3.3;
 80007cc:	4b17      	ldr	r3, [pc, #92]	; (800082c <func_adc_to_voltage+0x6c>)
 80007ce:	ed93 7a00 	vldr	s14, [r3]
 80007d2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000830 <func_adc_to_voltage+0x70>
 80007d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007de:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000820 <func_adc_to_voltage+0x60>
 80007e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <func_adc_to_voltage+0x74>)
 80007ec:	edc3 7a00 	vstr	s15, [r3]
	} else {
		measured_voltage_value = (avg_adc_value / 4095) * 3.3;
	}
}
 80007f0:	e011      	b.n	8000816 <func_adc_to_voltage+0x56>
		measured_voltage_value = (avg_adc_value / 4095) * 3.3;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <func_adc_to_voltage+0x78>)
 80007f4:	ed93 7a00 	vldr	s14, [r3]
 80007f8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000830 <func_adc_to_voltage+0x70>
 80007fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000804:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000820 <func_adc_to_voltage+0x60>
 8000808:	ee27 7b06 	vmul.f64	d7, d7, d6
 800080c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <func_adc_to_voltage+0x74>)
 8000812:	edc3 7a00 	vstr	s15, [r3]
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	66666666 	.word	0x66666666
 8000824:	400a6666 	.word	0x400a6666
 8000828:	20000000 	.word	0x20000000
 800082c:	20000ab0 	.word	0x20000ab0
 8000830:	457ff000 	.word	0x457ff000
 8000834:	20000abc 	.word	0x20000abc
 8000838:	20000ab4 	.word	0x20000ab4

0800083c <func_voltage_to_psi>:

// Voltage to psi
void func_voltage_to_psi(void){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
//	float *psi_ptr = &measured_psi_pressure;
	measured_psi_pressure = (((measured_voltage_value - output_voltage_min) *
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <func_voltage_to_psi+0x58>)
 8000842:	ed93 7a00 	vldr	s14, [r3]
 8000846:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000898 <func_voltage_to_psi+0x5c>
 800084a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800084e:	ee37 7a67 	vsub.f32	s14, s14, s15
  	  	  (psi_pressure_max - psi_pressure_min)) / (output_voltage_max - output_voltage_min)) + psi_pressure_min;
 8000852:	2207      	movs	r2, #7
 8000854:	f06f 0306 	mvn.w	r3, #6
 8000858:	1ad3      	subs	r3, r2, r3
	measured_psi_pressure = (((measured_voltage_value - output_voltage_min) *
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000862:	ee67 6a27 	vmul.f32	s13, s14, s15
  	  	  (psi_pressure_max - psi_pressure_min)) / (output_voltage_max - output_voltage_min)) + psi_pressure_min;
 8000866:	2205      	movs	r2, #5
 8000868:	2300      	movs	r3, #0
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000878:	eddf 7a08 	vldr	s15, [pc, #32]	; 800089c <func_voltage_to_psi+0x60>
 800087c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000880:	ee77 7a27 	vadd.f32	s15, s14, s15
	measured_psi_pressure = (((measured_voltage_value - output_voltage_min) *
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <func_voltage_to_psi+0x64>)
 8000886:	edc3 7a00 	vstr	s15, [r3]

}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	20000abc 	.word	0x20000abc
 8000898:	00000000 	.word	0x00000000
 800089c:	fffffff9 	.word	0xfffffff9
 80008a0:	20000ab8 	.word	0x20000ab8

080008a4 <func_auto_zero>:

// Auto-zero
void func_auto_zero(void){
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
//	float *auto_zero_pressure_ptr = &auto_zero_pressure_value;
	auto_zero_pressure_value =  measured_psi_pressure - known_ref_pressure;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <func_auto_zero+0x28>)
 80008aa:	ed93 7a00 	vldr	s14, [r3]
 80008ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 80008d0 <func_auto_zero+0x2c>
 80008b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <func_auto_zero+0x30>)
 80008bc:	edc3 7a00 	vstr	s15, [r3]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000ab8 	.word	0x20000ab8
 80008d0:	00000000 	.word	0x00000000
 80008d4:	20000ac0 	.word	0x20000ac0

080008d8 <func_corrected_pressure>:

// Corrected pressure
void func_corrected_pressure(void){
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	corrected_pressure_value = measured_psi_pressure - auto_zero_pressure_value;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <func_corrected_pressure+0x24>)
 80008de:	ed93 7a00 	vldr	s14, [r3]
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <func_corrected_pressure+0x28>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <func_corrected_pressure+0x2c>)
 80008ee:	edc3 7a00 	vstr	s15, [r3]
//	func_psi_to_cmh2o();
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000ab8 	.word	0x20000ab8
 8000900:	20000ac0 	.word	0x20000ac0
 8000904:	20000ac4 	.word	0x20000ac4

08000908 <func_psi_to_cmh2o>:

// psi to cmh2o
void func_psi_to_cmh2o(void){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	corrected_cmh2o_pressure = corrected_pressure_value * 70.307;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <func_psi_to_cmh2o+0x38>)
 800090e:	edd3 7a00 	vldr	s15, [r3]
 8000912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000916:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000938 <func_psi_to_cmh2o+0x30>
 800091a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <func_psi_to_cmh2o+0x3c>)
 8000924:	edc3 7a00 	vstr	s15, [r3]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	f3af 8000 	nop.w
 8000938:	e353f7cf 	.word	0xe353f7cf
 800093c:	405193a5 	.word	0x405193a5
 8000940:	20000ac4 	.word	0x20000ac4
 8000944:	20000ac8 	.word	0x20000ac8

08000948 <func_corrected_measurement>:

// Corrected measurement
void func_corrected_measurement(void){
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	func_corrected_pressure();
 800094c:	f7ff ffc4 	bl	80008d8 <func_corrected_pressure>
	func_psi_to_cmh2o();
 8000950:	f7ff ffda 	bl	8000908 <func_psi_to_cmh2o>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_TIM_PeriodElapsedCallback>:

// Timer interrupt callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000968:	d11a      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x48>
        if (!sampling_done) {
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d116      	bne.n	80009a0 <HAL_TIM_PeriodElapsedCallback+0x48>
        	func_get_adc_value();
 8000972:	f7ff ff11 	bl	8000798 <func_get_adc_value>
            adc_sum += adc_value;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000978:	ed93 7a00 	vldr	s14, [r3]
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000988:	edc3 7a00 	vstr	s15, [r3]
            sample_count++;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800099c:	edc3 7a00 	vstr	s15, [r3]
        }
    }
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000aac 	.word	0x20000aac
 80009ac:	20000aa4 	.word	0x20000aa4
 80009b0:	20000ab0 	.word	0x20000ab0
 80009b4:	20000aa8 	.word	0x20000aa8

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fea6 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f85f 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fa39 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 80009ca:	f000 fa19 	bl	8000e00 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009ce:	f000 f9b9 	bl	8000d44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009d2:	f000 f9e7 	bl	8000da4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80009d6:	f000 f8c7 	bl	8000b68 <MX_ADC1_Init>
  MX_ETH_Init();
 80009da:	f000 f917 	bl	8000c0c <MX_ETH_Init>
  MX_TIM2_Init();
 80009de:	f000 f963 	bl	8000ca8 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80009e2:	4820      	ldr	r0, [pc, #128]	; (8000a64 <main+0xac>)
 80009e4:	f000 ff58 	bl	8001898 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ec:	481d      	ldr	r0, [pc, #116]	; (8000a64 <main+0xac>)
 80009ee:	f001 f855 	bl	8001a9c <HAL_ADC_PollForConversion>

	  // Check initial sensor connection.
	  while(sensor_status){
 80009f2:	e001      	b.n	80009f8 <main+0x40>
		  func_init_sensor_connection_status();
 80009f4:	f7ff fe10 	bl	8000618 <func_init_sensor_connection_status>
	  while(sensor_status){
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <main+0xb0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f9      	bne.n	80009f4 <main+0x3c>
	  }

	  // Ongoing sensor connection status
	  func_monitor_sensor_status();
 8000a00:	f7ff fe4e 	bl	80006a0 <func_monitor_sensor_status>

	  //Sensor calibration
	  func_calibrate_sensor();
 8000a04:	f7ff fe6c 	bl	80006e0 <func_calibrate_sensor>

	  // Take and correct measurement
	  func_new_measurement();
 8000a08:	f7ff febc 	bl	8000784 <func_new_measurement>
	  func_corrected_measurement();
 8000a0c:	f7ff ff9c 	bl	8000948 <func_corrected_measurement>

	  sprintf(output_message, "ADC Value: %.2f, Voltage: %.2fV, %.2fcmH2O\r\n", adc_value, measured_voltage_value, corrected_cmh2o_pressure);
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <main+0xb4>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <main+0xb8>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <main+0xbc>)
 8000a26:	edd3 6a00 	vldr	s13, [r3]
 8000a2a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a2e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a32:	ed8d 7b00 	vstr	d7, [sp]
 8000a36:	ec53 2b15 	vmov	r2, r3, d5
 8000a3a:	490f      	ldr	r1, [pc, #60]	; (8000a78 <main+0xc0>)
 8000a3c:	480f      	ldr	r0, [pc, #60]	; (8000a7c <main+0xc4>)
 8000a3e:	f006 fc1d 	bl	800727c <siprintf>
	  HAL_UART_Transmit(&huart3,(uint8_t *)output_message, strlen(output_message), HAL_MAX_DELAY);
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <main+0xc4>)
 8000a44:	f7ff fc4c 	bl	80002e0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <main+0xc4>)
 8000a52:	480b      	ldr	r0, [pc, #44]	; (8000a80 <main+0xc8>)
 8000a54:	f004 fc90 	bl	8005378 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000a58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5c:	f000 feb4 	bl	80017c8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000a60:	e7bf      	b.n	80009e2 <main+0x2a>
 8000a62:	bf00      	nop
 8000a64:	20000370 	.word	0x20000370
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000ab0 	.word	0x20000ab0
 8000a70:	20000abc 	.word	0x20000abc
 8000a74:	20000ac8 	.word	0x20000ac8
 8000a78:	080095e8 	.word	0x080095e8
 8000a7c:	20000acc 	.word	0x20000acc
 8000a80:	20000514 	.word	0x20000514

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b094      	sub	sp, #80	; 0x50
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2234      	movs	r2, #52	; 0x34
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fcd4 	bl	8007440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa8:	f002 fdc6 	bl	8003638 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <SystemClock_Config+0xdc>)
 8000ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xdc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <SystemClock_Config+0xe0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ae8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aea:	2302      	movs	r3, #2
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000af8:	2360      	movs	r3, #96	; 0x60
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f002 fdf3 	bl	80036f8 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b18:	f000 fa4c 	bl	8000fb4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b1c:	f002 fd9c 	bl	8003658 <HAL_PWREx_EnableOverDrive>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b26:	f000 fa45 	bl	8000fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2103      	movs	r1, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 f884 	bl	8003c54 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b52:	f000 fa2f 	bl	8000fb4 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b7c:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <MX_ADC1_Init+0x9c>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <MX_ADC1_Init+0xa0>)
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bca:	f000 fe21 	bl	8001810 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 f9ee 	bl	8000fb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000bd8:	230d      	movs	r3, #13
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000be0:	2307      	movs	r3, #7
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x98>)
 8000bea:	f000 ffef 	bl	8001bcc <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 f9de 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000370 	.word	0x20000370
 8000c04:	40012000 	.word	0x40012000
 8000c08:	0f000001 	.word	0x0f000001

08000c0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c12:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <MX_ETH_Init+0x88>)
 8000c14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c24:	22e1      	movs	r2, #225	; 0xe1
 8000c26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c3c:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_ETH_Init+0x8c>)
 8000c3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c46:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <MX_ETH_Init+0x90>)
 8000c4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_ETH_Init+0x94>)
 8000c52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <MX_ETH_Init+0x84>)
 8000c5e:	f001 fe93 	bl	8002988 <HAL_ETH_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c68:	f000 f9a4 	bl	8000fb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c6c:	2238      	movs	r2, #56	; 0x38
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c72:	f006 fbe5 	bl	8007440 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c78:	2221      	movs	r2, #33	; 0x21
 8000c7a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c7e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c82:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_ETH_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000418 	.word	0x20000418
 8000c94:	40028000 	.word	0x40028000
 8000c98:	20000b30 	.word	0x20000b30
 8000c9c:	2000027c 	.word	0x2000027c
 8000ca0:	200001dc 	.word	0x200001dc
 8000ca4:	20000338 	.word	0x20000338

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ccc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cd0:	225f      	movs	r2, #95	; 0x5f
 8000cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000cf0:	f003 fdfe 	bl	80048f0 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cfa:	f000 f95b 	bl	8000fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000d0c:	f004 f80e 	bl	8004d2c <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d16:	f000 f94d 	bl	8000fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM2_Init+0x98>)
 8000d28:	f004 fa2c 	bl	8005184 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d32:	f000 f93f 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200004c8 	.word	0x200004c8

08000d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_USART3_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART3_UART_Init+0x58>)
 8000d88:	f004 faa8 	bl	80052dc <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f90f 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000514 	.word	0x20000514
 8000da0:	40004800 	.word	0x40004800

08000da4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	2206      	movs	r2, #6
 8000db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	f002 fadd 	bl	80033a6 <HAL_PCD_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f8df 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000059c 	.word	0x2000059c

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2038      	movs	r0, #56	; 0x38
 8000e24:	f001 f9fd 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e28:	2038      	movs	r0, #56	; 0x38
 8000e2a:	f001 fa16 	bl	800225a <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a53      	ldr	r2, [pc, #332]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b51      	ldr	r3, [pc, #324]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a3b      	ldr	r2, [pc, #236]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eca:	4b36      	ldr	r3, [pc, #216]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a35      	ldr	r2, [pc, #212]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_GPIO_Init+0x168>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <MX_GPIO_Init+0x16c>)
 8000ee8:	f002 fa20 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ef2:	482e      	ldr	r0, [pc, #184]	; (8000fac <MX_GPIO_Init+0x170>)
 8000ef4:	f002 fa1a 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	482c      	ldr	r0, [pc, #176]	; (8000fb0 <MX_GPIO_Init+0x174>)
 8000efe:	f002 fa15 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <MX_GPIO_Init+0x16c>)
 8000f1a:	f002 f85b 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : YELLOW_LED_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <MX_GPIO_Init+0x16c>)
 8000f36:	f002 f84d 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f3a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <MX_GPIO_Init+0x170>)
 8000f54:	f002 f83e 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f58:	2340      	movs	r3, #64	; 0x40
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <MX_GPIO_Init+0x174>)
 8000f70:	f002 f830 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	480a      	ldr	r0, [pc, #40]	; (8000fb0 <MX_GPIO_Init+0x174>)
 8000f88:	f002 f824 	bl	8002fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2028      	movs	r0, #40	; 0x28
 8000f92:	f001 f946 	bl	8002222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f96:	2028      	movs	r0, #40	; 0x28
 8000f98:	f001 f95f 	bl	800225a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40021800 	.word	0x40021800

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
}
 8000fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <Error_Handler+0x8>
	...

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x44>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x44>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x44>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x44>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x44>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2d      	ldr	r2, [pc, #180]	; (80010dc <HAL_ADC_MspInit+0xd4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d154      	bne.n	80010d4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_ADC_MspInit+0xd8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = SENSOR_Pin;
 800105a:	2308      	movs	r3, #8
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <HAL_ADC_MspInit+0xdc>)
 800106e:	f001 ffb1 	bl	8002fd4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_ADC_MspInit+0xe4>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001098:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 800109c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010ba:	f001 f8e9 	bl	8002290 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80010c4:	f7ff ff76 	bl	8000fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	200003b8 	.word	0x200003b8
 80010ec:	40026410 	.word	0x40026410

080010f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	; 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_ETH_MspInit+0x158>)
 800110e:	4293      	cmp	r3, r2
 8001110:	f040 8096 	bne.w	8001240 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001114:	4b4d      	ldr	r3, [pc, #308]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800111a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111e:	6313      	str	r3, [r2, #48]	; 0x30
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b44      	ldr	r3, [pc, #272]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a40      	ldr	r2, [pc, #256]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800114a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b3e      	ldr	r3, [pc, #248]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115c:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a3a      	ldr	r2, [pc, #232]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a34      	ldr	r2, [pc, #208]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b32      	ldr	r3, [pc, #200]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a2e      	ldr	r2, [pc, #184]	; (800124c <HAL_ETH_MspInit+0x15c>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_ETH_MspInit+0x15c>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_ETH_MspInit+0x15c>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ETH_MspInit+0x15c>)
 80011aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_ETH_MspInit+0x15c>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011bc:	2332      	movs	r3, #50	; 0x32
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011cc:	230b      	movs	r3, #11
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	481e      	ldr	r0, [pc, #120]	; (8001250 <HAL_ETH_MspInit+0x160>)
 80011d8:	f001 fefc 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011dc:	2386      	movs	r3, #134	; 0x86
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ec:	230b      	movs	r3, #11
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <HAL_ETH_MspInit+0x164>)
 80011f8:	f001 feec 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120e:	230b      	movs	r3, #11
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <HAL_ETH_MspInit+0x168>)
 800121a:	f001 fedb 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800121e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001230:	230b      	movs	r3, #11
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <HAL_ETH_MspInit+0x16c>)
 800123c:	f001 feca 	bl	8002fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40028000 	.word	0x40028000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020800 	.word	0x40020800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40021800 	.word	0x40021800

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001270:	d113      	bne.n	800129a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_TIM_Base_MspInit+0x44>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_TIM_Base_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_TIM_Base_MspInit+0x44>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	201c      	movs	r0, #28
 8001290:	f000 ffc7 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001294:	201c      	movs	r0, #28
 8001296:	f000 ffe0 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ae      	sub	sp, #184	; 0xb8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2290      	movs	r2, #144	; 0x90
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 f8b9 	bl	8007440 <memset>
  if(huart->Instance==USART3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_UART_MspInit+0xc4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d144      	bne.n	8001362 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012de:	2300      	movs	r3, #0
 80012e0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 feda 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012f2:	f7ff fe5f 	bl	8000fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <HAL_UART_MspInit+0xc8>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_UART_MspInit+0xc8>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_UART_MspInit+0xc8>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_UART_MspInit+0xc8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_UART_MspInit+0xc8>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_UART_MspInit+0xc8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001326:	f44f 7340 	mov.w	r3, #768	; 0x300
 800132a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001340:	2307      	movs	r3, #7
 8001342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001346:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <HAL_UART_MspInit+0xcc>)
 800134e:	f001 fe41 	bl	8002fd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2027      	movs	r0, #39	; 0x27
 8001358:	f000 ff63 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800135c:	2027      	movs	r0, #39	; 0x27
 800135e:	f000 ff7c 	bl	800225a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	37b8      	adds	r7, #184	; 0xb8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40004800 	.word	0x40004800
 8001370:	40023800 	.word	0x40023800
 8001374:	40020c00 	.word	0x40020c00

08001378 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0ae      	sub	sp, #184	; 0xb8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2290      	movs	r2, #144	; 0x90
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f006 f851 	bl	8007440 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a6:	d159      	bne.n	800145c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fe71 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013c4:	f7ff fdf6 	bl	8000fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_PCD_MspInit+0xec>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_PCD_MspInit+0xec>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_PCD_MspInit+0xec>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013fa:	230a      	movs	r3, #10
 80013fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001404:	4619      	mov	r1, r3
 8001406:	4818      	ldr	r0, [pc, #96]	; (8001468 <HAL_PCD_MspInit+0xf0>)
 8001408:	f001 fde4 	bl	8002fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800140c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001424:	4619      	mov	r1, r3
 8001426:	4810      	ldr	r0, [pc, #64]	; (8001468 <HAL_PCD_MspInit+0xf0>)
 8001428:	f001 fdd4 	bl	8002fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_PCD_MspInit+0xec>)
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_PCD_MspInit+0xec>)
 8001432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001436:	6353      	str	r3, [r2, #52]	; 0x34
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_PCD_MspInit+0xec>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_PCD_MspInit+0xec>)
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_PCD_MspInit+0xec>)
 800144a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144e:	6453      	str	r3, [r2, #68]	; 0x44
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_PCD_MspInit+0xec>)
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	37b8      	adds	r7, #184	; 0xb8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f000 f966 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f003 fb12 	bl	8004aee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200004c8 	.word	0x200004c8

080014d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <USART3_IRQHandler+0x10>)
 80014da:	f003 ffd1 	bl	8005480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000514 	.word	0x20000514

080014e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80014ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014f0:	f001 ff36 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA2_Stream0_IRQHandler+0x10>)
 80014fe:	f001 f807 	bl	8002510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003b8 	.word	0x200003b8

0800150c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return 1;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001526:	f005 ff97 	bl	8007458 <__errno>
 800152a:	4603      	mov	r3, r0
 800152c:	2216      	movs	r2, #22
 800152e:	601a      	str	r2, [r3, #0]
  return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_exit>:

void _exit (int status)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffe7 	bl	800151c <_kill>
  while (1) {}    /* Make sure we hang here */
 800154e:	e7fe      	b.n	800154e <_exit+0x12>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
  }

  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
  }
  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_close>:

int _close(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ea:	605a      	str	r2, [r3, #4]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_isatty>:

int _isatty(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f005 fefc 	bl	8007458 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20080000 	.word	0x20080000
 800168c:	00000400 	.word	0x00000400
 8001690:	20000b38 	.word	0x20000b38
 8001694:	20000c90 	.word	0x20000c90

08001698 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e6:	f7ff ffd7 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f005 febb 	bl	8007464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff f963 	bl	80009b8 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001700:	080099bc 	.word	0x080099bc
  ldr r2, =_sbss
 8001704:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8001708:	20000c8c 	.word	0x20000c8c

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>

0800170e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001712:	2003      	movs	r0, #3
 8001714:	f000 fd7a 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f805 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171e:	f7ff fc4f 	bl	8000fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd95 	bl	8002276 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001764:	f000 fd5d 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000008 	.word	0x20000008
 8001780:	20000010 	.word	0x20000010
 8001784:	2000000c 	.word	0x2000000c

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000010 	.word	0x20000010
 80017ac:	20000b3c 	.word	0x20000b3c

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000b3c 	.word	0x20000b3c

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000010 	.word	0x20000010

08001810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e031      	b.n	800188a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff fbea 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_ADC_Init+0x84>)
 8001854:	4013      	ands	r3, r2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fb0a 	bl	8001e78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	ffffeefd 	.word	0xffffeefd

08001898 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Start+0x1a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0ad      	b.n	8001a0e <HAL_ADC_Start+0x176>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d018      	beq.n	80018fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <HAL_ADC_Start+0x184>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_ADC_Start+0x188>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	0c9a      	lsrs	r2, r3, #18
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d175      	bne.n	80019f4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190c:	4b45      	ldr	r3, [pc, #276]	; (8001a24 <HAL_ADC_Start+0x18c>)
 800190e:	4013      	ands	r3, r2
 8001910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800192e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001942:	d106      	bne.n	8001952 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f023 0206 	bic.w	r2, r3, #6
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
 8001950:	e002      	b.n	8001958 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001968:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_ADC_Start+0x190>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d143      	bne.n	8001a0c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e03a      	b.n	8001a0c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_ADC_Start+0x194>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d10e      	bne.n	80019be <HAL_ADC_Start+0x126>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019bc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_ADC_Start+0x190>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d120      	bne.n	8001a0c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_ADC_Start+0x198>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d11b      	bne.n	8001a0c <HAL_ADC_Start+0x174>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d114      	bne.n	8001a0c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	e00b      	b.n	8001a0c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0210 	orr.w	r2, r3, #16
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	fffff8fe 	.word	0xfffff8fe
 8001a28:	40012300 	.word	0x40012300
 8001a2c:	40012000 	.word	0x40012000
 8001a30:	40012200 	.word	0x40012200

08001a34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Stop+0x16>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e01f      	b.n	8001a8a <HAL_ADC_Stop+0x56>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_ADC_Stop+0x64>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	ffffeefe 	.word	0xffffeefe

08001a9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab8:	d113      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e063      	b.n	8001baa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ae2:	f7ff fe65 	bl	80017b0 <HAL_GetTick>
 8001ae6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae8:	e021      	b.n	8001b2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af0:	d01d      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_ADC_PollForConversion+0x6c>
 8001af8:	f7ff fe5a 	bl	80017b0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d212      	bcs.n	8001b2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d00b      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f043 0204 	orr.w	r2, r3, #4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e03d      	b.n	8001baa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d1d6      	bne.n	8001aea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0212 	mvn.w	r2, #18
 8001b44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d123      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11f      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e136      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x28a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d93a      	bls.n	8001c6e <HAL_ADC_ConfigChannel+0xa2>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c00:	d035      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68d9      	ldr	r1, [r3, #12]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	3b1e      	subs	r3, #30
 8001c18:	2207      	movs	r2, #7
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8d      	ldr	r2, [pc, #564]	; (8001e64 <HAL_ADC_ConfigChannel+0x298>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68d9      	ldr	r1, [r3, #12]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	061a      	lsls	r2, r3, #24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c46:	e035      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68d9      	ldr	r1, [r3, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4403      	add	r3, r0
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	409a      	lsls	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c6c:	e022      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	400a      	ands	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6919      	ldr	r1, [r3, #16]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4403      	add	r3, r0
 8001caa:	409a      	lsls	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d824      	bhi.n	8001d06 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b05      	subs	r3, #5
 8001cce:	221f      	movs	r2, #31
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43da      	mvns	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	400a      	ands	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
 8001d04:	e04c      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d824      	bhi.n	8001d58 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b23      	subs	r3, #35	; 0x23
 8001d20:	221f      	movs	r2, #31
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	; 0x23
 8001d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
 8001d56:	e023      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b41      	subs	r3, #65	; 0x41
 8001d6a:	221f      	movs	r2, #31
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43da      	mvns	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	400a      	ands	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b41      	subs	r3, #65	; 0x41
 8001d94:	fa00 f203 	lsl.w	r2, r0, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a30      	ldr	r2, [pc, #192]	; (8001e68 <HAL_ADC_ConfigChannel+0x29c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10a      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1f4>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001dbe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <HAL_ADC_ConfigChannel+0x29c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10f      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b12      	cmp	r3, #18
 8001dd0:	d10b      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ddc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <HAL_ADC_ConfigChannel+0x29c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d12b      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x280>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_ADC_ConfigChannel+0x298>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x23a>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b11      	cmp	r3, #17
 8001e04:	d122      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_ADC_ConfigChannel+0x2a0>)
 8001e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_ADC_ConfigChannel+0x298>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d111      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9a      	lsrs	r2, r3, #18
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e3e:	e002      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f9      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	10000012 	.word	0x10000012
 8001e68:	40012000 	.word	0x40012000
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	20000008 	.word	0x20000008
 8001e74:	431bde83 	.word	0x431bde83

08001e78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e80:	4b78      	ldr	r3, [pc, #480]	; (8002064 <ADC_Init+0x1ec>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a77      	ldr	r2, [pc, #476]	; (8002064 <ADC_Init+0x1ec>)
 8001e86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <ADC_Init+0x1ec>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4973      	ldr	r1, [pc, #460]	; (8002064 <ADC_Init+0x1ec>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	021a      	lsls	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	4a58      	ldr	r2, [pc, #352]	; (8002068 <ADC_Init+0x1f0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	e00f      	b.n	8001f72 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0202 	bic.w	r2, r2, #2
 8001f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	005a      	lsls	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6859      	ldr	r1, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	035a      	lsls	r2, r3, #13
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	e007      	b.n	8001fe8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	3b01      	subs	r3, #1
 8002004:	051a      	lsls	r2, r3, #20
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800201c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800202a:	025a      	lsls	r2, r3, #9
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	029a      	lsls	r2, r3, #10
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40012300 	.word	0x40012300
 8002068:	0f000001 	.word	0x0f000001

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <__NVIC_SetPriorityGrouping+0x40>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002096:	4313      	orrs	r3, r2
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x40>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00
 80020b0:	05fa0000 	.word	0x05fa0000

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	; (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fa88 	bl	80017b0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e099      	b.n	80023e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022cc:	e00f      	b.n	80022ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ce:	f7ff fa6f 	bl	80017b0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d908      	bls.n	80022ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e078      	b.n	80023e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e8      	bne.n	80022ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_DMA_Init+0x158>)
 8002308:	4013      	ands	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4313      	orrs	r3, r2
 800233e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4313      	orrs	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0307 	bic.w	r3, r3, #7
 800236e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	2b04      	cmp	r3, #4
 8002380:	d117      	bne.n	80023b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4313      	orrs	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa7b 	bl	8002890 <DMA_CheckFifoParam>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ae:	2301      	movs	r3, #1
 80023b0:	e016      	b.n	80023e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa32 	bl	8002824 <DMA_CalcBaseAndBitshift>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	223f      	movs	r2, #63	; 0x3f
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	e010803f 	.word	0xe010803f

080023ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023fa:	f7ff f9d9 	bl	80017b0 <HAL_GetTick>
 80023fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d008      	beq.n	800241e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e052      	b.n	80024c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0216 	bic.w	r2, r2, #22
 800242c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800243c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <HAL_DMA_Abort+0x62>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0208 	bic.w	r2, r2, #8
 800245c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246e:	e013      	b.n	8002498 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002470:	f7ff f99e 	bl	80017b0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d90c      	bls.n	8002498 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2203      	movs	r2, #3
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e015      	b.n	80024c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1e4      	bne.n	8002470 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	223f      	movs	r2, #63	; 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d004      	beq.n	80024ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00c      	b.n	8002504 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2205      	movs	r2, #5
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800251c:	4b8e      	ldr	r3, [pc, #568]	; (8002758 <HAL_DMA_IRQHandler+0x248>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a8e      	ldr	r2, [pc, #568]	; (800275c <HAL_DMA_IRQHandler+0x24c>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0a9b      	lsrs	r3, r3, #10
 8002528:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2208      	movs	r2, #8
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01a      	beq.n	800257c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	2208      	movs	r2, #8
 800256a:	409a      	lsls	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2201      	movs	r2, #1
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2201      	movs	r2, #1
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2204      	movs	r2, #4
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d012      	beq.n	80025e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	2204      	movs	r2, #4
 80025d6:	409a      	lsls	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f043 0204 	orr.w	r2, r3, #4
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2210      	movs	r2, #16
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d043      	beq.n	8002680 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03c      	beq.n	8002680 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	2210      	movs	r2, #16
 800260c:	409a      	lsls	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d018      	beq.n	8002652 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d024      	beq.n	8002680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
 800263e:	e01f      	b.n	8002680 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
 8002650:	e016      	b.n	8002680 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0208 	bic.w	r2, r2, #8
 800266e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2220      	movs	r2, #32
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 808f 	beq.w	80027b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8087 	beq.w	80027b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a6:	2220      	movs	r2, #32
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d136      	bne.n	8002728 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0216 	bic.w	r2, r2, #22
 80026c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <HAL_DMA_IRQHandler+0x1da>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0208 	bic.w	r2, r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	223f      	movs	r2, #63	; 0x3f
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d07e      	beq.n	800281c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
        }
        return;
 8002726:	e079      	b.n	800281c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01d      	beq.n	8002772 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	2b00      	cmp	r3, #0
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
 8002754:	e02c      	b.n	80027b0 <HAL_DMA_IRQHandler+0x2a0>
 8002756:	bf00      	nop
 8002758:	20000008 	.word	0x20000008
 800275c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e01e      	b.n	80027b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10f      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0210 	bic.w	r2, r2, #16
 800278e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d032      	beq.n	800281e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d022      	beq.n	800280a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2205      	movs	r2, #5
 80027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d307      	bcc.n	80027f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f2      	bne.n	80027dc <HAL_DMA_IRQHandler+0x2cc>
 80027f6:	e000      	b.n	80027fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e000      	b.n	800281e <HAL_DMA_IRQHandler+0x30e>
        return;
 800281c:	bf00      	nop
    }
  }
}
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	3b10      	subs	r3, #16
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <DMA_CalcBaseAndBitshift+0x60>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <DMA_CalcBaseAndBitshift+0x64>)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d908      	bls.n	8002864 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <DMA_CalcBaseAndBitshift+0x68>)
 800285a:	4013      	ands	r3, r2
 800285c:	1d1a      	adds	r2, r3, #4
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	659a      	str	r2, [r3, #88]	; 0x58
 8002862:	e006      	b.n	8002872 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <DMA_CalcBaseAndBitshift+0x68>)
 800286c:	4013      	ands	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	aaaaaaab 	.word	0xaaaaaaab
 8002888:	08009630 	.word	0x08009630
 800288c:	fffffc00 	.word	0xfffffc00

08002890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11f      	bne.n	80028ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d856      	bhi.n	800295e <DMA_CheckFifoParam+0xce>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <DMA_CheckFifoParam+0x28>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028db 	.word	0x080028db
 80028c0:	080028c9 	.word	0x080028c9
 80028c4:	0800295f 	.word	0x0800295f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d046      	beq.n	8002962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d8:	e043      	b.n	8002962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028e2:	d140      	bne.n	8002966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e03d      	b.n	8002966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	d121      	bne.n	8002938 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d837      	bhi.n	800296a <DMA_CheckFifoParam+0xda>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <DMA_CheckFifoParam+0x70>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002911 	.word	0x08002911
 8002904:	08002917 	.word	0x08002917
 8002908:	08002911 	.word	0x08002911
 800290c:	08002929 	.word	0x08002929
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      break;
 8002914:	e030      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d025      	beq.n	800296e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002926:	e022      	b.n	800296e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002930:	d11f      	bne.n	8002972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002936:	e01c      	b.n	8002972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d903      	bls.n	8002946 <DMA_CheckFifoParam+0xb6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d003      	beq.n	800294c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002944:	e018      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
      break;
 800294a:	e015      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      break;
 800295c:	e00b      	b.n	8002976 <DMA_CheckFifoParam+0xe6>
      break;
 800295e:	bf00      	nop
 8002960:	e00a      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e008      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e006      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e004      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;   
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
    }
  } 
  
  return status; 
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e06a      	b.n	8002a70 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2223      	movs	r2, #35	; 0x23
 80029a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7fe fb9f 	bl	80010f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_ETH_Init+0xf0>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_ETH_Init+0xf0>)
 80029b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_ETH_Init+0xf0>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_ETH_Init+0xf4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <HAL_ETH_Init+0xf4>)
 80029d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_ETH_Init+0xf4>)
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4927      	ldr	r1, [pc, #156]	; (8002a7c <HAL_ETH_Init+0xf4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_ETH_Init+0xf4>)
 80029e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a00:	f7fe fed6 	bl	80017b0 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a06:	e011      	b.n	8002a2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a08:	f7fe fed2 	bl	80017b0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a16:	d909      	bls.n	8002a2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	22e0      	movs	r2, #224	; 0xe0
 8002a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e021      	b.n	8002a70 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e4      	bne.n	8002a08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f958 	bl	8002cf4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f9ff 	bl	8002e48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa55 	bl	8002efa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f9bd 	bl	8002dd8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2210      	movs	r2, #16
 8002a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800

08002a80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <ETH_SetMACConfig+0x15c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7c1b      	ldrb	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <ETH_SetMACConfig+0x28>
 8002aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002aa6:	e000      	b.n	8002aaa <ETH_SetMACConfig+0x2a>
 8002aa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	7c5b      	ldrb	r3, [r3, #17]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <ETH_SetMACConfig+0x38>
 8002ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ab6:	e000      	b.n	8002aba <ETH_SetMACConfig+0x3a>
 8002ab8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	7fdb      	ldrb	r3, [r3, #31]
 8002ac6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ac8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	7f92      	ldrb	r2, [r2, #30]
 8002ad4:	2a00      	cmp	r2, #0
 8002ad6:	d102      	bne.n	8002ade <ETH_SetMACConfig+0x5e>
 8002ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002adc:	e000      	b.n	8002ae0 <ETH_SetMACConfig+0x60>
 8002ade:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	7f1b      	ldrb	r3, [r3, #28]
 8002ae6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ae8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002af6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d102      	bne.n	8002b08 <ETH_SetMACConfig+0x88>
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	e000      	b.n	8002b0a <ETH_SetMACConfig+0x8a>
 8002b08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002b0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	7bdb      	ldrb	r3, [r3, #15]
 8002b10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b22:	4313      	orrs	r3, r2
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	f7fe fe44 	bl	80017c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	d101      	bne.n	8002b6e <ETH_SetMACConfig+0xee>
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	e000      	b.n	8002b70 <ETH_SetMACConfig+0xf0>
 8002b6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b7e:	2a01      	cmp	r2, #1
 8002b80:	d101      	bne.n	8002b86 <ETH_SetMACConfig+0x106>
 8002b82:	2208      	movs	r2, #8
 8002b84:	e000      	b.n	8002b88 <ETH_SetMACConfig+0x108>
 8002b86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b90:	2a01      	cmp	r2, #1
 8002b92:	d101      	bne.n	8002b98 <ETH_SetMACConfig+0x118>
 8002b94:	2204      	movs	r2, #4
 8002b96:	e000      	b.n	8002b9a <ETH_SetMACConfig+0x11a>
 8002b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ba2:	2a01      	cmp	r2, #1
 8002ba4:	d101      	bne.n	8002baa <ETH_SetMACConfig+0x12a>
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	e000      	b.n	8002bac <ETH_SetMACConfig+0x12c>
 8002baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002bac:	4313      	orrs	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f7fe fdff 	bl	80017c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	619a      	str	r2, [r3, #24]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	ff20810f 	.word	0xff20810f

08002be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <ETH_SetDMAConfig+0x110>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7b1b      	ldrb	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_SetDMAConfig+0x2c>
 8002c06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c0a:	e000      	b.n	8002c0e <ETH_SetDMAConfig+0x2e>
 8002c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	7b5b      	ldrb	r3, [r3, #13]
 8002c12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	7f52      	ldrb	r2, [r2, #29]
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	d102      	bne.n	8002c24 <ETH_SetDMAConfig+0x44>
 8002c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c22:	e000      	b.n	8002c26 <ETH_SetDMAConfig+0x46>
 8002c24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7b9b      	ldrb	r3, [r3, #14]
 8002c2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7f1b      	ldrb	r3, [r3, #28]
 8002c3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	7f9b      	ldrb	r3, [r3, #30]
 8002c42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c54:	4313      	orrs	r3, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c64:	461a      	mov	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fe fda6 	bl	80017c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c84:	461a      	mov	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ca0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ca8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002caa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002cb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f7fe fd77 	bl	80017c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	f8de3f23 	.word	0xf8de3f23

08002cf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0a6      	sub	sp, #152	; 0x98
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fe86 	bl	8002a80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d96:	2300      	movs	r3, #0
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002da8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002db4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002dc4:	f107 0308 	add.w	r3, r7, #8
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff08 	bl	8002be0 <ETH_SetDMAConfig>
}
 8002dd0:	bf00      	nop
 8002dd2:	3798      	adds	r7, #152	; 0x98
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3305      	adds	r3, #5
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	3204      	adds	r2, #4
 8002df0:	7812      	ldrb	r2, [r2, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <ETH_MACAddressConfig+0x68>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3303      	adds	r3, #3
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	061a      	lsls	r2, r3, #24
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3301      	adds	r3, #1
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <ETH_MACAddressConfig+0x6c>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40028040 	.word	0x40028040
 8002e44:	40028044 	.word	0x40028044

08002e48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	e03e      	b.n	8002ed4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	3206      	adds	r2, #6
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d80c      	bhi.n	8002eb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e004      	b.n	8002ec2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d9bd      	bls.n	8002e56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	611a      	str	r2, [r3, #16]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e046      	b.n	8002f96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6919      	ldr	r1, [r3, #16]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2200      	movs	r2, #0
 8002f36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	3212      	adds	r2, #18
 8002f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d80c      	bhi.n	8002f86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6919      	ldr	r1, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	e004      	b.n	8002f90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d9b5      	bls.n	8002f08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc6:	60da      	str	r2, [r3, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e175      	b.n	80032e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8164 	bne.w	80032da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_GPIO_Init+0x56>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d130      	bne.n	800308c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0201 	and.w	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d017      	beq.n	80030c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d123      	bne.n	800311c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80be 	beq.w	80032da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <HAL_GPIO_Init+0x324>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_GPIO_Init+0x324>)
 8003164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003168:	6453      	str	r3, [r2, #68]	; 0x44
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_GPIO_Init+0x324>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003176:	4a61      	ldr	r2, [pc, #388]	; (80032fc <HAL_GPIO_Init+0x328>)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	3302      	adds	r3, #2
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	220f      	movs	r2, #15
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_GPIO_Init+0x32c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d037      	beq.n	8003212 <HAL_GPIO_Init+0x23e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a57      	ldr	r2, [pc, #348]	; (8003304 <HAL_GPIO_Init+0x330>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_GPIO_Init+0x23a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_GPIO_Init+0x334>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <HAL_GPIO_Init+0x236>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a55      	ldr	r2, [pc, #340]	; (800330c <HAL_GPIO_Init+0x338>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x232>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a54      	ldr	r2, [pc, #336]	; (8003310 <HAL_GPIO_Init+0x33c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x22e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_GPIO_Init+0x340>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x22a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_GPIO_Init+0x344>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x226>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_GPIO_Init+0x348>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x222>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_GPIO_Init+0x34c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x21e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4f      	ldr	r2, [pc, #316]	; (8003324 <HAL_GPIO_Init+0x350>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x21a>
 80031ea:	2309      	movs	r3, #9
 80031ec:	e012      	b.n	8003214 <HAL_GPIO_Init+0x240>
 80031ee:	230a      	movs	r3, #10
 80031f0:	e010      	b.n	8003214 <HAL_GPIO_Init+0x240>
 80031f2:	2308      	movs	r3, #8
 80031f4:	e00e      	b.n	8003214 <HAL_GPIO_Init+0x240>
 80031f6:	2307      	movs	r3, #7
 80031f8:	e00c      	b.n	8003214 <HAL_GPIO_Init+0x240>
 80031fa:	2306      	movs	r3, #6
 80031fc:	e00a      	b.n	8003214 <HAL_GPIO_Init+0x240>
 80031fe:	2305      	movs	r3, #5
 8003200:	e008      	b.n	8003214 <HAL_GPIO_Init+0x240>
 8003202:	2304      	movs	r3, #4
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x240>
 8003206:	2303      	movs	r3, #3
 8003208:	e004      	b.n	8003214 <HAL_GPIO_Init+0x240>
 800320a:	2302      	movs	r3, #2
 800320c:	e002      	b.n	8003214 <HAL_GPIO_Init+0x240>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_GPIO_Init+0x240>
 8003212:	2300      	movs	r3, #0
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	f002 0203 	and.w	r2, r2, #3
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	4093      	lsls	r3, r2
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003224:	4935      	ldr	r1, [pc, #212]	; (80032fc <HAL_GPIO_Init+0x328>)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <HAL_GPIO_Init+0x354>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003256:	4a34      	ldr	r2, [pc, #208]	; (8003328 <HAL_GPIO_Init+0x354>)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800325c:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_GPIO_Init+0x354>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_GPIO_Init+0x354>)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003286:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_GPIO_Init+0x354>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_GPIO_Init+0x354>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_GPIO_Init+0x354>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_GPIO_Init+0x354>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3301      	adds	r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	f67f ae86 	bls.w	8002ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40013800 	.word	0x40013800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400
 8003308:	40020800 	.word	0x40020800
 800330c:	40020c00 	.word	0x40020c00
 8003310:	40021000 	.word	0x40021000
 8003314:	40021400 	.word	0x40021400
 8003318:	40021800 	.word	0x40021800
 800331c:	40021c00 	.word	0x40021c00
 8003320:	40022000 	.word	0x40022000
 8003324:	40022400 	.word	0x40022400
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003348:	e003      	b.n	8003352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	041a      	lsls	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336a:	4b08      	ldr	r3, [pc, #32]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f806 	bl	8003390 <HAL_GPIO_EXTI_Callback>
  }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033a8:	b08f      	sub	sp, #60	; 0x3c
 80033aa:	af0a      	add	r7, sp, #40	; 0x28
 80033ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e116      	b.n	80035e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd ffd0 	bl	8001378 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2203      	movs	r2, #3
 80033dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 f86a 	bl	80064d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	687e      	ldr	r6, [r7, #4]
 8003404:	466d      	mov	r5, sp
 8003406:	f106 0410 	add.w	r4, r6, #16
 800340a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003416:	e885 0003 	stmia.w	r5, {r0, r1}
 800341a:	1d33      	adds	r3, r6, #4
 800341c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f002 fffe 	bl	8006420 <USB_CoreInit>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0d7      	b.n	80035e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f003 f858 	bl	80064f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e04a      	b.n	80034de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	333d      	adds	r3, #61	; 0x3d
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	333c      	adds	r3, #60	; 0x3c
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	b298      	uxth	r0, r3
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3344      	adds	r3, #68	; 0x44
 8003484:	4602      	mov	r2, r0
 8003486:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3340      	adds	r3, #64	; 0x40
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3348      	adds	r3, #72	; 0x48
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	334c      	adds	r3, #76	; 0x4c
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3354      	adds	r3, #84	; 0x54
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	7bfa      	ldrb	r2, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3af      	bcc.n	8003448 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e044      	b.n	8003578 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3b5      	bcc.n	80034ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	687e      	ldr	r6, [r7, #4]
 800358a:	466d      	mov	r5, sp
 800358c:	f106 0410 	add.w	r4, r6, #16
 8003590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800359c:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a0:	1d33      	adds	r3, r6, #4
 80035a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	f002 fff1 	bl	800658c <USB_DevInit>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e014      	b.n	80035e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f80b 	bl	80035f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 f9af 	bl	8006942 <USB_DevDisconnect>

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_PCDEx_ActivateLPM+0x44>)
 8003620:	4313      	orrs	r3, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	10000003 	.word	0x10000003

08003638 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003686:	f7fe f893 	bl	80017b0 <HAL_GetTick>
 800368a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800368c:	e009      	b.n	80036a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800368e:	f7fe f88f 	bl	80017b0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800369c:	d901      	bls.n	80036a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e022      	b.n	80036e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d1ee      	bne.n	800368e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036bc:	f7fe f878 	bl	80017b0 <HAL_GetTick>
 80036c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036c2:	e009      	b.n	80036d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036c4:	f7fe f874 	bl	80017b0 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036d2:	d901      	bls.n	80036d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e007      	b.n	80036e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036e4:	d1ee      	bne.n	80036c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e29b      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8087 	beq.w	800382a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800371c:	4b96      	ldr	r3, [pc, #600]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b04      	cmp	r3, #4
 8003726:	d00c      	beq.n	8003742 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003728:	4b93      	ldr	r3, [pc, #588]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d112      	bne.n	800375a <HAL_RCC_OscConfig+0x62>
 8003734:	4b90      	ldr	r3, [pc, #576]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003740:	d10b      	bne.n	800375a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003742:	4b8d      	ldr	r3, [pc, #564]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d06c      	beq.n	8003828 <HAL_RCC_OscConfig+0x130>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d168      	bne.n	8003828 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e275      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x7a>
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a83      	ldr	r2, [pc, #524]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e02e      	b.n	80037d0 <HAL_RCC_OscConfig+0xd8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x9c>
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800378c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xd8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0xc0>
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xd8>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd ffea 	bl	80017b0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fd ffe6 	bl	80017b0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e229      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xe8>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd ffd6 	bl	80017b0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fd ffd2 	bl	80017b0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e215      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x110>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d069      	beq.n	800390a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x190>
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x17a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1e9      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	493d      	ldr	r1, [pc, #244]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e040      	b.n	800390a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a38      	ldr	r2, [pc, #224]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd ff88 	bl	80017b0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fd ff84 	bl	80017b0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4929      	ldr	r1, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	e018      	b.n	800390a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d8:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a26      	ldr	r2, [pc, #152]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd ff64 	bl	80017b0 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd ff60 	bl	80017b0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1a3      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d038      	beq.n	8003988 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d019      	beq.n	8003952 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd ff41 	bl	80017b0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003932:	f7fd ff3d 	bl	80017b0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e180      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x23a>
 8003950:	e01a      	b.n	8003988 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_RCC_OscConfig+0x280>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fd ff27 	bl	80017b0 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003966:	f7fd ff23 	bl	80017b0 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d903      	bls.n	800397c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e166      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
 8003978:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397c:	4b92      	ldr	r3, [pc, #584]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 800397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ee      	bne.n	8003966 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80a4 	beq.w	8003ade <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b8c      	ldr	r3, [pc, #560]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4b89      	ldr	r3, [pc, #548]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a88      	ldr	r2, [pc, #544]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b86      	ldr	r3, [pc, #536]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039be:	4b83      	ldr	r3, [pc, #524]	; (8003bcc <HAL_RCC_OscConfig+0x4d4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039ca:	4b80      	ldr	r3, [pc, #512]	; (8003bcc <HAL_RCC_OscConfig+0x4d4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7f      	ldr	r2, [pc, #508]	; (8003bcc <HAL_RCC_OscConfig+0x4d4>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fd feeb 	bl	80017b0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fd fee7 	bl	80017b0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	; 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e12a      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_RCC_OscConfig+0x4d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x31a>
 8003a04:	4b70      	ldr	r3, [pc, #448]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a6f      	ldr	r2, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	e02d      	b.n	8003a6e <HAL_RCC_OscConfig+0x376>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x33c>
 8003a1a:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
 8003a26:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	e01c      	b.n	8003a6e <HAL_RCC_OscConfig+0x376>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x35e>
 8003a3c:	4b62      	ldr	r3, [pc, #392]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70
 8003a48:	4b5f      	ldr	r3, [pc, #380]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0x376>
 8003a56:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6713      	str	r3, [r2, #112]	; 0x70
 8003a62:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	4a58      	ldr	r2, [pc, #352]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd fe9b 	bl	80017b0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd fe97 	bl	80017b0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0d8      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ee      	beq.n	8003a7e <HAL_RCC_OscConfig+0x386>
 8003aa0:	e014      	b.n	8003acc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fd fe85 	bl	80017b0 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fd fe81 	bl	80017b0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e0c2      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ee      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a3c      	ldr	r2, [pc, #240]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80ae 	beq.w	8003c44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae8:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d06d      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d14b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fe52 	bl	80017b0 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fe4e 	bl	80017b0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e091      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	491b      	ldr	r1, [pc, #108]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b60:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fe20 	bl	80017b0 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fd fe1c 	bl	80017b0 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e05f      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x47c>
 8003b92:	e057      	b.n	8003c44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0b      	ldr	r2, [pc, #44]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fd fe06 	bl	80017b0 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fd fe02 	bl	80017b0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e045      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4b0>
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x54c>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x558>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d030      	beq.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d129      	bne.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d122      	bne.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c00:	4013      	ands	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d119      	bne.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d10f      	bne.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0d0      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c6c:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d910      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7a:	4b67      	ldr	r3, [pc, #412]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 020f 	bic.w	r2, r3, #15
 8003c82:	4965      	ldr	r1, [pc, #404]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d040      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d115      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e073      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06b      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f023 0203 	bic.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4936      	ldr	r1, [pc, #216]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fd fd32 	bl	80017b0 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d50:	f7fd fd2e 	bl	80017b0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e053      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 020c 	and.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d1eb      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d210      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 020f 	bic.w	r2, r3, #15
 8003d8e:	4922      	ldr	r1, [pc, #136]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490a      	ldr	r1, [pc, #40]	; (8003e20 <HAL_RCC_ClockConfig+0x1cc>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1d0>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1d4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fd fc8e 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	08009618 	.word	0x08009618
 8003e24:	20000008 	.word	0x20000008
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e30:	b094      	sub	sp, #80	; 0x50
 8003e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	647b      	str	r3, [r7, #68]	; 0x44
 8003e38:	2300      	movs	r3, #0
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	4b79      	ldr	r3, [pc, #484]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d00d      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x40>
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	f200 80e1 	bhi.w	8004018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5e:	e0db      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b73      	ldr	r3, [pc, #460]	; (8004030 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	e0db      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b73      	ldr	r3, [pc, #460]	; (8004034 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e6a:	e0d8      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e6c:	4b6f      	ldr	r3, [pc, #444]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e76:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d063      	beq.n	8003f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2200      	movs	r2, #0
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	0159      	lsls	r1, r3, #5
 8003eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb0:	0150      	lsls	r0, r2, #5
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	1a51      	subs	r1, r2, r1
 8003eba:	6139      	str	r1, [r7, #16]
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	018b      	lsls	r3, r1, #6
 8003ed4:	4651      	mov	r1, sl
 8003ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eda:	4651      	mov	r1, sl
 8003edc:	018a      	lsls	r2, r1, #6
 8003ede:	4651      	mov	r1, sl
 8003ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003efe:	4690      	mov	r8, r2
 8003f00:	4699      	mov	r9, r3
 8003f02:	4623      	mov	r3, r4
 8003f04:	eb18 0303 	adds.w	r3, r8, r3
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	eb49 0303 	adc.w	r3, r9, r3
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f1e:	4629      	mov	r1, r5
 8003f20:	024b      	lsls	r3, r1, #9
 8003f22:	4621      	mov	r1, r4
 8003f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f28:	4621      	mov	r1, r4
 8003f2a:	024a      	lsls	r2, r1, #9
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f32:	2200      	movs	r2, #0
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f3c:	f7fc f9d8 	bl	80002f0 <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4613      	mov	r3, r2
 8003f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f48:	e058      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	099b      	lsrs	r3, r3, #6
 8003f50:	2200      	movs	r2, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	4611      	mov	r1, r2
 8003f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f5a:	623b      	str	r3, [r7, #32]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	f04f 0000 	mov.w	r0, #0
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	0159      	lsls	r1, r3, #5
 8003f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f76:	0150      	lsls	r0, r2, #5
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4641      	mov	r1, r8
 8003f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f82:	4649      	mov	r1, r9
 8003f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	00eb      	lsls	r3, r5, #3
 8003fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fb2:	00e2      	lsls	r2, r4, #3
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	461d      	mov	r5, r3
 8003fb8:	4643      	mov	r3, r8
 8003fba:	18e3      	adds	r3, r4, r3
 8003fbc:	603b      	str	r3, [r7, #0]
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	eb45 0303 	adc.w	r3, r5, r3
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	028b      	lsls	r3, r1, #10
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fdc:	4621      	mov	r1, r4
 8003fde:	028a      	lsls	r2, r1, #10
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	61fa      	str	r2, [r7, #28]
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	f7fc f97e 	bl	80002f0 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	3301      	adds	r3, #1
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800400c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004016:	e002      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetSysClockFreq+0x204>)
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800401c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004020:	4618      	mov	r0, r3
 8004022:	3750      	adds	r7, #80	; 0x50
 8004024:	46bd      	mov	sp, r7
 8004026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	00f42400 	.word	0x00f42400
 8004034:	007a1200 	.word	0x007a1200

08004038 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800403c:	4b03      	ldr	r3, [pc, #12]	; (800404c <HAL_RCC_GetHCLKFreq+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000008 	.word	0x20000008

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004054:	f7ff fff0 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	0a9b      	lsrs	r3, r3, #10
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	08009628 	.word	0x08009628

08004078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800407c:	f7ff ffdc 	bl	8004038 <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	0b5b      	lsrs	r3, r3, #13
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4903      	ldr	r1, [pc, #12]	; (800409c <HAL_RCC_GetPCLK2Freq+0x24>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	08009628 	.word	0x08009628

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a68      	ldr	r2, [pc, #416]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	4964      	ldr	r1, [pc, #400]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d017      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fa:	4b5d      	ldr	r3, [pc, #372]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	4959      	ldr	r1, [pc, #356]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004118:	d101      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800411a:	2301      	movs	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004126:	2301      	movs	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800413c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	494a      	ldr	r1, [pc, #296]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004154:	d101      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 808b 	beq.w	800429a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	4a39      	ldr	r2, [pc, #228]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6413      	str	r3, [r2, #64]	; 0x40
 8004190:	4b37      	ldr	r3, [pc, #220]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800419c:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a34      	ldr	r2, [pc, #208]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a8:	f7fd fb02 	bl	80017b0 <HAL_GetTick>
 80041ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fd fafe 	bl	80017b0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e38f      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d035      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d02e      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800420e:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d114      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fac6 	bl	80017b0 <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fd fac2 	bl	80017b0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e351      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0ee      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004256:	d111      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004266:	400b      	ands	r3, r1
 8004268:	4901      	ldr	r1, [pc, #4]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
 800426e:	e00b      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004270:	40023800 	.word	0x40023800
 8004274:	40007000 	.word	0x40007000
 8004278:	0ffffcff 	.word	0x0ffffcff
 800427c:	4bac      	ldr	r3, [pc, #688]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4aab      	ldr	r2, [pc, #684]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004282:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	4ba9      	ldr	r3, [pc, #676]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	49a6      	ldr	r1, [pc, #664]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004296:	4313      	orrs	r3, r2
 8004298:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d010      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042a6:	4ba2      	ldr	r3, [pc, #648]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ac:	4aa0      	ldr	r2, [pc, #640]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042b6:	4b9e      	ldr	r3, [pc, #632]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	499b      	ldr	r1, [pc, #620]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042d4:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	4993      	ldr	r1, [pc, #588]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042f6:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004304:	498a      	ldr	r1, [pc, #552]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004318:	4b85      	ldr	r3, [pc, #532]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004326:	4982      	ldr	r1, [pc, #520]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800433a:	4b7d      	ldr	r3, [pc, #500]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	4979      	ldr	r1, [pc, #484]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800435c:	4b74      	ldr	r3, [pc, #464]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f023 0203 	bic.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4971      	ldr	r1, [pc, #452]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800437e:	4b6c      	ldr	r3, [pc, #432]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	f023 020c 	bic.w	r2, r3, #12
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	4968      	ldr	r1, [pc, #416]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a0:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	4960      	ldr	r1, [pc, #384]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c2:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d0:	4957      	ldr	r1, [pc, #348]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043e4:	4b52      	ldr	r3, [pc, #328]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	494f      	ldr	r1, [pc, #316]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004406:	4b4a      	ldr	r3, [pc, #296]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	4946      	ldr	r1, [pc, #280]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004428:	4b41      	ldr	r3, [pc, #260]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	493e      	ldr	r1, [pc, #248]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004458:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447a:	492d      	ldr	r1, [pc, #180]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d011      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449c:	4924      	ldr	r1, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ac:	d101      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	4914      	ldr	r1, [pc, #80]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004500:	490b      	ldr	r1, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	4902      	ldr	r1, [pc, #8]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800452c:	e002      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004540:	4b8a      	ldr	r3, [pc, #552]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	4986      	ldr	r1, [pc, #536]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004564:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	497d      	ldr	r1, [pc, #500]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d006      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d6 	beq.w	800473c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004590:	4b76      	ldr	r3, [pc, #472]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a75      	ldr	r2, [pc, #468]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd f908 	bl	80017b0 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045a4:	f7fd f904 	bl	80017b0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e195      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b6:	4b6d      	ldr	r3, [pc, #436]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d021      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11d      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045d6:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045e4:	4b61      	ldr	r3, [pc, #388]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	0e1b      	lsrs	r3, r3, #24
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	019a      	lsls	r2, r3, #6
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	071b      	lsls	r3, r3, #28
 800460a:	4958      	ldr	r1, [pc, #352]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02e      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463c:	d129      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800463e:	4b4b      	ldr	r3, [pc, #300]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800464c:	4b47      	ldr	r3, [pc, #284]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004652:	0f1b      	lsrs	r3, r3, #28
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	019a      	lsls	r2, r3, #6
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	041b      	lsls	r3, r3, #16
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	431a      	orrs	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	071b      	lsls	r3, r3, #28
 8004672:	493e      	ldr	r1, [pc, #248]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800467a:	4b3c      	ldr	r3, [pc, #240]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	f023 021f 	bic.w	r2, r3, #31
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	3b01      	subs	r3, #1
 800468a:	4938      	ldr	r1, [pc, #224]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01d      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800469e:	4b33      	ldr	r3, [pc, #204]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ac:	4b2f      	ldr	r3, [pc, #188]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b2:	0f1b      	lsrs	r3, r3, #28
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	019a      	lsls	r2, r3, #6
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	071b      	lsls	r3, r3, #28
 80046d2:	4926      	ldr	r1, [pc, #152]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d011      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	019a      	lsls	r2, r3, #6
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	491a      	ldr	r1, [pc, #104]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800470a:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004716:	f7fd f84b 	bl	80017b0 <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800471e:	f7fd f847 	bl	80017b0 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	; 0x64
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0d8      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	f040 80ce 	bne.w	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004744:	4b09      	ldr	r3, [pc, #36]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a08      	ldr	r2, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004750:	f7fd f82e 	bl	80017b0 <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004756:	e00b      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004758:	f7fd f82a 	bl	80017b0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d904      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0bb      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004770:	4b5e      	ldr	r3, [pc, #376]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477c:	d0ec      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d12a      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047a6:	4b51      	ldr	r3, [pc, #324]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	0c1b      	lsrs	r3, r3, #16
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047b4:	4b4d      	ldr	r3, [pc, #308]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	0f1b      	lsrs	r3, r3, #28
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	019a      	lsls	r2, r3, #6
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	071b      	lsls	r3, r3, #28
 80047da:	4944      	ldr	r1, [pc, #272]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047e2:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	493d      	ldr	r1, [pc, #244]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d022      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004810:	d11d      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	0e1b      	lsrs	r3, r3, #24
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004820:	4b32      	ldr	r3, [pc, #200]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	0f1b      	lsrs	r3, r3, #28
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	019a      	lsls	r2, r3, #6
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	041b      	lsls	r3, r3, #16
 800483a:	431a      	orrs	r2, r3
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	4929      	ldr	r1, [pc, #164]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d028      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	0e1b      	lsrs	r3, r3, #24
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004868:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	019a      	lsls	r2, r3, #6
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	431a      	orrs	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	4917      	ldr	r1, [pc, #92]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4911      	ldr	r1, [pc, #68]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7fc ff7a 	bl	80017b0 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048c0:	f7fc ff76 	bl	80017b0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e007      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048d2:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048de:	d1ef      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800

080048f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e049      	b.n	8004996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fc fca2 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4619      	mov	r1, r3
 800492e:	4610      	mov	r0, r2
 8004930:	f000 faee 	bl	8004f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d001      	beq.n	80049b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e054      	b.n	8004a62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d022      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d01d      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a22      	ldr	r2, [pc, #136]	; (8004a74 <HAL_TIM_Base_Start_IT+0xd4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d018      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a21      	ldr	r2, [pc, #132]	; (8004a78 <HAL_TIM_Base_Start_IT+0xd8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d013      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <HAL_TIM_Base_Start_IT+0xdc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00e      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_TIM_Base_Start_IT+0xe0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d009      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d004      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x80>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d115      	bne.n	8004a4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <HAL_TIM_Base_Start_IT+0xec>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d015      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0xbe>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d011      	beq.n	8004a5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	e008      	b.n	8004a5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e000      	b.n	8004a60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40001800 	.word	0x40001800
 8004a8c:	00010007 	.word	0x00010007

08004a90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a1a      	ldr	r2, [r3, #32]
 8004aae:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	f240 4344 	movw	r3, #1092	; 0x444
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d122      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d11b      	bne.n	8004b4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f06f 0202 	mvn.w	r2, #2
 8004b1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f9cf 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8004b36:	e005      	b.n	8004b44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9c1 	bl	8004ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9d2 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d122      	bne.n	8004b9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d11b      	bne.n	8004b9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f06f 0204 	mvn.w	r2, #4
 8004b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9a5 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8004b8a:	e005      	b.n	8004b98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f997 	bl	8004ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9a8 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d122      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d11b      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0208 	mvn.w	r2, #8
 8004bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f97b 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8004bde:	e005      	b.n	8004bec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f96d 	bl	8004ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f97e 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d122      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d11b      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0210 	mvn.w	r2, #16
 8004c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f951 	bl	8004ed4 <HAL_TIM_IC_CaptureCallback>
 8004c32:	e005      	b.n	8004c40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f943 	bl	8004ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f954 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d10e      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f06f 0201 	mvn.w	r2, #1
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fb fe73 	bl	8000958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b80      	cmp	r3, #128	; 0x80
 8004c7e:	d10e      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fb0b 	bl	80052b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cac:	d10e      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d107      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fafe 	bl	80052c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f902 	bl	8004efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0220 	mvn.w	r2, #32
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fabe 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e0b4      	b.n	8004eb2 <HAL_TIM_ConfigClockSource+0x186>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	4b56      	ldr	r3, [pc, #344]	; (8004ebc <HAL_TIM_ConfigClockSource+0x190>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d80:	d03e      	beq.n	8004e00 <HAL_TIM_ConfigClockSource+0xd4>
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d86:	f200 8087 	bhi.w	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	f000 8086 	beq.w	8004e9e <HAL_TIM_ConfigClockSource+0x172>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d96:	d87f      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b70      	cmp	r3, #112	; 0x70
 8004d9a:	d01a      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d9c:	2b70      	cmp	r3, #112	; 0x70
 8004d9e:	d87b      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b60      	cmp	r3, #96	; 0x60
 8004da2:	d050      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0x11a>
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d877      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d03c      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xfa>
 8004dac:	2b50      	cmp	r3, #80	; 0x50
 8004dae:	d873      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d058      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x13a>
 8004db4:	2b40      	cmp	r3, #64	; 0x40
 8004db6:	d86f      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b30      	cmp	r3, #48	; 0x30
 8004dba:	d064      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b30      	cmp	r3, #48	; 0x30
 8004dbe:	d86b      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d060      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d867      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d05c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d05a      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	e062      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	f000 f9af 	bl	8005144 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	609a      	str	r2, [r3, #8]
      break;
 8004dfe:	e04f      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e10:	f000 f998 	bl	8005144 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e22:	609a      	str	r2, [r3, #8]
      break;
 8004e24:	e03c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	461a      	mov	r2, r3
 8004e34:	f000 f90c 	bl	8005050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2150      	movs	r1, #80	; 0x50
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f965 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e44:	e02c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 f92b 	bl	80050ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2160      	movs	r1, #96	; 0x60
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f955 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e64:	e01c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 f8ec 	bl	8005050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2140      	movs	r1, #64	; 0x40
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f945 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e84:	e00c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 f93c 	bl	800510e <TIM_ITRx_SetConfig>
      break;
 8004e96:	e003      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	e000      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	fffeff88 	.word	0xfffeff88

08004ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a40      	ldr	r2, [pc, #256]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d013      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d00f      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3d      	ldr	r2, [pc, #244]	; (8005028 <TIM_Base_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3c      	ldr	r2, [pc, #240]	; (800502c <TIM_Base_SetConfig+0x11c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <TIM_Base_SetConfig+0x120>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3a      	ldr	r2, [pc, #232]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d108      	bne.n	8004f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d027      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2c      	ldr	r2, [pc, #176]	; (8005028 <TIM_Base_SetConfig+0x118>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d023      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2b      	ldr	r2, [pc, #172]	; (800502c <TIM_Base_SetConfig+0x11c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d01f      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2a      	ldr	r2, [pc, #168]	; (8005030 <TIM_Base_SetConfig+0x120>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a29      	ldr	r2, [pc, #164]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d017      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a28      	ldr	r2, [pc, #160]	; (8005038 <TIM_Base_SetConfig+0x128>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a27      	ldr	r2, [pc, #156]	; (800503c <TIM_Base_SetConfig+0x12c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <TIM_Base_SetConfig+0x130>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a25      	ldr	r2, [pc, #148]	; (8005044 <TIM_Base_SetConfig+0x134>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a24      	ldr	r2, [pc, #144]	; (8005048 <TIM_Base_SetConfig+0x138>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a23      	ldr	r2, [pc, #140]	; (800504c <TIM_Base_SetConfig+0x13c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d108      	bne.n	8004fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <TIM_Base_SetConfig+0x114>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0xf8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <TIM_Base_SetConfig+0x124>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d103      	bne.n	8005010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	615a      	str	r2, [r3, #20]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	40001800 	.word	0x40001800
 8005048:	40001c00 	.word	0x40001c00
 800504c:	40002000 	.word	0x40002000

08005050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 030a 	bic.w	r3, r3, #10
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b087      	sub	sp, #28
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	031b      	lsls	r3, r3, #12
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	f043 0307 	orr.w	r3, r3, #7
 8005130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	609a      	str	r2, [r3, #8]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	431a      	orrs	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005198:	2302      	movs	r3, #2
 800519a:	e06d      	b.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2f      	ldr	r2, [pc, #188]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d01d      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a15      	ldr	r2, [pc, #84]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10c      	bne.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e040      	b.n	8005370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fb ffd2 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2224      	movs	r2, #36	; 0x24
 8005308:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbc2 	bl	8005aa4 <UART_SetConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e022      	b.n	8005370 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fe1a 	bl	8005f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fea1 	bl	80060b0 <UART_CheckIdleState>
 800536e:	4603      	mov	r3, r0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af02      	add	r7, sp, #8
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800538c:	2b20      	cmp	r3, #32
 800538e:	d171      	bne.n	8005474 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_UART_Transmit+0x24>
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e06a      	b.n	8005476 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2221      	movs	r2, #33	; 0x21
 80053ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ae:	f7fc f9ff 	bl	80017b0 <HAL_GetTick>
 80053b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	88fa      	ldrh	r2, [r7, #6]
 80053c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d108      	bne.n	80053e0 <HAL_UART_Transmit+0x68>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e003      	b.n	80053e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053e8:	e02c      	b.n	8005444 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2200      	movs	r2, #0
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fea8 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e038      	b.n	8005476 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005418:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3302      	adds	r3, #2
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	e007      	b.n	8005432 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3301      	adds	r3, #1
 8005430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1cc      	bne.n	80053ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	2200      	movs	r2, #0
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fe75 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e005      	b.n	8005476 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0ba      	sub	sp, #232	; 0xe8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80054aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80054ae:	4013      	ands	r3, r2
 80054b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80054b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d115      	bne.n	80054e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00f      	beq.n	80054e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 82ac 	beq.w	8005a36 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
      }
      return;
 80054e6:	e2a6      	b.n	8005a36 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8117 	beq.w	8005720 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005502:	4b85      	ldr	r3, [pc, #532]	; (8005718 <HAL_UART_IRQHandler+0x298>)
 8005504:	4013      	ands	r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 810a 	beq.w	8005720 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d011      	beq.n	800553c <HAL_UART_IRQHandler+0xbc>
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d011      	beq.n	800556c <HAL_UART_IRQHandler+0xec>
 8005548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2202      	movs	r2, #2
 800555a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <HAL_UART_IRQHandler+0x11c>
 8005578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2204      	movs	r2, #4
 800558a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	f043 0202 	orr.w	r2, r3, #2
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d017      	beq.n	80055d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ce:	f043 0208 	orr.w	r2, r3, #8
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d012      	beq.n	800560a <HAL_UART_IRQHandler+0x18a>
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8212 	beq.w	8005a3a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800565a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d04f      	beq.n	8005702 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fe37 	bl	80062d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d141      	bne.n	80056fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800568c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1d9      	bne.n	8005676 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <HAL_UART_IRQHandler+0x29c>)
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fc fef8 	bl	80024cc <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e00f      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9b6 	bl	8005a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	e00b      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f9b2 	bl	8005a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e007      	b.n	8005712 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9ae 	bl	8005a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005710:	e193      	b.n	8005a3a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005712:	bf00      	nop
    return;
 8005714:	e191      	b.n	8005a3a <HAL_UART_IRQHandler+0x5ba>
 8005716:	bf00      	nop
 8005718:	04000120 	.word	0x04000120
 800571c:	0800639f 	.word	0x0800639f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005724:	2b01      	cmp	r3, #1
 8005726:	f040 814c 	bne.w	80059c2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800572a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8145 	beq.w	80059c2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 813e 	beq.w	80059c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2210      	movs	r2, #16
 800574c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	f040 80b6 	bne.w	80058ca <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8165 	beq.w	8005a3e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577e:	429a      	cmp	r2, r3
 8005780:	f080 815d 	bcs.w	8005a3e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005798:	f000 8086 	beq.w	80058a8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	461a      	mov	r2, r3
 80057c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1da      	bne.n	800579c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800580a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800580e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800581c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e1      	bne.n	80057e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3308      	adds	r3, #8
 8005842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800584c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800588a:	65bb      	str	r3, [r7, #88]	; 0x58
 800588c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e4      	bne.n	8005868 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc fda2 	bl	80023ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f8d8 	bl	8005a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058c8:	e0b9      	b.n	8005a3e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 80ab 	beq.w	8005a42 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80058ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80a6 	beq.w	8005a42 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800590a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005918:	647b      	str	r3, [r7, #68]	; 0x44
 800591a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	623b      	str	r3, [r7, #32]
   return(result);
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3308      	adds	r3, #8
 800594c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005950:	633a      	str	r2, [r7, #48]	; 0x30
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e3      	bne.n	800592c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	60fb      	str	r3, [r7, #12]
   return(result);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f023 0310 	bic.w	r3, r3, #16
 800598c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	69b9      	ldr	r1, [r7, #24]
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	617b      	str	r3, [r7, #20]
   return(result);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e4      	bne.n	8005978 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f85c 	bl	8005a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c0:	e03f      	b.n	8005a42 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00e      	beq.n	80059ec <HAL_UART_IRQHandler+0x56c>
 80059ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f853 	bl	8005a90 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ea:	e02d      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00e      	beq.n	8005a16 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01c      	beq.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
    }
    return;
 8005a14:	e017      	b.n	8005a46 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d012      	beq.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
 8005a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fccb 	bl	80063ca <UART_EndTransmit_IT>
    return;
 8005a34:	e008      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005a36:	bf00      	nop
 8005a38:	e006      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005a46:	bf00      	nop
  }

}
 8005a48:	37e8      	adds	r7, #232	; 0xe8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop

08005a50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4ba6      	ldr	r3, [pc, #664]	; (8005d68 <UART_SetConfig+0x2c4>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	6979      	ldr	r1, [r7, #20]
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a94      	ldr	r2, [pc, #592]	; (8005d6c <UART_SetConfig+0x2c8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d120      	bne.n	8005b62 <UART_SetConfig+0xbe>
 8005b20:	4b93      	ldr	r3, [pc, #588]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d816      	bhi.n	8005b5c <UART_SetConfig+0xb8>
 8005b2e:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x90>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b51 	.word	0x08005b51
 8005b3c:	08005b4b 	.word	0x08005b4b
 8005b40:	08005b57 	.word	0x08005b57
 8005b44:	2301      	movs	r3, #1
 8005b46:	77fb      	strb	r3, [r7, #31]
 8005b48:	e150      	b.n	8005dec <UART_SetConfig+0x348>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e14d      	b.n	8005dec <UART_SetConfig+0x348>
 8005b50:	2304      	movs	r3, #4
 8005b52:	77fb      	strb	r3, [r7, #31]
 8005b54:	e14a      	b.n	8005dec <UART_SetConfig+0x348>
 8005b56:	2308      	movs	r3, #8
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e147      	b.n	8005dec <UART_SetConfig+0x348>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e144      	b.n	8005dec <UART_SetConfig+0x348>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a83      	ldr	r2, [pc, #524]	; (8005d74 <UART_SetConfig+0x2d0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d132      	bne.n	8005bd2 <UART_SetConfig+0x12e>
 8005b6c:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b0c      	cmp	r3, #12
 8005b78:	d828      	bhi.n	8005bcc <UART_SetConfig+0x128>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0xdc>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005bb5 	.word	0x08005bb5
 8005b84:	08005bcd 	.word	0x08005bcd
 8005b88:	08005bcd 	.word	0x08005bcd
 8005b8c:	08005bcd 	.word	0x08005bcd
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005bcd 	.word	0x08005bcd
 8005b98:	08005bcd 	.word	0x08005bcd
 8005b9c:	08005bcd 	.word	0x08005bcd
 8005ba0:	08005bbb 	.word	0x08005bbb
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bcd 	.word	0x08005bcd
 8005bac:	08005bcd 	.word	0x08005bcd
 8005bb0:	08005bc7 	.word	0x08005bc7
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e118      	b.n	8005dec <UART_SetConfig+0x348>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e115      	b.n	8005dec <UART_SetConfig+0x348>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e112      	b.n	8005dec <UART_SetConfig+0x348>
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e10f      	b.n	8005dec <UART_SetConfig+0x348>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e10c      	b.n	8005dec <UART_SetConfig+0x348>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a68      	ldr	r2, [pc, #416]	; (8005d78 <UART_SetConfig+0x2d4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d120      	bne.n	8005c1e <UART_SetConfig+0x17a>
 8005bdc:	4b64      	ldr	r3, [pc, #400]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005be6:	2b30      	cmp	r3, #48	; 0x30
 8005be8:	d013      	beq.n	8005c12 <UART_SetConfig+0x16e>
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d814      	bhi.n	8005c18 <UART_SetConfig+0x174>
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d009      	beq.n	8005c06 <UART_SetConfig+0x162>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d810      	bhi.n	8005c18 <UART_SetConfig+0x174>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <UART_SetConfig+0x15c>
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d006      	beq.n	8005c0c <UART_SetConfig+0x168>
 8005bfe:	e00b      	b.n	8005c18 <UART_SetConfig+0x174>
 8005c00:	2300      	movs	r3, #0
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0f2      	b.n	8005dec <UART_SetConfig+0x348>
 8005c06:	2302      	movs	r3, #2
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e0ef      	b.n	8005dec <UART_SetConfig+0x348>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0ec      	b.n	8005dec <UART_SetConfig+0x348>
 8005c12:	2308      	movs	r3, #8
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e0e9      	b.n	8005dec <UART_SetConfig+0x348>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e0e6      	b.n	8005dec <UART_SetConfig+0x348>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <UART_SetConfig+0x2d8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d120      	bne.n	8005c6a <UART_SetConfig+0x1c6>
 8005c28:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c32:	2bc0      	cmp	r3, #192	; 0xc0
 8005c34:	d013      	beq.n	8005c5e <UART_SetConfig+0x1ba>
 8005c36:	2bc0      	cmp	r3, #192	; 0xc0
 8005c38:	d814      	bhi.n	8005c64 <UART_SetConfig+0x1c0>
 8005c3a:	2b80      	cmp	r3, #128	; 0x80
 8005c3c:	d009      	beq.n	8005c52 <UART_SetConfig+0x1ae>
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d810      	bhi.n	8005c64 <UART_SetConfig+0x1c0>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <UART_SetConfig+0x1a8>
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d006      	beq.n	8005c58 <UART_SetConfig+0x1b4>
 8005c4a:	e00b      	b.n	8005c64 <UART_SetConfig+0x1c0>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e0cc      	b.n	8005dec <UART_SetConfig+0x348>
 8005c52:	2302      	movs	r3, #2
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e0c9      	b.n	8005dec <UART_SetConfig+0x348>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e0c6      	b.n	8005dec <UART_SetConfig+0x348>
 8005c5e:	2308      	movs	r3, #8
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e0c3      	b.n	8005dec <UART_SetConfig+0x348>
 8005c64:	2310      	movs	r3, #16
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e0c0      	b.n	8005dec <UART_SetConfig+0x348>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a44      	ldr	r2, [pc, #272]	; (8005d80 <UART_SetConfig+0x2dc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d125      	bne.n	8005cc0 <UART_SetConfig+0x21c>
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c82:	d017      	beq.n	8005cb4 <UART_SetConfig+0x210>
 8005c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c88:	d817      	bhi.n	8005cba <UART_SetConfig+0x216>
 8005c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8e:	d00b      	beq.n	8005ca8 <UART_SetConfig+0x204>
 8005c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c94:	d811      	bhi.n	8005cba <UART_SetConfig+0x216>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <UART_SetConfig+0x1fe>
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9e:	d006      	beq.n	8005cae <UART_SetConfig+0x20a>
 8005ca0:	e00b      	b.n	8005cba <UART_SetConfig+0x216>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e0a1      	b.n	8005dec <UART_SetConfig+0x348>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e09e      	b.n	8005dec <UART_SetConfig+0x348>
 8005cae:	2304      	movs	r3, #4
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e09b      	b.n	8005dec <UART_SetConfig+0x348>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e098      	b.n	8005dec <UART_SetConfig+0x348>
 8005cba:	2310      	movs	r3, #16
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e095      	b.n	8005dec <UART_SetConfig+0x348>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <UART_SetConfig+0x2e0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d125      	bne.n	8005d16 <UART_SetConfig+0x272>
 8005cca:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cd8:	d017      	beq.n	8005d0a <UART_SetConfig+0x266>
 8005cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cde:	d817      	bhi.n	8005d10 <UART_SetConfig+0x26c>
 8005ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce4:	d00b      	beq.n	8005cfe <UART_SetConfig+0x25a>
 8005ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cea:	d811      	bhi.n	8005d10 <UART_SetConfig+0x26c>
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <UART_SetConfig+0x254>
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d006      	beq.n	8005d04 <UART_SetConfig+0x260>
 8005cf6:	e00b      	b.n	8005d10 <UART_SetConfig+0x26c>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e076      	b.n	8005dec <UART_SetConfig+0x348>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	77fb      	strb	r3, [r7, #31]
 8005d02:	e073      	b.n	8005dec <UART_SetConfig+0x348>
 8005d04:	2304      	movs	r3, #4
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e070      	b.n	8005dec <UART_SetConfig+0x348>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e06d      	b.n	8005dec <UART_SetConfig+0x348>
 8005d10:	2310      	movs	r3, #16
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e06a      	b.n	8005dec <UART_SetConfig+0x348>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <UART_SetConfig+0x2e4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d138      	bne.n	8005d92 <UART_SetConfig+0x2ee>
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <UART_SetConfig+0x2cc>)
 8005d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d2e:	d017      	beq.n	8005d60 <UART_SetConfig+0x2bc>
 8005d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d34:	d82a      	bhi.n	8005d8c <UART_SetConfig+0x2e8>
 8005d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3a:	d00b      	beq.n	8005d54 <UART_SetConfig+0x2b0>
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d40:	d824      	bhi.n	8005d8c <UART_SetConfig+0x2e8>
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <UART_SetConfig+0x2aa>
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4a:	d006      	beq.n	8005d5a <UART_SetConfig+0x2b6>
 8005d4c:	e01e      	b.n	8005d8c <UART_SetConfig+0x2e8>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e04b      	b.n	8005dec <UART_SetConfig+0x348>
 8005d54:	2302      	movs	r3, #2
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e048      	b.n	8005dec <UART_SetConfig+0x348>
 8005d5a:	2304      	movs	r3, #4
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e045      	b.n	8005dec <UART_SetConfig+0x348>
 8005d60:	2308      	movs	r3, #8
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e042      	b.n	8005dec <UART_SetConfig+0x348>
 8005d66:	bf00      	nop
 8005d68:	efff69f3 	.word	0xefff69f3
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	40023800 	.word	0x40023800
 8005d74:	40004400 	.word	0x40004400
 8005d78:	40004800 	.word	0x40004800
 8005d7c:	40004c00 	.word	0x40004c00
 8005d80:	40005000 	.word	0x40005000
 8005d84:	40011400 	.word	0x40011400
 8005d88:	40007800 	.word	0x40007800
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	77fb      	strb	r3, [r7, #31]
 8005d90:	e02c      	b.n	8005dec <UART_SetConfig+0x348>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a72      	ldr	r2, [pc, #456]	; (8005f60 <UART_SetConfig+0x4bc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d125      	bne.n	8005de8 <UART_SetConfig+0x344>
 8005d9c:	4b71      	ldr	r3, [pc, #452]	; (8005f64 <UART_SetConfig+0x4c0>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005da6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005daa:	d017      	beq.n	8005ddc <UART_SetConfig+0x338>
 8005dac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005db0:	d817      	bhi.n	8005de2 <UART_SetConfig+0x33e>
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db6:	d00b      	beq.n	8005dd0 <UART_SetConfig+0x32c>
 8005db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbc:	d811      	bhi.n	8005de2 <UART_SetConfig+0x33e>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <UART_SetConfig+0x326>
 8005dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc6:	d006      	beq.n	8005dd6 <UART_SetConfig+0x332>
 8005dc8:	e00b      	b.n	8005de2 <UART_SetConfig+0x33e>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e00d      	b.n	8005dec <UART_SetConfig+0x348>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e00a      	b.n	8005dec <UART_SetConfig+0x348>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e007      	b.n	8005dec <UART_SetConfig+0x348>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	77fb      	strb	r3, [r7, #31]
 8005de0:	e004      	b.n	8005dec <UART_SetConfig+0x348>
 8005de2:	2310      	movs	r3, #16
 8005de4:	77fb      	strb	r3, [r7, #31]
 8005de6:	e001      	b.n	8005dec <UART_SetConfig+0x348>
 8005de8:	2310      	movs	r3, #16
 8005dea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df4:	d15b      	bne.n	8005eae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d828      	bhi.n	8005e4e <UART_SetConfig+0x3aa>
 8005dfc:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x360>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fe f912 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	61b8      	str	r0, [r7, #24]
        break;
 8005e2e:	e013      	b.n	8005e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fe f922 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005e34:	61b8      	str	r0, [r7, #24]
        break;
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <UART_SetConfig+0x4c4>)
 8005e3a:	61bb      	str	r3, [r7, #24]
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fd fff5 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8005e42:	61b8      	str	r0, [r7, #24]
        break;
 8005e44:	e008      	b.n	8005e58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	61bb      	str	r3, [r7, #24]
        break;
 8005e4c:	e004      	b.n	8005e58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77bb      	strb	r3, [r7, #30]
        break;
 8005e56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d074      	beq.n	8005f48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	005a      	lsls	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	085b      	lsrs	r3, r3, #1
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	d916      	bls.n	8005ea8 <UART_SetConfig+0x404>
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e80:	d212      	bcs.n	8005ea8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f023 030f 	bic.w	r3, r3, #15
 8005e8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	89fb      	ldrh	r3, [r7, #14]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	89fa      	ldrh	r2, [r7, #14]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	e04f      	b.n	8005f48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	77bb      	strb	r3, [r7, #30]
 8005eac:	e04c      	b.n	8005f48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d828      	bhi.n	8005f06 <UART_SetConfig+0x462>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x418>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee9 	.word	0x08005ee9
 8005ec4:	08005ef1 	.word	0x08005ef1
 8005ec8:	08005f07 	.word	0x08005f07
 8005ecc:	08005ef7 	.word	0x08005ef7
 8005ed0:	08005f07 	.word	0x08005f07
 8005ed4:	08005f07 	.word	0x08005f07
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005eff 	.word	0x08005eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fe f8b6 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	61b8      	str	r0, [r7, #24]
        break;
 8005ee6:	e013      	b.n	8005f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe f8c6 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8005eec:	61b8      	str	r0, [r7, #24]
        break;
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <UART_SetConfig+0x4c4>)
 8005ef2:	61bb      	str	r3, [r7, #24]
        break;
 8005ef4:	e00c      	b.n	8005f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fd ff99 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8005efa:	61b8      	str	r0, [r7, #24]
        break;
 8005efc:	e008      	b.n	8005f10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f02:	61bb      	str	r3, [r7, #24]
        break;
 8005f04:	e004      	b.n	8005f10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d018      	beq.n	8005f48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	085a      	lsrs	r2, r3, #1
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	441a      	add	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	2b0f      	cmp	r3, #15
 8005f2e:	d909      	bls.n	8005f44 <UART_SetConfig+0x4a0>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f36:	d205      	bcs.n	8005f44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
 8005f42:	e001      	b.n	8005f48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40007c00 	.word	0x40007c00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00f42400 	.word	0x00f42400

08005f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0310 	and.w	r3, r3, #16
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01a      	beq.n	8006082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d10a      	bne.n	8006082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
  }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060c0:	f7fb fb76 	bl	80017b0 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10e      	bne.n	80060f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f831 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e027      	b.n	8006142 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d10e      	bne.n	800611e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f81b 	bl	800614a <UART_WaitOnFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e011      	b.n	8006142 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b09c      	sub	sp, #112	; 0x70
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	4613      	mov	r3, r2
 8006158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	e0a7      	b.n	80062ac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006162:	f000 80a3 	beq.w	80062ac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006166:	f7fb fb23 	bl	80017b0 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006172:	429a      	cmp	r2, r3
 8006174:	d302      	bcc.n	800617c <UART_WaitOnFlagUntilTimeout+0x32>
 8006176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006178:	2b00      	cmp	r3, #0
 800617a:	d13f      	bne.n	80061fc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800618a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006190:	667b      	str	r3, [r7, #100]	; 0x64
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800619a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	663b      	str	r3, [r7, #96]	; 0x60
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e068      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d050      	beq.n	80062ac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006218:	d148      	bne.n	80062ac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006222:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006238:	66fb      	str	r3, [r7, #108]	; 0x6c
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
 8006244:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e6      	bne.n	8006224 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	613b      	str	r3, [r7, #16]
   return(result);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	66bb      	str	r3, [r7, #104]	; 0x68
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3308      	adds	r3, #8
 8006274:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006276:	623a      	str	r2, [r7, #32]
 8006278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	69f9      	ldr	r1, [r7, #28]
 800627c:	6a3a      	ldr	r2, [r7, #32]
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	61bb      	str	r3, [r7, #24]
   return(result);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e010      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	f43f af48 	beq.w	800615c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3770      	adds	r7, #112	; 0x70
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b095      	sub	sp, #84	; 0x54
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fc:	643b      	str	r3, [r7, #64]	; 0x40
 80062fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e6      	bne.n	80062de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	64bb      	str	r3, [r7, #72]	; 0x48
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3308      	adds	r3, #8
 800632e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006330:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e5      	bne.n	8006310 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	2b01      	cmp	r3, #1
 800634a:	d118      	bne.n	800637e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	60bb      	str	r3, [r7, #8]
   return(result);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0310 	bic.w	r3, r3, #16
 8006360:	647b      	str	r3, [r7, #68]	; 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	613b      	str	r3, [r7, #16]
   return(result);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e6      	bne.n	800634c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006392:	bf00      	nop
 8006394:	3754      	adds	r7, #84	; 0x54
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f7ff fb51 	bl	8005a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c2:	bf00      	nop
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b088      	sub	sp, #32
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	60bb      	str	r3, [r7, #8]
   return(result);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	613b      	str	r3, [r7, #16]
   return(result);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fb1d 	bl	8005a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006416:	bf00      	nop
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006420:	b084      	sub	sp, #16
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	f107 001c 	add.w	r0, r7, #28
 800642e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2b01      	cmp	r3, #1
 8006436:	d120      	bne.n	800647a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4b20      	ldr	r3, [pc, #128]	; (80064cc <USB_CoreInit+0xac>)
 800644a:	4013      	ands	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800645c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa96 	bl	80069a0 <USB_CoreReset>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e010      	b.n	800649c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa8a 	bl	80069a0 <USB_CoreReset>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10b      	bne.n	80064ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f043 0206 	orr.w	r2, r3, #6
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c6:	b004      	add	sp, #16
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	ffbdffbf 	.word	0xffbdffbf

080064d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f023 0201 	bic.w	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d115      	bne.n	8006540 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006520:	2001      	movs	r0, #1
 8006522:	f7fb f951 	bl	80017c8 <HAL_Delay>
      ms++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	3301      	adds	r3, #1
 800652a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fa29 	bl	8006984 <USB_GetMode>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	d01e      	beq.n	8006576 <USB_SetCurrentMode+0x84>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b31      	cmp	r3, #49	; 0x31
 800653c:	d9f0      	bls.n	8006520 <USB_SetCurrentMode+0x2e>
 800653e:	e01a      	b.n	8006576 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d115      	bne.n	8006572 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006552:	2001      	movs	r0, #1
 8006554:	f7fb f938 	bl	80017c8 <HAL_Delay>
      ms++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa10 	bl	8006984 <USB_GetMode>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <USB_SetCurrentMode+0x84>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b31      	cmp	r3, #49	; 0x31
 800656e:	d9f0      	bls.n	8006552 <USB_SetCurrentMode+0x60>
 8006570:	e001      	b.n	8006576 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e005      	b.n	8006582 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b32      	cmp	r3, #50	; 0x32
 800657a:	d101      	bne.n	8006580 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800658c:	b084      	sub	sp, #16
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800659a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	e009      	b.n	80065c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3340      	adds	r3, #64	; 0x40
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3301      	adds	r3, #1
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b0e      	cmp	r3, #14
 80065c4:	d9f2      	bls.n	80065ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11c      	bne.n	8006606 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065da:	f043 0302 	orr.w	r3, r3, #2
 80065de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e005      	b.n	8006612 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006618:	461a      	mov	r2, r3
 800661a:	2300      	movs	r3, #0
 800661c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006624:	4619      	mov	r1, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662c:	461a      	mov	r2, r3
 800662e:	680b      	ldr	r3, [r1, #0]
 8006630:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2b01      	cmp	r3, #1
 8006636:	d10c      	bne.n	8006652 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800663e:	2100      	movs	r1, #0
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f965 	bl	8006910 <USB_SetDevSpeed>
 8006646:	e008      	b.n	800665a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006648:	2101      	movs	r1, #1
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f960 	bl	8006910 <USB_SetDevSpeed>
 8006650:	e003      	b.n	800665a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006652:	2103      	movs	r1, #3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f95b 	bl	8006910 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800665a:	2110      	movs	r1, #16
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8f3 	bl	8006848 <USB_FlushTxFifo>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f91f 	bl	80068b0 <USB_FlushRxFifo>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	461a      	mov	r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e043      	b.n	800672e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066bc:	d118      	bne.n	80066f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	461a      	mov	r2, r3
 80066d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	e013      	b.n	8006702 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	461a      	mov	r2, r3
 80066e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e008      	b.n	8006702 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	461a      	mov	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	461a      	mov	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	461a      	mov	r2, r3
 8006722:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006726:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3301      	adds	r3, #1
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	429a      	cmp	r2, r3
 8006734:	d3b7      	bcc.n	80066a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e043      	b.n	80067c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006752:	d118      	bne.n	8006786 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e013      	b.n	8006798 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	e008      	b.n	8006798 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3301      	adds	r3, #1
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3b7      	bcc.n	800673c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f043 0210 	orr.w	r2, r3, #16
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <USB_DevInit+0x2b4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800680c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	f043 0208 	orr.w	r2, r3, #8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800681e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d105      	bne.n	8006830 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699a      	ldr	r2, [r3, #24]
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <USB_DevInit+0x2b8>)
 800682a:	4313      	orrs	r3, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800683c:	b004      	add	sp, #16
 800683e:	4770      	bx	lr
 8006840:	803c3800 	.word	0x803c3800
 8006844:	40000004 	.word	0x40000004

08006848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a13      	ldr	r2, [pc, #76]	; (80068ac <USB_FlushTxFifo+0x64>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e01b      	b.n	80068a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	daf2      	bge.n	8006856 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	019b      	lsls	r3, r3, #6
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a08      	ldr	r2, [pc, #32]	; (80068ac <USB_FlushTxFifo+0x64>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e006      	b.n	80068a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b20      	cmp	r3, #32
 800689c:	d0f0      	beq.n	8006880 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	00030d40 	.word	0x00030d40

080068b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a11      	ldr	r2, [pc, #68]	; (800690c <USB_FlushRxFifo+0x5c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e018      	b.n	8006900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	daf2      	bge.n	80068bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2210      	movs	r2, #16
 80068de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <USB_FlushRxFifo+0x5c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e006      	b.n	8006900 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d0f0      	beq.n	80068e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	00030d40 	.word	0x00030d40

08006910 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	68f9      	ldr	r1, [r7, #12]
 800692c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006930:	4313      	orrs	r3, r2
 8006932:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0301 	and.w	r3, r3, #1
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <USB_CoreReset+0x64>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d901      	bls.n	80069be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e01b      	b.n	80069f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	daf2      	bge.n	80069ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f043 0201 	orr.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <USB_CoreReset+0x64>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d0f0      	beq.n	80069d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	00030d40 	.word	0x00030d40

08006a08 <__cvt>:
 8006a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a0a:	ed2d 8b02 	vpush	{d8}
 8006a0e:	eeb0 8b40 	vmov.f64	d8, d0
 8006a12:	b085      	sub	sp, #20
 8006a14:	4617      	mov	r7, r2
 8006a16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006a18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a1a:	ee18 2a90 	vmov	r2, s17
 8006a1e:	f025 0520 	bic.w	r5, r5, #32
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	bfb6      	itet	lt
 8006a26:	222d      	movlt	r2, #45	; 0x2d
 8006a28:	2200      	movge	r2, #0
 8006a2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a2e:	2d46      	cmp	r5, #70	; 0x46
 8006a30:	460c      	mov	r4, r1
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	d004      	beq.n	8006a40 <__cvt+0x38>
 8006a36:	2d45      	cmp	r5, #69	; 0x45
 8006a38:	d100      	bne.n	8006a3c <__cvt+0x34>
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	2102      	movs	r1, #2
 8006a3e:	e000      	b.n	8006a42 <__cvt+0x3a>
 8006a40:	2103      	movs	r1, #3
 8006a42:	ab03      	add	r3, sp, #12
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	ab02      	add	r3, sp, #8
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	4633      	mov	r3, r6
 8006a4e:	eeb0 0b48 	vmov.f64	d0, d8
 8006a52:	f000 fdb9 	bl	80075c8 <_dtoa_r>
 8006a56:	2d47      	cmp	r5, #71	; 0x47
 8006a58:	d101      	bne.n	8006a5e <__cvt+0x56>
 8006a5a:	07fb      	lsls	r3, r7, #31
 8006a5c:	d51a      	bpl.n	8006a94 <__cvt+0x8c>
 8006a5e:	2d46      	cmp	r5, #70	; 0x46
 8006a60:	eb00 0204 	add.w	r2, r0, r4
 8006a64:	d10c      	bne.n	8006a80 <__cvt+0x78>
 8006a66:	7803      	ldrb	r3, [r0, #0]
 8006a68:	2b30      	cmp	r3, #48	; 0x30
 8006a6a:	d107      	bne.n	8006a7c <__cvt+0x74>
 8006a6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a74:	bf1c      	itt	ne
 8006a76:	f1c4 0401 	rsbne	r4, r4, #1
 8006a7a:	6034      	strne	r4, [r6, #0]
 8006a7c:	6833      	ldr	r3, [r6, #0]
 8006a7e:	441a      	add	r2, r3
 8006a80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	bf08      	it	eq
 8006a8a:	9203      	streq	r2, [sp, #12]
 8006a8c:	2130      	movs	r1, #48	; 0x30
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d307      	bcc.n	8006aa4 <__cvt+0x9c>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a98:	1a1b      	subs	r3, r3, r0
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	b005      	add	sp, #20
 8006a9e:	ecbd 8b02 	vpop	{d8}
 8006aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa4:	1c5c      	adds	r4, r3, #1
 8006aa6:	9403      	str	r4, [sp, #12]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	e7f0      	b.n	8006a8e <__cvt+0x86>

08006aac <__exponent>:
 8006aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	bfb8      	it	lt
 8006ab4:	4249      	neglt	r1, r1
 8006ab6:	f803 2b02 	strb.w	r2, [r3], #2
 8006aba:	bfb4      	ite	lt
 8006abc:	222d      	movlt	r2, #45	; 0x2d
 8006abe:	222b      	movge	r2, #43	; 0x2b
 8006ac0:	2909      	cmp	r1, #9
 8006ac2:	7042      	strb	r2, [r0, #1]
 8006ac4:	dd2a      	ble.n	8006b1c <__exponent+0x70>
 8006ac6:	f10d 0207 	add.w	r2, sp, #7
 8006aca:	4617      	mov	r7, r2
 8006acc:	260a      	movs	r6, #10
 8006ace:	4694      	mov	ip, r2
 8006ad0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ad4:	fb06 1415 	mls	r4, r6, r5, r1
 8006ad8:	3430      	adds	r4, #48	; 0x30
 8006ada:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ade:	460c      	mov	r4, r1
 8006ae0:	2c63      	cmp	r4, #99	; 0x63
 8006ae2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	dcf1      	bgt.n	8006ace <__exponent+0x22>
 8006aea:	3130      	adds	r1, #48	; 0x30
 8006aec:	f1ac 0402 	sub.w	r4, ip, #2
 8006af0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006af4:	1c41      	adds	r1, r0, #1
 8006af6:	4622      	mov	r2, r4
 8006af8:	42ba      	cmp	r2, r7
 8006afa:	d30a      	bcc.n	8006b12 <__exponent+0x66>
 8006afc:	f10d 0209 	add.w	r2, sp, #9
 8006b00:	eba2 020c 	sub.w	r2, r2, ip
 8006b04:	42bc      	cmp	r4, r7
 8006b06:	bf88      	it	hi
 8006b08:	2200      	movhi	r2, #0
 8006b0a:	4413      	add	r3, r2
 8006b0c:	1a18      	subs	r0, r3, r0
 8006b0e:	b003      	add	sp, #12
 8006b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b1a:	e7ed      	b.n	8006af8 <__exponent+0x4c>
 8006b1c:	2330      	movs	r3, #48	; 0x30
 8006b1e:	3130      	adds	r1, #48	; 0x30
 8006b20:	7083      	strb	r3, [r0, #2]
 8006b22:	70c1      	strb	r1, [r0, #3]
 8006b24:	1d03      	adds	r3, r0, #4
 8006b26:	e7f1      	b.n	8006b0c <__exponent+0x60>

08006b28 <_printf_float>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	b08b      	sub	sp, #44	; 0x2c
 8006b2e:	460c      	mov	r4, r1
 8006b30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006b34:	4616      	mov	r6, r2
 8006b36:	461f      	mov	r7, r3
 8006b38:	4605      	mov	r5, r0
 8006b3a:	f000 fc89 	bl	8007450 <_localeconv_r>
 8006b3e:	f8d0 b000 	ldr.w	fp, [r0]
 8006b42:	4658      	mov	r0, fp
 8006b44:	f7f9 fbcc 	bl	80002e0 <strlen>
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9308      	str	r3, [sp, #32]
 8006b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b50:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	3307      	adds	r3, #7
 8006b58:	f023 0307 	bic.w	r3, r3, #7
 8006b5c:	f103 0108 	add.w	r1, r3, #8
 8006b60:	f8c8 1000 	str.w	r1, [r8]
 8006b64:	ed93 0b00 	vldr	d0, [r3]
 8006b68:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8006dc8 <_printf_float+0x2a0>
 8006b6c:	eeb0 7bc0 	vabs.f64	d7, d0
 8006b70:	eeb4 7b46 	vcmp.f64	d7, d6
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	dd24      	ble.n	8006bca <_printf_float+0xa2>
 8006b80:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	d502      	bpl.n	8006b90 <_printf_float+0x68>
 8006b8a:	232d      	movs	r3, #45	; 0x2d
 8006b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b90:	498f      	ldr	r1, [pc, #572]	; (8006dd0 <_printf_float+0x2a8>)
 8006b92:	4b90      	ldr	r3, [pc, #576]	; (8006dd4 <_printf_float+0x2ac>)
 8006b94:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b98:	bf94      	ite	ls
 8006b9a:	4688      	movls	r8, r1
 8006b9c:	4698      	movhi	r8, r3
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6022      	str	r2, [r4, #0]
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	9700      	str	r7, [sp, #0]
 8006bae:	4633      	mov	r3, r6
 8006bb0:	aa09      	add	r2, sp, #36	; 0x24
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f9d1 	bl	8006f5c <_printf_common>
 8006bba:	3001      	adds	r0, #1
 8006bbc:	f040 808a 	bne.w	8006cd4 <_printf_float+0x1ac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bc4:	b00b      	add	sp, #44	; 0x2c
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	eeb4 0b40 	vcmp.f64	d0, d0
 8006bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd2:	d709      	bvc.n	8006be8 <_printf_float+0xc0>
 8006bd4:	ee10 3a90 	vmov	r3, s1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bfbc      	itt	lt
 8006bdc:	232d      	movlt	r3, #45	; 0x2d
 8006bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006be2:	497d      	ldr	r1, [pc, #500]	; (8006dd8 <_printf_float+0x2b0>)
 8006be4:	4b7d      	ldr	r3, [pc, #500]	; (8006ddc <_printf_float+0x2b4>)
 8006be6:	e7d5      	b.n	8006b94 <_printf_float+0x6c>
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006bee:	9104      	str	r1, [sp, #16]
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	d13c      	bne.n	8006c6e <_printf_float+0x146>
 8006bf4:	2306      	movs	r3, #6
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	ab08      	add	r3, sp, #32
 8006bfe:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006c02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c06:	ab07      	add	r3, sp, #28
 8006c08:	6861      	ldr	r1, [r4, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	6022      	str	r2, [r4, #0]
 8006c0e:	f10d 031b 	add.w	r3, sp, #27
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7ff fef8 	bl	8006a08 <__cvt>
 8006c18:	9b04      	ldr	r3, [sp, #16]
 8006c1a:	9907      	ldr	r1, [sp, #28]
 8006c1c:	2b47      	cmp	r3, #71	; 0x47
 8006c1e:	4680      	mov	r8, r0
 8006c20:	d108      	bne.n	8006c34 <_printf_float+0x10c>
 8006c22:	1cc8      	adds	r0, r1, #3
 8006c24:	db02      	blt.n	8006c2c <_printf_float+0x104>
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	dd41      	ble.n	8006cb0 <_printf_float+0x188>
 8006c2c:	f1a9 0902 	sub.w	r9, r9, #2
 8006c30:	fa5f f989 	uxtb.w	r9, r9
 8006c34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c38:	d820      	bhi.n	8006c7c <_printf_float+0x154>
 8006c3a:	3901      	subs	r1, #1
 8006c3c:	464a      	mov	r2, r9
 8006c3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c42:	9107      	str	r1, [sp, #28]
 8006c44:	f7ff ff32 	bl	8006aac <__exponent>
 8006c48:	9a08      	ldr	r2, [sp, #32]
 8006c4a:	9004      	str	r0, [sp, #16]
 8006c4c:	1813      	adds	r3, r2, r0
 8006c4e:	2a01      	cmp	r2, #1
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	dc02      	bgt.n	8006c5a <_printf_float+0x132>
 8006c54:	6822      	ldr	r2, [r4, #0]
 8006c56:	07d2      	lsls	r2, r2, #31
 8006c58:	d501      	bpl.n	8006c5e <_printf_float+0x136>
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0a2      	beq.n	8006bac <_printf_float+0x84>
 8006c66:	232d      	movs	r3, #45	; 0x2d
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	e79e      	b.n	8006bac <_printf_float+0x84>
 8006c6e:	9904      	ldr	r1, [sp, #16]
 8006c70:	2947      	cmp	r1, #71	; 0x47
 8006c72:	d1c1      	bne.n	8006bf8 <_printf_float+0xd0>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1bf      	bne.n	8006bf8 <_printf_float+0xd0>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e7bc      	b.n	8006bf6 <_printf_float+0xce>
 8006c7c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c80:	d118      	bne.n	8006cb4 <_printf_float+0x18c>
 8006c82:	2900      	cmp	r1, #0
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	dd0b      	ble.n	8006ca0 <_printf_float+0x178>
 8006c88:	6121      	str	r1, [r4, #16]
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x16a>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d0      	lsls	r0, r2, #31
 8006c90:	d502      	bpl.n	8006c98 <_printf_float+0x170>
 8006c92:	3301      	adds	r3, #1
 8006c94:	440b      	add	r3, r1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	e7de      	b.n	8006c5e <_printf_float+0x136>
 8006ca0:	b913      	cbnz	r3, 8006ca8 <_printf_float+0x180>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	07d2      	lsls	r2, r2, #31
 8006ca6:	d501      	bpl.n	8006cac <_printf_float+0x184>
 8006ca8:	3302      	adds	r3, #2
 8006caa:	e7f4      	b.n	8006c96 <_printf_float+0x16e>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e7f2      	b.n	8006c96 <_printf_float+0x16e>
 8006cb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	db05      	blt.n	8006cc6 <_printf_float+0x19e>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	6121      	str	r1, [r4, #16]
 8006cbe:	07d8      	lsls	r0, r3, #31
 8006cc0:	d5ea      	bpl.n	8006c98 <_printf_float+0x170>
 8006cc2:	1c4b      	adds	r3, r1, #1
 8006cc4:	e7e7      	b.n	8006c96 <_printf_float+0x16e>
 8006cc6:	2900      	cmp	r1, #0
 8006cc8:	bfd4      	ite	le
 8006cca:	f1c1 0202 	rsble	r2, r1, #2
 8006cce:	2201      	movgt	r2, #1
 8006cd0:	4413      	add	r3, r2
 8006cd2:	e7e0      	b.n	8006c96 <_printf_float+0x16e>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	055a      	lsls	r2, r3, #21
 8006cd8:	d407      	bmi.n	8006cea <_printf_float+0x1c2>
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	4642      	mov	r2, r8
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d12a      	bne.n	8006d3e <_printf_float+0x216>
 8006ce8:	e76a      	b.n	8006bc0 <_printf_float+0x98>
 8006cea:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cee:	f240 80e0 	bls.w	8006eb2 <_printf_float+0x38a>
 8006cf2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006cf6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	d133      	bne.n	8006d68 <_printf_float+0x240>
 8006d00:	4a37      	ldr	r2, [pc, #220]	; (8006de0 <_printf_float+0x2b8>)
 8006d02:	2301      	movs	r3, #1
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f af58 	beq.w	8006bc0 <_printf_float+0x98>
 8006d10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	db02      	blt.n	8006d1e <_printf_float+0x1f6>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07d8      	lsls	r0, r3, #31
 8006d1c:	d50f      	bpl.n	8006d3e <_printf_float+0x216>
 8006d1e:	4653      	mov	r3, sl
 8006d20:	465a      	mov	r2, fp
 8006d22:	4631      	mov	r1, r6
 8006d24:	4628      	mov	r0, r5
 8006d26:	47b8      	blx	r7
 8006d28:	3001      	adds	r0, #1
 8006d2a:	f43f af49 	beq.w	8006bc0 <_printf_float+0x98>
 8006d2e:	f04f 0800 	mov.w	r8, #0
 8006d32:	f104 091a 	add.w	r9, r4, #26
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	4543      	cmp	r3, r8
 8006d3c:	dc09      	bgt.n	8006d52 <_printf_float+0x22a>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	079b      	lsls	r3, r3, #30
 8006d42:	f100 8106 	bmi.w	8006f52 <_printf_float+0x42a>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	bfb8      	it	lt
 8006d4e:	4618      	movlt	r0, r3
 8006d50:	e738      	b.n	8006bc4 <_printf_float+0x9c>
 8006d52:	2301      	movs	r3, #1
 8006d54:	464a      	mov	r2, r9
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f af2f 	beq.w	8006bc0 <_printf_float+0x98>
 8006d62:	f108 0801 	add.w	r8, r8, #1
 8006d66:	e7e6      	b.n	8006d36 <_printf_float+0x20e>
 8006d68:	9b07      	ldr	r3, [sp, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc3a      	bgt.n	8006de4 <_printf_float+0x2bc>
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <_printf_float+0x2b8>)
 8006d70:	2301      	movs	r3, #1
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f43f af21 	beq.w	8006bc0 <_printf_float+0x98>
 8006d7e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	d102      	bne.n	8006d8c <_printf_float+0x264>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	d5d8      	bpl.n	8006d3e <_printf_float+0x216>
 8006d8c:	4653      	mov	r3, sl
 8006d8e:	465a      	mov	r2, fp
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af12 	beq.w	8006bc0 <_printf_float+0x98>
 8006d9c:	f04f 0900 	mov.w	r9, #0
 8006da0:	f104 0a1a 	add.w	sl, r4, #26
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	425b      	negs	r3, r3
 8006da8:	454b      	cmp	r3, r9
 8006daa:	dc01      	bgt.n	8006db0 <_printf_float+0x288>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	e795      	b.n	8006cdc <_printf_float+0x1b4>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4652      	mov	r2, sl
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af00 	beq.w	8006bc0 <_printf_float+0x98>
 8006dc0:	f109 0901 	add.w	r9, r9, #1
 8006dc4:	e7ee      	b.n	8006da4 <_printf_float+0x27c>
 8006dc6:	bf00      	nop
 8006dc8:	ffffffff 	.word	0xffffffff
 8006dcc:	7fefffff 	.word	0x7fefffff
 8006dd0:	08009638 	.word	0x08009638
 8006dd4:	0800963c 	.word	0x0800963c
 8006dd8:	08009640 	.word	0x08009640
 8006ddc:	08009644 	.word	0x08009644
 8006de0:	08009648 	.word	0x08009648
 8006de4:	9a08      	ldr	r2, [sp, #32]
 8006de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bfa8      	it	ge
 8006dec:	461a      	movge	r2, r3
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	4691      	mov	r9, r2
 8006df2:	dc38      	bgt.n	8006e66 <_printf_float+0x33e>
 8006df4:	2300      	movs	r3, #0
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dfc:	f104 021a 	add.w	r2, r4, #26
 8006e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e02:	9905      	ldr	r1, [sp, #20]
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	eba3 0309 	sub.w	r3, r3, r9
 8006e0a:	428b      	cmp	r3, r1
 8006e0c:	dc33      	bgt.n	8006e76 <_printf_float+0x34e>
 8006e0e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	db3c      	blt.n	8006e90 <_printf_float+0x368>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	07da      	lsls	r2, r3, #31
 8006e1a:	d439      	bmi.n	8006e90 <_printf_float+0x368>
 8006e1c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8006e20:	eba2 0903 	sub.w	r9, r2, r3
 8006e24:	9b04      	ldr	r3, [sp, #16]
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	4591      	cmp	r9, r2
 8006e2a:	bfa8      	it	ge
 8006e2c:	4691      	movge	r9, r2
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	dc35      	bgt.n	8006ea0 <_printf_float+0x378>
 8006e34:	f04f 0800 	mov.w	r8, #0
 8006e38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e3c:	f104 0a1a 	add.w	sl, r4, #26
 8006e40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	eba3 0309 	sub.w	r3, r3, r9
 8006e4a:	4543      	cmp	r3, r8
 8006e4c:	f77f af77 	ble.w	8006d3e <_printf_float+0x216>
 8006e50:	2301      	movs	r3, #1
 8006e52:	4652      	mov	r2, sl
 8006e54:	4631      	mov	r1, r6
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f43f aeb0 	beq.w	8006bc0 <_printf_float+0x98>
 8006e60:	f108 0801 	add.w	r8, r8, #1
 8006e64:	e7ec      	b.n	8006e40 <_printf_float+0x318>
 8006e66:	4613      	mov	r3, r2
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	d1bf      	bne.n	8006df4 <_printf_float+0x2cc>
 8006e74:	e6a4      	b.n	8006bc0 <_printf_float+0x98>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	9204      	str	r2, [sp, #16]
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f ae9d 	beq.w	8006bc0 <_printf_float+0x98>
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	e7b7      	b.n	8006e00 <_printf_float+0x2d8>
 8006e90:	4653      	mov	r3, sl
 8006e92:	465a      	mov	r2, fp
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d1be      	bne.n	8006e1c <_printf_float+0x2f4>
 8006e9e:	e68f      	b.n	8006bc0 <_printf_float+0x98>
 8006ea0:	9a04      	ldr	r2, [sp, #16]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	4442      	add	r2, r8
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	d1c1      	bne.n	8006e34 <_printf_float+0x30c>
 8006eb0:	e686      	b.n	8006bc0 <_printf_float+0x98>
 8006eb2:	9a08      	ldr	r2, [sp, #32]
 8006eb4:	2a01      	cmp	r2, #1
 8006eb6:	dc01      	bgt.n	8006ebc <_printf_float+0x394>
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d537      	bpl.n	8006f2c <_printf_float+0x404>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	47b8      	blx	r7
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	f43f ae7a 	beq.w	8006bc0 <_printf_float+0x98>
 8006ecc:	4653      	mov	r3, sl
 8006ece:	465a      	mov	r2, fp
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f43f ae72 	beq.w	8006bc0 <_printf_float+0x98>
 8006edc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006ee0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	d01a      	beq.n	8006f22 <_printf_float+0x3fa>
 8006eec:	3b01      	subs	r3, #1
 8006eee:	f108 0201 	add.w	r2, r8, #1
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d10e      	bne.n	8006f1a <_printf_float+0x3f2>
 8006efc:	e660      	b.n	8006bc0 <_printf_float+0x98>
 8006efe:	2301      	movs	r3, #1
 8006f00:	464a      	mov	r2, r9
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f ae59 	beq.w	8006bc0 <_printf_float+0x98>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	9b08      	ldr	r3, [sp, #32]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	4543      	cmp	r3, r8
 8006f18:	dcf1      	bgt.n	8006efe <_printf_float+0x3d6>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f20:	e6dd      	b.n	8006cde <_printf_float+0x1b6>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	f104 091a 	add.w	r9, r4, #26
 8006f2a:	e7f2      	b.n	8006f12 <_printf_float+0x3ea>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4642      	mov	r2, r8
 8006f30:	e7df      	b.n	8006ef2 <_printf_float+0x3ca>
 8006f32:	2301      	movs	r3, #1
 8006f34:	464a      	mov	r2, r9
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae3f 	beq.w	8006bc0 <_printf_float+0x98>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f4a:	1a5b      	subs	r3, r3, r1
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	dcf0      	bgt.n	8006f32 <_printf_float+0x40a>
 8006f50:	e6f9      	b.n	8006d46 <_printf_float+0x21e>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	f104 0919 	add.w	r9, r4, #25
 8006f5a:	e7f4      	b.n	8006f46 <_printf_float+0x41e>

08006f5c <_printf_common>:
 8006f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	4616      	mov	r6, r2
 8006f62:	4699      	mov	r9, r3
 8006f64:	688a      	ldr	r2, [r1, #8]
 8006f66:	690b      	ldr	r3, [r1, #16]
 8006f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	bfb8      	it	lt
 8006f70:	4613      	movlt	r3, r2
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f78:	4607      	mov	r7, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b10a      	cbz	r2, 8006f82 <_printf_common+0x26>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	6033      	str	r3, [r6, #0]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	bf42      	ittt	mi
 8006f88:	6833      	ldrmi	r3, [r6, #0]
 8006f8a:	3302      	addmi	r3, #2
 8006f8c:	6033      	strmi	r3, [r6, #0]
 8006f8e:	6825      	ldr	r5, [r4, #0]
 8006f90:	f015 0506 	ands.w	r5, r5, #6
 8006f94:	d106      	bne.n	8006fa4 <_printf_common+0x48>
 8006f96:	f104 0a19 	add.w	sl, r4, #25
 8006f9a:	68e3      	ldr	r3, [r4, #12]
 8006f9c:	6832      	ldr	r2, [r6, #0]
 8006f9e:	1a9b      	subs	r3, r3, r2
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dc26      	bgt.n	8006ff2 <_printf_common+0x96>
 8006fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa8:	1e13      	subs	r3, r2, #0
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	bf18      	it	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	0692      	lsls	r2, r2, #26
 8006fb2:	d42b      	bmi.n	800700c <_printf_common+0xb0>
 8006fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4638      	mov	r0, r7
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d01e      	beq.n	8007000 <_printf_common+0xa4>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	6922      	ldr	r2, [r4, #16]
 8006fc6:	f003 0306 	and.w	r3, r3, #6
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	bf02      	ittt	eq
 8006fce:	68e5      	ldreq	r5, [r4, #12]
 8006fd0:	6833      	ldreq	r3, [r6, #0]
 8006fd2:	1aed      	subeq	r5, r5, r3
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	bf0c      	ite	eq
 8006fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fdc:	2500      	movne	r5, #0
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	bfc4      	itt	gt
 8006fe2:	1a9b      	subgt	r3, r3, r2
 8006fe4:	18ed      	addgt	r5, r5, r3
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	341a      	adds	r4, #26
 8006fea:	42b5      	cmp	r5, r6
 8006fec:	d11a      	bne.n	8007024 <_printf_common+0xc8>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e008      	b.n	8007004 <_printf_common+0xa8>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	47c0      	blx	r8
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d103      	bne.n	8007008 <_printf_common+0xac>
 8007000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	3501      	adds	r5, #1
 800700a:	e7c6      	b.n	8006f9a <_printf_common+0x3e>
 800700c:	18e1      	adds	r1, r4, r3
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	2030      	movs	r0, #48	; 0x30
 8007012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007016:	4422      	add	r2, r4
 8007018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800701c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007020:	3302      	adds	r3, #2
 8007022:	e7c7      	b.n	8006fb4 <_printf_common+0x58>
 8007024:	2301      	movs	r3, #1
 8007026:	4622      	mov	r2, r4
 8007028:	4649      	mov	r1, r9
 800702a:	4638      	mov	r0, r7
 800702c:	47c0      	blx	r8
 800702e:	3001      	adds	r0, #1
 8007030:	d0e6      	beq.n	8007000 <_printf_common+0xa4>
 8007032:	3601      	adds	r6, #1
 8007034:	e7d9      	b.n	8006fea <_printf_common+0x8e>
	...

08007038 <_printf_i>:
 8007038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	7e0f      	ldrb	r7, [r1, #24]
 800703e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007040:	2f78      	cmp	r7, #120	; 0x78
 8007042:	4691      	mov	r9, r2
 8007044:	4680      	mov	r8, r0
 8007046:	460c      	mov	r4, r1
 8007048:	469a      	mov	sl, r3
 800704a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800704e:	d807      	bhi.n	8007060 <_printf_i+0x28>
 8007050:	2f62      	cmp	r7, #98	; 0x62
 8007052:	d80a      	bhi.n	800706a <_printf_i+0x32>
 8007054:	2f00      	cmp	r7, #0
 8007056:	f000 80d4 	beq.w	8007202 <_printf_i+0x1ca>
 800705a:	2f58      	cmp	r7, #88	; 0x58
 800705c:	f000 80c0 	beq.w	80071e0 <_printf_i+0x1a8>
 8007060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007068:	e03a      	b.n	80070e0 <_printf_i+0xa8>
 800706a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800706e:	2b15      	cmp	r3, #21
 8007070:	d8f6      	bhi.n	8007060 <_printf_i+0x28>
 8007072:	a101      	add	r1, pc, #4	; (adr r1, 8007078 <_printf_i+0x40>)
 8007074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070e5 	.word	0x080070e5
 8007080:	08007061 	.word	0x08007061
 8007084:	08007061 	.word	0x08007061
 8007088:	08007061 	.word	0x08007061
 800708c:	08007061 	.word	0x08007061
 8007090:	080070e5 	.word	0x080070e5
 8007094:	08007061 	.word	0x08007061
 8007098:	08007061 	.word	0x08007061
 800709c:	08007061 	.word	0x08007061
 80070a0:	08007061 	.word	0x08007061
 80070a4:	080071e9 	.word	0x080071e9
 80070a8:	08007111 	.word	0x08007111
 80070ac:	080071a3 	.word	0x080071a3
 80070b0:	08007061 	.word	0x08007061
 80070b4:	08007061 	.word	0x08007061
 80070b8:	0800720b 	.word	0x0800720b
 80070bc:	08007061 	.word	0x08007061
 80070c0:	08007111 	.word	0x08007111
 80070c4:	08007061 	.word	0x08007061
 80070c8:	08007061 	.word	0x08007061
 80070cc:	080071ab 	.word	0x080071ab
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e0:	2301      	movs	r3, #1
 80070e2:	e09f      	b.n	8007224 <_printf_i+0x1ec>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	682b      	ldr	r3, [r5, #0]
 80070e8:	0607      	lsls	r7, r0, #24
 80070ea:	f103 0104 	add.w	r1, r3, #4
 80070ee:	6029      	str	r1, [r5, #0]
 80070f0:	d501      	bpl.n	80070f6 <_printf_i+0xbe>
 80070f2:	681e      	ldr	r6, [r3, #0]
 80070f4:	e003      	b.n	80070fe <_printf_i+0xc6>
 80070f6:	0646      	lsls	r6, r0, #25
 80070f8:	d5fb      	bpl.n	80070f2 <_printf_i+0xba>
 80070fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80070fe:	2e00      	cmp	r6, #0
 8007100:	da03      	bge.n	800710a <_printf_i+0xd2>
 8007102:	232d      	movs	r3, #45	; 0x2d
 8007104:	4276      	negs	r6, r6
 8007106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710a:	485a      	ldr	r0, [pc, #360]	; (8007274 <_printf_i+0x23c>)
 800710c:	230a      	movs	r3, #10
 800710e:	e012      	b.n	8007136 <_printf_i+0xfe>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	6820      	ldr	r0, [r4, #0]
 8007114:	1d19      	adds	r1, r3, #4
 8007116:	6029      	str	r1, [r5, #0]
 8007118:	0605      	lsls	r5, r0, #24
 800711a:	d501      	bpl.n	8007120 <_printf_i+0xe8>
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	e002      	b.n	8007126 <_printf_i+0xee>
 8007120:	0641      	lsls	r1, r0, #25
 8007122:	d5fb      	bpl.n	800711c <_printf_i+0xe4>
 8007124:	881e      	ldrh	r6, [r3, #0]
 8007126:	4853      	ldr	r0, [pc, #332]	; (8007274 <_printf_i+0x23c>)
 8007128:	2f6f      	cmp	r7, #111	; 0x6f
 800712a:	bf0c      	ite	eq
 800712c:	2308      	moveq	r3, #8
 800712e:	230a      	movne	r3, #10
 8007130:	2100      	movs	r1, #0
 8007132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007136:	6865      	ldr	r5, [r4, #4]
 8007138:	60a5      	str	r5, [r4, #8]
 800713a:	2d00      	cmp	r5, #0
 800713c:	bfa2      	ittt	ge
 800713e:	6821      	ldrge	r1, [r4, #0]
 8007140:	f021 0104 	bicge.w	r1, r1, #4
 8007144:	6021      	strge	r1, [r4, #0]
 8007146:	b90e      	cbnz	r6, 800714c <_printf_i+0x114>
 8007148:	2d00      	cmp	r5, #0
 800714a:	d04b      	beq.n	80071e4 <_printf_i+0x1ac>
 800714c:	4615      	mov	r5, r2
 800714e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007152:	fb03 6711 	mls	r7, r3, r1, r6
 8007156:	5dc7      	ldrb	r7, [r0, r7]
 8007158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800715c:	4637      	mov	r7, r6
 800715e:	42bb      	cmp	r3, r7
 8007160:	460e      	mov	r6, r1
 8007162:	d9f4      	bls.n	800714e <_printf_i+0x116>
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10b      	bne.n	8007180 <_printf_i+0x148>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	07de      	lsls	r6, r3, #31
 800716c:	d508      	bpl.n	8007180 <_printf_i+0x148>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	4299      	cmp	r1, r3
 8007174:	bfde      	ittt	le
 8007176:	2330      	movle	r3, #48	; 0x30
 8007178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800717c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007180:	1b52      	subs	r2, r2, r5
 8007182:	6122      	str	r2, [r4, #16]
 8007184:	f8cd a000 	str.w	sl, [sp]
 8007188:	464b      	mov	r3, r9
 800718a:	aa03      	add	r2, sp, #12
 800718c:	4621      	mov	r1, r4
 800718e:	4640      	mov	r0, r8
 8007190:	f7ff fee4 	bl	8006f5c <_printf_common>
 8007194:	3001      	adds	r0, #1
 8007196:	d14a      	bne.n	800722e <_printf_i+0x1f6>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800719c:	b004      	add	sp, #16
 800719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	f043 0320 	orr.w	r3, r3, #32
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	4833      	ldr	r0, [pc, #204]	; (8007278 <_printf_i+0x240>)
 80071ac:	2778      	movs	r7, #120	; 0x78
 80071ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	6829      	ldr	r1, [r5, #0]
 80071b6:	061f      	lsls	r7, r3, #24
 80071b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071bc:	d402      	bmi.n	80071c4 <_printf_i+0x18c>
 80071be:	065f      	lsls	r7, r3, #25
 80071c0:	bf48      	it	mi
 80071c2:	b2b6      	uxthmi	r6, r6
 80071c4:	07df      	lsls	r7, r3, #31
 80071c6:	bf48      	it	mi
 80071c8:	f043 0320 	orrmi.w	r3, r3, #32
 80071cc:	6029      	str	r1, [r5, #0]
 80071ce:	bf48      	it	mi
 80071d0:	6023      	strmi	r3, [r4, #0]
 80071d2:	b91e      	cbnz	r6, 80071dc <_printf_i+0x1a4>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	f023 0320 	bic.w	r3, r3, #32
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	2310      	movs	r3, #16
 80071de:	e7a7      	b.n	8007130 <_printf_i+0xf8>
 80071e0:	4824      	ldr	r0, [pc, #144]	; (8007274 <_printf_i+0x23c>)
 80071e2:	e7e4      	b.n	80071ae <_printf_i+0x176>
 80071e4:	4615      	mov	r5, r2
 80071e6:	e7bd      	b.n	8007164 <_printf_i+0x12c>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	6826      	ldr	r6, [r4, #0]
 80071ec:	6961      	ldr	r1, [r4, #20]
 80071ee:	1d18      	adds	r0, r3, #4
 80071f0:	6028      	str	r0, [r5, #0]
 80071f2:	0635      	lsls	r5, r6, #24
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0x1c4>
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	e002      	b.n	8007202 <_printf_i+0x1ca>
 80071fc:	0670      	lsls	r0, r6, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0x1c0>
 8007200:	8019      	strh	r1, [r3, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	4615      	mov	r5, r2
 8007208:	e7bc      	b.n	8007184 <_printf_i+0x14c>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	1d1a      	adds	r2, r3, #4
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	681d      	ldr	r5, [r3, #0]
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	2100      	movs	r1, #0
 8007216:	4628      	mov	r0, r5
 8007218:	f7f9 f812 	bl	8000240 <memchr>
 800721c:	b108      	cbz	r0, 8007222 <_printf_i+0x1ea>
 800721e:	1b40      	subs	r0, r0, r5
 8007220:	6060      	str	r0, [r4, #4]
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	6123      	str	r3, [r4, #16]
 8007226:	2300      	movs	r3, #0
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722c:	e7aa      	b.n	8007184 <_printf_i+0x14c>
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	462a      	mov	r2, r5
 8007232:	4649      	mov	r1, r9
 8007234:	4640      	mov	r0, r8
 8007236:	47d0      	blx	sl
 8007238:	3001      	adds	r0, #1
 800723a:	d0ad      	beq.n	8007198 <_printf_i+0x160>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	079b      	lsls	r3, r3, #30
 8007240:	d413      	bmi.n	800726a <_printf_i+0x232>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	4298      	cmp	r0, r3
 8007248:	bfb8      	it	lt
 800724a:	4618      	movlt	r0, r3
 800724c:	e7a6      	b.n	800719c <_printf_i+0x164>
 800724e:	2301      	movs	r3, #1
 8007250:	4632      	mov	r2, r6
 8007252:	4649      	mov	r1, r9
 8007254:	4640      	mov	r0, r8
 8007256:	47d0      	blx	sl
 8007258:	3001      	adds	r0, #1
 800725a:	d09d      	beq.n	8007198 <_printf_i+0x160>
 800725c:	3501      	adds	r5, #1
 800725e:	68e3      	ldr	r3, [r4, #12]
 8007260:	9903      	ldr	r1, [sp, #12]
 8007262:	1a5b      	subs	r3, r3, r1
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcf2      	bgt.n	800724e <_printf_i+0x216>
 8007268:	e7eb      	b.n	8007242 <_printf_i+0x20a>
 800726a:	2500      	movs	r5, #0
 800726c:	f104 0619 	add.w	r6, r4, #25
 8007270:	e7f5      	b.n	800725e <_printf_i+0x226>
 8007272:	bf00      	nop
 8007274:	0800964a 	.word	0x0800964a
 8007278:	0800965b 	.word	0x0800965b

0800727c <siprintf>:
 800727c:	b40e      	push	{r1, r2, r3}
 800727e:	b500      	push	{lr}
 8007280:	b09c      	sub	sp, #112	; 0x70
 8007282:	ab1d      	add	r3, sp, #116	; 0x74
 8007284:	9002      	str	r0, [sp, #8]
 8007286:	9006      	str	r0, [sp, #24]
 8007288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800728c:	4809      	ldr	r0, [pc, #36]	; (80072b4 <siprintf+0x38>)
 800728e:	9107      	str	r1, [sp, #28]
 8007290:	9104      	str	r1, [sp, #16]
 8007292:	4909      	ldr	r1, [pc, #36]	; (80072b8 <siprintf+0x3c>)
 8007294:	f853 2b04 	ldr.w	r2, [r3], #4
 8007298:	9105      	str	r1, [sp, #20]
 800729a:	6800      	ldr	r0, [r0, #0]
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	a902      	add	r1, sp, #8
 80072a0:	f000 ff58 	bl	8008154 <_svfiprintf_r>
 80072a4:	9b02      	ldr	r3, [sp, #8]
 80072a6:	2200      	movs	r2, #0
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	b01c      	add	sp, #112	; 0x70
 80072ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80072b0:	b003      	add	sp, #12
 80072b2:	4770      	bx	lr
 80072b4:	2000006c 	.word	0x2000006c
 80072b8:	ffff0208 	.word	0xffff0208

080072bc <std>:
 80072bc:	2300      	movs	r3, #0
 80072be:	b510      	push	{r4, lr}
 80072c0:	4604      	mov	r4, r0
 80072c2:	e9c0 3300 	strd	r3, r3, [r0]
 80072c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072ca:	6083      	str	r3, [r0, #8]
 80072cc:	8181      	strh	r1, [r0, #12]
 80072ce:	6643      	str	r3, [r0, #100]	; 0x64
 80072d0:	81c2      	strh	r2, [r0, #14]
 80072d2:	6183      	str	r3, [r0, #24]
 80072d4:	4619      	mov	r1, r3
 80072d6:	2208      	movs	r2, #8
 80072d8:	305c      	adds	r0, #92	; 0x5c
 80072da:	f000 f8b1 	bl	8007440 <memset>
 80072de:	4b0d      	ldr	r3, [pc, #52]	; (8007314 <std+0x58>)
 80072e0:	6263      	str	r3, [r4, #36]	; 0x24
 80072e2:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <std+0x5c>)
 80072e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <std+0x60>)
 80072e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <std+0x64>)
 80072ec:	6323      	str	r3, [r4, #48]	; 0x30
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <std+0x68>)
 80072f0:	6224      	str	r4, [r4, #32]
 80072f2:	429c      	cmp	r4, r3
 80072f4:	d006      	beq.n	8007304 <std+0x48>
 80072f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072fa:	4294      	cmp	r4, r2
 80072fc:	d002      	beq.n	8007304 <std+0x48>
 80072fe:	33d0      	adds	r3, #208	; 0xd0
 8007300:	429c      	cmp	r4, r3
 8007302:	d105      	bne.n	8007310 <std+0x54>
 8007304:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730c:	f000 b8ce 	b.w	80074ac <__retarget_lock_init_recursive>
 8007310:	bd10      	pop	{r4, pc}
 8007312:	bf00      	nop
 8007314:	08008d0d 	.word	0x08008d0d
 8007318:	08008d2f 	.word	0x08008d2f
 800731c:	08008d67 	.word	0x08008d67
 8007320:	08008d8b 	.word	0x08008d8b
 8007324:	20000b40 	.word	0x20000b40

08007328 <stdio_exit_handler>:
 8007328:	4a02      	ldr	r2, [pc, #8]	; (8007334 <stdio_exit_handler+0xc>)
 800732a:	4903      	ldr	r1, [pc, #12]	; (8007338 <stdio_exit_handler+0x10>)
 800732c:	4803      	ldr	r0, [pc, #12]	; (800733c <stdio_exit_handler+0x14>)
 800732e:	f000 b869 	b.w	8007404 <_fwalk_sglue>
 8007332:	bf00      	nop
 8007334:	20000014 	.word	0x20000014
 8007338:	080085ad 	.word	0x080085ad
 800733c:	20000020 	.word	0x20000020

08007340 <cleanup_stdio>:
 8007340:	6841      	ldr	r1, [r0, #4]
 8007342:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <cleanup_stdio+0x34>)
 8007344:	4299      	cmp	r1, r3
 8007346:	b510      	push	{r4, lr}
 8007348:	4604      	mov	r4, r0
 800734a:	d001      	beq.n	8007350 <cleanup_stdio+0x10>
 800734c:	f001 f92e 	bl	80085ac <_fflush_r>
 8007350:	68a1      	ldr	r1, [r4, #8]
 8007352:	4b09      	ldr	r3, [pc, #36]	; (8007378 <cleanup_stdio+0x38>)
 8007354:	4299      	cmp	r1, r3
 8007356:	d002      	beq.n	800735e <cleanup_stdio+0x1e>
 8007358:	4620      	mov	r0, r4
 800735a:	f001 f927 	bl	80085ac <_fflush_r>
 800735e:	68e1      	ldr	r1, [r4, #12]
 8007360:	4b06      	ldr	r3, [pc, #24]	; (800737c <cleanup_stdio+0x3c>)
 8007362:	4299      	cmp	r1, r3
 8007364:	d004      	beq.n	8007370 <cleanup_stdio+0x30>
 8007366:	4620      	mov	r0, r4
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f001 b91e 	b.w	80085ac <_fflush_r>
 8007370:	bd10      	pop	{r4, pc}
 8007372:	bf00      	nop
 8007374:	20000b40 	.word	0x20000b40
 8007378:	20000ba8 	.word	0x20000ba8
 800737c:	20000c10 	.word	0x20000c10

08007380 <global_stdio_init.part.0>:
 8007380:	b510      	push	{r4, lr}
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <global_stdio_init.part.0+0x30>)
 8007384:	4c0b      	ldr	r4, [pc, #44]	; (80073b4 <global_stdio_init.part.0+0x34>)
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <global_stdio_init.part.0+0x38>)
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	4620      	mov	r0, r4
 800738c:	2200      	movs	r2, #0
 800738e:	2104      	movs	r1, #4
 8007390:	f7ff ff94 	bl	80072bc <std>
 8007394:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007398:	2201      	movs	r2, #1
 800739a:	2109      	movs	r1, #9
 800739c:	f7ff ff8e 	bl	80072bc <std>
 80073a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80073a4:	2202      	movs	r2, #2
 80073a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073aa:	2112      	movs	r1, #18
 80073ac:	f7ff bf86 	b.w	80072bc <std>
 80073b0:	20000c78 	.word	0x20000c78
 80073b4:	20000b40 	.word	0x20000b40
 80073b8:	08007329 	.word	0x08007329

080073bc <__sfp_lock_acquire>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__sfp_lock_acquire+0x8>)
 80073be:	f000 b876 	b.w	80074ae <__retarget_lock_acquire_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000c7d 	.word	0x20000c7d

080073c8 <__sfp_lock_release>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__sfp_lock_release+0x8>)
 80073ca:	f000 b871 	b.w	80074b0 <__retarget_lock_release_recursive>
 80073ce:	bf00      	nop
 80073d0:	20000c7d 	.word	0x20000c7d

080073d4 <__sinit>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	4604      	mov	r4, r0
 80073d8:	f7ff fff0 	bl	80073bc <__sfp_lock_acquire>
 80073dc:	6a23      	ldr	r3, [r4, #32]
 80073de:	b11b      	cbz	r3, 80073e8 <__sinit+0x14>
 80073e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e4:	f7ff bff0 	b.w	80073c8 <__sfp_lock_release>
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <__sinit+0x28>)
 80073ea:	6223      	str	r3, [r4, #32]
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <__sinit+0x2c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f5      	bne.n	80073e0 <__sinit+0xc>
 80073f4:	f7ff ffc4 	bl	8007380 <global_stdio_init.part.0>
 80073f8:	e7f2      	b.n	80073e0 <__sinit+0xc>
 80073fa:	bf00      	nop
 80073fc:	08007341 	.word	0x08007341
 8007400:	20000c78 	.word	0x20000c78

08007404 <_fwalk_sglue>:
 8007404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007408:	4607      	mov	r7, r0
 800740a:	4688      	mov	r8, r1
 800740c:	4614      	mov	r4, r2
 800740e:	2600      	movs	r6, #0
 8007410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007414:	f1b9 0901 	subs.w	r9, r9, #1
 8007418:	d505      	bpl.n	8007426 <_fwalk_sglue+0x22>
 800741a:	6824      	ldr	r4, [r4, #0]
 800741c:	2c00      	cmp	r4, #0
 800741e:	d1f7      	bne.n	8007410 <_fwalk_sglue+0xc>
 8007420:	4630      	mov	r0, r6
 8007422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d907      	bls.n	800743c <_fwalk_sglue+0x38>
 800742c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007430:	3301      	adds	r3, #1
 8007432:	d003      	beq.n	800743c <_fwalk_sglue+0x38>
 8007434:	4629      	mov	r1, r5
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	4306      	orrs	r6, r0
 800743c:	3568      	adds	r5, #104	; 0x68
 800743e:	e7e9      	b.n	8007414 <_fwalk_sglue+0x10>

08007440 <memset>:
 8007440:	4402      	add	r2, r0
 8007442:	4603      	mov	r3, r0
 8007444:	4293      	cmp	r3, r2
 8007446:	d100      	bne.n	800744a <memset+0xa>
 8007448:	4770      	bx	lr
 800744a:	f803 1b01 	strb.w	r1, [r3], #1
 800744e:	e7f9      	b.n	8007444 <memset+0x4>

08007450 <_localeconv_r>:
 8007450:	4800      	ldr	r0, [pc, #0]	; (8007454 <_localeconv_r+0x4>)
 8007452:	4770      	bx	lr
 8007454:	20000160 	.word	0x20000160

08007458 <__errno>:
 8007458:	4b01      	ldr	r3, [pc, #4]	; (8007460 <__errno+0x8>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	2000006c 	.word	0x2000006c

08007464 <__libc_init_array>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4d0d      	ldr	r5, [pc, #52]	; (800749c <__libc_init_array+0x38>)
 8007468:	4c0d      	ldr	r4, [pc, #52]	; (80074a0 <__libc_init_array+0x3c>)
 800746a:	1b64      	subs	r4, r4, r5
 800746c:	10a4      	asrs	r4, r4, #2
 800746e:	2600      	movs	r6, #0
 8007470:	42a6      	cmp	r6, r4
 8007472:	d109      	bne.n	8007488 <__libc_init_array+0x24>
 8007474:	4d0b      	ldr	r5, [pc, #44]	; (80074a4 <__libc_init_array+0x40>)
 8007476:	4c0c      	ldr	r4, [pc, #48]	; (80074a8 <__libc_init_array+0x44>)
 8007478:	f002 f89a 	bl	80095b0 <_init>
 800747c:	1b64      	subs	r4, r4, r5
 800747e:	10a4      	asrs	r4, r4, #2
 8007480:	2600      	movs	r6, #0
 8007482:	42a6      	cmp	r6, r4
 8007484:	d105      	bne.n	8007492 <__libc_init_array+0x2e>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	f855 3b04 	ldr.w	r3, [r5], #4
 800748c:	4798      	blx	r3
 800748e:	3601      	adds	r6, #1
 8007490:	e7ee      	b.n	8007470 <__libc_init_array+0xc>
 8007492:	f855 3b04 	ldr.w	r3, [r5], #4
 8007496:	4798      	blx	r3
 8007498:	3601      	adds	r6, #1
 800749a:	e7f2      	b.n	8007482 <__libc_init_array+0x1e>
 800749c:	080099b4 	.word	0x080099b4
 80074a0:	080099b4 	.word	0x080099b4
 80074a4:	080099b4 	.word	0x080099b4
 80074a8:	080099b8 	.word	0x080099b8

080074ac <__retarget_lock_init_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_acquire_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <__retarget_lock_release_recursive>:
 80074b0:	4770      	bx	lr

080074b2 <quorem>:
 80074b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b6:	6903      	ldr	r3, [r0, #16]
 80074b8:	690c      	ldr	r4, [r1, #16]
 80074ba:	42a3      	cmp	r3, r4
 80074bc:	4607      	mov	r7, r0
 80074be:	db7e      	blt.n	80075be <quorem+0x10c>
 80074c0:	3c01      	subs	r4, #1
 80074c2:	f101 0814 	add.w	r8, r1, #20
 80074c6:	f100 0514 	add.w	r5, r0, #20
 80074ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ce:	9301      	str	r3, [sp, #4]
 80074d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074d8:	3301      	adds	r3, #1
 80074da:	429a      	cmp	r2, r3
 80074dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074e8:	d331      	bcc.n	800754e <quorem+0x9c>
 80074ea:	f04f 0e00 	mov.w	lr, #0
 80074ee:	4640      	mov	r0, r8
 80074f0:	46ac      	mov	ip, r5
 80074f2:	46f2      	mov	sl, lr
 80074f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074f8:	b293      	uxth	r3, r2
 80074fa:	fb06 e303 	mla	r3, r6, r3, lr
 80074fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007502:	0c1a      	lsrs	r2, r3, #16
 8007504:	b29b      	uxth	r3, r3
 8007506:	ebaa 0303 	sub.w	r3, sl, r3
 800750a:	f8dc a000 	ldr.w	sl, [ip]
 800750e:	fa13 f38a 	uxtah	r3, r3, sl
 8007512:	fb06 220e 	mla	r2, r6, lr, r2
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	9b00      	ldr	r3, [sp, #0]
 800751a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800751e:	b292      	uxth	r2, r2
 8007520:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007528:	f8bd 3000 	ldrh.w	r3, [sp]
 800752c:	4581      	cmp	r9, r0
 800752e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007532:	f84c 3b04 	str.w	r3, [ip], #4
 8007536:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800753a:	d2db      	bcs.n	80074f4 <quorem+0x42>
 800753c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007540:	b92b      	cbnz	r3, 800754e <quorem+0x9c>
 8007542:	9b01      	ldr	r3, [sp, #4]
 8007544:	3b04      	subs	r3, #4
 8007546:	429d      	cmp	r5, r3
 8007548:	461a      	mov	r2, r3
 800754a:	d32c      	bcc.n	80075a6 <quorem+0xf4>
 800754c:	613c      	str	r4, [r7, #16]
 800754e:	4638      	mov	r0, r7
 8007550:	f001 fadc 	bl	8008b0c <__mcmp>
 8007554:	2800      	cmp	r0, #0
 8007556:	db22      	blt.n	800759e <quorem+0xec>
 8007558:	3601      	adds	r6, #1
 800755a:	4629      	mov	r1, r5
 800755c:	2000      	movs	r0, #0
 800755e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007562:	f8d1 c000 	ldr.w	ip, [r1]
 8007566:	b293      	uxth	r3, r2
 8007568:	1ac3      	subs	r3, r0, r3
 800756a:	0c12      	lsrs	r2, r2, #16
 800756c:	fa13 f38c 	uxtah	r3, r3, ip
 8007570:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800757e:	45c1      	cmp	r9, r8
 8007580:	f841 3b04 	str.w	r3, [r1], #4
 8007584:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007588:	d2e9      	bcs.n	800755e <quorem+0xac>
 800758a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800758e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007592:	b922      	cbnz	r2, 800759e <quorem+0xec>
 8007594:	3b04      	subs	r3, #4
 8007596:	429d      	cmp	r5, r3
 8007598:	461a      	mov	r2, r3
 800759a:	d30a      	bcc.n	80075b2 <quorem+0x100>
 800759c:	613c      	str	r4, [r7, #16]
 800759e:	4630      	mov	r0, r6
 80075a0:	b003      	add	sp, #12
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	6812      	ldr	r2, [r2, #0]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	d1ce      	bne.n	800754c <quorem+0x9a>
 80075ae:	3c01      	subs	r4, #1
 80075b0:	e7c9      	b.n	8007546 <quorem+0x94>
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	3b04      	subs	r3, #4
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d1f0      	bne.n	800759c <quorem+0xea>
 80075ba:	3c01      	subs	r4, #1
 80075bc:	e7eb      	b.n	8007596 <quorem+0xe4>
 80075be:	2000      	movs	r0, #0
 80075c0:	e7ee      	b.n	80075a0 <quorem+0xee>
 80075c2:	0000      	movs	r0, r0
 80075c4:	0000      	movs	r0, r0
	...

080075c8 <_dtoa_r>:
 80075c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075cc:	ed2d 8b02 	vpush	{d8}
 80075d0:	69c5      	ldr	r5, [r0, #28]
 80075d2:	b091      	sub	sp, #68	; 0x44
 80075d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075d8:	ec59 8b10 	vmov	r8, r9, d0
 80075dc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80075de:	9106      	str	r1, [sp, #24]
 80075e0:	4606      	mov	r6, r0
 80075e2:	9208      	str	r2, [sp, #32]
 80075e4:	930c      	str	r3, [sp, #48]	; 0x30
 80075e6:	b975      	cbnz	r5, 8007606 <_dtoa_r+0x3e>
 80075e8:	2010      	movs	r0, #16
 80075ea:	f000 feb1 	bl	8008350 <malloc>
 80075ee:	4602      	mov	r2, r0
 80075f0:	61f0      	str	r0, [r6, #28]
 80075f2:	b920      	cbnz	r0, 80075fe <_dtoa_r+0x36>
 80075f4:	4ba6      	ldr	r3, [pc, #664]	; (8007890 <_dtoa_r+0x2c8>)
 80075f6:	21ef      	movs	r1, #239	; 0xef
 80075f8:	48a6      	ldr	r0, [pc, #664]	; (8007894 <_dtoa_r+0x2cc>)
 80075fa:	f001 fc77 	bl	8008eec <__assert_func>
 80075fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007602:	6005      	str	r5, [r0, #0]
 8007604:	60c5      	str	r5, [r0, #12]
 8007606:	69f3      	ldr	r3, [r6, #28]
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	b151      	cbz	r1, 8007622 <_dtoa_r+0x5a>
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	604a      	str	r2, [r1, #4]
 8007610:	2301      	movs	r3, #1
 8007612:	4093      	lsls	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	4630      	mov	r0, r6
 8007618:	f001 f83c 	bl	8008694 <_Bfree>
 800761c:	69f3      	ldr	r3, [r6, #28]
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f1b9 0300 	subs.w	r3, r9, #0
 8007626:	bfbb      	ittet	lt
 8007628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800762c:	9303      	strlt	r3, [sp, #12]
 800762e:	2300      	movge	r3, #0
 8007630:	2201      	movlt	r2, #1
 8007632:	bfac      	ite	ge
 8007634:	6023      	strge	r3, [r4, #0]
 8007636:	6022      	strlt	r2, [r4, #0]
 8007638:	4b97      	ldr	r3, [pc, #604]	; (8007898 <_dtoa_r+0x2d0>)
 800763a:	9c03      	ldr	r4, [sp, #12]
 800763c:	43a3      	bics	r3, r4
 800763e:	d11c      	bne.n	800767a <_dtoa_r+0xb2>
 8007640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007642:	f242 730f 	movw	r3, #9999	; 0x270f
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800764c:	ea53 0308 	orrs.w	r3, r3, r8
 8007650:	f000 84fb 	beq.w	800804a <_dtoa_r+0xa82>
 8007654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007656:	b963      	cbnz	r3, 8007672 <_dtoa_r+0xaa>
 8007658:	4b90      	ldr	r3, [pc, #576]	; (800789c <_dtoa_r+0x2d4>)
 800765a:	e020      	b.n	800769e <_dtoa_r+0xd6>
 800765c:	4b90      	ldr	r3, [pc, #576]	; (80078a0 <_dtoa_r+0x2d8>)
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	3308      	adds	r3, #8
 8007662:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	9801      	ldr	r0, [sp, #4]
 8007668:	b011      	add	sp, #68	; 0x44
 800766a:	ecbd 8b02 	vpop	{d8}
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007672:	4b8a      	ldr	r3, [pc, #552]	; (800789c <_dtoa_r+0x2d4>)
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	3303      	adds	r3, #3
 8007678:	e7f3      	b.n	8007662 <_dtoa_r+0x9a>
 800767a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800767e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007686:	d10c      	bne.n	80076a2 <_dtoa_r+0xda>
 8007688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800768a:	2301      	movs	r3, #1
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 84d7 	beq.w	8008044 <_dtoa_r+0xa7c>
 8007696:	4b83      	ldr	r3, [pc, #524]	; (80078a4 <_dtoa_r+0x2dc>)
 8007698:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	e7e1      	b.n	8007666 <_dtoa_r+0x9e>
 80076a2:	aa0e      	add	r2, sp, #56	; 0x38
 80076a4:	a90f      	add	r1, sp, #60	; 0x3c
 80076a6:	4630      	mov	r0, r6
 80076a8:	eeb0 0b48 	vmov.f64	d0, d8
 80076ac:	f001 fad4 	bl	8008c58 <__d2b>
 80076b0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80076b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b6:	4605      	mov	r5, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d046      	beq.n	800774a <_dtoa_r+0x182>
 80076bc:	eeb0 7b48 	vmov.f64	d7, d8
 80076c0:	ee18 1a90 	vmov	r1, s17
 80076c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80076c8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80076cc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80076d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80076d4:	2000      	movs	r0, #0
 80076d6:	ee07 1a90 	vmov	s15, r1
 80076da:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80076de:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007878 <_dtoa_r+0x2b0>
 80076e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80076e6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007880 <_dtoa_r+0x2b8>
 80076ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80076ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007888 <_dtoa_r+0x2c0>
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80076fa:	eeb0 7b46 	vmov.f64	d7, d6
 80076fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007702:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007706:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	ee16 ba90 	vmov	fp, s13
 8007712:	9009      	str	r0, [sp, #36]	; 0x24
 8007714:	d508      	bpl.n	8007728 <_dtoa_r+0x160>
 8007716:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800771a:	eeb4 6b47 	vcmp.f64	d6, d7
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	bf18      	it	ne
 8007724:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8007728:	f1bb 0f16 	cmp.w	fp, #22
 800772c:	d82b      	bhi.n	8007786 <_dtoa_r+0x1be>
 800772e:	495e      	ldr	r1, [pc, #376]	; (80078a8 <_dtoa_r+0x2e0>)
 8007730:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007734:	ed91 7b00 	vldr	d7, [r1]
 8007738:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	d501      	bpl.n	8007746 <_dtoa_r+0x17e>
 8007742:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007746:	2100      	movs	r1, #0
 8007748:	e01e      	b.n	8007788 <_dtoa_r+0x1c0>
 800774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774c:	4413      	add	r3, r2
 800774e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007752:	2920      	cmp	r1, #32
 8007754:	bfc1      	itttt	gt
 8007756:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800775a:	408c      	lslgt	r4, r1
 800775c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007760:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007764:	bfd6      	itet	le
 8007766:	f1c1 0120 	rsble	r1, r1, #32
 800776a:	4321      	orrgt	r1, r4
 800776c:	fa08 f101 	lslle.w	r1, r8, r1
 8007770:	ee07 1a90 	vmov	s15, r1
 8007774:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007778:	3b01      	subs	r3, #1
 800777a:	ee17 1a90 	vmov	r1, s15
 800777e:	2001      	movs	r0, #1
 8007780:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007784:	e7a7      	b.n	80076d6 <_dtoa_r+0x10e>
 8007786:	2101      	movs	r1, #1
 8007788:	1ad2      	subs	r2, r2, r3
 800778a:	1e53      	subs	r3, r2, #1
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	bf45      	ittet	mi
 8007790:	f1c2 0301 	rsbmi	r3, r2, #1
 8007794:	9304      	strmi	r3, [sp, #16]
 8007796:	2300      	movpl	r3, #0
 8007798:	2300      	movmi	r3, #0
 800779a:	bf4c      	ite	mi
 800779c:	9305      	strmi	r3, [sp, #20]
 800779e:	9304      	strpl	r3, [sp, #16]
 80077a0:	f1bb 0f00 	cmp.w	fp, #0
 80077a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80077a6:	db18      	blt.n	80077da <_dtoa_r+0x212>
 80077a8:	9b05      	ldr	r3, [sp, #20]
 80077aa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80077ae:	445b      	add	r3, fp
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	2300      	movs	r3, #0
 80077b4:	9a06      	ldr	r2, [sp, #24]
 80077b6:	2a09      	cmp	r2, #9
 80077b8:	d848      	bhi.n	800784c <_dtoa_r+0x284>
 80077ba:	2a05      	cmp	r2, #5
 80077bc:	bfc4      	itt	gt
 80077be:	3a04      	subgt	r2, #4
 80077c0:	9206      	strgt	r2, [sp, #24]
 80077c2:	9a06      	ldr	r2, [sp, #24]
 80077c4:	f1a2 0202 	sub.w	r2, r2, #2
 80077c8:	bfcc      	ite	gt
 80077ca:	2400      	movgt	r4, #0
 80077cc:	2401      	movle	r4, #1
 80077ce:	2a03      	cmp	r2, #3
 80077d0:	d847      	bhi.n	8007862 <_dtoa_r+0x29a>
 80077d2:	e8df f002 	tbb	[pc, r2]
 80077d6:	2d0b      	.short	0x2d0b
 80077d8:	392b      	.short	0x392b
 80077da:	9b04      	ldr	r3, [sp, #16]
 80077dc:	2200      	movs	r2, #0
 80077de:	eba3 030b 	sub.w	r3, r3, fp
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	920a      	str	r2, [sp, #40]	; 0x28
 80077e6:	f1cb 0300 	rsb	r3, fp, #0
 80077ea:	e7e3      	b.n	80077b4 <_dtoa_r+0x1ec>
 80077ec:	2200      	movs	r2, #0
 80077ee:	9207      	str	r2, [sp, #28]
 80077f0:	9a08      	ldr	r2, [sp, #32]
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	dc38      	bgt.n	8007868 <_dtoa_r+0x2a0>
 80077f6:	f04f 0a01 	mov.w	sl, #1
 80077fa:	46d1      	mov	r9, sl
 80077fc:	4652      	mov	r2, sl
 80077fe:	f8cd a020 	str.w	sl, [sp, #32]
 8007802:	69f7      	ldr	r7, [r6, #28]
 8007804:	2100      	movs	r1, #0
 8007806:	2004      	movs	r0, #4
 8007808:	f100 0c14 	add.w	ip, r0, #20
 800780c:	4594      	cmp	ip, r2
 800780e:	d930      	bls.n	8007872 <_dtoa_r+0x2aa>
 8007810:	6079      	str	r1, [r7, #4]
 8007812:	4630      	mov	r0, r6
 8007814:	930d      	str	r3, [sp, #52]	; 0x34
 8007816:	f000 fefd 	bl	8008614 <_Balloc>
 800781a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800781c:	9001      	str	r0, [sp, #4]
 800781e:	4602      	mov	r2, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	d145      	bne.n	80078b0 <_dtoa_r+0x2e8>
 8007824:	4b21      	ldr	r3, [pc, #132]	; (80078ac <_dtoa_r+0x2e4>)
 8007826:	f240 11af 	movw	r1, #431	; 0x1af
 800782a:	e6e5      	b.n	80075f8 <_dtoa_r+0x30>
 800782c:	2201      	movs	r2, #1
 800782e:	e7de      	b.n	80077ee <_dtoa_r+0x226>
 8007830:	2200      	movs	r2, #0
 8007832:	9207      	str	r2, [sp, #28]
 8007834:	9a08      	ldr	r2, [sp, #32]
 8007836:	eb0b 0a02 	add.w	sl, fp, r2
 800783a:	f10a 0901 	add.w	r9, sl, #1
 800783e:	464a      	mov	r2, r9
 8007840:	2a01      	cmp	r2, #1
 8007842:	bfb8      	it	lt
 8007844:	2201      	movlt	r2, #1
 8007846:	e7dc      	b.n	8007802 <_dtoa_r+0x23a>
 8007848:	2201      	movs	r2, #1
 800784a:	e7f2      	b.n	8007832 <_dtoa_r+0x26a>
 800784c:	2401      	movs	r4, #1
 800784e:	2200      	movs	r2, #0
 8007850:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007854:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007858:	2100      	movs	r1, #0
 800785a:	46d1      	mov	r9, sl
 800785c:	2212      	movs	r2, #18
 800785e:	9108      	str	r1, [sp, #32]
 8007860:	e7cf      	b.n	8007802 <_dtoa_r+0x23a>
 8007862:	2201      	movs	r2, #1
 8007864:	9207      	str	r2, [sp, #28]
 8007866:	e7f5      	b.n	8007854 <_dtoa_r+0x28c>
 8007868:	f8dd a020 	ldr.w	sl, [sp, #32]
 800786c:	46d1      	mov	r9, sl
 800786e:	4652      	mov	r2, sl
 8007870:	e7c7      	b.n	8007802 <_dtoa_r+0x23a>
 8007872:	3101      	adds	r1, #1
 8007874:	0040      	lsls	r0, r0, #1
 8007876:	e7c7      	b.n	8007808 <_dtoa_r+0x240>
 8007878:	636f4361 	.word	0x636f4361
 800787c:	3fd287a7 	.word	0x3fd287a7
 8007880:	8b60c8b3 	.word	0x8b60c8b3
 8007884:	3fc68a28 	.word	0x3fc68a28
 8007888:	509f79fb 	.word	0x509f79fb
 800788c:	3fd34413 	.word	0x3fd34413
 8007890:	08009679 	.word	0x08009679
 8007894:	08009690 	.word	0x08009690
 8007898:	7ff00000 	.word	0x7ff00000
 800789c:	08009675 	.word	0x08009675
 80078a0:	0800966c 	.word	0x0800966c
 80078a4:	08009649 	.word	0x08009649
 80078a8:	08009790 	.word	0x08009790
 80078ac:	080096e8 	.word	0x080096e8
 80078b0:	69f2      	ldr	r2, [r6, #28]
 80078b2:	9901      	ldr	r1, [sp, #4]
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	f1b9 0f0e 	cmp.w	r9, #14
 80078ba:	d86c      	bhi.n	8007996 <_dtoa_r+0x3ce>
 80078bc:	2c00      	cmp	r4, #0
 80078be:	d06a      	beq.n	8007996 <_dtoa_r+0x3ce>
 80078c0:	f1bb 0f00 	cmp.w	fp, #0
 80078c4:	f340 80a0 	ble.w	8007a08 <_dtoa_r+0x440>
 80078c8:	4ac1      	ldr	r2, [pc, #772]	; (8007bd0 <_dtoa_r+0x608>)
 80078ca:	f00b 010f 	and.w	r1, fp, #15
 80078ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80078d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078d6:	ed92 7b00 	vldr	d7, [r2]
 80078da:	ea4f 122b 	mov.w	r2, fp, asr #4
 80078de:	f000 8087 	beq.w	80079f0 <_dtoa_r+0x428>
 80078e2:	49bc      	ldr	r1, [pc, #752]	; (8007bd4 <_dtoa_r+0x60c>)
 80078e4:	ed91 6b08 	vldr	d6, [r1, #32]
 80078e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80078ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80078f0:	f002 020f 	and.w	r2, r2, #15
 80078f4:	2103      	movs	r1, #3
 80078f6:	48b7      	ldr	r0, [pc, #732]	; (8007bd4 <_dtoa_r+0x60c>)
 80078f8:	2a00      	cmp	r2, #0
 80078fa:	d17b      	bne.n	80079f4 <_dtoa_r+0x42c>
 80078fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007900:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800790a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800790e:	2a00      	cmp	r2, #0
 8007910:	f000 80a0 	beq.w	8007a54 <_dtoa_r+0x48c>
 8007914:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007918:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	f140 8098 	bpl.w	8007a54 <_dtoa_r+0x48c>
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	f000 8094 	beq.w	8007a54 <_dtoa_r+0x48c>
 800792c:	f1ba 0f00 	cmp.w	sl, #0
 8007930:	dd2f      	ble.n	8007992 <_dtoa_r+0x3ca>
 8007932:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800793a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800793e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007942:	3101      	adds	r1, #1
 8007944:	4654      	mov	r4, sl
 8007946:	ed9d 6b02 	vldr	d6, [sp, #8]
 800794a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800794e:	ee07 1a90 	vmov	s15, r1
 8007952:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007956:	eea7 5b06 	vfma.f64	d5, d7, d6
 800795a:	ee15 7a90 	vmov	r7, s11
 800795e:	ec51 0b15 	vmov	r0, r1, d5
 8007962:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007966:	2c00      	cmp	r4, #0
 8007968:	d177      	bne.n	8007a5a <_dtoa_r+0x492>
 800796a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800796e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007972:	ec41 0b17 	vmov	d7, r0, r1
 8007976:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	f300 826a 	bgt.w	8007e56 <_dtoa_r+0x88e>
 8007982:	eeb1 7b47 	vneg.f64	d7, d7
 8007986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800798e:	f100 8260 	bmi.w	8007e52 <_dtoa_r+0x88a>
 8007992:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007998:	2a00      	cmp	r2, #0
 800799a:	f2c0 811d 	blt.w	8007bd8 <_dtoa_r+0x610>
 800799e:	f1bb 0f0e 	cmp.w	fp, #14
 80079a2:	f300 8119 	bgt.w	8007bd8 <_dtoa_r+0x610>
 80079a6:	4b8a      	ldr	r3, [pc, #552]	; (8007bd0 <_dtoa_r+0x608>)
 80079a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80079ac:	ed93 6b00 	vldr	d6, [r3]
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f280 80b7 	bge.w	8007b26 <_dtoa_r+0x55e>
 80079b8:	f1b9 0f00 	cmp.w	r9, #0
 80079bc:	f300 80b3 	bgt.w	8007b26 <_dtoa_r+0x55e>
 80079c0:	f040 8246 	bne.w	8007e50 <_dtoa_r+0x888>
 80079c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80079c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80079cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079d8:	464c      	mov	r4, r9
 80079da:	464f      	mov	r7, r9
 80079dc:	f280 821c 	bge.w	8007e18 <_dtoa_r+0x850>
 80079e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079e4:	2331      	movs	r3, #49	; 0x31
 80079e6:	f808 3b01 	strb.w	r3, [r8], #1
 80079ea:	f10b 0b01 	add.w	fp, fp, #1
 80079ee:	e218      	b.n	8007e22 <_dtoa_r+0x85a>
 80079f0:	2102      	movs	r1, #2
 80079f2:	e780      	b.n	80078f6 <_dtoa_r+0x32e>
 80079f4:	07d4      	lsls	r4, r2, #31
 80079f6:	d504      	bpl.n	8007a02 <_dtoa_r+0x43a>
 80079f8:	ed90 6b00 	vldr	d6, [r0]
 80079fc:	3101      	adds	r1, #1
 80079fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a02:	1052      	asrs	r2, r2, #1
 8007a04:	3008      	adds	r0, #8
 8007a06:	e777      	b.n	80078f8 <_dtoa_r+0x330>
 8007a08:	d022      	beq.n	8007a50 <_dtoa_r+0x488>
 8007a0a:	f1cb 0200 	rsb	r2, fp, #0
 8007a0e:	4970      	ldr	r1, [pc, #448]	; (8007bd0 <_dtoa_r+0x608>)
 8007a10:	f002 000f 	and.w	r0, r2, #15
 8007a14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007a18:	ed91 7b00 	vldr	d7, [r1]
 8007a1c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007a20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a24:	486b      	ldr	r0, [pc, #428]	; (8007bd4 <_dtoa_r+0x60c>)
 8007a26:	1112      	asrs	r2, r2, #4
 8007a28:	2400      	movs	r4, #0
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	b92a      	cbnz	r2, 8007a3a <_dtoa_r+0x472>
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	f43f af6a 	beq.w	8007908 <_dtoa_r+0x340>
 8007a34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a38:	e766      	b.n	8007908 <_dtoa_r+0x340>
 8007a3a:	07d7      	lsls	r7, r2, #31
 8007a3c:	d505      	bpl.n	8007a4a <_dtoa_r+0x482>
 8007a3e:	ed90 6b00 	vldr	d6, [r0]
 8007a42:	3101      	adds	r1, #1
 8007a44:	2401      	movs	r4, #1
 8007a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a4a:	1052      	asrs	r2, r2, #1
 8007a4c:	3008      	adds	r0, #8
 8007a4e:	e7ed      	b.n	8007a2c <_dtoa_r+0x464>
 8007a50:	2102      	movs	r1, #2
 8007a52:	e759      	b.n	8007908 <_dtoa_r+0x340>
 8007a54:	465a      	mov	r2, fp
 8007a56:	464c      	mov	r4, r9
 8007a58:	e775      	b.n	8007946 <_dtoa_r+0x37e>
 8007a5a:	ec41 0b17 	vmov	d7, r0, r1
 8007a5e:	495c      	ldr	r1, [pc, #368]	; (8007bd0 <_dtoa_r+0x608>)
 8007a60:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007a64:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007a68:	9901      	ldr	r1, [sp, #4]
 8007a6a:	440c      	add	r4, r1
 8007a6c:	9907      	ldr	r1, [sp, #28]
 8007a6e:	b351      	cbz	r1, 8007ac6 <_dtoa_r+0x4fe>
 8007a70:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007a74:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007a78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a7c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007a80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007a84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a8c:	ee14 1a90 	vmov	r1, s9
 8007a90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a94:	3130      	adds	r1, #48	; 0x30
 8007a96:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa2:	f808 1b01 	strb.w	r1, [r8], #1
 8007aa6:	d439      	bmi.n	8007b1c <_dtoa_r+0x554>
 8007aa8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007aac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab4:	d472      	bmi.n	8007b9c <_dtoa_r+0x5d4>
 8007ab6:	45a0      	cmp	r8, r4
 8007ab8:	f43f af6b 	beq.w	8007992 <_dtoa_r+0x3ca>
 8007abc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007ac0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007ac4:	e7e0      	b.n	8007a88 <_dtoa_r+0x4c0>
 8007ac6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007aca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ace:	4620      	mov	r0, r4
 8007ad0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007ad4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ad8:	ee14 1a90 	vmov	r1, s9
 8007adc:	3130      	adds	r1, #48	; 0x30
 8007ade:	f808 1b01 	strb.w	r1, [r8], #1
 8007ae2:	45a0      	cmp	r8, r4
 8007ae4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007ae8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007aec:	d118      	bne.n	8007b20 <_dtoa_r+0x558>
 8007aee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007af2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007af6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afe:	dc4d      	bgt.n	8007b9c <_dtoa_r+0x5d4>
 8007b00:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007b04:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0c:	f57f af41 	bpl.w	8007992 <_dtoa_r+0x3ca>
 8007b10:	4680      	mov	r8, r0
 8007b12:	3801      	subs	r0, #1
 8007b14:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007b18:	2b30      	cmp	r3, #48	; 0x30
 8007b1a:	d0f9      	beq.n	8007b10 <_dtoa_r+0x548>
 8007b1c:	4693      	mov	fp, r2
 8007b1e:	e02a      	b.n	8007b76 <_dtoa_r+0x5ae>
 8007b20:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007b24:	e7d6      	b.n	8007ad4 <_dtoa_r+0x50c>
 8007b26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b2a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8007b2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007b32:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007b36:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007b3a:	ee15 3a10 	vmov	r3, s10
 8007b3e:	3330      	adds	r3, #48	; 0x30
 8007b40:	f808 3b01 	strb.w	r3, [r8], #1
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	eba8 0303 	sub.w	r3, r8, r3
 8007b4a:	4599      	cmp	r9, r3
 8007b4c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007b50:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007b54:	d133      	bne.n	8007bbe <_dtoa_r+0x5f6>
 8007b56:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007b5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b62:	dc1a      	bgt.n	8007b9a <_dtoa_r+0x5d2>
 8007b64:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6c:	d103      	bne.n	8007b76 <_dtoa_r+0x5ae>
 8007b6e:	ee15 3a10 	vmov	r3, s10
 8007b72:	07d9      	lsls	r1, r3, #31
 8007b74:	d411      	bmi.n	8007b9a <_dtoa_r+0x5d2>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 fd8b 	bl	8008694 <_Bfree>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b82:	f888 3000 	strb.w	r3, [r8]
 8007b86:	f10b 0301 	add.w	r3, fp, #1
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f43f ad69 	beq.w	8007666 <_dtoa_r+0x9e>
 8007b94:	f8c3 8000 	str.w	r8, [r3]
 8007b98:	e565      	b.n	8007666 <_dtoa_r+0x9e>
 8007b9a:	465a      	mov	r2, fp
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	4698      	mov	r8, r3
 8007ba0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007ba4:	2939      	cmp	r1, #57	; 0x39
 8007ba6:	d106      	bne.n	8007bb6 <_dtoa_r+0x5ee>
 8007ba8:	9901      	ldr	r1, [sp, #4]
 8007baa:	4299      	cmp	r1, r3
 8007bac:	d1f7      	bne.n	8007b9e <_dtoa_r+0x5d6>
 8007bae:	9801      	ldr	r0, [sp, #4]
 8007bb0:	2130      	movs	r1, #48	; 0x30
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	7001      	strb	r1, [r0, #0]
 8007bb6:	7819      	ldrb	r1, [r3, #0]
 8007bb8:	3101      	adds	r1, #1
 8007bba:	7019      	strb	r1, [r3, #0]
 8007bbc:	e7ae      	b.n	8007b1c <_dtoa_r+0x554>
 8007bbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bca:	d1b2      	bne.n	8007b32 <_dtoa_r+0x56a>
 8007bcc:	e7d3      	b.n	8007b76 <_dtoa_r+0x5ae>
 8007bce:	bf00      	nop
 8007bd0:	08009790 	.word	0x08009790
 8007bd4:	08009768 	.word	0x08009768
 8007bd8:	9907      	ldr	r1, [sp, #28]
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	f000 80d0 	beq.w	8007d80 <_dtoa_r+0x7b8>
 8007be0:	9906      	ldr	r1, [sp, #24]
 8007be2:	2901      	cmp	r1, #1
 8007be4:	f300 80b4 	bgt.w	8007d50 <_dtoa_r+0x788>
 8007be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bea:	2900      	cmp	r1, #0
 8007bec:	f000 80ac 	beq.w	8007d48 <_dtoa_r+0x780>
 8007bf0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bf4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007bf8:	461c      	mov	r4, r3
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	9b04      	ldr	r3, [sp, #16]
 8007bfe:	4413      	add	r3, r2
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	2101      	movs	r1, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	4630      	mov	r0, r6
 8007c0a:	9305      	str	r3, [sp, #20]
 8007c0c:	f000 fdf8 	bl	8008800 <__i2b>
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	4607      	mov	r7, r0
 8007c14:	f1b8 0f00 	cmp.w	r8, #0
 8007c18:	d00d      	beq.n	8007c36 <_dtoa_r+0x66e>
 8007c1a:	9a05      	ldr	r2, [sp, #20]
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	dd0a      	ble.n	8007c36 <_dtoa_r+0x66e>
 8007c20:	4542      	cmp	r2, r8
 8007c22:	9904      	ldr	r1, [sp, #16]
 8007c24:	bfa8      	it	ge
 8007c26:	4642      	movge	r2, r8
 8007c28:	1a89      	subs	r1, r1, r2
 8007c2a:	9104      	str	r1, [sp, #16]
 8007c2c:	9905      	ldr	r1, [sp, #20]
 8007c2e:	eba8 0802 	sub.w	r8, r8, r2
 8007c32:	1a8a      	subs	r2, r1, r2
 8007c34:	9205      	str	r2, [sp, #20]
 8007c36:	b303      	cbz	r3, 8007c7a <_dtoa_r+0x6b2>
 8007c38:	9a07      	ldr	r2, [sp, #28]
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	f000 80a5 	beq.w	8007d8a <_dtoa_r+0x7c2>
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	dd13      	ble.n	8007c6c <_dtoa_r+0x6a4>
 8007c44:	4639      	mov	r1, r7
 8007c46:	4622      	mov	r2, r4
 8007c48:	4630      	mov	r0, r6
 8007c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c4c:	f000 fe98 	bl	8008980 <__pow5mult>
 8007c50:	462a      	mov	r2, r5
 8007c52:	4601      	mov	r1, r0
 8007c54:	4607      	mov	r7, r0
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 fde8 	bl	800882c <__multiply>
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 fd17 	bl	8008694 <_Bfree>
 8007c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c6a:	4615      	mov	r5, r2
 8007c6c:	1b1a      	subs	r2, r3, r4
 8007c6e:	d004      	beq.n	8007c7a <_dtoa_r+0x6b2>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4630      	mov	r0, r6
 8007c74:	f000 fe84 	bl	8008980 <__pow5mult>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f000 fdbf 	bl	8008800 <__i2b>
 8007c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	f340 8081 	ble.w	8007d8e <_dtoa_r+0x7c6>
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 fe75 	bl	8008980 <__pow5mult>
 8007c96:	9b06      	ldr	r3, [sp, #24]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	dd7a      	ble.n	8007d94 <_dtoa_r+0x7cc>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca2:	6922      	ldr	r2, [r4, #16]
 8007ca4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007ca8:	6910      	ldr	r0, [r2, #16]
 8007caa:	f000 fd5b 	bl	8008764 <__hi0bits>
 8007cae:	f1c0 0020 	rsb	r0, r0, #32
 8007cb2:	9b05      	ldr	r3, [sp, #20]
 8007cb4:	4418      	add	r0, r3
 8007cb6:	f010 001f 	ands.w	r0, r0, #31
 8007cba:	f000 8093 	beq.w	8007de4 <_dtoa_r+0x81c>
 8007cbe:	f1c0 0220 	rsb	r2, r0, #32
 8007cc2:	2a04      	cmp	r2, #4
 8007cc4:	f340 8085 	ble.w	8007dd2 <_dtoa_r+0x80a>
 8007cc8:	9b04      	ldr	r3, [sp, #16]
 8007cca:	f1c0 001c 	rsb	r0, r0, #28
 8007cce:	4403      	add	r3, r0
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	4480      	add	r8, r0
 8007cd6:	4403      	add	r3, r0
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dd05      	ble.n	8007cec <_dtoa_r+0x724>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f000 fea5 	bl	8008a34 <__lshift>
 8007cea:	4605      	mov	r5, r0
 8007cec:	9b05      	ldr	r3, [sp, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dd05      	ble.n	8007cfe <_dtoa_r+0x736>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 fe9c 	bl	8008a34 <__lshift>
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d071      	beq.n	8007de8 <_dtoa_r+0x820>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 ff00 	bl	8008b0c <__mcmp>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	da6b      	bge.n	8007de8 <_dtoa_r+0x820>
 8007d10:	2300      	movs	r3, #0
 8007d12:	4629      	mov	r1, r5
 8007d14:	220a      	movs	r2, #10
 8007d16:	4630      	mov	r0, r6
 8007d18:	f000 fcde 	bl	80086d8 <__multadd>
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007d22:	4605      	mov	r5, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8197 	beq.w	8008058 <_dtoa_r+0xa90>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	220a      	movs	r2, #10
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 fcd1 	bl	80086d8 <__multadd>
 8007d36:	f1ba 0f00 	cmp.w	sl, #0
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	f300 8093 	bgt.w	8007e66 <_dtoa_r+0x89e>
 8007d40:	9b06      	ldr	r3, [sp, #24]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	dc57      	bgt.n	8007df6 <_dtoa_r+0x82e>
 8007d46:	e08e      	b.n	8007e66 <_dtoa_r+0x89e>
 8007d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d4e:	e751      	b.n	8007bf4 <_dtoa_r+0x62c>
 8007d50:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	bfbf      	itttt	lt
 8007d58:	1ae2      	sublt	r2, r4, r3
 8007d5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d5c:	189b      	addlt	r3, r3, r2
 8007d5e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d60:	bfae      	itee	ge
 8007d62:	1b1c      	subge	r4, r3, r4
 8007d64:	4623      	movlt	r3, r4
 8007d66:	2400      	movlt	r4, #0
 8007d68:	f1b9 0f00 	cmp.w	r9, #0
 8007d6c:	bfb5      	itete	lt
 8007d6e:	9a04      	ldrlt	r2, [sp, #16]
 8007d70:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8007d74:	eba2 0809 	sublt.w	r8, r2, r9
 8007d78:	464a      	movge	r2, r9
 8007d7a:	bfb8      	it	lt
 8007d7c:	2200      	movlt	r2, #0
 8007d7e:	e73c      	b.n	8007bfa <_dtoa_r+0x632>
 8007d80:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007d84:	9f07      	ldr	r7, [sp, #28]
 8007d86:	461c      	mov	r4, r3
 8007d88:	e744      	b.n	8007c14 <_dtoa_r+0x64c>
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	e770      	b.n	8007c70 <_dtoa_r+0x6a8>
 8007d8e:	9b06      	ldr	r3, [sp, #24]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	dc18      	bgt.n	8007dc6 <_dtoa_r+0x7fe>
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	b9b3      	cbnz	r3, 8007dc6 <_dtoa_r+0x7fe>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007d9e:	b9a2      	cbnz	r2, 8007dca <_dtoa_r+0x802>
 8007da0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007da4:	0d12      	lsrs	r2, r2, #20
 8007da6:	0512      	lsls	r2, r2, #20
 8007da8:	b18a      	cbz	r2, 8007dce <_dtoa_r+0x806>
 8007daa:	9b04      	ldr	r3, [sp, #16]
 8007dac:	3301      	adds	r3, #1
 8007dae:	9304      	str	r3, [sp, #16]
 8007db0:	9b05      	ldr	r3, [sp, #20]
 8007db2:	3301      	adds	r3, #1
 8007db4:	9305      	str	r3, [sp, #20]
 8007db6:	2301      	movs	r3, #1
 8007db8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f af70 	bne.w	8007ca2 <_dtoa_r+0x6da>
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e775      	b.n	8007cb2 <_dtoa_r+0x6ea>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e7f6      	b.n	8007db8 <_dtoa_r+0x7f0>
 8007dca:	9b02      	ldr	r3, [sp, #8]
 8007dcc:	e7f4      	b.n	8007db8 <_dtoa_r+0x7f0>
 8007dce:	9209      	str	r2, [sp, #36]	; 0x24
 8007dd0:	e7f3      	b.n	8007dba <_dtoa_r+0x7f2>
 8007dd2:	d082      	beq.n	8007cda <_dtoa_r+0x712>
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	321c      	adds	r2, #28
 8007dd8:	4413      	add	r3, r2
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	4490      	add	r8, r2
 8007de0:	4413      	add	r3, r2
 8007de2:	e779      	b.n	8007cd8 <_dtoa_r+0x710>
 8007de4:	4602      	mov	r2, r0
 8007de6:	e7f5      	b.n	8007dd4 <_dtoa_r+0x80c>
 8007de8:	f1b9 0f00 	cmp.w	r9, #0
 8007dec:	dc36      	bgt.n	8007e5c <_dtoa_r+0x894>
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	dd33      	ble.n	8007e5c <_dtoa_r+0x894>
 8007df4:	46ca      	mov	sl, r9
 8007df6:	f1ba 0f00 	cmp.w	sl, #0
 8007dfa:	d10d      	bne.n	8007e18 <_dtoa_r+0x850>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4653      	mov	r3, sl
 8007e00:	2205      	movs	r2, #5
 8007e02:	4630      	mov	r0, r6
 8007e04:	f000 fc68 	bl	80086d8 <__multadd>
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f000 fe7d 	bl	8008b0c <__mcmp>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f73f ade4 	bgt.w	80079e0 <_dtoa_r+0x418>
 8007e18:	9b08      	ldr	r3, [sp, #32]
 8007e1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e1e:	ea6f 0b03 	mvn.w	fp, r3
 8007e22:	f04f 0900 	mov.w	r9, #0
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 fc33 	bl	8008694 <_Bfree>
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	f43f aea1 	beq.w	8007b76 <_dtoa_r+0x5ae>
 8007e34:	f1b9 0f00 	cmp.w	r9, #0
 8007e38:	d005      	beq.n	8007e46 <_dtoa_r+0x87e>
 8007e3a:	45b9      	cmp	r9, r7
 8007e3c:	d003      	beq.n	8007e46 <_dtoa_r+0x87e>
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 fc27 	bl	8008694 <_Bfree>
 8007e46:	4639      	mov	r1, r7
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 fc23 	bl	8008694 <_Bfree>
 8007e4e:	e692      	b.n	8007b76 <_dtoa_r+0x5ae>
 8007e50:	2400      	movs	r4, #0
 8007e52:	4627      	mov	r7, r4
 8007e54:	e7e0      	b.n	8007e18 <_dtoa_r+0x850>
 8007e56:	4693      	mov	fp, r2
 8007e58:	4627      	mov	r7, r4
 8007e5a:	e5c1      	b.n	80079e0 <_dtoa_r+0x418>
 8007e5c:	9b07      	ldr	r3, [sp, #28]
 8007e5e:	46ca      	mov	sl, r9
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 8100 	beq.w	8008066 <_dtoa_r+0xa9e>
 8007e66:	f1b8 0f00 	cmp.w	r8, #0
 8007e6a:	dd05      	ble.n	8007e78 <_dtoa_r+0x8b0>
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4642      	mov	r2, r8
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 fddf 	bl	8008a34 <__lshift>
 8007e76:	4607      	mov	r7, r0
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d05d      	beq.n	8007f3a <_dtoa_r+0x972>
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 fbc7 	bl	8008614 <_Balloc>
 8007e86:	4680      	mov	r8, r0
 8007e88:	b928      	cbnz	r0, 8007e96 <_dtoa_r+0x8ce>
 8007e8a:	4b82      	ldr	r3, [pc, #520]	; (8008094 <_dtoa_r+0xacc>)
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e92:	f7ff bbb1 	b.w	80075f8 <_dtoa_r+0x30>
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	3202      	adds	r2, #2
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	f107 010c 	add.w	r1, r7, #12
 8007ea0:	300c      	adds	r0, #12
 8007ea2:	f001 f815 	bl	8008ed0 <memcpy>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f000 fdc2 	bl	8008a34 <__lshift>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	9304      	str	r3, [sp, #16]
 8007eb6:	9b01      	ldr	r3, [sp, #4]
 8007eb8:	4453      	add	r3, sl
 8007eba:	9308      	str	r3, [sp, #32]
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	46b9      	mov	r9, r7
 8007ec4:	9307      	str	r3, [sp, #28]
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	9b04      	ldr	r3, [sp, #16]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	4628      	mov	r0, r5
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	f7ff faee 	bl	80074b2 <quorem>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	3330      	adds	r3, #48	; 0x30
 8007eda:	9005      	str	r0, [sp, #20]
 8007edc:	4649      	mov	r1, r9
 8007ede:	4628      	mov	r0, r5
 8007ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ee2:	f000 fe13 	bl	8008b0c <__mcmp>
 8007ee6:	463a      	mov	r2, r7
 8007ee8:	4682      	mov	sl, r0
 8007eea:	4621      	mov	r1, r4
 8007eec:	4630      	mov	r0, r6
 8007eee:	f000 fe29 	bl	8008b44 <__mdiff>
 8007ef2:	68c2      	ldr	r2, [r0, #12]
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	4680      	mov	r8, r0
 8007ef8:	bb0a      	cbnz	r2, 8007f3e <_dtoa_r+0x976>
 8007efa:	4601      	mov	r1, r0
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 fe05 	bl	8008b0c <__mcmp>
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	4602      	mov	r2, r0
 8007f06:	4641      	mov	r1, r8
 8007f08:	4630      	mov	r0, r6
 8007f0a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007f0e:	f000 fbc1 	bl	8008694 <_Bfree>
 8007f12:	9b06      	ldr	r3, [sp, #24]
 8007f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f16:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007f1a:	ea43 0102 	orr.w	r1, r3, r2
 8007f1e:	9b07      	ldr	r3, [sp, #28]
 8007f20:	4319      	orrs	r1, r3
 8007f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f24:	d10d      	bne.n	8007f42 <_dtoa_r+0x97a>
 8007f26:	2b39      	cmp	r3, #57	; 0x39
 8007f28:	d029      	beq.n	8007f7e <_dtoa_r+0x9b6>
 8007f2a:	f1ba 0f00 	cmp.w	sl, #0
 8007f2e:	dd01      	ble.n	8007f34 <_dtoa_r+0x96c>
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	3331      	adds	r3, #49	; 0x31
 8007f34:	9a02      	ldr	r2, [sp, #8]
 8007f36:	7013      	strb	r3, [r2, #0]
 8007f38:	e775      	b.n	8007e26 <_dtoa_r+0x85e>
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	e7b8      	b.n	8007eb0 <_dtoa_r+0x8e8>
 8007f3e:	2201      	movs	r2, #1
 8007f40:	e7e1      	b.n	8007f06 <_dtoa_r+0x93e>
 8007f42:	f1ba 0f00 	cmp.w	sl, #0
 8007f46:	db06      	blt.n	8007f56 <_dtoa_r+0x98e>
 8007f48:	9906      	ldr	r1, [sp, #24]
 8007f4a:	ea41 0a0a 	orr.w	sl, r1, sl
 8007f4e:	9907      	ldr	r1, [sp, #28]
 8007f50:	ea5a 0a01 	orrs.w	sl, sl, r1
 8007f54:	d120      	bne.n	8007f98 <_dtoa_r+0x9d0>
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	ddec      	ble.n	8007f34 <_dtoa_r+0x96c>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	f000 fd67 	bl	8008a34 <__lshift>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4605      	mov	r5, r0
 8007f6a:	f000 fdcf 	bl	8008b0c <__mcmp>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	9b04      	ldr	r3, [sp, #16]
 8007f72:	dc02      	bgt.n	8007f7a <_dtoa_r+0x9b2>
 8007f74:	d1de      	bne.n	8007f34 <_dtoa_r+0x96c>
 8007f76:	07da      	lsls	r2, r3, #31
 8007f78:	d5dc      	bpl.n	8007f34 <_dtoa_r+0x96c>
 8007f7a:	2b39      	cmp	r3, #57	; 0x39
 8007f7c:	d1d8      	bne.n	8007f30 <_dtoa_r+0x968>
 8007f7e:	9a02      	ldr	r2, [sp, #8]
 8007f80:	2339      	movs	r3, #57	; 0x39
 8007f82:	7013      	strb	r3, [r2, #0]
 8007f84:	4643      	mov	r3, r8
 8007f86:	4698      	mov	r8, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007f8e:	2a39      	cmp	r2, #57	; 0x39
 8007f90:	d051      	beq.n	8008036 <_dtoa_r+0xa6e>
 8007f92:	3201      	adds	r2, #1
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e746      	b.n	8007e26 <_dtoa_r+0x85e>
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	dd03      	ble.n	8007fa4 <_dtoa_r+0x9dc>
 8007f9c:	2b39      	cmp	r3, #57	; 0x39
 8007f9e:	d0ee      	beq.n	8007f7e <_dtoa_r+0x9b6>
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	e7c7      	b.n	8007f34 <_dtoa_r+0x96c>
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	9908      	ldr	r1, [sp, #32]
 8007fa8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fac:	428a      	cmp	r2, r1
 8007fae:	d02b      	beq.n	8008008 <_dtoa_r+0xa40>
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f000 fb8e 	bl	80086d8 <__multadd>
 8007fbc:	45b9      	cmp	r9, r7
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	f04f 020a 	mov.w	r2, #10
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4630      	mov	r0, r6
 8007fcc:	d107      	bne.n	8007fde <_dtoa_r+0xa16>
 8007fce:	f000 fb83 	bl	80086d8 <__multadd>
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	4607      	mov	r7, r0
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	e774      	b.n	8007ec8 <_dtoa_r+0x900>
 8007fde:	f000 fb7b 	bl	80086d8 <__multadd>
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	4681      	mov	r9, r0
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	220a      	movs	r2, #10
 8007fea:	4630      	mov	r0, r6
 8007fec:	f000 fb74 	bl	80086d8 <__multadd>
 8007ff0:	4607      	mov	r7, r0
 8007ff2:	e7f0      	b.n	8007fd6 <_dtoa_r+0xa0e>
 8007ff4:	f1ba 0f00 	cmp.w	sl, #0
 8007ff8:	9a01      	ldr	r2, [sp, #4]
 8007ffa:	bfcc      	ite	gt
 8007ffc:	46d0      	movgt	r8, sl
 8007ffe:	f04f 0801 	movle.w	r8, #1
 8008002:	4490      	add	r8, r2
 8008004:	f04f 0900 	mov.w	r9, #0
 8008008:	4629      	mov	r1, r5
 800800a:	2201      	movs	r2, #1
 800800c:	4630      	mov	r0, r6
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	f000 fd10 	bl	8008a34 <__lshift>
 8008014:	4621      	mov	r1, r4
 8008016:	4605      	mov	r5, r0
 8008018:	f000 fd78 	bl	8008b0c <__mcmp>
 800801c:	2800      	cmp	r0, #0
 800801e:	dcb1      	bgt.n	8007f84 <_dtoa_r+0x9bc>
 8008020:	d102      	bne.n	8008028 <_dtoa_r+0xa60>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	07db      	lsls	r3, r3, #31
 8008026:	d4ad      	bmi.n	8007f84 <_dtoa_r+0x9bc>
 8008028:	4643      	mov	r3, r8
 800802a:	4698      	mov	r8, r3
 800802c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008030:	2a30      	cmp	r2, #48	; 0x30
 8008032:	d0fa      	beq.n	800802a <_dtoa_r+0xa62>
 8008034:	e6f7      	b.n	8007e26 <_dtoa_r+0x85e>
 8008036:	9a01      	ldr	r2, [sp, #4]
 8008038:	429a      	cmp	r2, r3
 800803a:	d1a4      	bne.n	8007f86 <_dtoa_r+0x9be>
 800803c:	f10b 0b01 	add.w	fp, fp, #1
 8008040:	2331      	movs	r3, #49	; 0x31
 8008042:	e778      	b.n	8007f36 <_dtoa_r+0x96e>
 8008044:	4b14      	ldr	r3, [pc, #80]	; (8008098 <_dtoa_r+0xad0>)
 8008046:	f7ff bb2a 	b.w	800769e <_dtoa_r+0xd6>
 800804a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800804c:	2b00      	cmp	r3, #0
 800804e:	f47f ab05 	bne.w	800765c <_dtoa_r+0x94>
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <_dtoa_r+0xad4>)
 8008054:	f7ff bb23 	b.w	800769e <_dtoa_r+0xd6>
 8008058:	f1ba 0f00 	cmp.w	sl, #0
 800805c:	dc03      	bgt.n	8008066 <_dtoa_r+0xa9e>
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	2b02      	cmp	r3, #2
 8008062:	f73f aec8 	bgt.w	8007df6 <_dtoa_r+0x82e>
 8008066:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800806a:	4621      	mov	r1, r4
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff fa20 	bl	80074b2 <quorem>
 8008072:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008076:	f808 3b01 	strb.w	r3, [r8], #1
 800807a:	9a01      	ldr	r2, [sp, #4]
 800807c:	eba8 0202 	sub.w	r2, r8, r2
 8008080:	4592      	cmp	sl, r2
 8008082:	ddb7      	ble.n	8007ff4 <_dtoa_r+0xa2c>
 8008084:	4629      	mov	r1, r5
 8008086:	2300      	movs	r3, #0
 8008088:	220a      	movs	r2, #10
 800808a:	4630      	mov	r0, r6
 800808c:	f000 fb24 	bl	80086d8 <__multadd>
 8008090:	4605      	mov	r5, r0
 8008092:	e7ea      	b.n	800806a <_dtoa_r+0xaa2>
 8008094:	080096e8 	.word	0x080096e8
 8008098:	08009648 	.word	0x08009648
 800809c:	0800966c 	.word	0x0800966c

080080a0 <__ssputs_r>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	688e      	ldr	r6, [r1, #8]
 80080a6:	461f      	mov	r7, r3
 80080a8:	42be      	cmp	r6, r7
 80080aa:	680b      	ldr	r3, [r1, #0]
 80080ac:	4682      	mov	sl, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	4690      	mov	r8, r2
 80080b2:	d82c      	bhi.n	800810e <__ssputs_r+0x6e>
 80080b4:	898a      	ldrh	r2, [r1, #12]
 80080b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080ba:	d026      	beq.n	800810a <__ssputs_r+0x6a>
 80080bc:	6965      	ldr	r5, [r4, #20]
 80080be:	6909      	ldr	r1, [r1, #16]
 80080c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080c4:	eba3 0901 	sub.w	r9, r3, r1
 80080c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080cc:	1c7b      	adds	r3, r7, #1
 80080ce:	444b      	add	r3, r9
 80080d0:	106d      	asrs	r5, r5, #1
 80080d2:	429d      	cmp	r5, r3
 80080d4:	bf38      	it	cc
 80080d6:	461d      	movcc	r5, r3
 80080d8:	0553      	lsls	r3, r2, #21
 80080da:	d527      	bpl.n	800812c <__ssputs_r+0x8c>
 80080dc:	4629      	mov	r1, r5
 80080de:	f000 f95f 	bl	80083a0 <_malloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	b360      	cbz	r0, 8008140 <__ssputs_r+0xa0>
 80080e6:	6921      	ldr	r1, [r4, #16]
 80080e8:	464a      	mov	r2, r9
 80080ea:	f000 fef1 	bl	8008ed0 <memcpy>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	6126      	str	r6, [r4, #16]
 80080fc:	6165      	str	r5, [r4, #20]
 80080fe:	444e      	add	r6, r9
 8008100:	eba5 0509 	sub.w	r5, r5, r9
 8008104:	6026      	str	r6, [r4, #0]
 8008106:	60a5      	str	r5, [r4, #8]
 8008108:	463e      	mov	r6, r7
 800810a:	42be      	cmp	r6, r7
 800810c:	d900      	bls.n	8008110 <__ssputs_r+0x70>
 800810e:	463e      	mov	r6, r7
 8008110:	6820      	ldr	r0, [r4, #0]
 8008112:	4632      	mov	r2, r6
 8008114:	4641      	mov	r1, r8
 8008116:	f000 fe6b 	bl	8008df0 <memmove>
 800811a:	68a3      	ldr	r3, [r4, #8]
 800811c:	1b9b      	subs	r3, r3, r6
 800811e:	60a3      	str	r3, [r4, #8]
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	4433      	add	r3, r6
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2000      	movs	r0, #0
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	462a      	mov	r2, r5
 800812e:	f000 fe30 	bl	8008d92 <_realloc_r>
 8008132:	4606      	mov	r6, r0
 8008134:	2800      	cmp	r0, #0
 8008136:	d1e0      	bne.n	80080fa <__ssputs_r+0x5a>
 8008138:	6921      	ldr	r1, [r4, #16]
 800813a:	4650      	mov	r0, sl
 800813c:	f000 ff0a 	bl	8008f54 <_free_r>
 8008140:	230c      	movs	r3, #12
 8008142:	f8ca 3000 	str.w	r3, [sl]
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800814c:	81a3      	strh	r3, [r4, #12]
 800814e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008152:	e7e9      	b.n	8008128 <__ssputs_r+0x88>

08008154 <_svfiprintf_r>:
 8008154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008158:	4698      	mov	r8, r3
 800815a:	898b      	ldrh	r3, [r1, #12]
 800815c:	061b      	lsls	r3, r3, #24
 800815e:	b09d      	sub	sp, #116	; 0x74
 8008160:	4607      	mov	r7, r0
 8008162:	460d      	mov	r5, r1
 8008164:	4614      	mov	r4, r2
 8008166:	d50e      	bpl.n	8008186 <_svfiprintf_r+0x32>
 8008168:	690b      	ldr	r3, [r1, #16]
 800816a:	b963      	cbnz	r3, 8008186 <_svfiprintf_r+0x32>
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	f000 f917 	bl	80083a0 <_malloc_r>
 8008172:	6028      	str	r0, [r5, #0]
 8008174:	6128      	str	r0, [r5, #16]
 8008176:	b920      	cbnz	r0, 8008182 <_svfiprintf_r+0x2e>
 8008178:	230c      	movs	r3, #12
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008180:	e0d0      	b.n	8008324 <_svfiprintf_r+0x1d0>
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	616b      	str	r3, [r5, #20]
 8008186:	2300      	movs	r3, #0
 8008188:	9309      	str	r3, [sp, #36]	; 0x24
 800818a:	2320      	movs	r3, #32
 800818c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008190:	f8cd 800c 	str.w	r8, [sp, #12]
 8008194:	2330      	movs	r3, #48	; 0x30
 8008196:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800833c <_svfiprintf_r+0x1e8>
 800819a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800819e:	f04f 0901 	mov.w	r9, #1
 80081a2:	4623      	mov	r3, r4
 80081a4:	469a      	mov	sl, r3
 80081a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081aa:	b10a      	cbz	r2, 80081b0 <_svfiprintf_r+0x5c>
 80081ac:	2a25      	cmp	r2, #37	; 0x25
 80081ae:	d1f9      	bne.n	80081a4 <_svfiprintf_r+0x50>
 80081b0:	ebba 0b04 	subs.w	fp, sl, r4
 80081b4:	d00b      	beq.n	80081ce <_svfiprintf_r+0x7a>
 80081b6:	465b      	mov	r3, fp
 80081b8:	4622      	mov	r2, r4
 80081ba:	4629      	mov	r1, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff ff6f 	bl	80080a0 <__ssputs_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	f000 80a9 	beq.w	800831a <_svfiprintf_r+0x1c6>
 80081c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ca:	445a      	add	r2, fp
 80081cc:	9209      	str	r2, [sp, #36]	; 0x24
 80081ce:	f89a 3000 	ldrb.w	r3, [sl]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80a1 	beq.w	800831a <_svfiprintf_r+0x1c6>
 80081d8:	2300      	movs	r3, #0
 80081da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e2:	f10a 0a01 	add.w	sl, sl, #1
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ee:	931a      	str	r3, [sp, #104]	; 0x68
 80081f0:	4654      	mov	r4, sl
 80081f2:	2205      	movs	r2, #5
 80081f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f8:	4850      	ldr	r0, [pc, #320]	; (800833c <_svfiprintf_r+0x1e8>)
 80081fa:	f7f8 f821 	bl	8000240 <memchr>
 80081fe:	9a04      	ldr	r2, [sp, #16]
 8008200:	b9d8      	cbnz	r0, 800823a <_svfiprintf_r+0xe6>
 8008202:	06d0      	lsls	r0, r2, #27
 8008204:	bf44      	itt	mi
 8008206:	2320      	movmi	r3, #32
 8008208:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820c:	0711      	lsls	r1, r2, #28
 800820e:	bf44      	itt	mi
 8008210:	232b      	movmi	r3, #43	; 0x2b
 8008212:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008216:	f89a 3000 	ldrb.w	r3, [sl]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	d015      	beq.n	800824a <_svfiprintf_r+0xf6>
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	4654      	mov	r4, sl
 8008222:	2000      	movs	r0, #0
 8008224:	f04f 0c0a 	mov.w	ip, #10
 8008228:	4621      	mov	r1, r4
 800822a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822e:	3b30      	subs	r3, #48	; 0x30
 8008230:	2b09      	cmp	r3, #9
 8008232:	d94d      	bls.n	80082d0 <_svfiprintf_r+0x17c>
 8008234:	b1b0      	cbz	r0, 8008264 <_svfiprintf_r+0x110>
 8008236:	9207      	str	r2, [sp, #28]
 8008238:	e014      	b.n	8008264 <_svfiprintf_r+0x110>
 800823a:	eba0 0308 	sub.w	r3, r0, r8
 800823e:	fa09 f303 	lsl.w	r3, r9, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	46a2      	mov	sl, r4
 8008248:	e7d2      	b.n	80081f0 <_svfiprintf_r+0x9c>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	1d19      	adds	r1, r3, #4
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	9103      	str	r1, [sp, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfbb      	ittet	lt
 8008256:	425b      	neglt	r3, r3
 8008258:	f042 0202 	orrlt.w	r2, r2, #2
 800825c:	9307      	strge	r3, [sp, #28]
 800825e:	9307      	strlt	r3, [sp, #28]
 8008260:	bfb8      	it	lt
 8008262:	9204      	strlt	r2, [sp, #16]
 8008264:	7823      	ldrb	r3, [r4, #0]
 8008266:	2b2e      	cmp	r3, #46	; 0x2e
 8008268:	d10c      	bne.n	8008284 <_svfiprintf_r+0x130>
 800826a:	7863      	ldrb	r3, [r4, #1]
 800826c:	2b2a      	cmp	r3, #42	; 0x2a
 800826e:	d134      	bne.n	80082da <_svfiprintf_r+0x186>
 8008270:	9b03      	ldr	r3, [sp, #12]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	9203      	str	r2, [sp, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bfb8      	it	lt
 800827c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008280:	3402      	adds	r4, #2
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800834c <_svfiprintf_r+0x1f8>
 8008288:	7821      	ldrb	r1, [r4, #0]
 800828a:	2203      	movs	r2, #3
 800828c:	4650      	mov	r0, sl
 800828e:	f7f7 ffd7 	bl	8000240 <memchr>
 8008292:	b138      	cbz	r0, 80082a4 <_svfiprintf_r+0x150>
 8008294:	9b04      	ldr	r3, [sp, #16]
 8008296:	eba0 000a 	sub.w	r0, r0, sl
 800829a:	2240      	movs	r2, #64	; 0x40
 800829c:	4082      	lsls	r2, r0
 800829e:	4313      	orrs	r3, r2
 80082a0:	3401      	adds	r4, #1
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	4825      	ldr	r0, [pc, #148]	; (8008340 <_svfiprintf_r+0x1ec>)
 80082aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082ae:	2206      	movs	r2, #6
 80082b0:	f7f7 ffc6 	bl	8000240 <memchr>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d038      	beq.n	800832a <_svfiprintf_r+0x1d6>
 80082b8:	4b22      	ldr	r3, [pc, #136]	; (8008344 <_svfiprintf_r+0x1f0>)
 80082ba:	bb1b      	cbnz	r3, 8008304 <_svfiprintf_r+0x1b0>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	3307      	adds	r3, #7
 80082c0:	f023 0307 	bic.w	r3, r3, #7
 80082c4:	3308      	adds	r3, #8
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ca:	4433      	add	r3, r6
 80082cc:	9309      	str	r3, [sp, #36]	; 0x24
 80082ce:	e768      	b.n	80081a2 <_svfiprintf_r+0x4e>
 80082d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80082d4:	460c      	mov	r4, r1
 80082d6:	2001      	movs	r0, #1
 80082d8:	e7a6      	b.n	8008228 <_svfiprintf_r+0xd4>
 80082da:	2300      	movs	r3, #0
 80082dc:	3401      	adds	r4, #1
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f04f 0c0a 	mov.w	ip, #10
 80082e6:	4620      	mov	r0, r4
 80082e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ec:	3a30      	subs	r2, #48	; 0x30
 80082ee:	2a09      	cmp	r2, #9
 80082f0:	d903      	bls.n	80082fa <_svfiprintf_r+0x1a6>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d0c6      	beq.n	8008284 <_svfiprintf_r+0x130>
 80082f6:	9105      	str	r1, [sp, #20]
 80082f8:	e7c4      	b.n	8008284 <_svfiprintf_r+0x130>
 80082fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80082fe:	4604      	mov	r4, r0
 8008300:	2301      	movs	r3, #1
 8008302:	e7f0      	b.n	80082e6 <_svfiprintf_r+0x192>
 8008304:	ab03      	add	r3, sp, #12
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	462a      	mov	r2, r5
 800830a:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <_svfiprintf_r+0x1f4>)
 800830c:	a904      	add	r1, sp, #16
 800830e:	4638      	mov	r0, r7
 8008310:	f7fe fc0a 	bl	8006b28 <_printf_float>
 8008314:	1c42      	adds	r2, r0, #1
 8008316:	4606      	mov	r6, r0
 8008318:	d1d6      	bne.n	80082c8 <_svfiprintf_r+0x174>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	065b      	lsls	r3, r3, #25
 800831e:	f53f af2d 	bmi.w	800817c <_svfiprintf_r+0x28>
 8008322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008324:	b01d      	add	sp, #116	; 0x74
 8008326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	ab03      	add	r3, sp, #12
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	462a      	mov	r2, r5
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_svfiprintf_r+0x1f4>)
 8008332:	a904      	add	r1, sp, #16
 8008334:	4638      	mov	r0, r7
 8008336:	f7fe fe7f 	bl	8007038 <_printf_i>
 800833a:	e7eb      	b.n	8008314 <_svfiprintf_r+0x1c0>
 800833c:	080096f9 	.word	0x080096f9
 8008340:	08009703 	.word	0x08009703
 8008344:	08006b29 	.word	0x08006b29
 8008348:	080080a1 	.word	0x080080a1
 800834c:	080096ff 	.word	0x080096ff

08008350 <malloc>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <malloc+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f000 b823 	b.w	80083a0 <_malloc_r>
 800835a:	bf00      	nop
 800835c:	2000006c 	.word	0x2000006c

08008360 <sbrk_aligned>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	4e0e      	ldr	r6, [pc, #56]	; (800839c <sbrk_aligned+0x3c>)
 8008364:	460c      	mov	r4, r1
 8008366:	6831      	ldr	r1, [r6, #0]
 8008368:	4605      	mov	r5, r0
 800836a:	b911      	cbnz	r1, 8008372 <sbrk_aligned+0x12>
 800836c:	f000 fd8e 	bl	8008e8c <_sbrk_r>
 8008370:	6030      	str	r0, [r6, #0]
 8008372:	4621      	mov	r1, r4
 8008374:	4628      	mov	r0, r5
 8008376:	f000 fd89 	bl	8008e8c <_sbrk_r>
 800837a:	1c43      	adds	r3, r0, #1
 800837c:	d00a      	beq.n	8008394 <sbrk_aligned+0x34>
 800837e:	1cc4      	adds	r4, r0, #3
 8008380:	f024 0403 	bic.w	r4, r4, #3
 8008384:	42a0      	cmp	r0, r4
 8008386:	d007      	beq.n	8008398 <sbrk_aligned+0x38>
 8008388:	1a21      	subs	r1, r4, r0
 800838a:	4628      	mov	r0, r5
 800838c:	f000 fd7e 	bl	8008e8c <_sbrk_r>
 8008390:	3001      	adds	r0, #1
 8008392:	d101      	bne.n	8008398 <sbrk_aligned+0x38>
 8008394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008398:	4620      	mov	r0, r4
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	20000c84 	.word	0x20000c84

080083a0 <_malloc_r>:
 80083a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a4:	1ccd      	adds	r5, r1, #3
 80083a6:	f025 0503 	bic.w	r5, r5, #3
 80083aa:	3508      	adds	r5, #8
 80083ac:	2d0c      	cmp	r5, #12
 80083ae:	bf38      	it	cc
 80083b0:	250c      	movcc	r5, #12
 80083b2:	2d00      	cmp	r5, #0
 80083b4:	4607      	mov	r7, r0
 80083b6:	db01      	blt.n	80083bc <_malloc_r+0x1c>
 80083b8:	42a9      	cmp	r1, r5
 80083ba:	d905      	bls.n	80083c8 <_malloc_r+0x28>
 80083bc:	230c      	movs	r3, #12
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	2600      	movs	r6, #0
 80083c2:	4630      	mov	r0, r6
 80083c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800849c <_malloc_r+0xfc>
 80083cc:	f000 f916 	bl	80085fc <__malloc_lock>
 80083d0:	f8d8 3000 	ldr.w	r3, [r8]
 80083d4:	461c      	mov	r4, r3
 80083d6:	bb5c      	cbnz	r4, 8008430 <_malloc_r+0x90>
 80083d8:	4629      	mov	r1, r5
 80083da:	4638      	mov	r0, r7
 80083dc:	f7ff ffc0 	bl	8008360 <sbrk_aligned>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	4604      	mov	r4, r0
 80083e4:	d155      	bne.n	8008492 <_malloc_r+0xf2>
 80083e6:	f8d8 4000 	ldr.w	r4, [r8]
 80083ea:	4626      	mov	r6, r4
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d145      	bne.n	800847c <_malloc_r+0xdc>
 80083f0:	2c00      	cmp	r4, #0
 80083f2:	d048      	beq.n	8008486 <_malloc_r+0xe6>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	4631      	mov	r1, r6
 80083f8:	4638      	mov	r0, r7
 80083fa:	eb04 0903 	add.w	r9, r4, r3
 80083fe:	f000 fd45 	bl	8008e8c <_sbrk_r>
 8008402:	4581      	cmp	r9, r0
 8008404:	d13f      	bne.n	8008486 <_malloc_r+0xe6>
 8008406:	6821      	ldr	r1, [r4, #0]
 8008408:	1a6d      	subs	r5, r5, r1
 800840a:	4629      	mov	r1, r5
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff ffa7 	bl	8008360 <sbrk_aligned>
 8008412:	3001      	adds	r0, #1
 8008414:	d037      	beq.n	8008486 <_malloc_r+0xe6>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	442b      	add	r3, r5
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	f8d8 3000 	ldr.w	r3, [r8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d038      	beq.n	8008496 <_malloc_r+0xf6>
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	42a2      	cmp	r2, r4
 8008428:	d12b      	bne.n	8008482 <_malloc_r+0xe2>
 800842a:	2200      	movs	r2, #0
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	e00f      	b.n	8008450 <_malloc_r+0xb0>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	1b52      	subs	r2, r2, r5
 8008434:	d41f      	bmi.n	8008476 <_malloc_r+0xd6>
 8008436:	2a0b      	cmp	r2, #11
 8008438:	d917      	bls.n	800846a <_malloc_r+0xca>
 800843a:	1961      	adds	r1, r4, r5
 800843c:	42a3      	cmp	r3, r4
 800843e:	6025      	str	r5, [r4, #0]
 8008440:	bf18      	it	ne
 8008442:	6059      	strne	r1, [r3, #4]
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	bf08      	it	eq
 8008448:	f8c8 1000 	streq.w	r1, [r8]
 800844c:	5162      	str	r2, [r4, r5]
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	4638      	mov	r0, r7
 8008452:	f104 060b 	add.w	r6, r4, #11
 8008456:	f000 f8d7 	bl	8008608 <__malloc_unlock>
 800845a:	f026 0607 	bic.w	r6, r6, #7
 800845e:	1d23      	adds	r3, r4, #4
 8008460:	1af2      	subs	r2, r6, r3
 8008462:	d0ae      	beq.n	80083c2 <_malloc_r+0x22>
 8008464:	1b9b      	subs	r3, r3, r6
 8008466:	50a3      	str	r3, [r4, r2]
 8008468:	e7ab      	b.n	80083c2 <_malloc_r+0x22>
 800846a:	42a3      	cmp	r3, r4
 800846c:	6862      	ldr	r2, [r4, #4]
 800846e:	d1dd      	bne.n	800842c <_malloc_r+0x8c>
 8008470:	f8c8 2000 	str.w	r2, [r8]
 8008474:	e7ec      	b.n	8008450 <_malloc_r+0xb0>
 8008476:	4623      	mov	r3, r4
 8008478:	6864      	ldr	r4, [r4, #4]
 800847a:	e7ac      	b.n	80083d6 <_malloc_r+0x36>
 800847c:	4634      	mov	r4, r6
 800847e:	6876      	ldr	r6, [r6, #4]
 8008480:	e7b4      	b.n	80083ec <_malloc_r+0x4c>
 8008482:	4613      	mov	r3, r2
 8008484:	e7cc      	b.n	8008420 <_malloc_r+0x80>
 8008486:	230c      	movs	r3, #12
 8008488:	603b      	str	r3, [r7, #0]
 800848a:	4638      	mov	r0, r7
 800848c:	f000 f8bc 	bl	8008608 <__malloc_unlock>
 8008490:	e797      	b.n	80083c2 <_malloc_r+0x22>
 8008492:	6025      	str	r5, [r4, #0]
 8008494:	e7dc      	b.n	8008450 <_malloc_r+0xb0>
 8008496:	605b      	str	r3, [r3, #4]
 8008498:	deff      	udf	#255	; 0xff
 800849a:	bf00      	nop
 800849c:	20000c80 	.word	0x20000c80

080084a0 <__sflush_r>:
 80084a0:	898a      	ldrh	r2, [r1, #12]
 80084a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a6:	4605      	mov	r5, r0
 80084a8:	0710      	lsls	r0, r2, #28
 80084aa:	460c      	mov	r4, r1
 80084ac:	d458      	bmi.n	8008560 <__sflush_r+0xc0>
 80084ae:	684b      	ldr	r3, [r1, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dc05      	bgt.n	80084c0 <__sflush_r+0x20>
 80084b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dc02      	bgt.n	80084c0 <__sflush_r+0x20>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d0f9      	beq.n	80084ba <__sflush_r+0x1a>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084cc:	682f      	ldr	r7, [r5, #0]
 80084ce:	6a21      	ldr	r1, [r4, #32]
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	d032      	beq.n	800853a <__sflush_r+0x9a>
 80084d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	075a      	lsls	r2, r3, #29
 80084da:	d505      	bpl.n	80084e8 <__sflush_r+0x48>
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	1ac0      	subs	r0, r0, r3
 80084e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084e2:	b10b      	cbz	r3, 80084e8 <__sflush_r+0x48>
 80084e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084e6:	1ac0      	subs	r0, r0, r3
 80084e8:	2300      	movs	r3, #0
 80084ea:	4602      	mov	r2, r0
 80084ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ee:	6a21      	ldr	r1, [r4, #32]
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	d106      	bne.n	8008508 <__sflush_r+0x68>
 80084fa:	6829      	ldr	r1, [r5, #0]
 80084fc:	291d      	cmp	r1, #29
 80084fe:	d82b      	bhi.n	8008558 <__sflush_r+0xb8>
 8008500:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <__sflush_r+0x108>)
 8008502:	410a      	asrs	r2, r1
 8008504:	07d6      	lsls	r6, r2, #31
 8008506:	d427      	bmi.n	8008558 <__sflush_r+0xb8>
 8008508:	2200      	movs	r2, #0
 800850a:	6062      	str	r2, [r4, #4]
 800850c:	04d9      	lsls	r1, r3, #19
 800850e:	6922      	ldr	r2, [r4, #16]
 8008510:	6022      	str	r2, [r4, #0]
 8008512:	d504      	bpl.n	800851e <__sflush_r+0x7e>
 8008514:	1c42      	adds	r2, r0, #1
 8008516:	d101      	bne.n	800851c <__sflush_r+0x7c>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b903      	cbnz	r3, 800851e <__sflush_r+0x7e>
 800851c:	6560      	str	r0, [r4, #84]	; 0x54
 800851e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008520:	602f      	str	r7, [r5, #0]
 8008522:	2900      	cmp	r1, #0
 8008524:	d0c9      	beq.n	80084ba <__sflush_r+0x1a>
 8008526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800852a:	4299      	cmp	r1, r3
 800852c:	d002      	beq.n	8008534 <__sflush_r+0x94>
 800852e:	4628      	mov	r0, r5
 8008530:	f000 fd10 	bl	8008f54 <_free_r>
 8008534:	2000      	movs	r0, #0
 8008536:	6360      	str	r0, [r4, #52]	; 0x34
 8008538:	e7c0      	b.n	80084bc <__sflush_r+0x1c>
 800853a:	2301      	movs	r3, #1
 800853c:	4628      	mov	r0, r5
 800853e:	47b0      	blx	r6
 8008540:	1c41      	adds	r1, r0, #1
 8008542:	d1c8      	bne.n	80084d6 <__sflush_r+0x36>
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0c5      	beq.n	80084d6 <__sflush_r+0x36>
 800854a:	2b1d      	cmp	r3, #29
 800854c:	d001      	beq.n	8008552 <__sflush_r+0xb2>
 800854e:	2b16      	cmp	r3, #22
 8008550:	d101      	bne.n	8008556 <__sflush_r+0xb6>
 8008552:	602f      	str	r7, [r5, #0]
 8008554:	e7b1      	b.n	80084ba <__sflush_r+0x1a>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	e7ad      	b.n	80084bc <__sflush_r+0x1c>
 8008560:	690f      	ldr	r7, [r1, #16]
 8008562:	2f00      	cmp	r7, #0
 8008564:	d0a9      	beq.n	80084ba <__sflush_r+0x1a>
 8008566:	0793      	lsls	r3, r2, #30
 8008568:	680e      	ldr	r6, [r1, #0]
 800856a:	bf08      	it	eq
 800856c:	694b      	ldreq	r3, [r1, #20]
 800856e:	600f      	str	r7, [r1, #0]
 8008570:	bf18      	it	ne
 8008572:	2300      	movne	r3, #0
 8008574:	eba6 0807 	sub.w	r8, r6, r7
 8008578:	608b      	str	r3, [r1, #8]
 800857a:	f1b8 0f00 	cmp.w	r8, #0
 800857e:	dd9c      	ble.n	80084ba <__sflush_r+0x1a>
 8008580:	6a21      	ldr	r1, [r4, #32]
 8008582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008584:	4643      	mov	r3, r8
 8008586:	463a      	mov	r2, r7
 8008588:	4628      	mov	r0, r5
 800858a:	47b0      	blx	r6
 800858c:	2800      	cmp	r0, #0
 800858e:	dc06      	bgt.n	800859e <__sflush_r+0xfe>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800859c:	e78e      	b.n	80084bc <__sflush_r+0x1c>
 800859e:	4407      	add	r7, r0
 80085a0:	eba8 0800 	sub.w	r8, r8, r0
 80085a4:	e7e9      	b.n	800857a <__sflush_r+0xda>
 80085a6:	bf00      	nop
 80085a8:	dfbffffe 	.word	0xdfbffffe

080085ac <_fflush_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	690b      	ldr	r3, [r1, #16]
 80085b0:	4605      	mov	r5, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b913      	cbnz	r3, 80085bc <_fflush_r+0x10>
 80085b6:	2500      	movs	r5, #0
 80085b8:	4628      	mov	r0, r5
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	b118      	cbz	r0, 80085c6 <_fflush_r+0x1a>
 80085be:	6a03      	ldr	r3, [r0, #32]
 80085c0:	b90b      	cbnz	r3, 80085c6 <_fflush_r+0x1a>
 80085c2:	f7fe ff07 	bl	80073d4 <__sinit>
 80085c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0f3      	beq.n	80085b6 <_fflush_r+0xa>
 80085ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085d0:	07d0      	lsls	r0, r2, #31
 80085d2:	d404      	bmi.n	80085de <_fflush_r+0x32>
 80085d4:	0599      	lsls	r1, r3, #22
 80085d6:	d402      	bmi.n	80085de <_fflush_r+0x32>
 80085d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085da:	f7fe ff68 	bl	80074ae <__retarget_lock_acquire_recursive>
 80085de:	4628      	mov	r0, r5
 80085e0:	4621      	mov	r1, r4
 80085e2:	f7ff ff5d 	bl	80084a0 <__sflush_r>
 80085e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085e8:	07da      	lsls	r2, r3, #31
 80085ea:	4605      	mov	r5, r0
 80085ec:	d4e4      	bmi.n	80085b8 <_fflush_r+0xc>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	059b      	lsls	r3, r3, #22
 80085f2:	d4e1      	bmi.n	80085b8 <_fflush_r+0xc>
 80085f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085f6:	f7fe ff5b 	bl	80074b0 <__retarget_lock_release_recursive>
 80085fa:	e7dd      	b.n	80085b8 <_fflush_r+0xc>

080085fc <__malloc_lock>:
 80085fc:	4801      	ldr	r0, [pc, #4]	; (8008604 <__malloc_lock+0x8>)
 80085fe:	f7fe bf56 	b.w	80074ae <__retarget_lock_acquire_recursive>
 8008602:	bf00      	nop
 8008604:	20000c7c 	.word	0x20000c7c

08008608 <__malloc_unlock>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__malloc_unlock+0x8>)
 800860a:	f7fe bf51 	b.w	80074b0 <__retarget_lock_release_recursive>
 800860e:	bf00      	nop
 8008610:	20000c7c 	.word	0x20000c7c

08008614 <_Balloc>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	69c6      	ldr	r6, [r0, #28]
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	b976      	cbnz	r6, 800863c <_Balloc+0x28>
 800861e:	2010      	movs	r0, #16
 8008620:	f7ff fe96 	bl	8008350 <malloc>
 8008624:	4602      	mov	r2, r0
 8008626:	61e0      	str	r0, [r4, #28]
 8008628:	b920      	cbnz	r0, 8008634 <_Balloc+0x20>
 800862a:	4b18      	ldr	r3, [pc, #96]	; (800868c <_Balloc+0x78>)
 800862c:	4818      	ldr	r0, [pc, #96]	; (8008690 <_Balloc+0x7c>)
 800862e:	216b      	movs	r1, #107	; 0x6b
 8008630:	f000 fc5c 	bl	8008eec <__assert_func>
 8008634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008638:	6006      	str	r6, [r0, #0]
 800863a:	60c6      	str	r6, [r0, #12]
 800863c:	69e6      	ldr	r6, [r4, #28]
 800863e:	68f3      	ldr	r3, [r6, #12]
 8008640:	b183      	cbz	r3, 8008664 <_Balloc+0x50>
 8008642:	69e3      	ldr	r3, [r4, #28]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800864a:	b9b8      	cbnz	r0, 800867c <_Balloc+0x68>
 800864c:	2101      	movs	r1, #1
 800864e:	fa01 f605 	lsl.w	r6, r1, r5
 8008652:	1d72      	adds	r2, r6, #5
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fc66 	bl	8008f28 <_calloc_r>
 800865c:	b160      	cbz	r0, 8008678 <_Balloc+0x64>
 800865e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008662:	e00e      	b.n	8008682 <_Balloc+0x6e>
 8008664:	2221      	movs	r2, #33	; 0x21
 8008666:	2104      	movs	r1, #4
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fc5d 	bl	8008f28 <_calloc_r>
 800866e:	69e3      	ldr	r3, [r4, #28]
 8008670:	60f0      	str	r0, [r6, #12]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e4      	bne.n	8008642 <_Balloc+0x2e>
 8008678:	2000      	movs	r0, #0
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	6802      	ldr	r2, [r0, #0]
 800867e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008682:	2300      	movs	r3, #0
 8008684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008688:	e7f7      	b.n	800867a <_Balloc+0x66>
 800868a:	bf00      	nop
 800868c:	08009679 	.word	0x08009679
 8008690:	0800970a 	.word	0x0800970a

08008694 <_Bfree>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	69c6      	ldr	r6, [r0, #28]
 8008698:	4605      	mov	r5, r0
 800869a:	460c      	mov	r4, r1
 800869c:	b976      	cbnz	r6, 80086bc <_Bfree+0x28>
 800869e:	2010      	movs	r0, #16
 80086a0:	f7ff fe56 	bl	8008350 <malloc>
 80086a4:	4602      	mov	r2, r0
 80086a6:	61e8      	str	r0, [r5, #28]
 80086a8:	b920      	cbnz	r0, 80086b4 <_Bfree+0x20>
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <_Bfree+0x3c>)
 80086ac:	4809      	ldr	r0, [pc, #36]	; (80086d4 <_Bfree+0x40>)
 80086ae:	218f      	movs	r1, #143	; 0x8f
 80086b0:	f000 fc1c 	bl	8008eec <__assert_func>
 80086b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b8:	6006      	str	r6, [r0, #0]
 80086ba:	60c6      	str	r6, [r0, #12]
 80086bc:	b13c      	cbz	r4, 80086ce <_Bfree+0x3a>
 80086be:	69eb      	ldr	r3, [r5, #28]
 80086c0:	6862      	ldr	r2, [r4, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086c8:	6021      	str	r1, [r4, #0]
 80086ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	08009679 	.word	0x08009679
 80086d4:	0800970a 	.word	0x0800970a

080086d8 <__multadd>:
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	690d      	ldr	r5, [r1, #16]
 80086de:	4607      	mov	r7, r0
 80086e0:	460c      	mov	r4, r1
 80086e2:	461e      	mov	r6, r3
 80086e4:	f101 0c14 	add.w	ip, r1, #20
 80086e8:	2000      	movs	r0, #0
 80086ea:	f8dc 3000 	ldr.w	r3, [ip]
 80086ee:	b299      	uxth	r1, r3
 80086f0:	fb02 6101 	mla	r1, r2, r1, r6
 80086f4:	0c1e      	lsrs	r6, r3, #16
 80086f6:	0c0b      	lsrs	r3, r1, #16
 80086f8:	fb02 3306 	mla	r3, r2, r6, r3
 80086fc:	b289      	uxth	r1, r1
 80086fe:	3001      	adds	r0, #1
 8008700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008704:	4285      	cmp	r5, r0
 8008706:	f84c 1b04 	str.w	r1, [ip], #4
 800870a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800870e:	dcec      	bgt.n	80086ea <__multadd+0x12>
 8008710:	b30e      	cbz	r6, 8008756 <__multadd+0x7e>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	42ab      	cmp	r3, r5
 8008716:	dc19      	bgt.n	800874c <__multadd+0x74>
 8008718:	6861      	ldr	r1, [r4, #4]
 800871a:	4638      	mov	r0, r7
 800871c:	3101      	adds	r1, #1
 800871e:	f7ff ff79 	bl	8008614 <_Balloc>
 8008722:	4680      	mov	r8, r0
 8008724:	b928      	cbnz	r0, 8008732 <__multadd+0x5a>
 8008726:	4602      	mov	r2, r0
 8008728:	4b0c      	ldr	r3, [pc, #48]	; (800875c <__multadd+0x84>)
 800872a:	480d      	ldr	r0, [pc, #52]	; (8008760 <__multadd+0x88>)
 800872c:	21ba      	movs	r1, #186	; 0xba
 800872e:	f000 fbdd 	bl	8008eec <__assert_func>
 8008732:	6922      	ldr	r2, [r4, #16]
 8008734:	3202      	adds	r2, #2
 8008736:	f104 010c 	add.w	r1, r4, #12
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	300c      	adds	r0, #12
 800873e:	f000 fbc7 	bl	8008ed0 <memcpy>
 8008742:	4621      	mov	r1, r4
 8008744:	4638      	mov	r0, r7
 8008746:	f7ff ffa5 	bl	8008694 <_Bfree>
 800874a:	4644      	mov	r4, r8
 800874c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008750:	3501      	adds	r5, #1
 8008752:	615e      	str	r6, [r3, #20]
 8008754:	6125      	str	r5, [r4, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	080096e8 	.word	0x080096e8
 8008760:	0800970a 	.word	0x0800970a

08008764 <__hi0bits>:
 8008764:	0c03      	lsrs	r3, r0, #16
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	b9d3      	cbnz	r3, 80087a0 <__hi0bits+0x3c>
 800876a:	0400      	lsls	r0, r0, #16
 800876c:	2310      	movs	r3, #16
 800876e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008772:	bf04      	itt	eq
 8008774:	0200      	lsleq	r0, r0, #8
 8008776:	3308      	addeq	r3, #8
 8008778:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800877c:	bf04      	itt	eq
 800877e:	0100      	lsleq	r0, r0, #4
 8008780:	3304      	addeq	r3, #4
 8008782:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008786:	bf04      	itt	eq
 8008788:	0080      	lsleq	r0, r0, #2
 800878a:	3302      	addeq	r3, #2
 800878c:	2800      	cmp	r0, #0
 800878e:	db05      	blt.n	800879c <__hi0bits+0x38>
 8008790:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008794:	f103 0301 	add.w	r3, r3, #1
 8008798:	bf08      	it	eq
 800879a:	2320      	moveq	r3, #32
 800879c:	4618      	mov	r0, r3
 800879e:	4770      	bx	lr
 80087a0:	2300      	movs	r3, #0
 80087a2:	e7e4      	b.n	800876e <__hi0bits+0xa>

080087a4 <__lo0bits>:
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	f013 0207 	ands.w	r2, r3, #7
 80087aa:	d00c      	beq.n	80087c6 <__lo0bits+0x22>
 80087ac:	07d9      	lsls	r1, r3, #31
 80087ae:	d422      	bmi.n	80087f6 <__lo0bits+0x52>
 80087b0:	079a      	lsls	r2, r3, #30
 80087b2:	bf49      	itett	mi
 80087b4:	085b      	lsrmi	r3, r3, #1
 80087b6:	089b      	lsrpl	r3, r3, #2
 80087b8:	6003      	strmi	r3, [r0, #0]
 80087ba:	2201      	movmi	r2, #1
 80087bc:	bf5c      	itt	pl
 80087be:	6003      	strpl	r3, [r0, #0]
 80087c0:	2202      	movpl	r2, #2
 80087c2:	4610      	mov	r0, r2
 80087c4:	4770      	bx	lr
 80087c6:	b299      	uxth	r1, r3
 80087c8:	b909      	cbnz	r1, 80087ce <__lo0bits+0x2a>
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	2210      	movs	r2, #16
 80087ce:	b2d9      	uxtb	r1, r3
 80087d0:	b909      	cbnz	r1, 80087d6 <__lo0bits+0x32>
 80087d2:	3208      	adds	r2, #8
 80087d4:	0a1b      	lsrs	r3, r3, #8
 80087d6:	0719      	lsls	r1, r3, #28
 80087d8:	bf04      	itt	eq
 80087da:	091b      	lsreq	r3, r3, #4
 80087dc:	3204      	addeq	r2, #4
 80087de:	0799      	lsls	r1, r3, #30
 80087e0:	bf04      	itt	eq
 80087e2:	089b      	lsreq	r3, r3, #2
 80087e4:	3202      	addeq	r2, #2
 80087e6:	07d9      	lsls	r1, r3, #31
 80087e8:	d403      	bmi.n	80087f2 <__lo0bits+0x4e>
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	f102 0201 	add.w	r2, r2, #1
 80087f0:	d003      	beq.n	80087fa <__lo0bits+0x56>
 80087f2:	6003      	str	r3, [r0, #0]
 80087f4:	e7e5      	b.n	80087c2 <__lo0bits+0x1e>
 80087f6:	2200      	movs	r2, #0
 80087f8:	e7e3      	b.n	80087c2 <__lo0bits+0x1e>
 80087fa:	2220      	movs	r2, #32
 80087fc:	e7e1      	b.n	80087c2 <__lo0bits+0x1e>
	...

08008800 <__i2b>:
 8008800:	b510      	push	{r4, lr}
 8008802:	460c      	mov	r4, r1
 8008804:	2101      	movs	r1, #1
 8008806:	f7ff ff05 	bl	8008614 <_Balloc>
 800880a:	4602      	mov	r2, r0
 800880c:	b928      	cbnz	r0, 800881a <__i2b+0x1a>
 800880e:	4b05      	ldr	r3, [pc, #20]	; (8008824 <__i2b+0x24>)
 8008810:	4805      	ldr	r0, [pc, #20]	; (8008828 <__i2b+0x28>)
 8008812:	f240 1145 	movw	r1, #325	; 0x145
 8008816:	f000 fb69 	bl	8008eec <__assert_func>
 800881a:	2301      	movs	r3, #1
 800881c:	6144      	str	r4, [r0, #20]
 800881e:	6103      	str	r3, [r0, #16]
 8008820:	bd10      	pop	{r4, pc}
 8008822:	bf00      	nop
 8008824:	080096e8 	.word	0x080096e8
 8008828:	0800970a 	.word	0x0800970a

0800882c <__multiply>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	4691      	mov	r9, r2
 8008832:	690a      	ldr	r2, [r1, #16]
 8008834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008838:	429a      	cmp	r2, r3
 800883a:	bfb8      	it	lt
 800883c:	460b      	movlt	r3, r1
 800883e:	460c      	mov	r4, r1
 8008840:	bfbc      	itt	lt
 8008842:	464c      	movlt	r4, r9
 8008844:	4699      	movlt	r9, r3
 8008846:	6927      	ldr	r7, [r4, #16]
 8008848:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800884c:	68a3      	ldr	r3, [r4, #8]
 800884e:	6861      	ldr	r1, [r4, #4]
 8008850:	eb07 060a 	add.w	r6, r7, sl
 8008854:	42b3      	cmp	r3, r6
 8008856:	b085      	sub	sp, #20
 8008858:	bfb8      	it	lt
 800885a:	3101      	addlt	r1, #1
 800885c:	f7ff feda 	bl	8008614 <_Balloc>
 8008860:	b930      	cbnz	r0, 8008870 <__multiply+0x44>
 8008862:	4602      	mov	r2, r0
 8008864:	4b44      	ldr	r3, [pc, #272]	; (8008978 <__multiply+0x14c>)
 8008866:	4845      	ldr	r0, [pc, #276]	; (800897c <__multiply+0x150>)
 8008868:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800886c:	f000 fb3e 	bl	8008eec <__assert_func>
 8008870:	f100 0514 	add.w	r5, r0, #20
 8008874:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008878:	462b      	mov	r3, r5
 800887a:	2200      	movs	r2, #0
 800887c:	4543      	cmp	r3, r8
 800887e:	d321      	bcc.n	80088c4 <__multiply+0x98>
 8008880:	f104 0314 	add.w	r3, r4, #20
 8008884:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008888:	f109 0314 	add.w	r3, r9, #20
 800888c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008890:	9202      	str	r2, [sp, #8]
 8008892:	1b3a      	subs	r2, r7, r4
 8008894:	3a15      	subs	r2, #21
 8008896:	f022 0203 	bic.w	r2, r2, #3
 800889a:	3204      	adds	r2, #4
 800889c:	f104 0115 	add.w	r1, r4, #21
 80088a0:	428f      	cmp	r7, r1
 80088a2:	bf38      	it	cc
 80088a4:	2204      	movcc	r2, #4
 80088a6:	9201      	str	r2, [sp, #4]
 80088a8:	9a02      	ldr	r2, [sp, #8]
 80088aa:	9303      	str	r3, [sp, #12]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d80c      	bhi.n	80088ca <__multiply+0x9e>
 80088b0:	2e00      	cmp	r6, #0
 80088b2:	dd03      	ble.n	80088bc <__multiply+0x90>
 80088b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d05b      	beq.n	8008974 <__multiply+0x148>
 80088bc:	6106      	str	r6, [r0, #16]
 80088be:	b005      	add	sp, #20
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	f843 2b04 	str.w	r2, [r3], #4
 80088c8:	e7d8      	b.n	800887c <__multiply+0x50>
 80088ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80088ce:	f1ba 0f00 	cmp.w	sl, #0
 80088d2:	d024      	beq.n	800891e <__multiply+0xf2>
 80088d4:	f104 0e14 	add.w	lr, r4, #20
 80088d8:	46a9      	mov	r9, r5
 80088da:	f04f 0c00 	mov.w	ip, #0
 80088de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80088e2:	f8d9 1000 	ldr.w	r1, [r9]
 80088e6:	fa1f fb82 	uxth.w	fp, r2
 80088ea:	b289      	uxth	r1, r1
 80088ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80088f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80088f4:	f8d9 2000 	ldr.w	r2, [r9]
 80088f8:	4461      	add	r1, ip
 80088fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80088fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008906:	b289      	uxth	r1, r1
 8008908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800890c:	4577      	cmp	r7, lr
 800890e:	f849 1b04 	str.w	r1, [r9], #4
 8008912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008916:	d8e2      	bhi.n	80088de <__multiply+0xb2>
 8008918:	9a01      	ldr	r2, [sp, #4]
 800891a:	f845 c002 	str.w	ip, [r5, r2]
 800891e:	9a03      	ldr	r2, [sp, #12]
 8008920:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008924:	3304      	adds	r3, #4
 8008926:	f1b9 0f00 	cmp.w	r9, #0
 800892a:	d021      	beq.n	8008970 <__multiply+0x144>
 800892c:	6829      	ldr	r1, [r5, #0]
 800892e:	f104 0c14 	add.w	ip, r4, #20
 8008932:	46ae      	mov	lr, r5
 8008934:	f04f 0a00 	mov.w	sl, #0
 8008938:	f8bc b000 	ldrh.w	fp, [ip]
 800893c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008940:	fb09 220b 	mla	r2, r9, fp, r2
 8008944:	4452      	add	r2, sl
 8008946:	b289      	uxth	r1, r1
 8008948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800894c:	f84e 1b04 	str.w	r1, [lr], #4
 8008950:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008958:	f8be 1000 	ldrh.w	r1, [lr]
 800895c:	fb09 110a 	mla	r1, r9, sl, r1
 8008960:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008964:	4567      	cmp	r7, ip
 8008966:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800896a:	d8e5      	bhi.n	8008938 <__multiply+0x10c>
 800896c:	9a01      	ldr	r2, [sp, #4]
 800896e:	50a9      	str	r1, [r5, r2]
 8008970:	3504      	adds	r5, #4
 8008972:	e799      	b.n	80088a8 <__multiply+0x7c>
 8008974:	3e01      	subs	r6, #1
 8008976:	e79b      	b.n	80088b0 <__multiply+0x84>
 8008978:	080096e8 	.word	0x080096e8
 800897c:	0800970a 	.word	0x0800970a

08008980 <__pow5mult>:
 8008980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008984:	4615      	mov	r5, r2
 8008986:	f012 0203 	ands.w	r2, r2, #3
 800898a:	4606      	mov	r6, r0
 800898c:	460f      	mov	r7, r1
 800898e:	d007      	beq.n	80089a0 <__pow5mult+0x20>
 8008990:	4c25      	ldr	r4, [pc, #148]	; (8008a28 <__pow5mult+0xa8>)
 8008992:	3a01      	subs	r2, #1
 8008994:	2300      	movs	r3, #0
 8008996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800899a:	f7ff fe9d 	bl	80086d8 <__multadd>
 800899e:	4607      	mov	r7, r0
 80089a0:	10ad      	asrs	r5, r5, #2
 80089a2:	d03d      	beq.n	8008a20 <__pow5mult+0xa0>
 80089a4:	69f4      	ldr	r4, [r6, #28]
 80089a6:	b97c      	cbnz	r4, 80089c8 <__pow5mult+0x48>
 80089a8:	2010      	movs	r0, #16
 80089aa:	f7ff fcd1 	bl	8008350 <malloc>
 80089ae:	4602      	mov	r2, r0
 80089b0:	61f0      	str	r0, [r6, #28]
 80089b2:	b928      	cbnz	r0, 80089c0 <__pow5mult+0x40>
 80089b4:	4b1d      	ldr	r3, [pc, #116]	; (8008a2c <__pow5mult+0xac>)
 80089b6:	481e      	ldr	r0, [pc, #120]	; (8008a30 <__pow5mult+0xb0>)
 80089b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80089bc:	f000 fa96 	bl	8008eec <__assert_func>
 80089c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c4:	6004      	str	r4, [r0, #0]
 80089c6:	60c4      	str	r4, [r0, #12]
 80089c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80089cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089d0:	b94c      	cbnz	r4, 80089e6 <__pow5mult+0x66>
 80089d2:	f240 2171 	movw	r1, #625	; 0x271
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ff12 	bl	8008800 <__i2b>
 80089dc:	2300      	movs	r3, #0
 80089de:	f8c8 0008 	str.w	r0, [r8, #8]
 80089e2:	4604      	mov	r4, r0
 80089e4:	6003      	str	r3, [r0, #0]
 80089e6:	f04f 0900 	mov.w	r9, #0
 80089ea:	07eb      	lsls	r3, r5, #31
 80089ec:	d50a      	bpl.n	8008a04 <__pow5mult+0x84>
 80089ee:	4639      	mov	r1, r7
 80089f0:	4622      	mov	r2, r4
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ff1a 	bl	800882c <__multiply>
 80089f8:	4639      	mov	r1, r7
 80089fa:	4680      	mov	r8, r0
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff fe49 	bl	8008694 <_Bfree>
 8008a02:	4647      	mov	r7, r8
 8008a04:	106d      	asrs	r5, r5, #1
 8008a06:	d00b      	beq.n	8008a20 <__pow5mult+0xa0>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	b938      	cbnz	r0, 8008a1c <__pow5mult+0x9c>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ff0b 	bl	800882c <__multiply>
 8008a16:	6020      	str	r0, [r4, #0]
 8008a18:	f8c0 9000 	str.w	r9, [r0]
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	e7e4      	b.n	80089ea <__pow5mult+0x6a>
 8008a20:	4638      	mov	r0, r7
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	bf00      	nop
 8008a28:	08009858 	.word	0x08009858
 8008a2c:	08009679 	.word	0x08009679
 8008a30:	0800970a 	.word	0x0800970a

08008a34 <__lshift>:
 8008a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a38:	460c      	mov	r4, r1
 8008a3a:	6849      	ldr	r1, [r1, #4]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	4607      	mov	r7, r0
 8008a46:	4691      	mov	r9, r2
 8008a48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a4c:	f108 0601 	add.w	r6, r8, #1
 8008a50:	42b3      	cmp	r3, r6
 8008a52:	db0b      	blt.n	8008a6c <__lshift+0x38>
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff fddd 	bl	8008614 <_Balloc>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	b948      	cbnz	r0, 8008a72 <__lshift+0x3e>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	4b28      	ldr	r3, [pc, #160]	; (8008b04 <__lshift+0xd0>)
 8008a62:	4829      	ldr	r0, [pc, #164]	; (8008b08 <__lshift+0xd4>)
 8008a64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008a68:	f000 fa40 	bl	8008eec <__assert_func>
 8008a6c:	3101      	adds	r1, #1
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	e7ee      	b.n	8008a50 <__lshift+0x1c>
 8008a72:	2300      	movs	r3, #0
 8008a74:	f100 0114 	add.w	r1, r0, #20
 8008a78:	f100 0210 	add.w	r2, r0, #16
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	4553      	cmp	r3, sl
 8008a80:	db33      	blt.n	8008aea <__lshift+0xb6>
 8008a82:	6920      	ldr	r0, [r4, #16]
 8008a84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a88:	f104 0314 	add.w	r3, r4, #20
 8008a8c:	f019 091f 	ands.w	r9, r9, #31
 8008a90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a98:	d02b      	beq.n	8008af2 <__lshift+0xbe>
 8008a9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a9e:	468a      	mov	sl, r1
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	fa00 f009 	lsl.w	r0, r0, r9
 8008aa8:	4310      	orrs	r0, r2
 8008aaa:	f84a 0b04 	str.w	r0, [sl], #4
 8008aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ab2:	459c      	cmp	ip, r3
 8008ab4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ab8:	d8f3      	bhi.n	8008aa2 <__lshift+0x6e>
 8008aba:	ebac 0304 	sub.w	r3, ip, r4
 8008abe:	3b15      	subs	r3, #21
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	f104 0015 	add.w	r0, r4, #21
 8008aca:	4584      	cmp	ip, r0
 8008acc:	bf38      	it	cc
 8008ace:	2304      	movcc	r3, #4
 8008ad0:	50ca      	str	r2, [r1, r3]
 8008ad2:	b10a      	cbz	r2, 8008ad8 <__lshift+0xa4>
 8008ad4:	f108 0602 	add.w	r6, r8, #2
 8008ad8:	3e01      	subs	r6, #1
 8008ada:	4638      	mov	r0, r7
 8008adc:	612e      	str	r6, [r5, #16]
 8008ade:	4621      	mov	r1, r4
 8008ae0:	f7ff fdd8 	bl	8008694 <_Bfree>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aee:	3301      	adds	r3, #1
 8008af0:	e7c5      	b.n	8008a7e <__lshift+0x4a>
 8008af2:	3904      	subs	r1, #4
 8008af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008afc:	459c      	cmp	ip, r3
 8008afe:	d8f9      	bhi.n	8008af4 <__lshift+0xc0>
 8008b00:	e7ea      	b.n	8008ad8 <__lshift+0xa4>
 8008b02:	bf00      	nop
 8008b04:	080096e8 	.word	0x080096e8
 8008b08:	0800970a 	.word	0x0800970a

08008b0c <__mcmp>:
 8008b0c:	b530      	push	{r4, r5, lr}
 8008b0e:	6902      	ldr	r2, [r0, #16]
 8008b10:	690c      	ldr	r4, [r1, #16]
 8008b12:	1b12      	subs	r2, r2, r4
 8008b14:	d10e      	bne.n	8008b34 <__mcmp+0x28>
 8008b16:	f100 0314 	add.w	r3, r0, #20
 8008b1a:	3114      	adds	r1, #20
 8008b1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b2c:	42a5      	cmp	r5, r4
 8008b2e:	d003      	beq.n	8008b38 <__mcmp+0x2c>
 8008b30:	d305      	bcc.n	8008b3e <__mcmp+0x32>
 8008b32:	2201      	movs	r2, #1
 8008b34:	4610      	mov	r0, r2
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	d3f3      	bcc.n	8008b24 <__mcmp+0x18>
 8008b3c:	e7fa      	b.n	8008b34 <__mcmp+0x28>
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b42:	e7f7      	b.n	8008b34 <__mcmp+0x28>

08008b44 <__mdiff>:
 8008b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4690      	mov	r8, r2
 8008b52:	f7ff ffdb 	bl	8008b0c <__mcmp>
 8008b56:	1e05      	subs	r5, r0, #0
 8008b58:	d110      	bne.n	8008b7c <__mdiff+0x38>
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff fd59 	bl	8008614 <_Balloc>
 8008b62:	b930      	cbnz	r0, 8008b72 <__mdiff+0x2e>
 8008b64:	4b3a      	ldr	r3, [pc, #232]	; (8008c50 <__mdiff+0x10c>)
 8008b66:	4602      	mov	r2, r0
 8008b68:	f240 2137 	movw	r1, #567	; 0x237
 8008b6c:	4839      	ldr	r0, [pc, #228]	; (8008c54 <__mdiff+0x110>)
 8008b6e:	f000 f9bd 	bl	8008eec <__assert_func>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	bfa4      	itt	ge
 8008b7e:	4643      	movge	r3, r8
 8008b80:	46a0      	movge	r8, r4
 8008b82:	4630      	mov	r0, r6
 8008b84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008b88:	bfa6      	itte	ge
 8008b8a:	461c      	movge	r4, r3
 8008b8c:	2500      	movge	r5, #0
 8008b8e:	2501      	movlt	r5, #1
 8008b90:	f7ff fd40 	bl	8008614 <_Balloc>
 8008b94:	b920      	cbnz	r0, 8008ba0 <__mdiff+0x5c>
 8008b96:	4b2e      	ldr	r3, [pc, #184]	; (8008c50 <__mdiff+0x10c>)
 8008b98:	4602      	mov	r2, r0
 8008b9a:	f240 2145 	movw	r1, #581	; 0x245
 8008b9e:	e7e5      	b.n	8008b6c <__mdiff+0x28>
 8008ba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ba4:	6926      	ldr	r6, [r4, #16]
 8008ba6:	60c5      	str	r5, [r0, #12]
 8008ba8:	f104 0914 	add.w	r9, r4, #20
 8008bac:	f108 0514 	add.w	r5, r8, #20
 8008bb0:	f100 0e14 	add.w	lr, r0, #20
 8008bb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bbc:	f108 0210 	add.w	r2, r8, #16
 8008bc0:	46f2      	mov	sl, lr
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bcc:	fa11 f88b 	uxtah	r8, r1, fp
 8008bd0:	b299      	uxth	r1, r3
 8008bd2:	0c1b      	lsrs	r3, r3, #16
 8008bd4:	eba8 0801 	sub.w	r8, r8, r1
 8008bd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bdc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008be0:	fa1f f888 	uxth.w	r8, r8
 8008be4:	1419      	asrs	r1, r3, #16
 8008be6:	454e      	cmp	r6, r9
 8008be8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008bec:	f84a 3b04 	str.w	r3, [sl], #4
 8008bf0:	d8e8      	bhi.n	8008bc4 <__mdiff+0x80>
 8008bf2:	1b33      	subs	r3, r6, r4
 8008bf4:	3b15      	subs	r3, #21
 8008bf6:	f023 0303 	bic.w	r3, r3, #3
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	3415      	adds	r4, #21
 8008bfe:	42a6      	cmp	r6, r4
 8008c00:	bf38      	it	cc
 8008c02:	2304      	movcc	r3, #4
 8008c04:	441d      	add	r5, r3
 8008c06:	4473      	add	r3, lr
 8008c08:	469e      	mov	lr, r3
 8008c0a:	462e      	mov	r6, r5
 8008c0c:	4566      	cmp	r6, ip
 8008c0e:	d30e      	bcc.n	8008c2e <__mdiff+0xea>
 8008c10:	f10c 0203 	add.w	r2, ip, #3
 8008c14:	1b52      	subs	r2, r2, r5
 8008c16:	f022 0203 	bic.w	r2, r2, #3
 8008c1a:	3d03      	subs	r5, #3
 8008c1c:	45ac      	cmp	ip, r5
 8008c1e:	bf38      	it	cc
 8008c20:	2200      	movcc	r2, #0
 8008c22:	4413      	add	r3, r2
 8008c24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008c28:	b17a      	cbz	r2, 8008c4a <__mdiff+0x106>
 8008c2a:	6107      	str	r7, [r0, #16]
 8008c2c:	e7a4      	b.n	8008b78 <__mdiff+0x34>
 8008c2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c32:	fa11 f288 	uxtah	r2, r1, r8
 8008c36:	1414      	asrs	r4, r2, #16
 8008c38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c3c:	b292      	uxth	r2, r2
 8008c3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c42:	f84e 2b04 	str.w	r2, [lr], #4
 8008c46:	1421      	asrs	r1, r4, #16
 8008c48:	e7e0      	b.n	8008c0c <__mdiff+0xc8>
 8008c4a:	3f01      	subs	r7, #1
 8008c4c:	e7ea      	b.n	8008c24 <__mdiff+0xe0>
 8008c4e:	bf00      	nop
 8008c50:	080096e8 	.word	0x080096e8
 8008c54:	0800970a 	.word	0x0800970a

08008c58 <__d2b>:
 8008c58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	2101      	movs	r1, #1
 8008c60:	ec59 8b10 	vmov	r8, r9, d0
 8008c64:	4616      	mov	r6, r2
 8008c66:	f7ff fcd5 	bl	8008614 <_Balloc>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	b930      	cbnz	r0, 8008c7c <__d2b+0x24>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b24      	ldr	r3, [pc, #144]	; (8008d04 <__d2b+0xac>)
 8008c72:	4825      	ldr	r0, [pc, #148]	; (8008d08 <__d2b+0xb0>)
 8008c74:	f240 310f 	movw	r1, #783	; 0x30f
 8008c78:	f000 f938 	bl	8008eec <__assert_func>
 8008c7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c84:	bb2d      	cbnz	r5, 8008cd2 <__d2b+0x7a>
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	f1b8 0300 	subs.w	r3, r8, #0
 8008c8c:	d026      	beq.n	8008cdc <__d2b+0x84>
 8008c8e:	4668      	mov	r0, sp
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	f7ff fd87 	bl	80087a4 <__lo0bits>
 8008c96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c9a:	b1e8      	cbz	r0, 8008cd8 <__d2b+0x80>
 8008c9c:	f1c0 0320 	rsb	r3, r0, #32
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	430b      	orrs	r3, r1
 8008ca6:	40c2      	lsrs	r2, r0
 8008ca8:	6163      	str	r3, [r4, #20]
 8008caa:	9201      	str	r2, [sp, #4]
 8008cac:	9b01      	ldr	r3, [sp, #4]
 8008cae:	61a3      	str	r3, [r4, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bf14      	ite	ne
 8008cb4:	2202      	movne	r2, #2
 8008cb6:	2201      	moveq	r2, #1
 8008cb8:	6122      	str	r2, [r4, #16]
 8008cba:	b1bd      	cbz	r5, 8008cec <__d2b+0x94>
 8008cbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cc0:	4405      	add	r5, r0
 8008cc2:	603d      	str	r5, [r7, #0]
 8008cc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4620      	mov	r0, r4
 8008ccc:	b003      	add	sp, #12
 8008cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cd6:	e7d6      	b.n	8008c86 <__d2b+0x2e>
 8008cd8:	6161      	str	r1, [r4, #20]
 8008cda:	e7e7      	b.n	8008cac <__d2b+0x54>
 8008cdc:	a801      	add	r0, sp, #4
 8008cde:	f7ff fd61 	bl	80087a4 <__lo0bits>
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	6163      	str	r3, [r4, #20]
 8008ce6:	3020      	adds	r0, #32
 8008ce8:	2201      	movs	r2, #1
 8008cea:	e7e5      	b.n	8008cb8 <__d2b+0x60>
 8008cec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cf4:	6038      	str	r0, [r7, #0]
 8008cf6:	6918      	ldr	r0, [r3, #16]
 8008cf8:	f7ff fd34 	bl	8008764 <__hi0bits>
 8008cfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d00:	e7e2      	b.n	8008cc8 <__d2b+0x70>
 8008d02:	bf00      	nop
 8008d04:	080096e8 	.word	0x080096e8
 8008d08:	0800970a 	.word	0x0800970a

08008d0c <__sread>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	460c      	mov	r4, r1
 8008d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d14:	f000 f8a8 	bl	8008e68 <_read_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	bfab      	itete	ge
 8008d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d20:	181b      	addge	r3, r3, r0
 8008d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d26:	bfac      	ite	ge
 8008d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d2a:	81a3      	strhlt	r3, [r4, #12]
 8008d2c:	bd10      	pop	{r4, pc}

08008d2e <__swrite>:
 8008d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	461f      	mov	r7, r3
 8008d34:	898b      	ldrh	r3, [r1, #12]
 8008d36:	05db      	lsls	r3, r3, #23
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	d505      	bpl.n	8008d4c <__swrite+0x1e>
 8008d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d44:	2302      	movs	r3, #2
 8008d46:	2200      	movs	r2, #0
 8008d48:	f000 f87c 	bl	8008e44 <_lseek_r>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d62:	f000 b8a3 	b.w	8008eac <_write_r>

08008d66 <__sseek>:
 8008d66:	b510      	push	{r4, lr}
 8008d68:	460c      	mov	r4, r1
 8008d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d6e:	f000 f869 	bl	8008e44 <_lseek_r>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	bf15      	itete	ne
 8008d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d82:	81a3      	strheq	r3, [r4, #12]
 8008d84:	bf18      	it	ne
 8008d86:	81a3      	strhne	r3, [r4, #12]
 8008d88:	bd10      	pop	{r4, pc}

08008d8a <__sclose>:
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	f000 b849 	b.w	8008e24 <_close_r>

08008d92 <_realloc_r>:
 8008d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d96:	4680      	mov	r8, r0
 8008d98:	4614      	mov	r4, r2
 8008d9a:	460e      	mov	r6, r1
 8008d9c:	b921      	cbnz	r1, 8008da8 <_realloc_r+0x16>
 8008d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	4611      	mov	r1, r2
 8008da4:	f7ff bafc 	b.w	80083a0 <_malloc_r>
 8008da8:	b92a      	cbnz	r2, 8008db6 <_realloc_r+0x24>
 8008daa:	f000 f8d3 	bl	8008f54 <_free_r>
 8008dae:	4625      	mov	r5, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db6:	f000 f92b 	bl	8009010 <_malloc_usable_size_r>
 8008dba:	4284      	cmp	r4, r0
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	d802      	bhi.n	8008dc6 <_realloc_r+0x34>
 8008dc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dc4:	d812      	bhi.n	8008dec <_realloc_r+0x5a>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f7ff fae9 	bl	80083a0 <_malloc_r>
 8008dce:	4605      	mov	r5, r0
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d0ed      	beq.n	8008db0 <_realloc_r+0x1e>
 8008dd4:	42bc      	cmp	r4, r7
 8008dd6:	4622      	mov	r2, r4
 8008dd8:	4631      	mov	r1, r6
 8008dda:	bf28      	it	cs
 8008ddc:	463a      	movcs	r2, r7
 8008dde:	f000 f877 	bl	8008ed0 <memcpy>
 8008de2:	4631      	mov	r1, r6
 8008de4:	4640      	mov	r0, r8
 8008de6:	f000 f8b5 	bl	8008f54 <_free_r>
 8008dea:	e7e1      	b.n	8008db0 <_realloc_r+0x1e>
 8008dec:	4635      	mov	r5, r6
 8008dee:	e7df      	b.n	8008db0 <_realloc_r+0x1e>

08008df0 <memmove>:
 8008df0:	4288      	cmp	r0, r1
 8008df2:	b510      	push	{r4, lr}
 8008df4:	eb01 0402 	add.w	r4, r1, r2
 8008df8:	d902      	bls.n	8008e00 <memmove+0x10>
 8008dfa:	4284      	cmp	r4, r0
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	d807      	bhi.n	8008e10 <memmove+0x20>
 8008e00:	1e43      	subs	r3, r0, #1
 8008e02:	42a1      	cmp	r1, r4
 8008e04:	d008      	beq.n	8008e18 <memmove+0x28>
 8008e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e0e:	e7f8      	b.n	8008e02 <memmove+0x12>
 8008e10:	4402      	add	r2, r0
 8008e12:	4601      	mov	r1, r0
 8008e14:	428a      	cmp	r2, r1
 8008e16:	d100      	bne.n	8008e1a <memmove+0x2a>
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e22:	e7f7      	b.n	8008e14 <memmove+0x24>

08008e24 <_close_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d06      	ldr	r5, [pc, #24]	; (8008e40 <_close_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	602b      	str	r3, [r5, #0]
 8008e30:	f7f8 fbc7 	bl	80015c2 <_close>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_close_r+0x1a>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_close_r+0x1a>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20000c88 	.word	0x20000c88

08008e44 <_lseek_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	; (8008e64 <_lseek_r+0x20>)
 8008e48:	4604      	mov	r4, r0
 8008e4a:	4608      	mov	r0, r1
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	2200      	movs	r2, #0
 8008e50:	602a      	str	r2, [r5, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	f7f8 fbdc 	bl	8001610 <_lseek>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_lseek_r+0x1e>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_lseek_r+0x1e>
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	20000c88 	.word	0x20000c88

08008e68 <_read_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d07      	ldr	r5, [pc, #28]	; (8008e88 <_read_r+0x20>)
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	2200      	movs	r2, #0
 8008e74:	602a      	str	r2, [r5, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f7f8 fb6a 	bl	8001550 <_read>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_read_r+0x1e>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_read_r+0x1e>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	20000c88 	.word	0x20000c88

08008e8c <_sbrk_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d06      	ldr	r5, [pc, #24]	; (8008ea8 <_sbrk_r+0x1c>)
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	4608      	mov	r0, r1
 8008e96:	602b      	str	r3, [r5, #0]
 8008e98:	f7f8 fbc8 	bl	800162c <_sbrk>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d102      	bne.n	8008ea6 <_sbrk_r+0x1a>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	b103      	cbz	r3, 8008ea6 <_sbrk_r+0x1a>
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	20000c88 	.word	0x20000c88

08008eac <_write_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d07      	ldr	r5, [pc, #28]	; (8008ecc <_write_r+0x20>)
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	602a      	str	r2, [r5, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f7f8 fb65 	bl	800158a <_write>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_write_r+0x1e>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_write_r+0x1e>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000c88 	.word	0x20000c88

08008ed0 <memcpy>:
 8008ed0:	440a      	add	r2, r1
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ed8:	d100      	bne.n	8008edc <memcpy+0xc>
 8008eda:	4770      	bx	lr
 8008edc:	b510      	push	{r4, lr}
 8008ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ee6:	4291      	cmp	r1, r2
 8008ee8:	d1f9      	bne.n	8008ede <memcpy+0xe>
 8008eea:	bd10      	pop	{r4, pc}

08008eec <__assert_func>:
 8008eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eee:	4614      	mov	r4, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <__assert_func+0x2c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	68d8      	ldr	r0, [r3, #12]
 8008efa:	b14c      	cbz	r4, 8008f10 <__assert_func+0x24>
 8008efc:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <__assert_func+0x30>)
 8008efe:	9100      	str	r1, [sp, #0]
 8008f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f04:	4906      	ldr	r1, [pc, #24]	; (8008f20 <__assert_func+0x34>)
 8008f06:	462b      	mov	r3, r5
 8008f08:	f000 f88a 	bl	8009020 <fiprintf>
 8008f0c:	f000 f8a7 	bl	800905e <abort>
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <__assert_func+0x38>)
 8008f12:	461c      	mov	r4, r3
 8008f14:	e7f3      	b.n	8008efe <__assert_func+0x12>
 8008f16:	bf00      	nop
 8008f18:	2000006c 	.word	0x2000006c
 8008f1c:	0800996f 	.word	0x0800996f
 8008f20:	0800997c 	.word	0x0800997c
 8008f24:	080099aa 	.word	0x080099aa

08008f28 <_calloc_r>:
 8008f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2a:	fba1 2402 	umull	r2, r4, r1, r2
 8008f2e:	b94c      	cbnz	r4, 8008f44 <_calloc_r+0x1c>
 8008f30:	4611      	mov	r1, r2
 8008f32:	9201      	str	r2, [sp, #4]
 8008f34:	f7ff fa34 	bl	80083a0 <_malloc_r>
 8008f38:	9a01      	ldr	r2, [sp, #4]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	b930      	cbnz	r0, 8008f4c <_calloc_r+0x24>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	b003      	add	sp, #12
 8008f42:	bd30      	pop	{r4, r5, pc}
 8008f44:	220c      	movs	r2, #12
 8008f46:	6002      	str	r2, [r0, #0]
 8008f48:	2500      	movs	r5, #0
 8008f4a:	e7f8      	b.n	8008f3e <_calloc_r+0x16>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7fe fa77 	bl	8007440 <memset>
 8008f52:	e7f4      	b.n	8008f3e <_calloc_r+0x16>

08008f54 <_free_r>:
 8008f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d044      	beq.n	8008fe4 <_free_r+0x90>
 8008f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f5e:	9001      	str	r0, [sp, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f1a1 0404 	sub.w	r4, r1, #4
 8008f66:	bfb8      	it	lt
 8008f68:	18e4      	addlt	r4, r4, r3
 8008f6a:	f7ff fb47 	bl	80085fc <__malloc_lock>
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <_free_r+0x94>)
 8008f70:	9801      	ldr	r0, [sp, #4]
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	b933      	cbnz	r3, 8008f84 <_free_r+0x30>
 8008f76:	6063      	str	r3, [r4, #4]
 8008f78:	6014      	str	r4, [r2, #0]
 8008f7a:	b003      	add	sp, #12
 8008f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f80:	f7ff bb42 	b.w	8008608 <__malloc_unlock>
 8008f84:	42a3      	cmp	r3, r4
 8008f86:	d908      	bls.n	8008f9a <_free_r+0x46>
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	428b      	cmp	r3, r1
 8008f8e:	bf01      	itttt	eq
 8008f90:	6819      	ldreq	r1, [r3, #0]
 8008f92:	685b      	ldreq	r3, [r3, #4]
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	e7ed      	b.n	8008f76 <_free_r+0x22>
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	b10b      	cbz	r3, 8008fa4 <_free_r+0x50>
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	d9fa      	bls.n	8008f9a <_free_r+0x46>
 8008fa4:	6811      	ldr	r1, [r2, #0]
 8008fa6:	1855      	adds	r5, r2, r1
 8008fa8:	42a5      	cmp	r5, r4
 8008faa:	d10b      	bne.n	8008fc4 <_free_r+0x70>
 8008fac:	6824      	ldr	r4, [r4, #0]
 8008fae:	4421      	add	r1, r4
 8008fb0:	1854      	adds	r4, r2, r1
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	6011      	str	r1, [r2, #0]
 8008fb6:	d1e0      	bne.n	8008f7a <_free_r+0x26>
 8008fb8:	681c      	ldr	r4, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	6053      	str	r3, [r2, #4]
 8008fbe:	440c      	add	r4, r1
 8008fc0:	6014      	str	r4, [r2, #0]
 8008fc2:	e7da      	b.n	8008f7a <_free_r+0x26>
 8008fc4:	d902      	bls.n	8008fcc <_free_r+0x78>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	6003      	str	r3, [r0, #0]
 8008fca:	e7d6      	b.n	8008f7a <_free_r+0x26>
 8008fcc:	6825      	ldr	r5, [r4, #0]
 8008fce:	1961      	adds	r1, r4, r5
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	bf04      	itt	eq
 8008fd4:	6819      	ldreq	r1, [r3, #0]
 8008fd6:	685b      	ldreq	r3, [r3, #4]
 8008fd8:	6063      	str	r3, [r4, #4]
 8008fda:	bf04      	itt	eq
 8008fdc:	1949      	addeq	r1, r1, r5
 8008fde:	6021      	streq	r1, [r4, #0]
 8008fe0:	6054      	str	r4, [r2, #4]
 8008fe2:	e7ca      	b.n	8008f7a <_free_r+0x26>
 8008fe4:	b003      	add	sp, #12
 8008fe6:	bd30      	pop	{r4, r5, pc}
 8008fe8:	20000c80 	.word	0x20000c80

08008fec <__ascii_mbtowc>:
 8008fec:	b082      	sub	sp, #8
 8008fee:	b901      	cbnz	r1, 8008ff2 <__ascii_mbtowc+0x6>
 8008ff0:	a901      	add	r1, sp, #4
 8008ff2:	b142      	cbz	r2, 8009006 <__ascii_mbtowc+0x1a>
 8008ff4:	b14b      	cbz	r3, 800900a <__ascii_mbtowc+0x1e>
 8008ff6:	7813      	ldrb	r3, [r2, #0]
 8008ff8:	600b      	str	r3, [r1, #0]
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	1e10      	subs	r0, r2, #0
 8008ffe:	bf18      	it	ne
 8009000:	2001      	movne	r0, #1
 8009002:	b002      	add	sp, #8
 8009004:	4770      	bx	lr
 8009006:	4610      	mov	r0, r2
 8009008:	e7fb      	b.n	8009002 <__ascii_mbtowc+0x16>
 800900a:	f06f 0001 	mvn.w	r0, #1
 800900e:	e7f8      	b.n	8009002 <__ascii_mbtowc+0x16>

08009010 <_malloc_usable_size_r>:
 8009010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009014:	1f18      	subs	r0, r3, #4
 8009016:	2b00      	cmp	r3, #0
 8009018:	bfbc      	itt	lt
 800901a:	580b      	ldrlt	r3, [r1, r0]
 800901c:	18c0      	addlt	r0, r0, r3
 800901e:	4770      	bx	lr

08009020 <fiprintf>:
 8009020:	b40e      	push	{r1, r2, r3}
 8009022:	b503      	push	{r0, r1, lr}
 8009024:	4601      	mov	r1, r0
 8009026:	ab03      	add	r3, sp, #12
 8009028:	4805      	ldr	r0, [pc, #20]	; (8009040 <fiprintf+0x20>)
 800902a:	f853 2b04 	ldr.w	r2, [r3], #4
 800902e:	6800      	ldr	r0, [r0, #0]
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	f000 f845 	bl	80090c0 <_vfiprintf_r>
 8009036:	b002      	add	sp, #8
 8009038:	f85d eb04 	ldr.w	lr, [sp], #4
 800903c:	b003      	add	sp, #12
 800903e:	4770      	bx	lr
 8009040:	2000006c 	.word	0x2000006c

08009044 <__ascii_wctomb>:
 8009044:	b149      	cbz	r1, 800905a <__ascii_wctomb+0x16>
 8009046:	2aff      	cmp	r2, #255	; 0xff
 8009048:	bf85      	ittet	hi
 800904a:	238a      	movhi	r3, #138	; 0x8a
 800904c:	6003      	strhi	r3, [r0, #0]
 800904e:	700a      	strbls	r2, [r1, #0]
 8009050:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009054:	bf98      	it	ls
 8009056:	2001      	movls	r0, #1
 8009058:	4770      	bx	lr
 800905a:	4608      	mov	r0, r1
 800905c:	4770      	bx	lr

0800905e <abort>:
 800905e:	b508      	push	{r3, lr}
 8009060:	2006      	movs	r0, #6
 8009062:	f000 fa89 	bl	8009578 <raise>
 8009066:	2001      	movs	r0, #1
 8009068:	f7f8 fa68 	bl	800153c <_exit>

0800906c <__sfputc_r>:
 800906c:	6893      	ldr	r3, [r2, #8]
 800906e:	3b01      	subs	r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	b410      	push	{r4}
 8009074:	6093      	str	r3, [r2, #8]
 8009076:	da08      	bge.n	800908a <__sfputc_r+0x1e>
 8009078:	6994      	ldr	r4, [r2, #24]
 800907a:	42a3      	cmp	r3, r4
 800907c:	db01      	blt.n	8009082 <__sfputc_r+0x16>
 800907e:	290a      	cmp	r1, #10
 8009080:	d103      	bne.n	800908a <__sfputc_r+0x1e>
 8009082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009086:	f000 b935 	b.w	80092f4 <__swbuf_r>
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	1c58      	adds	r0, r3, #1
 800908e:	6010      	str	r0, [r2, #0]
 8009090:	7019      	strb	r1, [r3, #0]
 8009092:	4608      	mov	r0, r1
 8009094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009098:	4770      	bx	lr

0800909a <__sfputs_r>:
 800909a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909c:	4606      	mov	r6, r0
 800909e:	460f      	mov	r7, r1
 80090a0:	4614      	mov	r4, r2
 80090a2:	18d5      	adds	r5, r2, r3
 80090a4:	42ac      	cmp	r4, r5
 80090a6:	d101      	bne.n	80090ac <__sfputs_r+0x12>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e007      	b.n	80090bc <__sfputs_r+0x22>
 80090ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b0:	463a      	mov	r2, r7
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ffda 	bl	800906c <__sfputc_r>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d1f3      	bne.n	80090a4 <__sfputs_r+0xa>
 80090bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090c0 <_vfiprintf_r>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	460d      	mov	r5, r1
 80090c6:	b09d      	sub	sp, #116	; 0x74
 80090c8:	4614      	mov	r4, r2
 80090ca:	4698      	mov	r8, r3
 80090cc:	4606      	mov	r6, r0
 80090ce:	b118      	cbz	r0, 80090d8 <_vfiprintf_r+0x18>
 80090d0:	6a03      	ldr	r3, [r0, #32]
 80090d2:	b90b      	cbnz	r3, 80090d8 <_vfiprintf_r+0x18>
 80090d4:	f7fe f97e 	bl	80073d4 <__sinit>
 80090d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090da:	07d9      	lsls	r1, r3, #31
 80090dc:	d405      	bmi.n	80090ea <_vfiprintf_r+0x2a>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	059a      	lsls	r2, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_vfiprintf_r+0x2a>
 80090e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e6:	f7fe f9e2 	bl	80074ae <__retarget_lock_acquire_recursive>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	071b      	lsls	r3, r3, #28
 80090ee:	d501      	bpl.n	80090f4 <_vfiprintf_r+0x34>
 80090f0:	692b      	ldr	r3, [r5, #16]
 80090f2:	b99b      	cbnz	r3, 800911c <_vfiprintf_r+0x5c>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4630      	mov	r0, r6
 80090f8:	f000 f93a 	bl	8009370 <__swsetup_r>
 80090fc:	b170      	cbz	r0, 800911c <_vfiprintf_r+0x5c>
 80090fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009100:	07dc      	lsls	r4, r3, #31
 8009102:	d504      	bpl.n	800910e <_vfiprintf_r+0x4e>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009108:	b01d      	add	sp, #116	; 0x74
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	89ab      	ldrh	r3, [r5, #12]
 8009110:	0598      	lsls	r0, r3, #22
 8009112:	d4f7      	bmi.n	8009104 <_vfiprintf_r+0x44>
 8009114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009116:	f7fe f9cb 	bl	80074b0 <__retarget_lock_release_recursive>
 800911a:	e7f3      	b.n	8009104 <_vfiprintf_r+0x44>
 800911c:	2300      	movs	r3, #0
 800911e:	9309      	str	r3, [sp, #36]	; 0x24
 8009120:	2320      	movs	r3, #32
 8009122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009126:	f8cd 800c 	str.w	r8, [sp, #12]
 800912a:	2330      	movs	r3, #48	; 0x30
 800912c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092e0 <_vfiprintf_r+0x220>
 8009130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009134:	f04f 0901 	mov.w	r9, #1
 8009138:	4623      	mov	r3, r4
 800913a:	469a      	mov	sl, r3
 800913c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009140:	b10a      	cbz	r2, 8009146 <_vfiprintf_r+0x86>
 8009142:	2a25      	cmp	r2, #37	; 0x25
 8009144:	d1f9      	bne.n	800913a <_vfiprintf_r+0x7a>
 8009146:	ebba 0b04 	subs.w	fp, sl, r4
 800914a:	d00b      	beq.n	8009164 <_vfiprintf_r+0xa4>
 800914c:	465b      	mov	r3, fp
 800914e:	4622      	mov	r2, r4
 8009150:	4629      	mov	r1, r5
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff ffa1 	bl	800909a <__sfputs_r>
 8009158:	3001      	adds	r0, #1
 800915a:	f000 80a9 	beq.w	80092b0 <_vfiprintf_r+0x1f0>
 800915e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009160:	445a      	add	r2, fp
 8009162:	9209      	str	r2, [sp, #36]	; 0x24
 8009164:	f89a 3000 	ldrb.w	r3, [sl]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80a1 	beq.w	80092b0 <_vfiprintf_r+0x1f0>
 800916e:	2300      	movs	r3, #0
 8009170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009178:	f10a 0a01 	add.w	sl, sl, #1
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	9307      	str	r3, [sp, #28]
 8009180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009184:	931a      	str	r3, [sp, #104]	; 0x68
 8009186:	4654      	mov	r4, sl
 8009188:	2205      	movs	r2, #5
 800918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918e:	4854      	ldr	r0, [pc, #336]	; (80092e0 <_vfiprintf_r+0x220>)
 8009190:	f7f7 f856 	bl	8000240 <memchr>
 8009194:	9a04      	ldr	r2, [sp, #16]
 8009196:	b9d8      	cbnz	r0, 80091d0 <_vfiprintf_r+0x110>
 8009198:	06d1      	lsls	r1, r2, #27
 800919a:	bf44      	itt	mi
 800919c:	2320      	movmi	r3, #32
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a2:	0713      	lsls	r3, r2, #28
 80091a4:	bf44      	itt	mi
 80091a6:	232b      	movmi	r3, #43	; 0x2b
 80091a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ac:	f89a 3000 	ldrb.w	r3, [sl]
 80091b0:	2b2a      	cmp	r3, #42	; 0x2a
 80091b2:	d015      	beq.n	80091e0 <_vfiprintf_r+0x120>
 80091b4:	9a07      	ldr	r2, [sp, #28]
 80091b6:	4654      	mov	r4, sl
 80091b8:	2000      	movs	r0, #0
 80091ba:	f04f 0c0a 	mov.w	ip, #10
 80091be:	4621      	mov	r1, r4
 80091c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c4:	3b30      	subs	r3, #48	; 0x30
 80091c6:	2b09      	cmp	r3, #9
 80091c8:	d94d      	bls.n	8009266 <_vfiprintf_r+0x1a6>
 80091ca:	b1b0      	cbz	r0, 80091fa <_vfiprintf_r+0x13a>
 80091cc:	9207      	str	r2, [sp, #28]
 80091ce:	e014      	b.n	80091fa <_vfiprintf_r+0x13a>
 80091d0:	eba0 0308 	sub.w	r3, r0, r8
 80091d4:	fa09 f303 	lsl.w	r3, r9, r3
 80091d8:	4313      	orrs	r3, r2
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	46a2      	mov	sl, r4
 80091de:	e7d2      	b.n	8009186 <_vfiprintf_r+0xc6>
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	1d19      	adds	r1, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	9103      	str	r1, [sp, #12]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfbb      	ittet	lt
 80091ec:	425b      	neglt	r3, r3
 80091ee:	f042 0202 	orrlt.w	r2, r2, #2
 80091f2:	9307      	strge	r3, [sp, #28]
 80091f4:	9307      	strlt	r3, [sp, #28]
 80091f6:	bfb8      	it	lt
 80091f8:	9204      	strlt	r2, [sp, #16]
 80091fa:	7823      	ldrb	r3, [r4, #0]
 80091fc:	2b2e      	cmp	r3, #46	; 0x2e
 80091fe:	d10c      	bne.n	800921a <_vfiprintf_r+0x15a>
 8009200:	7863      	ldrb	r3, [r4, #1]
 8009202:	2b2a      	cmp	r3, #42	; 0x2a
 8009204:	d134      	bne.n	8009270 <_vfiprintf_r+0x1b0>
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	9203      	str	r2, [sp, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	bfb8      	it	lt
 8009212:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009216:	3402      	adds	r4, #2
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092f0 <_vfiprintf_r+0x230>
 800921e:	7821      	ldrb	r1, [r4, #0]
 8009220:	2203      	movs	r2, #3
 8009222:	4650      	mov	r0, sl
 8009224:	f7f7 f80c 	bl	8000240 <memchr>
 8009228:	b138      	cbz	r0, 800923a <_vfiprintf_r+0x17a>
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	eba0 000a 	sub.w	r0, r0, sl
 8009230:	2240      	movs	r2, #64	; 0x40
 8009232:	4082      	lsls	r2, r0
 8009234:	4313      	orrs	r3, r2
 8009236:	3401      	adds	r4, #1
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923e:	4829      	ldr	r0, [pc, #164]	; (80092e4 <_vfiprintf_r+0x224>)
 8009240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009244:	2206      	movs	r2, #6
 8009246:	f7f6 fffb 	bl	8000240 <memchr>
 800924a:	2800      	cmp	r0, #0
 800924c:	d03f      	beq.n	80092ce <_vfiprintf_r+0x20e>
 800924e:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <_vfiprintf_r+0x228>)
 8009250:	bb1b      	cbnz	r3, 800929a <_vfiprintf_r+0x1da>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	3307      	adds	r3, #7
 8009256:	f023 0307 	bic.w	r3, r3, #7
 800925a:	3308      	adds	r3, #8
 800925c:	9303      	str	r3, [sp, #12]
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	443b      	add	r3, r7
 8009262:	9309      	str	r3, [sp, #36]	; 0x24
 8009264:	e768      	b.n	8009138 <_vfiprintf_r+0x78>
 8009266:	fb0c 3202 	mla	r2, ip, r2, r3
 800926a:	460c      	mov	r4, r1
 800926c:	2001      	movs	r0, #1
 800926e:	e7a6      	b.n	80091be <_vfiprintf_r+0xfe>
 8009270:	2300      	movs	r3, #0
 8009272:	3401      	adds	r4, #1
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	4619      	mov	r1, r3
 8009278:	f04f 0c0a 	mov.w	ip, #10
 800927c:	4620      	mov	r0, r4
 800927e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009282:	3a30      	subs	r2, #48	; 0x30
 8009284:	2a09      	cmp	r2, #9
 8009286:	d903      	bls.n	8009290 <_vfiprintf_r+0x1d0>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0c6      	beq.n	800921a <_vfiprintf_r+0x15a>
 800928c:	9105      	str	r1, [sp, #20]
 800928e:	e7c4      	b.n	800921a <_vfiprintf_r+0x15a>
 8009290:	fb0c 2101 	mla	r1, ip, r1, r2
 8009294:	4604      	mov	r4, r0
 8009296:	2301      	movs	r3, #1
 8009298:	e7f0      	b.n	800927c <_vfiprintf_r+0x1bc>
 800929a:	ab03      	add	r3, sp, #12
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	462a      	mov	r2, r5
 80092a0:	4b12      	ldr	r3, [pc, #72]	; (80092ec <_vfiprintf_r+0x22c>)
 80092a2:	a904      	add	r1, sp, #16
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7fd fc3f 	bl	8006b28 <_printf_float>
 80092aa:	4607      	mov	r7, r0
 80092ac:	1c78      	adds	r0, r7, #1
 80092ae:	d1d6      	bne.n	800925e <_vfiprintf_r+0x19e>
 80092b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_vfiprintf_r+0x202>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	059a      	lsls	r2, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_vfiprintf_r+0x202>
 80092bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092be:	f7fe f8f7 	bl	80074b0 <__retarget_lock_release_recursive>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	065b      	lsls	r3, r3, #25
 80092c6:	f53f af1d 	bmi.w	8009104 <_vfiprintf_r+0x44>
 80092ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092cc:	e71c      	b.n	8009108 <_vfiprintf_r+0x48>
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	462a      	mov	r2, r5
 80092d4:	4b05      	ldr	r3, [pc, #20]	; (80092ec <_vfiprintf_r+0x22c>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	4630      	mov	r0, r6
 80092da:	f7fd fead 	bl	8007038 <_printf_i>
 80092de:	e7e4      	b.n	80092aa <_vfiprintf_r+0x1ea>
 80092e0:	080096f9 	.word	0x080096f9
 80092e4:	08009703 	.word	0x08009703
 80092e8:	08006b29 	.word	0x08006b29
 80092ec:	0800909b 	.word	0x0800909b
 80092f0:	080096ff 	.word	0x080096ff

080092f4 <__swbuf_r>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	460e      	mov	r6, r1
 80092f8:	4614      	mov	r4, r2
 80092fa:	4605      	mov	r5, r0
 80092fc:	b118      	cbz	r0, 8009306 <__swbuf_r+0x12>
 80092fe:	6a03      	ldr	r3, [r0, #32]
 8009300:	b90b      	cbnz	r3, 8009306 <__swbuf_r+0x12>
 8009302:	f7fe f867 	bl	80073d4 <__sinit>
 8009306:	69a3      	ldr	r3, [r4, #24]
 8009308:	60a3      	str	r3, [r4, #8]
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	071a      	lsls	r2, r3, #28
 800930e:	d525      	bpl.n	800935c <__swbuf_r+0x68>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	b31b      	cbz	r3, 800935c <__swbuf_r+0x68>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	6922      	ldr	r2, [r4, #16]
 8009318:	1a98      	subs	r0, r3, r2
 800931a:	6963      	ldr	r3, [r4, #20]
 800931c:	b2f6      	uxtb	r6, r6
 800931e:	4283      	cmp	r3, r0
 8009320:	4637      	mov	r7, r6
 8009322:	dc04      	bgt.n	800932e <__swbuf_r+0x3a>
 8009324:	4621      	mov	r1, r4
 8009326:	4628      	mov	r0, r5
 8009328:	f7ff f940 	bl	80085ac <_fflush_r>
 800932c:	b9e0      	cbnz	r0, 8009368 <__swbuf_r+0x74>
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	3b01      	subs	r3, #1
 8009332:	60a3      	str	r3, [r4, #8]
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	6022      	str	r2, [r4, #0]
 800933a:	701e      	strb	r6, [r3, #0]
 800933c:	6962      	ldr	r2, [r4, #20]
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	429a      	cmp	r2, r3
 8009342:	d004      	beq.n	800934e <__swbuf_r+0x5a>
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	07db      	lsls	r3, r3, #31
 8009348:	d506      	bpl.n	8009358 <__swbuf_r+0x64>
 800934a:	2e0a      	cmp	r6, #10
 800934c:	d104      	bne.n	8009358 <__swbuf_r+0x64>
 800934e:	4621      	mov	r1, r4
 8009350:	4628      	mov	r0, r5
 8009352:	f7ff f92b 	bl	80085ac <_fflush_r>
 8009356:	b938      	cbnz	r0, 8009368 <__swbuf_r+0x74>
 8009358:	4638      	mov	r0, r7
 800935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935c:	4621      	mov	r1, r4
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f806 	bl	8009370 <__swsetup_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	d0d5      	beq.n	8009314 <__swbuf_r+0x20>
 8009368:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800936c:	e7f4      	b.n	8009358 <__swbuf_r+0x64>
	...

08009370 <__swsetup_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4b2a      	ldr	r3, [pc, #168]	; (800941c <__swsetup_r+0xac>)
 8009374:	4605      	mov	r5, r0
 8009376:	6818      	ldr	r0, [r3, #0]
 8009378:	460c      	mov	r4, r1
 800937a:	b118      	cbz	r0, 8009384 <__swsetup_r+0x14>
 800937c:	6a03      	ldr	r3, [r0, #32]
 800937e:	b90b      	cbnz	r3, 8009384 <__swsetup_r+0x14>
 8009380:	f7fe f828 	bl	80073d4 <__sinit>
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800938a:	0718      	lsls	r0, r3, #28
 800938c:	d422      	bmi.n	80093d4 <__swsetup_r+0x64>
 800938e:	06d9      	lsls	r1, r3, #27
 8009390:	d407      	bmi.n	80093a2 <__swsetup_r+0x32>
 8009392:	2309      	movs	r3, #9
 8009394:	602b      	str	r3, [r5, #0]
 8009396:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093a0:	e034      	b.n	800940c <__swsetup_r+0x9c>
 80093a2:	0758      	lsls	r0, r3, #29
 80093a4:	d512      	bpl.n	80093cc <__swsetup_r+0x5c>
 80093a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093a8:	b141      	cbz	r1, 80093bc <__swsetup_r+0x4c>
 80093aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ae:	4299      	cmp	r1, r3
 80093b0:	d002      	beq.n	80093b8 <__swsetup_r+0x48>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7ff fdce 	bl	8008f54 <_free_r>
 80093b8:	2300      	movs	r3, #0
 80093ba:	6363      	str	r3, [r4, #52]	; 0x34
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	2300      	movs	r3, #0
 80093c6:	6063      	str	r3, [r4, #4]
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	f043 0308 	orr.w	r3, r3, #8
 80093d2:	81a3      	strh	r3, [r4, #12]
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	b94b      	cbnz	r3, 80093ec <__swsetup_r+0x7c>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e2:	d003      	beq.n	80093ec <__swsetup_r+0x7c>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f840 	bl	800946c <__smakebuf_r>
 80093ec:	89a0      	ldrh	r0, [r4, #12]
 80093ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f2:	f010 0301 	ands.w	r3, r0, #1
 80093f6:	d00a      	beq.n	800940e <__swsetup_r+0x9e>
 80093f8:	2300      	movs	r3, #0
 80093fa:	60a3      	str	r3, [r4, #8]
 80093fc:	6963      	ldr	r3, [r4, #20]
 80093fe:	425b      	negs	r3, r3
 8009400:	61a3      	str	r3, [r4, #24]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	b943      	cbnz	r3, 8009418 <__swsetup_r+0xa8>
 8009406:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800940a:	d1c4      	bne.n	8009396 <__swsetup_r+0x26>
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	0781      	lsls	r1, r0, #30
 8009410:	bf58      	it	pl
 8009412:	6963      	ldrpl	r3, [r4, #20]
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	e7f4      	b.n	8009402 <__swsetup_r+0x92>
 8009418:	2000      	movs	r0, #0
 800941a:	e7f7      	b.n	800940c <__swsetup_r+0x9c>
 800941c:	2000006c 	.word	0x2000006c

08009420 <__swhatbuf_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	460c      	mov	r4, r1
 8009424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009428:	2900      	cmp	r1, #0
 800942a:	b096      	sub	sp, #88	; 0x58
 800942c:	4615      	mov	r5, r2
 800942e:	461e      	mov	r6, r3
 8009430:	da0d      	bge.n	800944e <__swhatbuf_r+0x2e>
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009438:	f04f 0100 	mov.w	r1, #0
 800943c:	bf0c      	ite	eq
 800943e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009442:	2340      	movne	r3, #64	; 0x40
 8009444:	2000      	movs	r0, #0
 8009446:	6031      	str	r1, [r6, #0]
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	b016      	add	sp, #88	; 0x58
 800944c:	bd70      	pop	{r4, r5, r6, pc}
 800944e:	466a      	mov	r2, sp
 8009450:	f000 f848 	bl	80094e4 <_fstat_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	dbec      	blt.n	8009432 <__swhatbuf_r+0x12>
 8009458:	9901      	ldr	r1, [sp, #4]
 800945a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800945e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009462:	4259      	negs	r1, r3
 8009464:	4159      	adcs	r1, r3
 8009466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946a:	e7eb      	b.n	8009444 <__swhatbuf_r+0x24>

0800946c <__smakebuf_r>:
 800946c:	898b      	ldrh	r3, [r1, #12]
 800946e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009470:	079d      	lsls	r5, r3, #30
 8009472:	4606      	mov	r6, r0
 8009474:	460c      	mov	r4, r1
 8009476:	d507      	bpl.n	8009488 <__smakebuf_r+0x1c>
 8009478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	6123      	str	r3, [r4, #16]
 8009480:	2301      	movs	r3, #1
 8009482:	6163      	str	r3, [r4, #20]
 8009484:	b002      	add	sp, #8
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	ab01      	add	r3, sp, #4
 800948a:	466a      	mov	r2, sp
 800948c:	f7ff ffc8 	bl	8009420 <__swhatbuf_r>
 8009490:	9900      	ldr	r1, [sp, #0]
 8009492:	4605      	mov	r5, r0
 8009494:	4630      	mov	r0, r6
 8009496:	f7fe ff83 	bl	80083a0 <_malloc_r>
 800949a:	b948      	cbnz	r0, 80094b0 <__smakebuf_r+0x44>
 800949c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a0:	059a      	lsls	r2, r3, #22
 80094a2:	d4ef      	bmi.n	8009484 <__smakebuf_r+0x18>
 80094a4:	f023 0303 	bic.w	r3, r3, #3
 80094a8:	f043 0302 	orr.w	r3, r3, #2
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	e7e3      	b.n	8009478 <__smakebuf_r+0xc>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	6020      	str	r0, [r4, #0]
 80094b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	6163      	str	r3, [r4, #20]
 80094be:	9b01      	ldr	r3, [sp, #4]
 80094c0:	6120      	str	r0, [r4, #16]
 80094c2:	b15b      	cbz	r3, 80094dc <__smakebuf_r+0x70>
 80094c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094c8:	4630      	mov	r0, r6
 80094ca:	f000 f81d 	bl	8009508 <_isatty_r>
 80094ce:	b128      	cbz	r0, 80094dc <__smakebuf_r+0x70>
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	f043 0301 	orr.w	r3, r3, #1
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	431d      	orrs	r5, r3
 80094e0:	81a5      	strh	r5, [r4, #12]
 80094e2:	e7cf      	b.n	8009484 <__smakebuf_r+0x18>

080094e4 <_fstat_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	; (8009504 <_fstat_r+0x20>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	4611      	mov	r1, r2
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	f7f8 f872 	bl	80015da <_fstat>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	d102      	bne.n	8009500 <_fstat_r+0x1c>
 80094fa:	682b      	ldr	r3, [r5, #0]
 80094fc:	b103      	cbz	r3, 8009500 <_fstat_r+0x1c>
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	bf00      	nop
 8009504:	20000c88 	.word	0x20000c88

08009508 <_isatty_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d06      	ldr	r5, [pc, #24]	; (8009524 <_isatty_r+0x1c>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7f8 f871 	bl	80015fa <_isatty>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_isatty_r+0x1a>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_isatty_r+0x1a>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20000c88 	.word	0x20000c88

08009528 <_raise_r>:
 8009528:	291f      	cmp	r1, #31
 800952a:	b538      	push	{r3, r4, r5, lr}
 800952c:	4604      	mov	r4, r0
 800952e:	460d      	mov	r5, r1
 8009530:	d904      	bls.n	800953c <_raise_r+0x14>
 8009532:	2316      	movs	r3, #22
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800953e:	b112      	cbz	r2, 8009546 <_raise_r+0x1e>
 8009540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009544:	b94b      	cbnz	r3, 800955a <_raise_r+0x32>
 8009546:	4620      	mov	r0, r4
 8009548:	f000 f830 	bl	80095ac <_getpid_r>
 800954c:	462a      	mov	r2, r5
 800954e:	4601      	mov	r1, r0
 8009550:	4620      	mov	r0, r4
 8009552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009556:	f000 b817 	b.w	8009588 <_kill_r>
 800955a:	2b01      	cmp	r3, #1
 800955c:	d00a      	beq.n	8009574 <_raise_r+0x4c>
 800955e:	1c59      	adds	r1, r3, #1
 8009560:	d103      	bne.n	800956a <_raise_r+0x42>
 8009562:	2316      	movs	r3, #22
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	2001      	movs	r0, #1
 8009568:	e7e7      	b.n	800953a <_raise_r+0x12>
 800956a:	2400      	movs	r4, #0
 800956c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009570:	4628      	mov	r0, r5
 8009572:	4798      	blx	r3
 8009574:	2000      	movs	r0, #0
 8009576:	e7e0      	b.n	800953a <_raise_r+0x12>

08009578 <raise>:
 8009578:	4b02      	ldr	r3, [pc, #8]	; (8009584 <raise+0xc>)
 800957a:	4601      	mov	r1, r0
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	f7ff bfd3 	b.w	8009528 <_raise_r>
 8009582:	bf00      	nop
 8009584:	2000006c 	.word	0x2000006c

08009588 <_kill_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	; (80095a8 <_kill_r+0x20>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	f7f7 ffc1 	bl	800151c <_kill>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d102      	bne.n	80095a4 <_kill_r+0x1c>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b103      	cbz	r3, 80095a4 <_kill_r+0x1c>
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	20000c88 	.word	0x20000c88

080095ac <_getpid_r>:
 80095ac:	f7f7 bfae 	b.w	800150c <_getpid>

080095b0 <_init>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr

080095bc <_fini>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr
